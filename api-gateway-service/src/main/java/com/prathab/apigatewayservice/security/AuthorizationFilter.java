/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.apigatewayservice.security;

import io.jsonwebtoken.Jwts;
import java.io.IOException;
import java.util.Collections;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

/**
 * is an extension of BasicAuthenticationFilter that adds an extra layer of security
 * by requiring a valid token in the HTTP request header. The filter checks for the
 * presence and validity of the token using the `getAuthentication` method, which
 * parses the token and verifies the user's identity. If a valid token is found, the
 * filter sets the authentication context and allows the incoming request to pass
 * through the chain.
 */
public class AuthorizationFilter extends BasicAuthenticationFilter {

  private final Environment environment;

  public AuthorizationFilter(
      AuthenticationManager authenticationManager,
      Environment environment) {
    super(authenticationManager);
    this.environment = environment;
  }

  /**
   * verifies if an HTTP request has a valid authorization token in its header. If it
   * does, it sets the authentication context for further processing by the filter chain.
   * 
   * @param request HTTP request that is being processed by the filter.
   * 
   * 1/ `authHeaderName`: A string representing the name of the HTTP header containing
   * the authentication token.
   * 2/ `authHeaderPrefix`: A string representing the prefix of the authentication token
   * in the HTTP header.
   * 3/ `authHeader`: The value of the HTTP header containing the authentication token,
   * or null if it's not present or doesn't start with the prefix.
   * 4/ `request`: An instance of `HttpServletRequest`, representing the current HTTP
   * request being processed.
   * 5/ `response`: An instance of `HttpServletResponse`, representing the current HTTP
   * response being generated.
   * 6/ `FilterChain`: A chain of `Filter` objects, representing the filter chain that
   * this function is part of.
   * 7/ `chain.doFilter()`: A method called by this function to pass the request to the
   * next filter in the chain if the authentication token is not present or doesn't
   * start with the prefix.
   * 
   * @param response response object that is being filtered by the chain of filters.
   * 
   * 	- `request`: The incoming HTTP request object.
   * 	- `response`: The ServletResponse object representing the output for the current
   * filter chain.
   * 	- `chain`: The FilterChain object representing the next stage in the filtering process.
   * 	- `IOException`: A subclass of Exception that represents an I/O error.
   * 	- `ServletException`: A subclass of Exception that represents a problem with the
   * HTTP request or response.
   * 
   * @param chain FilterChain that is to be executed after the current filter is applied.
   * 
   * 1/ `HttpServletRequest request`: The incoming HTTP request that triggered the
   * filter chain execution.
   * 2/ `HttpServletResponse response`: The outgoing HTTP response generated by the
   * filter chain execution.
   * 3/ `FilterChain chain`: The next filter in the chain to be executed, which can be
   * modified or destroyed based on the authentication status of the incoming request.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    var authHeaderName = environment.getProperty("authorization.token.header.name");
    var authHeaderPrefix = environment.getProperty("authorization.token.header.prefix");

    var authHeader = request.getHeader(authHeaderName);
    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {
      chain.doFilter(request, response);
      return;
    }

    var authentication = getAuthentication(request);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    chain.doFilter(request, response);
  }

  /**
   * parses an authentication token from a request header and returns an
   * `UsernamePasswordAuthenticationToken` object representing the authenticated user.
   * 
   * @param request HTTP request made by the client to the server.
   * 
   * 	- `getHeader()` method returns the value of the specified HTTP header in the request.
   * 	- `getProperty()` method is used to retrieve a property from the environment.
   * 	- `parseClaimsJws()` method parses a JSON Web Signature (JWS) and extracts the
   * claims from it.
   * 	- `setSigningKey()` method sets the signing key for the JWS parser.
   * 	- `getBody()` method returns the JSON object containing the claims extracted from
   * the JWS.
   * 	- `getSubject()` method returns the subject of the JWT claim.
   * 
   * The `request` object itself has various properties and attributes, such as:
   * 
   * 	- `getMethod()` method returns the HTTP method (e.g., GET, POST, PUT, DELETE)
   * used to make the request.
   * 	- `getUri()` method returns the requested URL.
   * 	- `getParms()` method returns any query parameters in the request.
   * 	- `getHeaders()` method returns all the header fields in the request.
   * 
   * @returns a `UsernamePasswordAuthenticationToken` object containing the user ID and
   * authentication token.
   * 
   * 	- `authHeader`: The value of the authentication header in the HTTP request.
   * 	- `token`: The parsed JWS token from the authentication header.
   * 	- `userId`: The subject of the token, which represents the user identity.
   * 	- `signingKey`: The secret key used for signing the token.
   * 
   * The function returns a `UsernamePasswordAuthenticationToken` object, which contains
   * the user ID and any additional claims associated with the token. The `null` value
   * returned for the `password` attribute indicates that no password is associated
   * with this authentication token.
   */
  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
    var authHeader = request.getHeader(environment.getProperty("authorization.token.header.name"));
    if (authHeader == null) {
      return null;
    }

    var token =
        authHeader.replace(environment.getProperty("authorization.token.header.prefix"), "");
    var userId = Jwts.parser()
        .setSigningKey(environment.getProperty("token.secret"))
        .parseClaimsJws(token)
        .getBody()
        .getSubject();

    if (userId == null) {
      return null;
    }
    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());
  }
}
