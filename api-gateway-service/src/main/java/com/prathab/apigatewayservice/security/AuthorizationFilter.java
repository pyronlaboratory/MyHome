/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.apigatewayservice.security;

import io.jsonwebtoken.Jwts;
import java.io.IOException;
import java.util.Collections;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

/**
 * in Java is used to filter incoming requests based on an authorization token present
 * in the HTTP header. The filter extracts the token from the header and passes it
 * to a method called `getAuthentication()` to retrieve the user ID and authentication
 * details. The filtered request is then passed to the next filter in the chain for
 * further processing.
 */
public class AuthorizationFilter extends BasicAuthenticationFilter {

  private final Environment environment;

  public AuthorizationFilter(
      AuthenticationManager authenticationManager,
      Environment environment) {
    super(authenticationManager);
    this.environment = environment;
  }

  /**
   * authenticates a request by checking for an authorization token header. If the token
   * is present and starts with a prefix, it sets an authentication object and proceeds
   * to filter the request. Otherwise, it allows the request to pass through to the
   * next filter.
   * 
   * @param request HTTP request being processed by the filter.
   * 
   * 	- `authHeaderName`: The name of the HTTP header that contains the authentication
   * token.
   * 	- `authHeaderPrefix`: The prefix of the authentication token in the HTTP header.
   * 	- `authHeader`: The value of the authentication token in the HTTP header, or null
   * if no token is present.
   * 	- `request`: The original HTTP request object, which may contain other properties
   * and attributes related to the request, such as its method (e.g., GET, POST), URL,
   * headers, parameters, and so on.
   * 
   * @param response response object that is being filtered by the current chain of filters.
   * 
   * 	- `request`: The original HTTP request that triggered the filter chain.
   * 	- `response`: The HTTP response generated by the filter chain.
   * 	- `chain`: The next filter in the chain to be executed.
   * 
   * The function first retrieves properties from the environment variable
   * `authorization.token.header.name` and `authorization.token.header.prefix`. These
   * properties determine the header name and prefix where the authentication token is
   * expected in the HTTP request.
   * 
   * Next, the function checks if an authentication token is present in the HTTP request
   * header. If it's not present or doesn't start with the expected prefix, the function
   * passes the request to the next filter in the chain without performing any further
   * authentication checks.
   * 
   * If an authentication token is present and starts with the expected prefix, the
   * function retrieves the authentication object from the `getAuthentication` method.
   * Finally, the function sets the security context using the retrieved authentication
   * object and passes the request to the next filter in the chain for further processing.
   * 
   * @param chain FilterChain object that is passed through the method as an argument,
   * allowing the method to perform additional filtering tasks before passing the request
   * on to the next filter in the chain.
   * 
   * 	- `request`: The incoming HTTP request object.
   * 	- `response`: The outgoing HTTP response object.
   * 	- `chain`: The filter chain that this method is a part of, which contains multiple
   * filters that are executed in sequence.
   * 
   * The function first checks if the `authHeader` present in the request header matches
   * the expected format by checking if it starts with the prefix specified in the
   * environment property `authorization.token.header.prefix`. If the header is not
   * present or does not match the expected format, the method proceeds to the next
   * filter in the chain without performing any authentication.
   * 
   * If the `authHeader` is present and matches the expected format, the method extracts
   * the authentication information from the request header using the `getAuthentication`
   * method and sets it as the SecurityContextHolder's context using the
   * `SecurityContextHolder.getContext().setAuthentication()` method. This allows the
   * subsequent filters in the chain to access the authenticated user's details.
   * 
   * Therefore, `chain` is a valuable component of the filter chain that enables the
   * authentication mechanism to function properly.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    var authHeaderName = environment.getProperty("authorization.token.header.name");
    var authHeaderPrefix = environment.getProperty("authorization.token.header.prefix");

    var authHeader = request.getHeader(authHeaderName);
    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {
      chain.doFilter(request, response);
      return;
    }

    var authentication = getAuthentication(request);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    chain.doFilter(request, response);
  }

  /**
   * parses an authorization token from a request header and returns a
   * `UsernamePasswordAuthenticationToken` object representing the authenticated user.
   * 
   * @param request HTTP request being processed and provides the authentication token
   * header value.
   * 
   * 	- `getHeader()` method of `HttpServletRequest` returns the value of an HTTP header
   * field.
   * 	- `environment.getProperty()` is used to retrieve a property value from an
   * environment map.
   * 	- `Jwts.parser()` is a class that parses JSON Web Tokens (JWT).
   * 	- `setSigningKey()` sets the signing key for JWT parsing.
   * 	- `parseClaimsJws()` parses a JWT claim set.
   * 	- `getBody()` returns the JWT body.
   * 	- `getSubject()` returns the subject of the JWT claim set.
   * 
   * The function then creates and returns an authentication token based on the parsed
   * claims.
   * 
   * @returns a `UsernamePasswordAuthenticationToken` instance representing the
   * authenticated user.
   * 
   * 1/ `var authHeader`: The value of the `Authorization` header present in the `HttpServletRequest`.
   * 2/ `var token`: The decoded and extracted token from the `Authorization` header
   * using the `Jwts.parser()` method.
   * 3/ `var userId`: The subject of the token, which is obtained by parsing the token
   * using the `Jwts.parseClaimsJws()` method.
   * 4/ `var AuthenticationToken`: An instance of `UsernamePasswordAuthenticationToken`,
   * constructed with the `userId` and an empty list of credentials.
   */
  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
    var authHeader = request.getHeader(environment.getProperty("authorization.token.header.name"));
    if (authHeader == null) {
      return null;
    }

    var token =
        authHeader.replace(environment.getProperty("authorization.token.header.prefix"), "");
    var userId = Jwts.parser()
        .setSigningKey(environment.getProperty("token.secret"))
        .parseClaimsJws(token)
        .getBody()
        .getSubject();

    if (userId == null) {
      return null;
    }
    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());
  }
}
