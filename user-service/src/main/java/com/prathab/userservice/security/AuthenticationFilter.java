/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.userservice.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prathab.userservice.controllers.models.request.LoginUserRequest;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * in Spring Security is used to handle incoming HTTP requests and authenticate users
 * using a custom authentication manager. The filter uses the `Jwts` class to generate
 * a JSON Web Token (JWT) for the authenticated user, which is then added to the
 * response headers along with the user ID. The filter also passes the authentication
 * request through a chain of filters before returning the response, allowing for
 * additional security measures such as authentication manager validation and input
 * validation.
 */
public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {
  private final ObjectMapper objectMapper;
  private final Environment environment;
  private final AppUserDetailsService appUserDetailsService;

  public AuthenticationFilter(ObjectMapper objectMapper,
      AppUserDetailsService appUserDetailsService, Environment environment,
      AuthenticationManager authenticationManager) {
    super.setAuthenticationManager(authenticationManager);
    this.objectMapper = objectMapper;
    this.appUserDetailsService = appUserDetailsService;
    this.environment = environment;
  }

  /**
   * attempts to authenticate a user by reading the login request from the input stream,
   * passing it to the authentication manager for verification, and returning the
   * authenticated user's details if successful.
   * 
   * @param request HTTP request made by the user to authenticate with the application.
   * 
   * 	- `getInputStream()`: Returns an input stream that can be used to read the request
   * body.
   * 	- `getEmail()`: Returns the email address of the user attempting authentication.
   * 	- `getPassword()`: Returns the password of the user attempting authentication.
   * 	- `Collections.emptyList()`: Returns an empty list, which is used as a default
   * value in the `authenticate` method.
   * 
   * @param response response object that is used to send the authentication result
   * back to the client.
   * 
   * 	- `HttpServletRequest request`: This is the incoming HTTP request containing user
   * login credentials.
   * 	- `HttpServletResponse response`: This is the HTTP response generated by the
   * server in response to the client's request.
   * 
   * The function attempts authentication using the `getAuthenticationManager()` method,
   * which returns an `Authentication` object upon successful authentication.
   * 
   * @returns an AuthenticationException if the login attempt fails, otherwise it returns
   * a successfully authenticated AuthenticationToken.
   * 
   * 	- The input stream is read using `objectMapper.readValue()` method from the `HttpServletRequest`.
   * 	- The resulting object is of type `LoginUserRequest`, which represents a login
   * request containing an email and password.
   * 	- The authentication manager is called with a `UsernamePasswordAuthenticationToken`
   * object containing the email and password from the login request.
   * 	- The authentication manager returns an authentication result, which is stored
   * in the `Authentication` object.
   */
  @Override public Authentication attemptAuthentication(HttpServletRequest request,
      HttpServletResponse response) throws AuthenticationException {

    try {
      var loginUserRequest =
          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);
      return getAuthenticationManager().authenticate(
          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),
              loginUserRequest.getPassword(), Collections.emptyList()));
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * authenticates a user and generates a token with an expiration time set by the
   * environment variable. The token is added to the HTTP response headers along with
   * the user ID.
   * 
   * @param request HTTP request that triggered the authentication process and contains
   * information about the user's credentials and actions.
   * 
   * 	- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`
   * class, which contains information about the HTTP request made to the servlet. The
   * request can be deserialized using `ObjectDeserializer`, and its properties/attributes
   * include:
   * 	+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)
   * 	+ `getPathInfo()`: Returns the path part of the URL after the context path (e.g.,
   * /login)
   * 	+ `getPathTranslated()`: Returns the translated path (e.g., /login)
   * 	+ `getQueryString()`: Returns the query string (e.g., ?username=john&password=123456)
   * 	+ `getParameterMap()`: Returns a map of all query parameters (e.g., {username="john",
   * password="123456"})
   * 	+ `getRemoteAddr()`: Returns the remote IP address of the client making the request
   * 	+ `getLocalAddr()`: Returns the local IP address of the servlet container making
   * the request
   * 	+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)
   * 	+ `getRequestURI()`: Returns the request URI without the query string (e.g., /login)
   * 	+ `getProtocol()`: Returns the protocol used to make the request (e.g., HTTP/1.1)
   * 	+ `getContentLength()`: Returns the content length of the request body (if any)
   * 	+ `getContentType()`: Returns the MIME type of the request body (if any)
   * 
   * @param response ServletResponse object that will receive the token and user ID headers.
   * 
   * 	- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`
   * class, containing information about the HTTP request received by the filter.
   * 	- `HttpServletResponse response`: This is an instance of the `HttpServletResponse`
   * class, providing information about the HTTP response generated by the filter.
   * 	- `FilterChain chain`: This is an instance of the `FilterChain` class, representing
   * the chain of filters that have been applied to the incoming request.
   * 	- `Authentication authResult`: This is an instance of the `Authentication` class,
   * containing details about the authentication result, such as the user principal and
   * the authentication status.
   * 
   * The function then extracts information from the authentication result and generates
   * a token using the `Jwts` class. The generated token is added to the response headers
   * as follows:
   * 
   * 	- `response.addHeader("token", token)`: Adds the token to the HTTP response headers.
   * 	- `response.addHeader("userId", userDto.getUserId())`: Adds the user ID to the
   * HTTP response headers.
   * 
   * @param chain filter chain that the successful authentication request is being
   * processed through.
   * 
   * 	- `HttpServletRequest request`: The HTTP request object that triggered the filter's
   * execution.
   * 	- `HttpServletResponse response`: The HTTP response object that the filter will
   * write its output to.
   * 	- `FilterChain chain`: The filter chain that this function is a part of, which
   * contains other filters that can modify the input before it reaches this one.
   * 	- `Authentication authResult`: The result of the authentication attempt, which
   * contains the user principal (username) and other details.
   * 
   * The function then performs the following actions:
   * 
   * 1/ Retrieves the username from the authentication result using the `((User) authResult.getPrincipal())`.
   * 2/ Calls the `appUserDetailsService` to retrieve the user details for the retrieved
   * username.
   * 3/ Generates a JSON Web Token (JWT) using the `Jwts` class, which includes the
   * user ID, expiration time, and secret key.
   * 4/ Adds the generated token as an HTTP header in the response object.
   * 5/ Adds the user ID as another HTTP header in the response object.
   * 
   * @param authResult authentication result of the current request, providing the
   * authenticated principal and related information to generate an access token.
   * 
   * 	- `HttpServletRequest request`: The incoming HTTP request that triggered the
   * filter chain execution.
   * 	- `HttpServletResponse response`: The outgoing HTTP response generated by the
   * filter chain execution.
   * 	- `FilterChain chain`: The next filter in the chain to be executed, which is
   * passed as an argument to this function.
   * 	- `Authentication authResult`: The deserialized authentication result object,
   * containing the authenticated principal and other attributes.
   */
  @Override
  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain, Authentication authResult) throws IOException, ServletException {

    var username = ((User) authResult.getPrincipal()).getUsername();
    var userDto = appUserDetailsService.getUserDetailsByUsername(username);

    var token = Jwts.builder()
        .setSubject(userDto.getUserId())
        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(
            environment.getProperty("token.expiration_time"))))
        .signWith(SignatureAlgorithm.HS512, environment.getProperty("token.secret"))
        .compact();

    response.addHeader("token", token);
    response.addHeader("userId", userDto.getUserId());
  }
}
