/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.userservice.services.springdatajpa;

import com.prathab.userservice.dto.UserDto;
import com.prathab.userservice.dto.mapper.UserMapper;
import com.prathab.userservice.repositories.UserRepository;
import com.prathab.userservice.services.UserService;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

/**
 * is a Java class that provides functionality for creating and managing users in a
 * database using JPA (Java Persistence API). The class has several methods for
 * creating, mapping, saving, and logging user data. It also provides encryption of
 * user passwords using a password encoder.
 */
@Service
@Slf4j
public class UserSDJpaService implements UserService {

  private final UserRepository userRepository;
  private final UserMapper userMapper;
  private final PasswordEncoder passwordEncoder;

  public UserSDJpaService(UserRepository userRepository,
      UserMapper userMapper,
      PasswordEncoder passwordEncoder) {
    this.userRepository = userRepository;
    this.userMapper = userMapper;
    this.passwordEncoder = passwordEncoder;
  }

  /**
   * generates a unique user ID, encrypts the user password, and creates the user in a
   * repository.
   * 
   * @param request user to be created and provides the necessary data for the creation,
   * including the unique user ID and encrypted password.
   * 
   * 	- `generateUniqueUserId`: creates a unique user ID for the newly created user.
   * 	- `encryptUserPassword`: encrypts the password provided in the `request`.
   * 	- `createUserInRepository`: creates a new user entry in the repository using the
   * encrypted password.
   * 
   * @returns a UserDto object containing the created user's details.
   * 
   * The `generateUniqueUserId` method creates an unique identifier for the user.
   * The `encryptUserPassword` method encrypts the user's password.
   * The `createUserInRepository` method inserts the user into a repository.
   */
  @Override public UserDto createUser(UserDto request) {
    generateUniqueUserId(request);
    encryptUserPassword(request);
    return createUserInRepository(request);
  }

  /**
   * converts a `UserDto` object to a `User` entity, saves it to the repository, and
   * returns the converted `UserDto` object.
   * 
   * @param request UserDto object containing the data for creating a new user in the
   * repository.
   * 
   * 	- `userMapper`: This is an object responsible for mapping between a `UserDto` and
   * a `User`.
   * 	- `userRepository`: This is an object that provides methods for saving or retrieving
   * users from a repository.
   * 	- `savedUser`: This is the user object saved in the repository after processing
   * the input. Its `id` attribute contains the ID of the saved user.
   * 
   * @returns a `UserDto` object representing the saved user in the repository.
   * 
   * 	- `user`: A `User` object representing the saved user in the repository.
   * 	- `savedUser`: The user object that was saved to the repository.
   * 	- `id`: The unique identifier for the saved user, represented as an integer.
   */
  private UserDto createUserInRepository(UserDto request) {
    var user = userMapper.userDtoToUser(request);
    var savedUser = userRepository.save(user);
    log.trace("saved user with id[{}] to repository", savedUser.getId());
    return userMapper.userToUserDto(savedUser);
  }

  /**
   * encrypts a user's password by encoding it using a password encoder, replacing the
   * original password with an encrypted version.
   * 
   * @param request UserDto object containing the user's password that is being encrypted.
   * 
   * 	- `request.setEncryptedPassword`: The user password is encrypted using the provided
   * encoder.
   * 	- `request.getPassword()`: The original plaintext password of the user.
   */
  private void encryptUserPassword(UserDto request) {
    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));
  }

  /**
   * generates a unique user ID for a given `UserDto` instance using the `UUID.randomUUID()`
   * method and assigns it to the `UserId` field of the request object.
   * 
   * @param request `UserDto` object that requires a unique user ID to be generated by
   * the `generateUniqueUserId()` method.
   * 
   * 	- `request`: A `UserDto` object that contains information about the user for whom
   * an unique ID is being generated.
   */
  private void generateUniqueUserId(UserDto request) {
    request.setUserId(UUID.randomUUID().toString());
  }
}
