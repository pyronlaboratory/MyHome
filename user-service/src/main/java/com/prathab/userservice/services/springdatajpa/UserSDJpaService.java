/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.userservice.services.springdatajpa;

import com.prathab.userservice.dto.UserDto;
import com.prathab.userservice.dto.mapper.UserMapper;
import com.prathab.userservice.repositories.UserRepository;
import com.prathab.userservice.services.UserService;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

/**
 * Implements {@link UserService} and uses Spring Data JPA repository to does its work.
 */
@Service
@Slf4j
public class UserSDJpaService implements UserService {

  private final UserRepository userRepository;
  private final UserMapper userMapper;
  private final PasswordEncoder passwordEncoder;

  public UserSDJpaService(UserRepository userRepository,
      UserMapper userMapper,
      PasswordEncoder passwordEncoder) {
    this.userRepository = userRepository;
    this.userMapper = userMapper;
    this.passwordEncoder = passwordEncoder;
  }

  /**
   * generates a unique user ID, encrypts the user password, and creates the user in a
   * repository.
   * 
   * @param request user data to be created, including its unique ID and encrypted
   * password, which are generated and stored in the function.
   * 
   * 	- `generateUniqueUserId`: generates a unique user ID for the created user
   * 	- `encryptUserPassword`: encrypts the user password before storing it in the repository
   * 	- `createUserInRepository`: creates a new user object in the repository, using
   * the decrypted password and other attributes from `request`
   * 
   * @returns a new UserDto object containing the created user's details.
   * 
   * 	- The `generateUniqueUserId` method generates a unique identifier for the user,
   * which is then passed to the `encryptUserPassword` method for encryption.
   * 	- The `encryptUserPassword` method encrypts the user's password using a secret key.
   * 	- The `createUserInRepository` method creates a new user object in the repository,
   * which stores the encrypted password and other relevant information.
   */
  @Override public UserDto createUser(UserDto request) {
    generateUniqueUserId(request);
    encryptUserPassword(request);
    return createUserInRepository(request);
  }

  /**
   * converts a `UserDto` object into a `User` entity, saves it to the repository, and
   * maps it back to a `UserDto` object for return.
   * 
   * @param request UserDto object containing the details of the user to be created and
   * saved in the repository.
   * 
   * 	- `userMapper`: This is an instance of a class that maps between the user DTO and
   * the entity User. The mapping involves converting data from the DTO into the entity's
   * fields and vice versa.
   * 	- `userRepository`: This is an instance of a repository class that handles saving
   * user entities to a database or other storage.
   * 	- `savedUser`: This is the user entity saved in the repository after conversion
   * from the DTO. It has an `id` field, which is automatically generated by the repository.
   * 
   * @returns a `UserDto` object representing the saved user.
   * 
   * 	- `var user = userMapper.userDtoToUser(request)`: This line creates a new `User`
   * object from the provided `UserDto` object using the `userMapper` service.
   * 	- `var savedUser = userRepository.save(user)`: This line saves the newly created
   * `User` object to the repository, which persists the data in the underlying database.
   * 	- `log.trace("saved user with id[{}] to repository", savedUser.getId())`: This
   * line logs a trace message indicating that the user has been saved to the repository
   * with its ID.
   */
  private UserDto createUserInRepository(UserDto request) {
    var user = userMapper.userDtoToUser(request);
    var savedUser = userRepository.save(user);
    log.trace("saved user with id[{}] to repository", savedUser.getId());
    return userMapper.userToUserDto(savedUser);
  }

  /**
   * encrypts a user's password using a password encoder, storing the encrypted password
   * in the request object.
   * 
   * @param request UserDto object that contains the user's password, which is then
   * encrypted and returned in the `encryptedPassword` field.
   * 
   * 	- `request.setEncryptedPassword`: sets the encrypted password to an encoded value
   * by utilizing the `passwordEncoder`.
   */
  private void encryptUserPassword(UserDto request) {
    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));
  }

  /**
   * generates a unique user ID for a `UserDto` object using the `UUID.randomUUID()`
   * method and assigns it to the `UserDto` object's `userId` field.
   * 
   * @param request UserDto object that contains the user's details, and it is updated
   * with a unique user ID generated using UUID.
   * 
   * 	- `request`: A `UserDto` object that contains information about a user, such as
   * their ID and other attributes.
   */
  private void generateUniqueUserId(UserDto request) {
    request.setUserId(UUID.randomUUID().toString());
  }
}
