{"name":"HouseSDJpaService.java","path":"house-service/src/main/java/com/prathab/homeservice/services/springdatajpa/HouseSDJpaService.java","content":{"structured":{"description":"A `HouseSDJpaService` class that implements a House service using Spring Data JPA. The class has dependencies on `HouseRepository` and `HouseApiMapper` interfaces, which are used to interact with the database and map house DTOs to domain objects. The service provides methods for adding and finding houses, including generating unique house IDs and saving updated entities to the repository.","diagram":"digraph G {\n    label=\"com.prathab.homeservice.services.springdatajpa.HouseSDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                HouseSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_3 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_4 {\n            label=\"dto\"\n            color=\"#33363A\"\n            HouseDto\n        }\n    }\n    HouseSDJpaService -> House \n    HouseDto -> HouseSDJpaService \n}\n","items":[{"id":"b47d8fb3-4ff2-7387-2b41-71a907fba4ab","ancestors":[],"type":"function","description":"is an implementation of the HouseService interface, providing methods for adding and retrieving houses from a database using JPA. The class has three main methods: `addHouse`, `findAllHouses`, and `generateUniqueHouseId`. These methods perform various actions related to managing houses in the database, such as mapping a house DTO to a corresponding entity, generating a unique house ID, and saving the updated entity to the repository.","name":"HouseSDJpaService","code":"@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseRepository houseRepository;\n  private final HouseApiMapper houseApiMapper;\n\n  public HouseSDJpaService(HouseRepository houseRepository,\n      HouseApiMapper houseApiMapper) {\n    this.houseRepository = houseRepository;\n    this.houseApiMapper = houseApiMapper;\n  }\n\n  /**\n   * maps a `HouseDto` object to a `House` entity, assigns a unique house ID, and saves\n   * the updated entity to the repository.\n   * \n   * @param houseDto House entity in DTO format, which is converted to a corresponding\n   * `House` instance by calling the `houseApiMapper.houseDtoToHouse()` method before\n   * saving it to the repository.\n   * \n   * \t- `houseDto`: This is an object representing a house with properties such as\n   * `houseId`, `street`, `city`, `state`, and `zip`.\n   * \t- `generateUniqueHouseId()`: This is a method that generates a unique identifier\n   * for the house.\n   * \n   * @returns a new instance of `House` entity with a unique ID generated by the method.\n   * \n   * The `house` object contains the following attributes:\n   * \n   * \t- `houseId`: A unique identifier generated for the house.\n   * \t- `houseDto`: The original `HouseDto` object passed in as a parameter.\n   * \n   * The `save` method is used to persist the `house` object in the repository, making\n   * it available for further manipulation or retrieval.\n   */\n  @Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }\n\n  /**\n   * generates a unique identifier for a house using the `UUID.randomUUID()` method and\n   * returns it as a string.\n   * \n   * @returns a unique randomly generated string of characters.\n   */\n  private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }\n\n  /**\n   * traverses the repository's collection of houses and adds each found item to a new\n   * set called `houseSet`.\n   * \n   * @returns a set of `House` objects containing all the houses stored in the repository.\n   * \n   * \t- `var houseSet = new HashSet<House>();`: This line declares an empty set variable\n   * named `houseSet` of type `HashSet<House>`.\n   * \t- `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over\n   * the results returned by the `houseRepository.findAll()` method using a `forEach()`\n   * method. Each result is added to the `houseSet` variable.\n   * \t- `return houseSet;`: This line returns the `houseSet` variable, which contains\n   * all the houses found by the repository.\n   */\n  @Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }\n}","location":{"start":35,"insert":29,"offset":" ","indent":0,"comment":{"start":28,"end":34}},"item_type":"class","length":70,"docLength":6},{"id":"24120a8c-0e18-17b8-744a-33819ead85a3","ancestors":["b47d8fb3-4ff2-7387-2b41-71a907fba4ab"],"type":"function","description":"adds a new house to the database by mapping the provided `HouseDto` object to a `House` entity, generating a unique house ID, and saving it to the repository.","params":[{"name":"houseDto","type_name":"HouseDto","description":"House details as an object and provides it to the `houseApiMapper` for conversion into a `House` entity before saving it to the database through the `houseRepository`.\n\n* `houseDto`: A House DTO object containing information about a house, such as its address, size, and other attributes.","complex_type":true}],"returns":{"type_name":"House","description":"a new instance of `House` with a unique ID generated through the `generateUniqueHouseId()` method.\n\n* `house`: This is the newly created House object, which contains the unique house ID generated by the function.\n* `houseRepository.save()`: This method saves the updated House object in the repository, ensuring its persistence in the database.","complex_type":true},"usage":{"language":"java","code":"// Create a new HouseDto object\nHouseDto houseDto = new HouseDto();\n\n// Set properties for the HouseDto object\nhouseDto.setStreet(\"123 Main St\");\nhouseDto.setCity(\"Anytown\");\nhouseDto.setState(\"CA\");\nhouseDto.setZip(\"90210\");\n\n// Call method addHouse and pass in the HouseDto object as a parameter\nHouse house = addHouse(houseDto);\n","description":""},"name":"addHouse","code":"@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }","location":{"start":69,"insert":46,"offset":" ","indent":2,"comment":{"start":45,"end":68}},"item_type":"method","length":5,"docLength":23},{"id":"f9dbe39a-b327-35be-d244-3dcd811969ca","ancestors":["b47d8fb3-4ff2-7387-2b41-71a907fba4ab"],"type":"function","description":"generates a unique identifier for a house using the `UUID.randomUUID()` method and returns it as a string.","params":[],"returns":{"type_name":"String","description":"a unique string of characters generated using the `UUID.randomUUID()` method.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    var houseService = new HouseSDJpaService();\n    HouseDto houseDto = new HouseDto(\"123 Main St\", \"Anytown\", \"CA\", \"94801\");\n    House house = houseService.addHouse(houseDto);\n    System.out.println(house.getHouseId()); // Output: 12345678-abcd-abcd-abcd-abcdefghijkl\n  }\n}\n","description":"\nIn this example, we create a new instance of `HouseSDJpaService` and call its `addHouse()` method with a `HouseDto` object as an argument. The `addHouse()` method converts the `HouseDto` to a `House` entity using the `houseApiMapper.houseDtoToHouse()` method, assigns a unique identifier using the `generateUniqueHouseId()` method, and saves the updated entity in the repository using the `save()` method. The output of the program is a unique identifier for the newly added house."},"name":"generateUniqueHouseId","code":"private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":81,"insert":75,"offset":" ","indent":2,"comment":{"start":74,"end":80}},"item_type":"method","length":3,"docLength":6},{"id":"bcb1e510-4259-ce98-ee40-f9f7305b094d","ancestors":["b47d8fb3-4ff2-7387-2b41-71a907fba4ab"],"type":"function","description":"retrieves all houses from the database and stores them in a `HashSet`.","params":[],"returns":{"type_name":"HashSet","description":"a set of House objects containing all the houses from the database.\n\n* `var houseSet = new HashSet<House>();`: This line creates an empty set of houses using the `HashSet` class in Java.\n* `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over the results of the `findAll` method in the `houseRepository` interface, which is expected to return a list of houses. The `forEach` method adds each house from the list to the `houseSet`.\n* `return houseSet;`: This line returns the populated `houseSet` object, which contains all the houses retrieved from the database.","complex_type":true},"usage":{"language":"java","code":"Set<House> houseSet = new HashSet<>();\nhouseSet.add(new House());\nHouseDto houseDto = new HouseDto();\nhouseDto.setStreet(\"123 Main St.\");\nhouseDto.setCity(\"Anytown\");\nhouseDto.setState(\"CA\");\nhouseDto.setZip(\"94025\");\naddHouse(houseDto);\nfindAllHouses().forEach(house -> {\n    System.out.println(house.getHouseId());\n});\n","description":"\nIn this example, we first create a new instance of House and add it to the repository using the `addHouse` method. We then create a new instance of `HouseDto` with some dummy values for street, city, state, and zip code. We then use the `addHouse` method again to save this object in the repository. Finally, we retrieve all the houses from the repository using the `findAllHouses` method and print out their house IDs using a lambda expression."},"name":"findAllHouses","code":"@Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }","location":{"start":99,"insert":85,"offset":" ","indent":2,"comment":{"start":84,"end":98}},"item_type":"method","length":5,"docLength":14}]}}}