{"name":"HouseSDJpaService.java","path":"house-service/src/main/java/com/prathab/homeservice/services/springdatajpa/HouseSDJpaService.java","content":{"structured":{"description":"A `HouseSDJpaService` class that implements the `HouseService` interface. The service uses Spring Data JPA to interact with a database and provides methods for adding and finding houses. The `addHouse()` method creates a new house entity based on a provided DTO and saves it to the database, while the `findAllHouses()` method retrieves all houses from the database.","items":[{"id":"1a35a6b7-d250-63a7-9244-a6947697fe95","ancestors":[],"type":"function","description":"is a Java class that provides House-related services using Spring Data JPA. It has a constructor with two dependencies: HouseRepository and HouseApiMapper. The class has three methods: addHouse, findAllHouses, and generateUniqueHouseId. The addHouse method adds a new House entity to the database, while the findAllHouses method retrieves all House entities from the database. The generateUniqueHouseId method generates a unique house ID for new House entities.","name":"HouseSDJpaService","code":"@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseRepository houseRepository;\n  private final HouseApiMapper houseApiMapper;\n\n  public HouseSDJpaService(HouseRepository houseRepository,\n      HouseApiMapper houseApiMapper) {\n    this.houseRepository = houseRepository;\n    this.houseApiMapper = houseApiMapper;\n  }\n\n  @Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }\n\n  private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }\n\n  @Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }\n}","location":{"start":29,"insert":29,"offset":" ","indent":0,"comment":null},"item_type":"class","length":27},{"id":"afaca703-f042-bf9e-384d-0cf5a3d4a395","ancestors":["1a35a6b7-d250-63a7-9244-a6947697fe95"],"type":"function","description":"takes a `HouseDto` object, converts it to a `House` entity using a mapper, sets a unique house ID, and saves the entity to the repository.","params":[{"name":"houseDto","type_name":"HouseDto","description":"House object to be saved, which is converted into a `House` object through the `houseApiMapper` before being saved in the repository.\n\n* `houseDto`: A House DTO object representing a house entity with attributes such as `id`, `name`, `address`, and `price`.\n* `generateUniqueHouseId()`: A method that generates a unique ID for the created house.","complex_type":true}],"returns":{"type_name":"House","description":"a new instance of the `House` entity with a unique ID generated using the `generateUniqueHouseId()` method.\n\n* `house`: A `House` object that contains the details of the newly created house, including its unique ID generated by the `generateUniqueHouseId()` method.\n* `houseApiMapper`: A reference to an instance of the `HouseApiMapper` class, which is used to convert a `HouseDto` object into a `House` object.\n* `houseRepository`: An instance of the `HouseRepository` class, which is responsible for saving the newly created house into the database.","complex_type":true},"usage":{"language":"java","code":"@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n}\n","description":"\nThe method takes a HouseDto object as input and uses the houseApiMapper to convert it into a House object, then sets the generated unique ID for the house using the generateUniqueHouseId() method, and finally saves the house in the database using the houseRepository.save(house) method."},"name":"addHouse","code":"@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"ef2f458c-0c50-af92-104c-1111b1faa55d","ancestors":["1a35a6b7-d250-63a7-9244-a6947697fe95"],"type":"function","description":"generates a unique identifier for a house using the `UUID` class and returns it as a string.","params":[],"returns":{"type_name":"String","description":"a unique string of letters and numbers generated using the `UUID` class.","complex_type":false},"usage":{"language":"java","code":"public class House {\n    private String houseId;\n    \n    public void setHouseId(String id) {\n        this.houseId = id;\n    }\n}\n\npublic class HouseServiceImpl implements HouseService {\n    @Override\n    public House addHouse(HouseDto houseDto) {\n        var house = houseApiMapper.houseDtoToHouse(houseDto);\n        house.setHouseId(generateUniqueHouseId());\n        return houseRepository.save(house);\n    }\n    \n    private String generateUniqueHouseId() {\n        return UUID.randomUUID().toString();\n    }\n}\n","description":"\nIn this example, the method generateUniqueHouseId is used to generate a unique id for each house added to the system. The method generates a random UUID and returns it as a string. This UUID is then set as the houseId of the House object before it is saved to the database using the save method provided by the JPA repository."},"name":"generateUniqueHouseId","code":"private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"e9b3dff6-6822-3a93-9f4f-181587d94b63","ancestors":["1a35a6b7-d250-63a7-9244-a6947697fe95"],"type":"function","description":"retrieves all houses from the database using the `houseRepository.findAll()` method and stores them in a `HashSet`.","params":[],"returns":{"type_name":"HashSet","description":"a set of houses retrieved from the database.\n\nThe function returns a `Set` object called `houseSet`, which contains all the houses retrieved from the database.\nThe `houseSet` is an unordered set, meaning that the order of the houses in the set is not guaranteed.\nThe set contains references to `House` objects, each representing a house in the database.\nEach `House` object in the set has its own unique ID, name, and location properties.","complex_type":true},"usage":{"language":"java","code":"Set<House> allHouses = houseSDJpaService.findAllHouses();\nfor (House house : allHouses) {\n    System.out.println(house);\n}\n","description":""},"name":"findAllHouses","code":"@Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5}]}}}