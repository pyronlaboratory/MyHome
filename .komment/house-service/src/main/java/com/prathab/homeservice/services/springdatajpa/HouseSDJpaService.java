{"name":"HouseSDJpaService.java","path":"house-service/src/main/java/com/prathab/homeservice/services/springdatajpa/HouseSDJpaService.java","content":{"structured":{"description":"A HouseSDJpaService class that implements the HouseService interface for managing houses using Spring Data JPA. The service adds houses to a repository and retrieves all houses from the database using the HouseApiMapper to convert house DTOs to and from domain models. The service also generates unique house IDs when adding new houses.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        House\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                HouseSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_3 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_4 {\n            label=\"dto\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            HouseDto\n        }\n    }\n    edge [color=\"#26de81\"]\n    HouseSDJpaService -> House \n    HouseDto -> HouseSDJpaService \n}\n","items":[{"id":"e478b25b-aa61-e583-4d4b-e9db01fc1d08","ancestors":[],"type":"function","description":"is a Spring Data JPA implementation of a House service, providing methods for adding and finding houses. The class has a dependency on the HouseRepository and HouseApiMapper interfaces, which are used to interact with the database and map house DTOs to domain objects.","name":"HouseSDJpaService","code":"@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseRepository houseRepository;\n  private final HouseApiMapper houseApiMapper;\n\n  public HouseSDJpaService(HouseRepository houseRepository,\n      HouseApiMapper houseApiMapper) {\n    this.houseRepository = houseRepository;\n    this.houseApiMapper = houseApiMapper;\n  }\n\n  @Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }\n\n  private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }\n\n  @Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }\n}","location":{"start":29,"insert":29,"offset":" ","indent":0,"comment":null},"item_type":"class","length":27,"docLength":null},{"id":"288e2b3f-ed8d-9b87-694e-4da625e715c3","ancestors":["e478b25b-aa61-e583-4d4b-e9db01fc1d08"],"type":"function","description":"maps a `HouseDto` object to a `House` entity, assigns a unique house ID, and saves the updated entity to the repository.","params":[{"name":"houseDto","type_name":"HouseDto","description":"House entity in DTO format, which is converted to a corresponding `House` instance by calling the `houseApiMapper.houseDtoToHouse()` method before saving it to the repository.\n\n* `houseDto`: This is an object representing a house with properties such as `houseId`, `street`, `city`, `state`, and `zip`.\n* `generateUniqueHouseId()`: This is a method that generates a unique identifier for the house.","complex_type":true}],"returns":{"type_name":"House","description":"a new instance of `House` entity with a unique ID generated by the method.\n\nThe `house` object contains the following attributes:\n\n* `houseId`: A unique identifier generated for the house.\n* `houseDto`: The original `HouseDto` object passed in as a parameter.\n\nThe `save` method is used to persist the `house` object in the repository, making it available for further manipulation or retrieval.","complex_type":true},"usage":{"language":"java","code":"@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }\n","description":"\nIn this example, the method \"addHouse\" would be used to add a new House object to the repository by converting a HouseDto object into a House object and setting its id as a unique string using generateUniqueHouseId() function. Finally, the updated House object is saved in the repository using the houseRepository.save(house) method."},"name":"addHouse","code":"@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"63a52357-66e8-b9a4-9a47-f97c93a25e43","ancestors":["e478b25b-aa61-e583-4d4b-e9db01fc1d08"],"type":"function","description":"generates a unique identifier for a house using the `UUID.randomUUID()` method and returns it as a string.","params":[],"returns":{"type_name":"String","description":"a unique randomly generated string of characters.","complex_type":false},"usage":{"language":"java","code":"House house = new House();\nhouse.setName(\"My House\");\nhouse.setHouseId(generateUniqueHouseId());\nhouseRepository.save(house);\n","description":"\nIn this code, a new instance of the class \"House\" is created and set with a name \"My House\". After that, the method generateUniqueHouseId() is called to generate a unique string for the house ID. Finally, the newly created house object is saved using the save method of the HouseRepository."},"name":"generateUniqueHouseId","code":"private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"de7608c7-f377-debb-bb4b-5b78253585b9","ancestors":["e478b25b-aa61-e583-4d4b-e9db01fc1d08"],"type":"function","description":"traverses the repository's collection of houses and adds each found item to a new set called `houseSet`.","params":[],"returns":{"type_name":"SetHouse","description":"a set of `House` objects containing all the houses stored in the repository.\n\n* `var houseSet = new HashSet<House>();`: This line declares an empty set variable named `houseSet` of type `HashSet<House>`.\n* `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over the results returned by the `houseRepository.findAll()` method using a `forEach()` method. Each result is added to the `houseSet` variable.\n* `return houseSet;`: This line returns the `houseSet` variable, which contains all the houses found by the repository.","complex_type":true},"usage":{"language":"java","code":"@Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n}\n","description":""},"name":"findAllHouses","code":"@Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5,"docLength":null}]}}}