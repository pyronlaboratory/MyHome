{"name":"CommunitySDJpaService.java","path":"community-service/src/main/java/com/prathab/communityservice/services/springdatajpa/CommunitySDJpaService.java","content":{"structured":{"description":"A CommunitySDJpaService class that implements CommunityService interface. It provides methods for creating and listing communities, getting community details by id, and adding admins to a community. The service uses Spring Data JPA for data access and Lombok for dependency injection.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.CommunityAdmin Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.CommunityAdmin</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        CommunityDto\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                CommunitySDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_3 {\n        label=\"domain\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        Community\n    }\n    edge [color=\"#26de81\"]\n    CommunitySDJpaService -> Community \n    CommunityDto -> CommunitySDJpaService \n}\n","items":[{"id":"48df19ff-bb96-99bf-ef46-7f6c32e14f19","ancestors":[],"type":"function","description":"provides JPA-based implementation of Community Service interface, offering functions for creating new communities, retrieving existing ones, and adding admins to them. The class uses dependency injection and utilizes Spring Data JPA for repository operations.","name":"CommunitySDJpaService","code":"@Service\n@Slf4j\npublic class CommunitySDJpaService implements CommunityService {\n  private final CommunityRepository communityRepository;\n  private final CommunityAdminRepository communityAdminRepository;\n  private final CommunityMapper communityMapper;\n\n  public CommunitySDJpaService(\n      CommunityRepository communityRepository,\n      CommunityAdminRepository communityAdminRepository,\n      CommunityMapper communityMapper) {\n    this.communityRepository = communityRepository;\n    this.communityAdminRepository = communityAdminRepository;\n    this.communityMapper = communityMapper;\n  }\n\n  @Override public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueCommunityId());\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n    var savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }\n\n  @Override public Set<Community> listAll() {\n    var communityListSet = new HashSet<Community>();\n    communityRepository.findAll().forEach(communityListSet::add);\n    return communityListSet;\n  }\n\n  @Override public Community getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }\n\n  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {\n    var community = communityRepository.findByCommunityId(communityId);\n\n    var savedAdminSet = new HashSet<CommunityAdmin>();\n    admins.forEach(s -> {\n      var admin = new CommunityAdmin();\n      admin.setAdminId(s);\n      admin.getCommunities().add(community);\n      savedAdminSet.add(communityAdminRepository.save(admin));\n    });\n\n    community.getAdmins().addAll(savedAdminSet);\n    return communityRepository.save(community);\n  }\n\n  private String generateUniqueCommunityId() {\n    return UUID.randomUUID().toString();\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53,"docLength":null},{"id":"676c9a27-e4df-1899-8547-7224a14214fb","ancestors":["48df19ff-bb96-99bf-ef46-7f6c32e14f19"],"type":"function","description":"creates a new Community instance using a unique ID generated by the function, maps the `CommunityDto` to a `Community` entity, saves it to the repository, and logs a trace message indicating the saved community ID.","params":[{"name":"communityDto","type_name":"CommunityDto","description":"Community entity that is being created or updated, containing its attributes and relationships.\n\n* `communityDto.setCommunityId(generateUniqueCommunityId());`: This line generates a unique community ID for the newly created community.\n* `var community = communityMapper.communityDtoToCommunity(communityDto);`: This line converts the input `communityDto` into a `Community` object using the `communityMapper`.\n* `var savedCommunity = communityRepository.save(community);`: This line saves the converted `Community` object to the repository, creating a new entry in the database. The `savedCommunity` variable refers to the newly created community in the repository.\n\nThe log statement `log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());` is used to track the creation and saving of the community in the repository.","complex_type":true}],"returns":{"type_name":"Community","description":"a saved community object with a unique ID generated by the method.\n\n* `community`: A `Community` object that represents the created community. It has an `id` attribute that contains a unique identifier for the community.\n* `savedCommunity`: A `Community` object that represents the saved community in the repository. It also has an `id` attribute that contains a unique identifier for the community.\n* `log.trace`: A logging statement that provides additional information about the operation, including the unique ID of the created community.","complex_type":true},"usage":{"language":"java","code":"// communityDto is an instance of CommunityDto class \nCommunity newCommunity = communityService.createCommunity(communityDto);\n","description":""},"name":"createCommunity","code":"@Override public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueCommunityId());\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n    var savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }","location":{"start":48,"insert":48,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7,"docLength":null},{"id":"d55a144d-b93a-8497-7e4b-6e604123ead5","ancestors":["48df19ff-bb96-99bf-ef46-7f6c32e14f19"],"type":"function","description":"retrieves a set of `Community` objects from the database using the `findAll()` method of the `communityRepository`. The retrieved communities are then added to a new `HashSet<Community>`, which is returned as the function's output.","params":[],"returns":{"type_name":"HashSet","description":"a set of all communities found in the repository.\n\n* `Set<Community>` represents a set of `Community` objects.\n* The set contains all the communities retrieved from the repository using the `findAll()` method.\n* Each element in the set is a `Community` object, which has properties such as name, description, and location.","complex_type":true},"usage":{"language":"java","code":"@Override public Set<Community> listAll() {\n    var communityListSet = new HashSet<Community>();\n    communityRepository.findAll().forEach(communityListSet::add);\n    return communityListSet;\n}\n","description":""},"name":"listAll","code":"@Override public Set<Community> listAll() {\n    var communityListSet = new HashSet<Community>();\n    communityRepository.findAll().forEach(communityListSet::add);\n    return communityListSet;\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"391ce232-9e23-e7ac-db48-65c4942616f0","ancestors":["48df19ff-bb96-99bf-ef46-7f6c32e14f19"],"type":"function","description":"retrieves community details by its ID.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to retrieve details for.","complex_type":false}],"returns":{"type_name":"Community","description":"a `Community` object representing the community with the specified `communityId`.\n\n* The Community object represents the details of a community with the specified ID.\n* It has a `findByCommunityId` method that returns the community details by ID.\n* The community details include information such as name, location, and description.","complex_type":true},"usage":{"language":"java","code":"@Override public Community getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n}\n","description":"\nThe method takes a string parameter, 'communityId', and returns an object of type Community from the repository."},"name":"getCommunityDetailsById","code":"@Override public Community getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"627f57c7-8490-929d-2f41-1c574a48982e","ancestors":["48df19ff-bb96-99bf-ef46-7f6c32e14f19"],"type":"function","description":"adds a set of admins to a community by creating new `CommunityAdmin` objects and associating them with the community through the `getCommunities()` method, then saves the updated community.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community to which admins will be added.","complex_type":false},{"name":"admins","type_name":"Set<String>","description":"set of admin usernames to be added to the specified community.\n\n* `Set<String> admins`: A set of admin user IDs.\n* Each admin ID is a string value.\n* The set contains multiple admin IDs.","complex_type":true}],"returns":{"type_name":"Object","description":"a saved Community object containing all the added admins.\n\n* The community object is saved in the repository after admins have been added to it using the `save()` method.\n* The `admins` parameter is a Set containing the IDs of the admins to be added to the community.\n* The `communityId` parameter represents the ID of the community whose admins are being added.\n* The `savedAdminSet` variable stores the new admin objects that have been created and saved in the database using the `save()` method.\n* The `community.getAdmins().addAll()` line adds all the saved admins to the community's admin list.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"123\";\nSet<String> admins = new HashSet<>();\nadmins.add(\"admin1\");\nadmins.add(\"admin2\");\ncommunityService.addAdminsToCommunity(communityId, admins);\n","description":"\nIn this example, the method addAdminsToCommunity is used to add two admins (admin1 and admin2) to a community with ID 123. The method first retrieves the community with the given ID using the findByCommunityId() method of the CommunityRepository interface. It then creates new CommunityAdmin objects for each admin in the Set<String> object passed as an argument, sets their respective IDs and adds them to the communities set of the retrieved Community object. Finally, it saves the modified community to the repository using the save() method."},"name":"addAdminsToCommunity","code":"@Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {\n    var community = communityRepository.findByCommunityId(communityId);\n\n    var savedAdminSet = new HashSet<CommunityAdmin>();\n    admins.forEach(s -> {\n      var admin = new CommunityAdmin();\n      admin.setAdminId(s);\n      admin.getCommunities().add(community);\n      savedAdminSet.add(communityAdminRepository.save(admin));\n    });\n\n    community.getAdmins().addAll(savedAdminSet);\n    return communityRepository.save(community);\n  }","location":{"start":66,"insert":66,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14,"docLength":null},{"id":"8e3eae3e-339b-53a7-4945-cd12c8129fe3","ancestors":["48df19ff-bb96-99bf-ef46-7f6c32e14f19"],"type":"function","description":"generates a unique, randomly-generated string for use as an identifier for a community.","params":[],"returns":{"type_name":"String","description":"a randomly generated unique string of characters, typically between 32 and 128 characters in length.","complex_type":false},"usage":{"language":"java","code":"Community community = new Community();\nString uniqueID = generateUniqueCommunityId();\ncommunity.setCommunityId(uniqueID);\n","description":"\nIn this example, the community object will have a unique ID generated by the generateUniqueCommunityId method which returns a UUID string."},"name":"generateUniqueCommunityId","code":"private String generateUniqueCommunityId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":81,"insert":81,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null}]}}}