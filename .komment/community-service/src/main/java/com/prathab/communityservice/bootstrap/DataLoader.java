{"name":"DataLoader.java","path":"community-service/src/main/java/com/prathab/communityservice/bootstrap/DataLoader.java","content":{"structured":{"description":"A `DataLoader` class that acts as a command line runner for loading data into a Community Service application. The class has dependencies on `CommunityRepository` and `CommunityAdminRepository`, which are used to persist community and admin data to the repository. The `run` method is called with no arguments, and it persists community data and then links an admin to the community using the `save` method. Finally, the updated community data is saved again.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.bootstrap.DataLoader Pages: 1 -->\n<svg width=\"232pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 232.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.communityservice.bootstrap.DataLoader</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"224,-30 0,-30 0,0 224,0 224,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.bootstrap.</text>\n<text text-anchor=\"middle\" x=\"112\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DataLoader</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"173,-85 51,-85 51,-66 173,-66 173,-85\"/>\n<text text-anchor=\"middle\" x=\"112\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommandLineRunner</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M112,-55.65C112,-47.36 112,-37.78 112,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"108.5,-55.87 112,-65.87 115.5,-55.87 108.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"ffdae9f7-350a-019d-a649-6a2ad99d91cc","ancestors":[],"type":"function","description":"is a Spring Boot component that loads data into a Community and CommunityAdmin repository. The class has a constructor that takes in the CommunityRepository and CommunityAdminRepository objects, and it has a run method that persists a community to the repository and then persists an admin to the repository and links them to the community. Finally, the class updates the community with the saved admin.","name":"DataLoader","code":"@Component\npublic class DataLoader implements CommandLineRunner {\n  private final CommunityRepository communityRepository;\n  private final CommunityAdminRepository communityAdminRepository;\n\n  public DataLoader(\n      CommunityRepository communityRepository,\n      CommunityAdminRepository communityAdminRepository) {\n    this.communityRepository = communityRepository;\n    this.communityAdminRepository = communityAdminRepository;\n  }\n\n  @Override public void run(String... args) throws Exception {\n    loadData();\n  }\n\n  private void loadData() {\n    // Persist community to repo\n    var communityName = \"MyHome default community\";\n    var communityDistrict = \"MyHome default community district\";\n    var communityId = \"default-community-id-for-testing\";\n    var community = new Community();\n    community.setName(communityName);\n    community.setDistrict(communityDistrict);\n    community.setCommunityId(communityId);\n    var savedCommunity = communityRepository.save(community);\n\n    // Persist admin to repo\n    var communityAdmin = new CommunityAdmin();\n    var adminId = UUID.randomUUID().toString();\n    communityAdmin.setAdminId(adminId);\n    communityAdmin.getCommunities().add(savedCommunity);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n\n    // Update community with the saved admin\n    savedCommunity.getAdmins().add(savedCommunityAdmin);\n    communityRepository.save(savedCommunity);\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0,"comment":null},"item_type":"class","length":39,"docLength":null},{"id":"1600d573-0c56-b798-764d-cd020565a734","ancestors":["ffdae9f7-350a-019d-a649-6a2ad99d91cc"],"type":"function","description":"loads data.","params":[],"usage":{"language":"java","code":"@Override public void run(String... args) throws Exception {\n  loadData();\n}\n","description":"\nIn this implementation, the `loadData()` method is invoked when the `run()` method is called. The `loadData()` method is responsible for persisting data to the repository.\n\nThe `CommunityRepository` and `CommunityAdminRepository` are used to save and retrieve data from the database. The `communityName`, `communityDistrict`, and `communityId` variables are set to predefined values that correspond to the default community that is created when the application starts. The `community` object is instantiated with these values, and it is saved to the repository using the `save()` method.\n\nThe next step is to create a new instance of the `CommunityAdmin` class and set its `adminId` field to a randomly generated UUID. This instance is then saved to the `communityAdminRepository` using the `save()` method. The `community` object's `admins` list is updated with the saved `communityAdmin` object, and the `community` object is saved again to the repository.\n\nOverall, this implementation demonstrates how to use the `loadData()` method to create a new community and assign an administrator to it. The `CommunityRepository` and `CommunityAdminRepository` are used to persist data to the database, and the `run()` method is invoked when the application starts to load the default community and administrator."},"name":"run","code":"@Override public void run(String... args) throws Exception {\n    loadData();\n  }","location":{"start":39,"insert":39,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"03f9d52a-fafb-9bb7-ba44-bcaac58c7a51","ancestors":["ffdae9f7-350a-019d-a649-6a2ad99d91cc"],"type":"function","description":"persists a community and an admin to the repository, updates the community with the saved admin, and saves the admin to the repository.","params":[],"usage":{"language":"java","code":"public class App {\n    public static void main(String[] args) throws Exception {\n        DataLoader dataLoader = new DataLoader();\n        dataLoader.run();\n    }\n}\n","description":"\nIn this example, the DataLoader class is created and run using the main method. The loadData method is then called and executes the code to persist a community and admin object to the database."},"name":"loadData","code":"private void loadData() {\n    // Persist community to repo\n    var communityName = \"MyHome default community\";\n    var communityDistrict = \"MyHome default community district\";\n    var communityId = \"default-community-id-for-testing\";\n    var community = new Community();\n    community.setName(communityName);\n    community.setDistrict(communityDistrict);\n    community.setCommunityId(communityId);\n    var savedCommunity = communityRepository.save(community);\n\n    // Persist admin to repo\n    var communityAdmin = new CommunityAdmin();\n    var adminId = UUID.randomUUID().toString();\n    communityAdmin.setAdminId(adminId);\n    communityAdmin.getCommunities().add(savedCommunity);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n\n    // Update community with the saved admin\n    savedCommunity.getAdmins().add(savedCommunityAdmin);\n    communityRepository.save(savedCommunity);\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22,"docLength":null}]}}}