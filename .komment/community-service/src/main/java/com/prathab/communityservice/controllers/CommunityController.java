{"name":"CommunityController.java","path":"community-service/src/main/java/com/prathab/communityservice/controllers/CommunityController.java","content":{"structured":{"description":"A RESTful API for managing communities and admins in a microservices architecture using Spring Webflux and Jackson. The code handles various endpoints such as retrieving details of a community by ID, listing all admins of a community, adding admins to a community, and returning the updated admin set for the specified community.","diagram":"digraph G {\n    label=\"com.prathab.communityservice.controllers.CommunityController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateCommunityResponse\n            GetCommunityDetailsResponse\n            GetAdminDetailsResponse\n            AddCommunityAdminResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            AddCommunityAdminRequest\n            CreateCommunityRequest\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        CommunityController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    CommunityController -> GetAdminDetailsResponse \n    CommunityController -> AddCommunityAdminResponse \n    AddCommunityAdminRequest -> CommunityController \n    CommunityController -> CreateCommunityResponse \n    CreateCommunityRequest -> CommunityController \n    CommunityController -> GetCommunityDetailsResponse \n}\n","items":[{"id":"d43665a6-9f66-f085-404b-9b5991b1068f","ancestors":[],"type":"function","description":"in Spring Boot handles various operations related to communities, including retrieving community details, listing all admins of a community, adding admins to a community, and deleting admins from a community. The controller uses the CommunityService class for fetching community details and adding/deleting admins from/to a community.","name":"CommunityController","code":"@RestController\n@Slf4j\npublic class CommunityController {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  public CommunityController(\n      CommunityService communityService,\n      CommunityApiMapper communityApiMapper) {\n    this.communityService = communityService;\n    this.communityApiMapper = communityApiMapper;\n  }\n\n  /**\n   * returns a string message indicating that it is working on something.\n   * \n   * @returns \"Working\".\n   * \n   * The output is a string with the value \"Working\".\n   * The string indicates that the function is currently working on something and has\n   * not yet completed its task.\n   * It does not provide any additional information about the status of the work being\n   * done.\n   */\n  @GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n\n  /**\n   * creates a new community using a `CreateCommunityRequest` object and returns the\n   * created community as a `CreateCommunityResponse`.\n   * \n   * @param request CreateCommunityRequest object passed from the client-side application\n   * to the server-side method for creating a new community.\n   * \n   * \t- `@Valid`: This annotation indicates that the request body must be validated\n   * using the Java Validation API.\n   * \t- `@RequestBody`: This annotation specifies that the request body should be used\n   * as the input for the function.\n   * \t- `CreateCommunityRequest`: This is the class that defines the structure of the\n   * request body. It contains properties such as `name`, `description`, and `tags`.\n   * \n   * @returns a `CreateCommunityResponse` object containing the newly created community\n   * details.\n   * \n   * \t- `ResponseEntity`: This is an instance of the `ResponseEntity` class, which\n   * represents a response object in Spring WebFlux. It contains the HTTP status code\n   * and the body of the response.\n   * \t- `HttpStatus`: This is an instance of the `HttpStatus` class, which represents\n   * the HTTP status code of the response. In this case, the status code is set to `HttpStatus.CREATED`.\n   * \t- `Body`: This is an instance of the `CreateCommunityResponse` class, which\n   * represents the response body of the request. It contains the details of the created\n   * community.\n   */\n  @PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  /**\n   * receives a request to list all communities and returns a set of `GetCommunityDetailsResponse`\n   * objects containing the details of each community.\n   * \n   * @returns a set of `GetCommunityDetailsResponse` objects containing details of all\n   * communities.\n   * \n   * \t- `Set<GetCommunityDetailsResponse>` represents a set of community details responses.\n   * \t- `communityService.listAll()` returns a list of community details objects.\n   * \t- `communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails)`\n   * maps the list of community details objects to a set of get community details responses.\n   * \t- `HttpStatus.OK` represents the status code of the response, indicating that the\n   * request was successful.\n   * \t- `ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse)` returns\n   * a response entity with the status code and the body containing the set of get\n   * community details responses.\n   */\n  @GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  /**\n   * receives a request to retrieve details about a community with a given ID and returns\n   * a response entity containing the community details in JSON or XML format, based\n   * on the media type produced.\n   * \n   * @param communityId unique identifier for a community and is used to retrieve the\n   * corresponding community details from the service.\n   * \n   * @returns a `ResponseEntity` object containing the community details as a `GetCommunityDetailsResponse`.\n   * \n   * \t- `ResponseEntity`: This is an object that represents a HTTP response entity with\n   * a status code and a body. The status code indicates whether the request was\n   * successful or not, and the body contains the actual data returned by the function.\n   * \t- `body`: This property contains the data returned by the function in the form\n   * of a `GetCommunityDetailsResponse` object. This object has attributes such as\n   * `communityId`, `name`, `description`, `imageUrl`, and `createdAt`. These attributes\n   * represent the details of the community with the specified ID.\n   * \t- `status`: This property contains the HTTP status code associated with the\n   * response entity. The value of this property is typically `HttpStatus.OK`, indicating\n   * that the request was successful and the data was returned correctly.\n   */\n  @GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  /**\n   * retrieves a set of administrators for a given community ID through community service\n   * and returns it in the form of `GetAdminDetailsResponseSet`.\n   * \n   * @param communityId unique identifier of a community for which the list of admins\n   * is being requested.\n   * \n   * @returns a set of `GetAdminDetailsResponse` objects containing details of all\n   * admins in a given community.\n   * \n   * \t- `ResponseEntity`: This is the top-level object returned by the function, which\n   * represents a response entity with an HTTP status code and a body.\n   * \t- `HttpStatus.OK`: This is the HTTP status code associated with the response\n   * entity, indicating that the request was successful.\n   * \t- `body`: This is a set of `GetAdminDetailsResponse` objects, which are the actual\n   * responses returned by the function. Each object in the set contains information\n   * about an admin for a community, including their ID, username, email, and role.\n   * \t- `communityService.getCommunityDetailsById(communityId).getAdmins()`: This is\n   * the method call that retrieves the list of admins for a specific community ID. The\n   * method returns a list of `Admin` objects, which are then mapped to `GetAdminDetailsResponse`\n   * objects using the `communityApiMapper`.\n   */\n  @GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }\n\n  /**\n   * adds admins to a community based on a request body containing the admin IDs to\n   * add. The function returns a response entity with the updated set of admins for the\n   * community.\n   * \n   * @param communityId id of the community to which the admin will be added.\n   * \n   * @param request AddCommunityAdminRequest object containing the information about\n   * the new admin to be added to the community.\n   * \n   * \t- `@Valid`: This annotation indicates that the request body must be validated\n   * using a bean validation processor.\n   * \t- `@RequestBody`: This annotation specifies that the request body should be\n   * processed as a JSON or XML document.\n   * \t- `AddCommunityAdminRequest`: This is the class representing the request body,\n   * which contains attributes related to adding admins to a community.\n   * \n   * @returns a `ResponseEntity` object containing an `AddCommunityAdminResponse` object\n   * with the updated admin set for the specified community.\n   * \n   * \t- `response`: an instance of `AddCommunityAdminResponse`, which contains information\n   * about the added admins to the community.\n   * \t+ `admins`: a set of administrator IDs, representing the added admins to the community.\n   * \n   * The function returns a `ResponseEntity` with a status code of `HttpStatus.CREATED`\n   * and the `AddCommunityAdminResponse` object as its body.\n   */\n  @PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }\n}","location":{"start":44,"insert":41,"offset":" ","indent":0,"comment":{"start":40,"end":43}},"item_type":"class","length":212,"docLength":3},{"id":"3a20f077-7f14-a38c-304e-4f70059f5198","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"returns the string \"Working\".","params":[],"returns":{"type_name":"string","description":"\"Working\".\n\n* \"Working\": This is the value returned by the function, indicating that it is currently working on something.\n* Type: The return type of the function is a String, which means it returns a textual representation of the status.","complex_type":true},"usage":{"language":"java","code":"@Test\n  public void testStatus() throws Exception {\n    mockMvc.perform(get(\"/communities/status\"))\n        .andExpect(status().isOk())\n        .andExpect(content().string(\"Working\"));\n  }\n","description":"\nThe example code above will test the method status using mockMvc and check if the response is OK (200) and that it contains the string \"Working\".     This test would be located in a class that extends MockMvcTest."},"name":"status","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }","location":{"start":68,"insert":57,"offset":" ","indent":2,"comment":{"start":56,"end":67}},"item_type":"method","length":4,"docLength":11},{"id":"d4eeff1d-fb40-98a6-db4f-6daa7fe2430a","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"receives a JSON or XML request body containing a `CreateCommunityRequest`, maps it to a `CommunityDto`, creates a new community using the `CommunityDto`, and returns a `CreateCommunityResponse` in HTTP status code `CREATED`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object containing the data to create a new community, which is converted into a CommunityDto object by the communityApiMapper and then used to create the new community using the communityService.\n\n* `@Valid`: This annotation indicates that the input request must be validated using the Java validation framework.\n* `@RequestBody`: This annotation specifies that the input request should be sent as a body in the HTTP request, rather than as query parameters or headers.\n* `CreateCommunityRequest`: This is the class that defines the structure of the input request. It likely contains fields for various properties of the community to be created, such as its name, description, and category.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the created community details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents the result of the HTTP request. It has a status code and a body, which contains the actual response data.\n* `HttpStatus`: This is the HTTP status code of the response, which indicates the result of the request. In this case, it is set to `HttpStatus.CREATED`.\n* `Body`: This is the main content of the response, which contains the created community details in the form of a `CreateCommunityResponse` object.\n* `CreateCommunityResponse`: This is a custom object that represents the created community. It has various properties, such as `id`, `name`, `description`, and `createdAt`.","complex_type":true},"usage":{"language":"java","code":"CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My community\");\nrequest.setDescription(\"This is a description of my community.\");\nrequest.setImageUrl(\"https://example.com/my_community_image.jpg\");\nResponseEntity<CreateCommunityResponse> response = createCommunity(request);\n","description":"\nIn this example, the following objects are created:\n\n* A `CreateCommunityRequest` object with the name and description of the community.\n* A `ResponseEntity<CreateCommunityResponse>` object that represents the response to the request.\n\nThe method is then called using the `createCommunity` method, passing in the `CreateCommunityRequest` object as a parameter. The function returns a `ResponseEntity<CreateCommunityResponse>`, which contains information about the community created. This information includes its ID and image URL."},"name":"createCommunity","code":"@PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":99,"insert":73,"offset":" ","indent":2,"comment":{"start":72,"end":98}},"item_type":"method","length":14,"docLength":26},{"id":"d445e261-5787-6791-2042-6a2e48c273d7","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"receives a request to list all communities and returns a response entity containing a set of `GetCommunityDetailsResponse` objects representing the listed communities, mapped by the `communityService` and converted into a response entity using `communityApiMapper`.","params":[],"returns":{"type_name":"SetGetCommunityDetailsResponse","description":"a set of `GetCommunityDetailsResponse` objects containing information about all communities.\n\n* `ResponseEntity`: This is the top-level class that represents the response to the request. It has an `HttpStatus` field that indicates the status code of the response (in this case, 200 OK).\n* `body`: This is a field that contains the actual response body, which in this case is a `Set` of `GetCommunityDetailsResponse` objects.\n* `GetCommunityDetailsResponse`: This class represents the individual community details responses returned in the set. It has several fields, including `id`, `name`, `description`, `imageUrl`, and `createdAt`.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class CommunityController {\n    private final CommunityService communityService;\n    public CommunityController(CommunityService communityService) {\n        this.communityService = communityService;\n    }\n    \n    @GetMapping(\"/communities\")\n    public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunities() {\n        log.trace(\"Received request to list all communities\");\n        var communityDetails = communityService.listAll();\n        var communityDetailsResponse =\n            communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n        return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n    }\n}\n","description":"\nThis example shows how the listAllCommunities method would be used in a RestController class, which is responsible for handling incoming requests and returning appropriate responses to the client. The communityService variable is passed into the constructor of this class, and it is then injected into the method listAllCommunities. The communityService is then called upon to retrieve all communities using the listAll() method, and the resultant set of Community objects is mapped to a Set<GetCommunityDetailsResponse> object using the communityApiMapper. The response entity returned by this function contains an HttpStatus of OK, which indicates that the request was successful, and the body contains the actual data returned by the function, which is the set of GetCommunityDetailsResponse objects representing all communities."},"name":"listAllCommunity","code":"@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":131,"insert":114,"offset":" ","indent":2,"comment":{"start":113,"end":130}},"item_type":"method","length":11,"docLength":17},{"id":"c3c63cae-e6d1-7fa1-cd40-ef535530a0be","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"receives a community ID and returns a response entity containing the details of the community, as well as the API response generated by `communityApiMapper`.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community for which details are to be retrieved.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the details of the requested community in JSON or XML format.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that contains both a status code and a body. In this case, the status code is `HttpStatus.OK`, indicating that the request was successful.\n* `body`: This is the body of the response entity, which contains the details of the community returned by the `communityService`. It is an instance of the `GetCommunityDetailsResponse` class, which defines the structure of the response data.\n* `getCommunityDetailsById`: This is a method of the `communityService` class that returns the details of a community with a given ID. The method takes a single parameter, `communityId`, which is passed as a path variable in the function call.\n* `communityApiMapper`: This is an instance of a class that defines a mapping between the structure of the community details and the format required by the API. In this case, it maps the community details to the `GetCommunityDetailsResponse` class.","complex_type":true},"usage":{"language":"java","code":"@Autowired private CommunityService communityService;\n\n// ...\n\nResponseEntity<GetCommunityDetailsResponse> response = communityController.listCommunityDetails(\"communityId\");\nGetCommunityDetailsResponse communityDetails = response.getBody();\nassertEquals(HttpStatus.OK, response.getStatusCode());\n","description":"\nExplanation:\n\n* The method listCommunityDetails is called with the path variable \"communityId\".\n* The method returns a ResponseEntity object which contains an instance of GetCommunityDetailsResponse as its body.\n* We extract the body from the ResponseEntity object and assert that it is not null.\n* We also assert that the HTTP status code associated with the response entity is HttpStatus.OK, indicating that the request was successful and the data was returned correctly."},"name":"listCommunityDetails","code":"@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":164,"insert":143,"offset":" ","indent":2,"comment":{"start":142,"end":163}},"item_type":"method","length":12,"docLength":21},{"id":"bb368f4c-46ad-2d83-8540-055ba1b5ee4d","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"receives a community ID and returns a set of `GetAdminDetailsResponse` objects containing information about the admins of that community.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose admins are to be listed.","complex_type":false}],"returns":{"type_name":"SetGetAdminDetailsResponse","description":"a set of `GetAdminDetailsResponse` objects containing information about the admins of a specific community.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring WebFlux. It contains information about the status code, headers, and body of the response.\n* `status()`: This method returns the HTTP status code of the response, which is set to OK (200) in this case.\n* `body()`: This method returns the contents of the response body, which is a set of `GetAdminDetailsResponse` objects in this case.\n* `getCommunityDetailsById()`: This method retrieves the details of a community with the given ID. It returns a `Community` object containing the ID, name, and other properties of the community.\n* `getAdmins()`: This method retrieves the list of admins for a given community. It returns a list of `Admin` objects containing the admin's ID, username, email, and other properties.\n* `communityApiMapper`: This is an instance of the `CommunityApiMapper` class, which is responsible for mapping the community details to and from the API response format.\n* `GetAdminDetailsResponseSet`: This is a set of `GetAdminDetailsResponse` objects, each containing the details of a single admin.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testListCommunityAdmins() {\n    // Arrange\n    var communityId = \"123456789\";\n    var expectedResponse = new AddAdminDetailsResponse();\n    expectedResponse.setAdmins(Set.of(\"user1\", \"user2\"));\n    \n    // Act\n    var responseEntity = listCommunityAdmins(communityId);\n    \n    // Assert\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n}\n","description":"\nThis test case is a simple unit test that tests the method listCommunityAdmins with a given input communityId and verifies that it returns the expected response entity with an HTTP status code of 200 and the actual body containing the expected response. This test case is written in JUnit and uses mockito to provide a fake implementation of communityService."},"name":"listCommunityAdmins","code":"@GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }","location":{"start":199,"insert":177,"offset":" ","indent":2,"comment":{"start":176,"end":198}},"item_type":"method","length":12,"docLength":22},{"id":"84643840-07b7-e49a-204f-44a904b3f283","ancestors":["d43665a6-9f66-f085-404b-9b5991b1068f"],"type":"function","description":"adds admins to a community based on a request from the client, updates the community's admin set, and returns a response with the updated admin set.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which an admin will be added.","complex_type":false},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the information of the admin to be added to the community.\n\n* `@Valid`: This annotation indicates that the `AddCommunityAdminRequest` object must be validated using a bean validation framework before it can be processed by the method.\n* `@RequestBody`: This annotation indicates that the `AddCommunityAdminRequest` object should be serialized into the request body of the HTTP message, rather than being passed as a query parameter or a form submission.\n* `AddCommunityAdminRequest`: This is the class that represents the request payload for adding admins to a community. It contains properties such as `admins`, which is a list of admin IDs to be added to the community.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` object containing an `AddCommunityAdminResponse` object with the updated admin set for the specified community.\n\n* `ResponseEntity`: This is a class that represents a response entity, which is a composite object that contains both a status and a body. In this case, the status is set to `HttpStatus.CREATED`, indicating that the request was successful and the community was created with the added admins.\n* `body`: This is a reference to an instance of the `AddCommunityAdminResponse` class, which contains information about the added admins.\n* `AddCommunityAdminResponse`: This is a class that represents the response to the add admin request. It has several properties:\n\t+ `admins`: This is a set of admin IDs that were added to the community.\n\t+ `communityId`: This is the ID of the community that was updated with the added admins.","complex_type":true},"usage":{"language":"java","code":"AddCommunityAdminRequest request = new AddCommunityAdminRequest();\nrequest.setAdmins(Set.of(\"adminId1\", \"adminId2\"));\nResponseEntity<AddCommunityAdminResponse> response = communityController.addCommunityAdmin(\"communityId\", request);\nSet<String> addedAdmins = response.getBody().getAdmins();\n// addedAdmins should be a set of strings containing \"adminId1\" and \"adminId2\"\n","description":""},"name":"addCommunityAdmin","code":"@PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }","location":{"start":239,"insert":212,"offset":" ","indent":2,"comment":{"start":211,"end":238}},"item_type":"method","length":16,"docLength":27}]}}}