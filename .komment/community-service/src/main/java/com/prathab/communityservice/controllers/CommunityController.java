{"name":"CommunityController.java","path":"community-service/src/main/java/com/prathab/communityservice/controllers/CommunityController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing communities. The controller handles create community, list all communities, list community details, and add admin to community requests. It uses Spring WebFlux, Spring Data JPA, and Lombok libraries.","items":[{"id":"b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0","ancestors":[],"type":"function","description":"is responsible for managing community-related operations in an application. It provides endpoints for creating, listing, and detailing communities, as well as adding admins to communities. The controller uses dependencies on the `CommunityService` and `CommunityApiMapper` classes to perform these operations.","name":"CommunityController","code":"@RestController\n@Slf4j\npublic class CommunityController {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  public CommunityController(\n      CommunityService communityService,\n      CommunityApiMapper communityApiMapper) {\n    this.communityService = communityService;\n    this.communityApiMapper = communityApiMapper;\n  }\n\n  @GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }\n\n  @PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }\n}","location":{"start":44,"insert":44,"offset":" ","indent":0,"comment":{"start":40,"end":43}},"item_type":"class","length":88},{"id":"51c85301-5053-0ab2-a141-de3ff2de93a5","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"the string \"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n","description":""},"name":"status","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"8807f382-d832-1080-894b-35cc17d76d45","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"receives a `CreateCommunityRequest` object from the client, converts it into a `CommunityDto`, creates a new community using that DTO, and returns the created community as a `CreateCommunityResponse`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object containing the details of the community to be created, which is converted into a CommunityDto object by the communityApiMapper and then used to create the community in the service method.\n\n* `@Valid`: Indicates that the input is validated by the `@ Validator` annotation.\n* `@RequestBody`: Represents that the input is a JSON or XML message sent in the request body.\n* `CreateCommunityRequest`: The class that defines the structure of the input data.\n\nThe various properties/attributes of `request` are:\n\n* `requestBody`: Contains the serialized JSON or XML representation of the `CreateCommunityRequest` object.\n* `requestMethod`: The HTTP method used to make the request (e.g., POST, GET, PUT, DELETE).\n* `requestURI`: The path of the requested resource (e.g., /communities).\n* `queryParams`: A map of query parameters sent in the request (e.g., ?key1=value1&key2=value2).\n* `formParams`: A map of form data sent in the request (e.g., {name: value, etc.).","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `ResponseEntity` with a `HttpStatus.CREATED` code and a `CreateCommunityResponse` body containing the created community details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which is a class in Spring Webflux that represents a response object with a status code and a body.\n* `status`: This is the HTTP status code of the response, which is set to `HttpStatus.CREATED` in this case, indicating that the request was successful and the community was created.\n* `body`: This is the body of the response, which contains the `CreateCommunityResponse` object.\n* `CreateCommunityResponse`: This is an instance of the `CreateCommunityResponse` class, which represents the result of creating a community. It has various properties and attributes, including:\n\t+ `id`: The ID of the newly created community.\n\t+ `name`: The name of the community.\n\t+ `description`: A brief description of the community.\n\t+ `createdAt`: The date and time when the community was created.\n\t+ `updatedAt`: The date and time when the community was last updated.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testCreateCommunity() {\n    CreateCommunityRequest request = new CreateCommunityRequest();\n    request.setName(\"New Community\");\n    request.setDescription(\"A newly created community\");\n    request.setAdminIds(List.of(\"123456789\"));\n\n    ResponseEntity<CreateCommunityResponse> responseEntity = createCommunity(request);\n\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    CreateCommunityResponse response = responseEntity.getBody();\n    assertThat(response).isNotNull();\n    assertThat(response.getName()).isEqualTo(\"New Community\");\n    assertThat(response.getDescription()).isEqualTo(\"A newly created community\");\n    assertThat(response.getAdminIds()).containsExactlyInAnyOrder(\"123456789\");\n}\n","description":"\nThis test would call the createCommunity method with the given CreateCommunityRequest as input, and verify that a response entity is returned with an HTTP status code of 201 (Created), and that the CreateCommunityResponse contains the correct name, description, and admin IDs."},"name":"createCommunity","code":"@PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"15c3d044-045a-6ca9-4745-2ba9799f9c4f","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"retrieves a list of community details from the service and maps it to a response entity in JSON or XML format, returning it with a status code of OK.","params":[],"returns":{"type_name":"SetGetCommunityDetailsResponse","description":"a set of `GetCommunityDetailsResponse` objects containing information about all communities.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response with a status code and a body. The status code indicates whether the request was successful (in this case, `HttpStatus.OK`) or not.\n* `body`: This is a set of `GetCommunityDetailsResponse` objects, which represent the list of communities returned by the function. Each object in the set has properties such as `id`, `name`, `description`, and `createdDate`.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n}\n","description":""},"name":"listAllCommunity","code":"@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":77,"insert":77,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"9b171a5a-becf-3fb3-d84c-02dee646864f","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"retrieves community details by ID and maps them to a response entity with the `GetCommunityDetailsResponse` structure.","params":[{"name":"communityId","type_name":"String","description":"id of the community to retrieve details for.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the details of the requested community.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents the overall response to the HTTP request. It has an `status` field that indicates the HTTP status code of the response (in this case, `HttpStatus.OK`).\n* `body`: This is a reference to the actual data returned in the response. In this case, it is a `GetCommunityDetailsResponse` object, which represents the details of a community.\n* `GetCommunityDetailsResponse`: This is a class that contains the details of a community, including its ID, name, and other attributes. It is deserialized from a JSON or XML representation using the `communityApiMapper`.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\n// ...\n\npublic void testListCommunityDetails() {\n  // given\n  String communityId = \"test-community\";\n\n  // when\n  ResponseEntity<GetCommunityDetailsResponse> response =\n      communityController.listCommunityDetails(communityId);\n\n  // then\n  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n  assertThat(response.hasBody()).isTrue();\n}\n","description":"\nIn the test, we create a new instance of CommunityController and autowire it. Then, we call the listCommunityDetails method with an input string value for communityId. The response is then captured and tested using assertions to verify that the status code is equal to HttpStatus.OK and that the body of the response is not empty."},"name":"listCommunityDetails","code":"@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":89,"insert":89,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"74281078-cba3-359a-f44c-620796780c19","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"receives a community ID and returns a set of `GetAdminDetailsResponse` objects representing the admins of that community.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community for which the list of admins is being requested.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a set of `GetAdminDetailsResponse` objects containing the details of all admins for a given community.\n\n* `ResponseEntity`: This is the HTTP response entity, which contains the status code and body of the response. In this case, the status code is set to `HttpStatus.OK`, indicating that the request was successful.\n* `body`: This is the body of the response entity, which contains a set of `GetAdminDetailsResponse` objects.\n* `Set<GetAdminDetailsResponse>`: This is the set of `GetAdminDetailsResponse` objects contained in the response body. Each object in the set represents an administrator for the specified community.\n* `communityId`: This is the path variable that specifies the ID of the community for which the administrators are being listed.\n* `adminDetails`: This is a reference to the `CommunityDetails` object returned by the `getCommunityDetailsById` method, which contains information about the community. The `admins` field of this object contains the list of admins for the community.\n* `communityApiMapper`: This is a reference to the `CommunityApiMapper` class, which is responsible for mapping the `adminDetails` object to a set of `GetAdminDetailsResponse` objects.","complex_type":true},"usage":{"language":"java","code":"// Create a new instance of the GetCommunityDetailsResponse object\nGetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n\n// Get the community details by providing the community ID as a parameter in the URL.\nresponse = communityService.getCommunityDetailsById(\"community-1\");\n\n// Extract the adminSet from the community object.\nSet<Admin> adminsSet = response.getAdmins();\n\n// Map the adminsSet to GetAdminDetailsResponse objects and assign it to a new Set.\nSet<GetAdminDetailsResponse> getAdminDetailsResponseSet = communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminsSet);\n","description":""},"name":"listCommunityAdmins","code":"@GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }","location":{"start":102,"insert":102,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"864c550d-2c57-8884-dd46-1c3e4e6b987d","ancestors":["b4d5b8aa-a4b9-3985-3a48-8db34e28c5b0"],"type":"function","description":"receives a request to add admins to a community and adds them to the community's admin set, returning the updated admin set in response.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which an admin will be added.","complex_type":false},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the information about the admins to be added to the community.\n\n* `@Valid`: Indicates that the request body must be valid according to the schema defined in the Java classes or JSON schema.\n* `@RequestBody`: Marks the request body as a valid JSON document or a Java object, indicating that it should be deserialized into a Java object.\n* `AddCommunityAdminRequest`: Defines the structure of the request body, which contains the following properties:\n\t+ `admins`: A list of `CommunityAdmin` objects, representing the admins to be added to the community.\n\nIn summary, the `addCommunityAdmin` function receives a request with a JSON or XML payload containing a list of admins to be added to a community, and it returns a response indicating whether the addition was successful or not.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` object containing an `AddCommunityAdminResponse` object with the set of admins added to the community.\n\n* `response`: A `AddCommunityAdminResponse` object, which contains the set of admin IDs added to the community. The response is created with a status code of `HttpStatus.CREATED`.\n* `adminsSet`: A `Set` of `AdminId` objects, representing the set of admins added to the community. This property is extracted from the community object returned by the `communityService.addAdminsToCommunity()` method.","complex_type":true},"usage":{"language":"java","code":"AddCommunityAdminRequest request = new AddCommunityAdminRequest();\nrequest.setAdmins(new HashSet<>(Arrays.asList(\"admin1\", \"admin2\")));\nResponseEntity<AddCommunityAdminResponse> response = communityController.addCommunityAdmin(\"communityId\", request);\n","description":"\nThe example shows how to create a request object with the required fields and pass it as an argument to the addCommunityAdmin method. The response entity returned by this method will contain the IDs of the added admins in the Set<String> type."},"name":"addCommunityAdmin","code":"@PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }","location":{"start":115,"insert":115,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16}]}}}