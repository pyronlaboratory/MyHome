{"name":"CommunityController.java","path":"community-service/src/main/java/com/prathab/communityservice/controllers/CommunityController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing communities. It includes methods for creating new communities, listing all communities, retrieving details about a specific community, and adding admins to a community. The controller uses Spring WebFlux and Lombok libraries, and the CommunityService class is responsible for managing communities.","items":[{"id":"bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5","ancestors":[],"type":"function","description":"TODO","name":"CommunityController","code":"@RestController\n@Slf4j\npublic class CommunityController {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  public CommunityController(\n      CommunityService communityService,\n      CommunityApiMapper communityApiMapper) {\n    this.communityService = communityService;\n    this.communityApiMapper = communityApiMapper;\n  }\n\n  @GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  @GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }\n\n  @PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }\n}","location":{"start":44,"insert":44,"offset":" ","indent":0},"item_type":"class","length":88},{"id":"534a9825-75ad-0f9f-1f4c-eec532419944","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"returns the string \"Working\".","params":[],"returns":{"type_name":"string","description":"\"Working\".\n\n* The output is a string value \"Working\".\n* It is returned as part of the HTTP response when the `/communities/status` endpoint is accessed using the `@GetMapping` annotation.\n* The function does not modify any external state or dependencies, and its output remains constant regardless of external factors.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n}\n","description":""},"name":"status","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"495e3786-5fcb-adb0-3b4a-9a9f7532d0ce","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"receives a `CreateCommunityRequest` object from the client, creates a new community using the provided data, and returns the created community as a `CreateCommunityResponse` object in the response body.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object that contains the details of the community to be created, which is used by the method to create the community in the system.\n\n* `@Valid`: Indicates that the request body must be validated using the `@Valid` annotation's validation rules.\n* `@RequestBody`: Marks the `request` parameter as a JSON/XML body in the HTTP request message.\n* `CreateCommunityRequest`: The class representing the JSON/XML request body, which contains the data required to create a community.\n* `log.trace()`: Logs a trace message for debugging purposes.\n* `var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request)`: Maps the request body to a `CreateCommunityResponseDTO` object using the `communityApiMapper`.\n* `var createdCommunity = communityService.createCommunity(requestCommunityDto)`: Calls the `communityService` method to create a community based on the mapped `requestCommunityDto` object.\n* `var createdCommunityResponse = communityApiMapper.communityToCreateCommunityResponse(createdCommunity)`: Maps the created community to a `CreateCommunityResponse` object using the `communityApiMapper`.\n* `return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse)`: Returns a response entity with a status code of `HTTP_STATUS_CREATED` and the `createdCommunityResponse` object in the body.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the newly created community details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a REST API request. It contains information about the status code and body of the response.\n* `status`: This is an instance of the `HttpStatus` class, which represents the HTTP status code of the response. In this case, the status code is `CREATED`, indicating that the community has been created successfully.\n* `body`: This is an instance of the `CreateCommunityResponse` class, which represents the response body. It contains information about the created community.\n* `createdCommunity`: This is a reference to the newly created community object, which contains information about the community such as its ID, name, and description.","complex_type":true},"usage":{"language":"java","code":"CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"Test community\");\nrequest.setDescription(\"This is a test community\");\nrequest.setAdminIds(Set.of(\"user1\", \"user2\"));\n\nResponseEntity<CreateCommunityResponse> response = communityApiController.createCommunity(request);\n","description":"\nThe response object would contain the following information:\n"},"name":"createCommunity","code":"@PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"dacba192-143f-2db8-4147-8fc8926b5f5e","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"through `communityService.listAll()` retrieves a list of community details and maps them to `GetCommunityDetailsResponse` using `communityApiMapper`. It then returns a `ResponseEntity` with the mapped list of community details in JSON or XML format, indicating HTTP status code `OK`.","params":[],"returns":{"type_name":"SetGetCommunityDetailsResponse","description":"a set of `GetCommunityDetailsResponse` objects representing all available communities.\n\n* `Set<GetCommunityDetailsResponse>`: This is the set of community details responses returned by the function. Each response in the set contains information about a single community, such as its ID, name, and description.\n* `communityService`: This is the service used to retrieve the list of communities. It may be an instance of a class that implements the `CommunityService` interface or an abstract class that provides the necessary methods for retrieving communities.\n* `communityApiMapper`: This is the mapper used to convert the community list returned by the service into a set of `GetCommunityDetailsResponse` objects. It may be an instance of a class that implements the `CommunityApiMapper` interface or an abstract class that provides the necessary methods for mapping communities to responses.\n* `HttpStatus.OK`: This is the HTTP status code returned by the function, indicating that the request was successful and the list of communities was successfully retrieved.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(path = \"/communities\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {    log.trace(\"Received request to list all community\");    var communityDetails = communityService.listAll();    var communityDetailsResponse = communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);  }\n","description":""},"name":"listAllCommunity","code":"@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":77,"insert":77,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"86d5fd07-8154-7982-c54e-84df9f3b400c","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"receives a request to retrieve community details and returns a response entity with the details of the specified community.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to retrieve details for.\n\n* `communityId`: A string representing the unique identifier for a community.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the details of the requested community in JSON or XML format.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which is a generic class in Spring WebFlux that represents a response to a request. It contains an `HttpStatus` code and a `Body` field that holds the actual response body.\n* `body`: The `body` field holds the `GetCommunityDetailsResponse` object, which is the main output of the function. This object contains the details of the community identified by the `communityId`.\n* `status`: The `HttpStatus` code in the `ResponseEntity` represents the status of the request. In this case, it is set to `OK`, indicating that the request was successful.","complex_type":true},"usage":{"language":"java","code":"@Autowired private CommunityService communityService;\n\n...\n\nGetCommunityDetailsResponse response = communityService.listCommunityDetails(\"my-community\");\nif (response != null) {\n    System.out.println(response.getName()); // prints \"My Community\"\n}\n","description":"\nNote that the communityId parameter is a String, and its value must be a valid community ID in the system."},"name":"listCommunityDetails","code":"@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":89,"insert":89,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"876159a8-c84b-9b8a-d240-9233bf59656b","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"receives a community ID and returns a response entity containing a set of `GetAdminDetailsResponse` objects representing the admins of that community.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the list of admins is being retrieved.\n\n* `String communityId`: The ID of the community to list admins for.","complex_type":true}],"returns":{"type_name":"SetGetAdminDetailsResponse","description":"a set of `GetAdminDetailsResponse` objects representing the admins of the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web request. The `HttpStatus` property of this object indicates the status code of the response, which in this case is `HttpStatus.OK`.\n* `body`: This property contains the actual data returned by the function. In this case, it is a set of `GetAdminDetailsResponse` objects, which are explained below:\n\t+ `Set<GetAdminDetailsResponse>`: This is a set of `GetAdminDetailsResponse` objects, each representing an admin for a community. The set contains the admins returned by the `communityService.getCommunityDetailsById(communityId).getAdmins()` method.\n\t+ `GetAdminDetailsResponse`: This is a class that represents the details of a single admin for a community. It has several properties, including:\n\t\t- `id`: The ID of the admin.\n\t\t- `username`: The username of the admin.\n\t\t- `fullName`: The full name of the admin.\n\t\t- `email`: The email address of the admin.\n\t\t- `phoneNumber`: The phone number of the admin.\n\t\t- `role`: The role of the admin (e.g., \"admin\", \"moderator\", etc.).","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class CommunityController {\n   @Autowired\n   private CommunityService communityService;\n\n   @GetMapping(path = \"/communities/{communityId}/admins\")\n   public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(@PathVariable String communityId) {\n      log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n      // Retrieve the community's admin set\n      var admins = communityService.getCommunityDetailsById(communityId).getAdmins();\n\n      // Create a response object and populate it with the retrieved admins\n      var response = new GetAdminDetailsResponse();\n      admins.forEach(admin -> {\n         response.getAdmins().add(new GetAdminDetailsResponse(admin.getAdminId(), admin.getName()));\n      });\n\n      return ResponseEntity.status(HttpStatus.OK).body(response);\n   }\n}\n","description":""},"name":"listCommunityAdmins","code":"@GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }","location":{"start":102,"insert":102,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"8409d1eb-7cd8-3b8a-5841-b88b94e7327a","ancestors":["bd37dc0b-d9b7-aa99-9d42-ee39d384f5c5"],"type":"function","description":"adds admins to a community based on a request containing admin information. It returns a ResponseEntity with an AddCommunityAdminResponse object containing the newly added admins' IDs.","params":[{"name":"communityId","type_name":"String","description":"id of the community to which the admin is being added.\n\n* `path`: Represents the path to the community's admins.\n* `produces`: Specifies the media types produced by the endpoint.\n* `consumes`: Specifies the media types consumed by the endpoint.\n* `@PathVariable`: Indicates that the `communityId` parameter is passed as a path variable from the URL.\n* `@Valid`: Indicates that the `request` parameter must be validated before processing.\n* `@RequestBody`: Indicates that the `request` parameter is contained within the body of the HTTP request.\n\nThe `AddCommunityAdminRequest` class has the following properties:\n\n* `admins`: A list of admins to add to the community.\n\nIn the implementation, the `communityService.addAdminsToCommunity()` method is called with the `communityId` parameter and the `request.getAdmins()` list as input. The `var community = ...` line creates a new instance of the `Community` class, which represents the community to which admins are being added. The `var response = ...` line creates a new instance of the `AddCommunityAdminResponse` class, which will contain the IDs of the newly added admins.\n\nFinally, the `return ResponseEntity.status(HttpStatus.CREATED).body(response)` line returns a response entity with the `AddCommunityAdminResponse` object as its body.","complex_type":true},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the information about the new admin to be added to the community, which is used by the method to add the admin to the community and return the updated list of admins for the community.\n\n* `@Valid` is an annotation indicating that the request body must be validated against a provided validation schema.\n* `@RequestBody` indicates that the request body should be processed and used as the input for the function.\n* `AddCommunityAdminRequest` is the class representing the request body, which contains attributes for the community ID and the list of admins to add.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` object containing an `AddCommunityAdminResponse` object with the added admins' IDs.\n\n* `ResponseEntity`: This is a class that represents a response entity, which is an object that contains a status code and a body. In this case, the status code is set to `HttpStatus.CREATED`, which indicates that the request was successful and the operation resulted in the creation of a new resource.\n* `body`: This is a reference to the `AddCommunityAdminResponse` object, which contains information about the added admins.\n* `AddCommunityAdminResponse`: This is a class that represents the response to the `addCommunityAdmin` function. It has several attributes:\n\t+ `admins`: A set of admin IDs that were added to the community.\n\t+ `communityId`: The ID of the community that the admins were added to.","complex_type":true},"usage":{"language":"java","code":"// assume we have a valid communityId string and a request object containing the adminIds to add as admins\nResponseEntity<AddCommunityAdminResponse> response = this.addCommunityAdmin(communityId, request);\nif (response.getStatusCode() == HttpStatus.CREATED) {\n    Set<String> addedAdminIds = response.getBody().getAdmins(); // Get the ids of the admins that were successfully added to the community as an admin\n} else {\n    // Handle the error\n}\n","description":"\nNote that we're only providing inputs for 'communityId' and 'request', which are the parameters used in the method. We're not providing any other inputs, such as 'adminId'. This is because the method is designed to add admins to a community based on a request object containing a list of adminIds.\n\nWe also assume that the response from the call to this method contains a status code of 201 (CREATED), indicating that the admins were successfully added to the community as an admin. If this is not the case, we handle the error and provide appropriate action in our code."},"name":"addCommunityAdmin","code":"@PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }","location":{"start":115,"insert":115,"offset":" ","indent":2},"item_type":"method","length":16}]}}}