{"name":"CommunityController.java","path":"community-service/src/main/java/com/prathab/communityservice/controllers/CommunityController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing communities in a Spring Boot application. The controller handles create, read, update, and delete (CRUD) operations for communities and their admins. It uses Lombok, Slf4j, and Spring Web Flux for dependency injection and logging, as well as CommunityService and CommunityApiMapper classes for interacting with the community database.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            CreateCommunityResponse\n            GetAdminDetailsResponse\n            AddCommunityAdminResponse\n            GetCommunityDetailsResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            CreateCommunityRequest\n            AddCommunityAdminRequest\n        }\n    }\n    edge [color=\"#26de81\"]\n    CommunityController -> GetCommunityDetailsResponse \n    CommunityController -> CreateCommunityResponse \n    CommunityController -> GetAdminDetailsResponse \n    CommunityController -> AddCommunityAdminResponse \n    AddCommunityAdminRequest -> CommunityController \n    CreateCommunityRequest -> CommunityController \n}\n","items":[{"id":"45b63ad4-f3b4-aaba-d14b-4d943efd0667","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"returns a string message indicating that it is working on something.","params":[],"returns":{"type_name":"string","description":"\"Working\".\n\nThe output is a string with the value \"Working\".\nThe string indicates that the function is currently working on something and has not yet completed its task.\nIt does not provide any additional information about the status of the work being done.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class StatusController {\n\n    @GetMapping(\"/communities/status\")\n    public String getStatus() {\n        return communityService.getCommunityDetailsById(communityId).getStatus();\n    }\n}\n","description":""},"name":"status","code":"@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4,"docLength":null},{"id":"6aa67b83-e1b8-4d87-e648-c9cb6f885ef9","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"creates a new community using a `CreateCommunityRequest` object and returns the created community as a `CreateCommunityResponse`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object passed from the client-side application to the server-side method for creating a new community.\n\n* `@Valid`: This annotation indicates that the request body must be validated using the Java Validation API.\n* `@RequestBody`: This annotation specifies that the request body should be used as the input for the function.\n* `CreateCommunityRequest`: This is the class that defines the structure of the request body. It contains properties such as `name`, `description`, and `tags`.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the newly created community details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object in Spring WebFlux. It contains the HTTP status code and the body of the response.\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code of the response. In this case, the status code is set to `HttpStatus.CREATED`.\n* `Body`: This is an instance of the `CreateCommunityResponse` class, which represents the response body of the request. It contains the details of the created community.","complex_type":true},"usage":{"language":"java","code":"// Create a community with name \"My Community\" and description \"This is my community.\"\nCreateCommunityRequest request = new CreateCommunityRequest(\"My Community\", \"This is my community.\");\nResponseEntity<CreateCommunityResponse> response = communityApiController.createCommunity(request);\n","description":"\nIn this example, the createCommunity method is invoked with a request that has the name and description of the community passed in as arguments. The returned ResponseEntity object contains the response from invoking the createCommunity method, which includes the created community's details, including its ID. This can then be used to retrieve more information about the created community, such as its admins or posts.\n\nFor example:\n"},"name":"createCommunity","code":"@PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14,"docLength":null},{"id":"faa0314d-e204-1d90-b844-96acdf8576f3","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"receives a request to list all communities and returns a set of `GetCommunityDetailsResponse` objects containing the details of each community.","params":[],"returns":{"type_name":"Set","description":"a set of `GetCommunityDetailsResponse` objects containing details of all communities.\n\n* `Set<GetCommunityDetailsResponse>` represents a set of community details responses.\n* `communityService.listAll()` returns a list of community details objects.\n* `communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails)` maps the list of community details objects to a set of get community details responses.\n* `HttpStatus.OK` represents the status code of the response, indicating that the request was successful.\n* `ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse)` returns a response entity with the status code and the body containing the set of get community details responses.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(path = \"/communities\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})\npublic ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse = \n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n}\n","description":"\nIn this example, the method listAllCommunity is annotated with @GetMapping and produces MediaType.APPLICATION_JSON_VALUE and MediaType.APPLICATION_XML_VALUE. The method uses communityService.listAll() to get a Set of CommunityDetails and then uses communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails) to convert the Set of CommunityDetails into Set of GetCommunityDetailsResponse. Then, it returns ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse) which sends back the converted Set of GetCommunityDetailsResponse with a HttpStatus.OK."},"name":"listAllCommunity","code":"@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":77,"insert":77,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11,"docLength":null},{"id":"3cb8fd79-e989-fbbc-bf4e-1c8c80228d43","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"receives a request to retrieve details about a community with a given ID and returns a response entity containing the community details in JSON or XML format, based on the media type produced.","params":[{"name":"communityId","type_name":"String","description":"unique identifier for a community and is used to retrieve the corresponding community details from the service.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the community details as a `GetCommunityDetailsResponse`.\n\n* `ResponseEntity`: This is an object that represents a HTTP response entity with a status code and a body. The status code indicates whether the request was successful or not, and the body contains the actual data returned by the function.\n* `body`: This property contains the data returned by the function in the form of a `GetCommunityDetailsResponse` object. This object has attributes such as `communityId`, `name`, `description`, `imageUrl`, and `createdAt`. These attributes represent the details of the community with the specified ID.\n* `status`: This property contains the HTTP status code associated with the response entity. The value of this property is typically `HttpStatus.OK`, indicating that the request was successful and the data was returned correctly.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(@PathVariable String communityId) {\n    // This method will return details about a community based on the community ID provided.\n    // The response body would contain all the relevant information about that community.\n    var community = communityService.getCommunityDetailsById(communityId);\n    var getCommunityResponse = new GetCommunityDetailsResponse();\n    \n    // Set the name of the community in the response.\n    getCommunityResponse.setName(community.getName());\n    \n    // Set the description of the community in the response.\n    getCommunityResponse.setDescription(community.getDescription());\n    \n    // Return a HTTP 200 (OK) status with the community details response body.\n    return ResponseEntity.status(HttpStatus.OK).body(getCommunityResponse);\n  }\n","description":""},"name":"listCommunityDetails","code":"@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }","location":{"start":89,"insert":89,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12,"docLength":null},{"id":"d0472ec6-d0a9-49b5-9244-44db34c76e7d","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"retrieves a set of administrators for a given community ID through community service and returns it in the form of `GetAdminDetailsResponseSet`.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of a community for which the list of admins is being requested.","complex_type":false}],"returns":{"type_name":"SetGetAdminDetailsResponse","description":"a set of `GetAdminDetailsResponse` objects containing details of all admins in a given community.\n\n* `ResponseEntity`: This is the top-level object returned by the function, which represents a response entity with an HTTP status code and a body.\n* `HttpStatus.OK`: This is the HTTP status code associated with the response entity, indicating that the request was successful.\n* `body`: This is a set of `GetAdminDetailsResponse` objects, which are the actual responses returned by the function. Each object in the set contains information about an admin for a community, including their ID, username, email, and role.\n* `communityService.getCommunityDetailsById(communityId).getAdmins()`: This is the method call that retrieves the list of admins for a specific community ID. The method returns a list of `Admin` objects, which are then mapped to `GetAdminDetailsResponse` objects using the `communityApiMapper`.","complex_type":true},"usage":{"language":"java","code":"@Autowired private CommunityController communityController;\n\n// ...\n\nSet<GetAdminDetailsResponse> admins = communityController.listCommunityAdmins(\"community_id\");\n","description":"\nThis code would return the set of GetAdminDetailsResponse for all admins of a community with the id \"community_id\"."},"name":"listCommunityAdmins","code":"@GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }","location":{"start":102,"insert":102,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12,"docLength":null},{"id":"cddcfe5e-f3dd-05b0-274a-cef93e067e46","ancestors":["9d6d3116-5fb2-c5b2-1540-5b706f9e2f8a"],"type":"function","description":"adds admins to a community based on a request body containing the admin IDs to add. The function returns a response entity with the updated set of admins for the community.","params":[{"name":"communityId","type_name":"String","description":"id of the community to which the admin will be added.","complex_type":false},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the information about the new admin to be added to the community.\n\n* `@Valid`: This annotation indicates that the request body must be validated using a bean validation processor.\n* `@RequestBody`: This annotation specifies that the request body should be processed as a JSON or XML document.\n* `AddCommunityAdminRequest`: This is the class representing the request body, which contains attributes related to adding admins to a community.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` object containing an `AddCommunityAdminResponse` object with the updated admin set for the specified community.\n\n* `response`: an instance of `AddCommunityAdminResponse`, which contains information about the added admins to the community.\n\t+ `admins`: a set of administrator IDs, representing the added admins to the community.\n\nThe function returns a `ResponseEntity` with a status code of `HttpStatus.CREATED` and the `AddCommunityAdminResponse` object as its body.","complex_type":true},"usage":{"language":"java","code":"// ...\n@Autowired\nprivate CommunityApiController communityApiController;\n\n@Test\npublic void testAddCommunityAdmin() {\n  // given\n  var communityId = \"1\";\n  var adminIds = Set.of(\"admin1\", \"admin2\");\n  var request = new AddCommunityAdminRequest();\n  request.setAdmins(adminIds);\n  \n  // when\n  ResponseEntity<AddCommunityAdminResponse> response = communityApiController\n      .addCommunityAdmin(communityId, request);\n  \n  // then\n  var createdResponse = response.getBody();\n  assertEquals(HttpStatus.CREATED, response.getStatusCode());\n  assertNotNull(createdResponse);\n  assertEquals(adminIds, createdResponse.getAdmins());\n}\n","description":"\nIn this example, we first set up the `communityId` and the `adminIds` that will be used in the test. Then, we create an instance of `AddCommunityAdminRequest` with the `adminIds` and pass it to the method `addCommunityAdmin`. The response from the API call is then asserted against the expected status code (`HttpStatus.CREATED`) and the body of the response should contain a `Set<String>` that matches the inputted `adminIds`.\n\nThis example demonstrates how to use the `addCommunityAdmin` method by providing a valid value for `communityId`, and a `Set` of admin IDs, in an instance of `AddCommunityAdminRequest`. The response from the API call is then asserted against the expected status code (`HttpStatus.CREATED`) and the body of the response should contain a `Set<String>` that matches the inputted `adminIds`."},"name":"addCommunityAdmin","code":"@PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }","location":{"start":115,"insert":115,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16,"docLength":null}]}}}