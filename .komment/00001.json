[
  {
    "name": "House.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/domain/House.java",
    "content": {
      "structured": {
        "description": "An entity class called `House` that represents a house with unique house ID and community ID, name. The class follows Java Persistence API standards for entity classes and has fields for communityId, houseId, and name.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.homeservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"195pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 195.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.homeservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"187,-96 0,-96 0,-66 187,-66 187,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.domain.</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1homeservice_1_1domain_1_1House.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"187,-30 0,-30 0,0 187,0 187,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.domain.</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M93.5,-55.54C93.5,-46.96 93.5,-37.61 93.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"90,-55.8 93.5,-65.8 97,-55.8 90,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-151 56.5,-151 56.5,-132 130.5,-132 130.5,-151\"/>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M93.5,-121.65C93.5,-113.36 93.5,-103.78 93.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"90,-121.87 93.5,-131.87 97,-121.87 90,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.domain.House\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"dto\"\n            color=\"#33363A\"\n            HouseDto\n        }\n        subgraph cluster_2 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                HouseApiMapper\n            }\n            subgraph cluster_4 {\n                label=\"response\"\n                color=\"#33363A\"\n                HouseDetailResponse\n            }\n        }\n    }\n    subgraph cluster_5 {\n        label=\"services\"\n        color=\"#33363A\"\n        HouseService\n        subgraph cluster_6 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            HouseSDJpaService\n        }\n    }\n    subgraph cluster_7 {\n        label=\"domain\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            House [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    House -> HouseDetailResponse [style=\"dashed\"]\n    HouseDetailResponse -> House [style=\"dashed\"]\n    HouseService -> House \n    House -> HouseApiMapper \n    HouseSDJpaService -> House \n    House -> HouseDto [style=\"dashed\"]\n    HouseDto -> House [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "751853bf-0eac-6f92-9845-e24e514c361e",
            "ancestors": [],
            "type": "function",
            "description": "represents a unique house within a community with a distinct ID and name, following Java Persistence API standards for entity classes.\nFields:\n\t- communityId (String): in the House class represents a unique identifier for a specific community associated with a particular house.\n\t- houseId (String): in the House class represents a unique identifier for each house within a community, as defined by the class definition.\n\t- name (String): in the House class represents a string value that uniquely identifies a specific house within a community.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "House",
                "description": "in the House class represents a unique identifier for a specific community associated with a particular house."
              },
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "House",
                "description": "in the House class represents a unique identifier for each house within a community, as defined by the class definition."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "House",
                "description": "in the House class represents a string value that uniquely identifies a specific house within a community."
              }
            ],
            "name": "House",
            "code": "@Entity\n@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\npublic class House extends BaseEntity {\n  @Column(nullable = false)\n  private String communityId;\n  @Column(unique = true, nullable = false)\n  private String houseId;\n  @Column(nullable = false)\n  private String name;\n}",
            "location": {
              "start": 37,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseRepository.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/repositories/HouseRepository.java",
    "content": {
      "structured": {
        "description": "A Spring Data CrudRepository interface for managing House entities in a database. The interface extends the standard CrudRepository interface and provides additional functionality for managing House entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.homeservice.repositories.HouseRepository Pages: 1 -->\n<svg width=\"216pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 216.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.prathab.homeservice.repositories.HouseRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"208,-30 0,-30 0,0 208,0 208,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.repositories.</text>\n<text text-anchor=\"middle\" x=\"104\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"172.5,-96 35.5,-96 35.5,-66 172.5,-66 172.5,-96\"/>\n<text text-anchor=\"start\" x=\"43.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CrudRepository&lt; House,</text>\n<text text-anchor=\"middle\" x=\"104\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M104,-55.54C104,-46.96 104,-37.61 104,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"100.5,-55.8 104,-65.8 107.5,-55.8 100.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.repositories.HouseRepository\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "c9867abf-bf92-05a0-ca43-41105383628c",
            "ancestors": [],
            "type": "function",
            "description": "defines a Spring Data CrudRepository for managing House entities in a database.",
            "name": "HouseRepository",
            "code": "@Repository\npublic interface HouseRepository extends CrudRepository<House, Long> {\n}",
            "location": {
              "start": 26,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "HouseService.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/services/HouseService.java",
    "content": {
      "structured": {
        "description": "An interface called HouseService that provides methods for managing houses, including adding new houses and retrieving a list of all houses. The interface includes two methods: addHouse() for adding a new house and findAllHouses() for retrieving a list of all houses.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.services.HouseService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"dto\"\n            color=\"#33363A\"\n            HouseDto\n        }\n    }\n    subgraph cluster_2 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    subgraph cluster_3 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            HouseService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    HouseService -> House \n    HouseDto -> HouseService \n}\n",
        "items": [
          {
            "id": "9e518c6b-2f71-47bc-3641-7d1ff60b2e63",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for managing houses, including adding new houses and retrieving a list of all houses.",
            "name": "HouseService",
            "code": "public interface HouseService {\n  House addHouse(HouseDto houseDto);\n\n  Set<House> findAllHouses();\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseSDJpaService.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/services/springdatajpa/HouseSDJpaService.java",
    "content": {
      "structured": {
        "description": "A `HouseSDJpaService` class that implements a House service using Spring Data JPA. The class has dependencies on `HouseRepository` and `HouseApiMapper` interfaces, which are used to interact with the database and map house DTOs to domain objects. The service provides methods for adding and finding houses, including generating unique house IDs and saving updated entities to the repository.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.services.springdatajpa.HouseSDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                HouseSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_3 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_4 {\n            label=\"dto\"\n            color=\"#33363A\"\n            HouseDto\n        }\n    }\n    HouseSDJpaService -> House \n    HouseDto -> HouseSDJpaService \n}\n",
        "items": [
          {
            "id": "b47d8fb3-4ff2-7387-2b41-71a907fba4ab",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the HouseService interface, providing methods for adding and retrieving houses from a database using JPA. The class has three main methods: `addHouse`, `findAllHouses`, and `generateUniqueHouseId`. These methods perform various actions related to managing houses in the database, such as mapping a house DTO to a corresponding entity, generating a unique house ID, and saving the updated entity to the repository.",
            "name": "HouseSDJpaService",
            "code": "@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseRepository houseRepository;\n  private final HouseApiMapper houseApiMapper;\n\n  public HouseSDJpaService(HouseRepository houseRepository,\n      HouseApiMapper houseApiMapper) {\n    this.houseRepository = houseRepository;\n    this.houseApiMapper = houseApiMapper;\n  }\n\n  /**\n   * maps a `HouseDto` object to a `House` entity, assigns a unique house ID, and saves\n   * the updated entity to the repository.\n   * \n   * @param houseDto House entity in DTO format, which is converted to a corresponding\n   * `House` instance by calling the `houseApiMapper.houseDtoToHouse()` method before\n   * saving it to the repository.\n   * \n   * \t- `houseDto`: This is an object representing a house with properties such as\n   * `houseId`, `street`, `city`, `state`, and `zip`.\n   * \t- `generateUniqueHouseId()`: This is a method that generates a unique identifier\n   * for the house.\n   * \n   * @returns a new instance of `House` entity with a unique ID generated by the method.\n   * \n   * The `house` object contains the following attributes:\n   * \n   * \t- `houseId`: A unique identifier generated for the house.\n   * \t- `houseDto`: The original `HouseDto` object passed in as a parameter.\n   * \n   * The `save` method is used to persist the `house` object in the repository, making\n   * it available for further manipulation or retrieval.\n   */\n  @Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }\n\n  /**\n   * generates a unique identifier for a house using the `UUID.randomUUID()` method and\n   * returns it as a string.\n   * \n   * @returns a unique randomly generated string of characters.\n   */\n  private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }\n\n  /**\n   * traverses the repository's collection of houses and adds each found item to a new\n   * set called `houseSet`.\n   * \n   * @returns a set of `House` objects containing all the houses stored in the repository.\n   * \n   * \t- `var houseSet = new HashSet<House>();`: This line declares an empty set variable\n   * named `houseSet` of type `HashSet<House>`.\n   * \t- `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over\n   * the results returned by the `houseRepository.findAll()` method using a `forEach()`\n   * method. Each result is added to the `houseSet` variable.\n   * \t- `return houseSet;`: This line returns the `houseSet` variable, which contains\n   * all the houses found by the repository.\n   */\n  @Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }\n}",
            "location": {
              "start": 35,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 34
              }
            },
            "item_type": "class",
            "length": 70,
            "docLength": 6
          },
          {
            "id": "24120a8c-0e18-17b8-744a-33819ead85a3",
            "ancestors": [
              "b47d8fb3-4ff2-7387-2b41-71a907fba4ab"
            ],
            "type": "function",
            "description": "adds a new house to the database by mapping the provided `HouseDto` object to a `House` entity, generating a unique house ID, and saving it to the repository.",
            "params": [
              {
                "name": "houseDto",
                "type_name": "HouseDto",
                "description": "House details as an object and provides it to the `houseApiMapper` for conversion into a `House` entity before saving it to the database through the `houseRepository`.\n\n* `houseDto`: A House DTO object containing information about a house, such as its address, size, and other attributes.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "House",
              "description": "a new instance of `House` with a unique ID generated through the `generateUniqueHouseId()` method.\n\n* `house`: This is the newly created House object, which contains the unique house ID generated by the function.\n* `houseRepository.save()`: This method saves the updated House object in the repository, ensuring its persistence in the database.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Create a new HouseDto object\nHouseDto houseDto = new HouseDto();\n\n// Set properties for the HouseDto object\nhouseDto.setStreet(\"123 Main St\");\nhouseDto.setCity(\"Anytown\");\nhouseDto.setState(\"CA\");\nhouseDto.setZip(\"90210\");\n\n// Call method addHouse and pass in the HouseDto object as a parameter\nHouse house = addHouse(houseDto);\n",
              "description": ""
            },
            "name": "addHouse",
            "code": "@Override public House addHouse(HouseDto houseDto) {\n    var house = houseApiMapper.houseDtoToHouse(houseDto);\n    house.setHouseId(generateUniqueHouseId());\n    return houseRepository.save(house);\n  }",
            "location": {
              "start": 69,
              "insert": 46,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 45,
                "end": 68
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 23
          },
          {
            "id": "f9dbe39a-b327-35be-d244-3dcd811969ca",
            "ancestors": [
              "b47d8fb3-4ff2-7387-2b41-71a907fba4ab"
            ],
            "type": "function",
            "description": "generates a unique identifier for a house using the `UUID.randomUUID()` method and returns it as a string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a unique string of characters generated using the `UUID.randomUUID()` method.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n  public static void main(String[] args) {\n    var houseService = new HouseSDJpaService();\n    HouseDto houseDto = new HouseDto(\"123 Main St\", \"Anytown\", \"CA\", \"94801\");\n    House house = houseService.addHouse(houseDto);\n    System.out.println(house.getHouseId()); // Output: 12345678-abcd-abcd-abcd-abcdefghijkl\n  }\n}\n",
              "description": "\nIn this example, we create a new instance of `HouseSDJpaService` and call its `addHouse()` method with a `HouseDto` object as an argument. The `addHouse()` method converts the `HouseDto` to a `House` entity using the `houseApiMapper.houseDtoToHouse()` method, assigns a unique identifier using the `generateUniqueHouseId()` method, and saves the updated entity in the repository using the `save()` method. The output of the program is a unique identifier for the newly added house."
            },
            "name": "generateUniqueHouseId",
            "code": "private String generateUniqueHouseId() {\n    return UUID.randomUUID().toString();\n  }",
            "location": {
              "start": 81,
              "insert": 75,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 74,
                "end": 80
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 6
          },
          {
            "id": "bcb1e510-4259-ce98-ee40-f9f7305b094d",
            "ancestors": [
              "b47d8fb3-4ff2-7387-2b41-71a907fba4ab"
            ],
            "type": "function",
            "description": "retrieves all houses from the database and stores them in a `HashSet`.",
            "params": [],
            "returns": {
              "type_name": "HashSet",
              "description": "a set of House objects containing all the houses from the database.\n\n* `var houseSet = new HashSet<House>();`: This line creates an empty set of houses using the `HashSet` class in Java.\n* `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over the results of the `findAll` method in the `houseRepository` interface, which is expected to return a list of houses. The `forEach` method adds each house from the list to the `houseSet`.\n* `return houseSet;`: This line returns the populated `houseSet` object, which contains all the houses retrieved from the database.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Set<House> houseSet = new HashSet<>();\nhouseSet.add(new House());\nHouseDto houseDto = new HouseDto();\nhouseDto.setStreet(\"123 Main St.\");\nhouseDto.setCity(\"Anytown\");\nhouseDto.setState(\"CA\");\nhouseDto.setZip(\"94025\");\naddHouse(houseDto);\nfindAllHouses().forEach(house -> {\n    System.out.println(house.getHouseId());\n});\n",
              "description": "\nIn this example, we first create a new instance of House and add it to the repository using the `addHouse` method. We then create a new instance of `HouseDto` with some dummy values for street, city, state, and zip code. We then use the `addHouse` method again to save this object in the repository. Finally, we retrieve all the houses from the repository using the `findAllHouses` method and print out their house IDs using a lambda expression."
            },
            "name": "findAllHouses",
            "code": "@Override public Set<House> findAllHouses() {\n    var houseSet = new HashSet<House>();\n    houseRepository.findAll().forEach(houseSet::add);\n    return houseSet;\n  }",
            "location": {
              "start": 99,
              "insert": 85,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 84,
                "end": 98
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "HomeServiceApplicationTests.java",
    "path": "house-service/src/test/java/com/prathab/homeservice/HomeServiceApplicationTests.java",
    "content": {
      "structured": {
        "description": "A Spring Boot test class for testing a Home Service Application. The class contains a single test method, `contextLoads()`, which verifies that the application context is properly loaded when the class is run.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.HomeServiceApplicationTests\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "2a179d01-e9e8-15a2-7248-2c1242f150f8",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot test class for testing the Home Service Application. The class contains a single test method, `contextLoads()`, which verifies that the application context is properly loaded when the class is run.",
            "name": "HomeServiceApplicationTests",
            "code": "@SpringBootTest\nclass HomeServiceApplicationTests {\n\n  /**\n   * performs initialization tasks for the Java application.\n   */\n  @Test\n  void contextLoads() {\n  }\n}",
            "location": {
              "start": 27,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 5
          },
          {
            "id": "8ec62caa-adfc-28ac-3348-28d0e8f6b92f",
            "ancestors": [
              "2a179d01-e9e8-15a2-7248-2c1242f150f8"
            ],
            "type": "function",
            "description": "is designed to load the Spring Boot application's context, enabling it to access necessary resources and perform operations.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\n\n@SpringBootTest\nclass HomeServiceApplicationTests {\n\n  @Test\n  void contextLoads() {\n    assertEquals(\"home-service\", \"home-service\");\n  }\n}\n",
              "description": ""
            },
            "name": "contextLoads",
            "code": "@Test\n  void contextLoads() {\n  }",
            "location": {
              "start": 33,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 29,
                "end": 32
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserServiceApplication.java",
    "path": "user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that provides a password encoder using BCrypt. The `main` method launches the application upon execution, and the `getPasswordEncoder` function returns an instance of the `BCryptPasswordEncoder` class to encode passwords securely. The application also enables Eureka client functionality for service discovery.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.UserServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "6c13844e-fd7c-f3a8-fd47-75c49bbb0ad2",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a password encoder using BCrypt. The main method launches the application upon execution, and the `getPasswordEncoder` method returns an instance of `BCryptPasswordEncoder` to encode passwords securely using the bcrypt algorithm.",
            "name": "UserServiceApplication",
            "code": "@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  /**\n   * runs a Spring Application, specifically the `UserServiceApplication`.\n   * \n   * @param args command-line arguments passed to the `SpringApplication.run()` method\n   * when invoking the application.\n   * \n   * \t- The `String[]` type indicates that `args` is an array of strings.\n   * \t- The `SpringApplication.run()` method takes two arguments: `UserServiceApplication.class`\n   * and `args`.\n   * \t- `UserServiceApplication.class` is the class of the application being run.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  /**\n   * returns a `BCryptPasswordEncoder` instance to encode passwords using the bcrypt algorithm.\n   * \n   * @returns a BCryptPasswordEncoder object, which is used to securely hash passwords.\n   * \n   * 1/ Type: The `getPasswordEncoder` function returns an instance of the\n   * `BCryptPasswordEncoder` class, which is a specific implementation of the\n   * `PasswordEncoder` interface.\n   * 2/ Instance variable: The `BCryptPasswordEncoder` object has various instance\n   * variables, such as `rootHashCost`, `saltCost`, and `digestCost`, which determine\n   * the computational effort required for password hashing and verification.\n   * 3/ Methods: The `BCryptPasswordEncoder` class provides several methods for encoding\n   * and verifying passwords, including `encode()` and `verify()`. These methods take\n   * a plaintext password as input and return the corresponding hashed value.\n   */\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}",
            "location": {
              "start": 30,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 39,
            "docLength": 4
          },
          {
            "id": "bc56ab77-4910-1186-9c45-494659bab07e",
            "ancestors": [
              "6c13844e-fd7c-f3a8-fd47-75c49bbb0ad2"
            ],
            "type": "function",
            "description": "runs a SpringApplication, which launches the `UserServiceApplication`.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "1 or more command-line arguments passed to the `SpringApplication.run()` method when the application is launched.\n\n* `args`: An array of strings representing the command-line arguments passed to the application.\n* Length: The number of elements in the `args` array, which is equal to the number of command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }",
            "location": {
              "start": 45,
              "insert": 34,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 33,
                "end": 44
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 11
          },
          {
            "id": "ef12b70a-5bef-4192-bb4d-14be74c4fc2e",
            "ancestors": [
              "6c13844e-fd7c-f3a8-fd47-75c49bbb0ad2"
            ],
            "type": "function",
            "description": "returns a `BCryptPasswordEncoder`, which is a widely-used and secure password hashing algorithm.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a BCryptPasswordEncoder instance, which is used to encrypt passwords securely.\n\nThe `BCryptPasswordEncoder` object returned by the function is an implementation of the `PasswordEncoder` interface in Java, which provides encryption for passwords using the bcrypt hashing algorithm.\n\nThe `BCryptPasswordEncoder` class implements the `PasswordEncoder` interface and provides a secure hash function that is more resistant to brute-force attacks than other hashing algorithms like MD5 or SHA-1.\n\nThe encryption process performed by this encoder uses the bcrypt algorithm, which includes several features such as salt generation, iterated hashing, and length extension to make it computationally expensive and resistant to various types of attacks.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic PasswordEncoder getPasswordEncoder() {\n  return new BCryptPasswordEncoder();\n}\n",
              "description": "\nThis method returns an instance of the BCryptPasswordEncoder class, which implements the PasswordEncoder interface. The returned object can then be used to encode and verify passwords using the bcrypt algorithm."
            },
            "name": "getPasswordEncoder",
            "code": "@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }",
            "location": {
              "start": 64,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 63
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "user-service/src/main/java/com/prathab/userservice/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A `UserController` class that handles user-related actions in a Spring Boot application. The controller has a single method, `signUp()`, which takes a `CreateUserRequest` object as input and creates a new user in the system using the `createUser()` method of the `UserService` class. The `signUp()` method returns a `ResponseEntity` object with a status of `HttpStatus.CREATED` and a body containing the created user response.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.controllers.UserController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"request\"\n            color=\"#33363A\"\n            CreateUserRequest\n        }\n        subgraph cluster_2 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateUserResponse\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        UserController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    CreateUserRequest -> UserController \n    UserController -> CreateUserResponse \n}\n",
        "items": [
          {
            "id": "e57ffa39-6f94-bf91-af4f-ae6427f3ee35",
            "ancestors": [],
            "type": "function",
            "description": "is a RESTful web service that handles user-related operations, such as signing up new users and retrieving user information. The class uses Spring WebFlux and Spring Data JPA to handle HTTP requests and database interactions, respectively. The signUp method maps a `CreateUserRequest` object to a `UserDto` object, creates a new user using the `createUser()` method, and returns a `CreateUserResponse` object in a HTTP `CREATED` status.",
            "name": "UserController",
            "code": "@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  /**\n   * traces the port and token secret used to run it and returns the message \"Working\".\n   * \n   * @returns the string \"Working\".\n   */\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  /**\n   * maps a `CreateUserRequest` object to a `UserDto` object, creates a new user using\n   * the `createUser()` method, and returns a `CreateUserResponse` object in a HTTP\n   * `CREATED` status.\n   * \n   * @param request CreateUserRequest object that contains the user's information to\n   * be created, which is converted into a UserDto object by the userApiMapper and then\n   * used to create a new user in the system.\n   * \n   * \t- `@Valid`: Indicates that the input object should be validated against the schema\n   * defined in the Java classes or annotations.\n   * \t- `@RequestBody`: Represents the request body as a single entity, which is the\n   * case here since the function accepts a `CreateUserRequest` object as its only parameter.\n   * \t- `MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE`: Defines\n   * the media types that the function can handle for input and output. In this case,\n   * it can handle both JSON and XML formats for input and output.\n   * \n   * @returns a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body\n   * containing the created user response.\n   * \n   * \t- `ResponseEntity`: This is an instance of the `ResponseEntity` class, which\n   * represents a response to a HTTP request. It has several attributes, including the\n   * status code, body, and headers. In this case, the status code is `HttpStatus.CREATED`,\n   * indicating that the request was successful and the resource was created.\n   * \t- `body`: This attribute contains the response body, which in this case is an\n   * instance of the `CreateUserResponse` class. This class represents the result of\n   * the sign-up operation, including the user ID and other relevant information.\n   * \t- `HttpStatus`: This attribute represents the HTTP status code associated with\n   * the response. In this case, it is `HttpStatus.CREATED`, indicating that the request\n   * was successful and the resource was created.\n   */\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}",
            "location": {
              "start": 37,
              "insert": 34,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 33,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 71,
            "docLength": 3
          },
          {
            "id": "9a866da8-044d-e498-714b-e21cd158df07",
            "ancestors": [
              "e57ffa39-6f94-bf91-af4f-ae6427f3ee35"
            ],
            "type": "function",
            "description": "logs a message to the trace log and returns the string \"Working\".",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "\"Working\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n",
              "description": "\nHere, the method is called status and it returns a string response of “Working”. The method’s body has only one line of code which is log.trace() which prints a message on the console about the application running on a specific port with a secret key."
            },
            "name": "status",
            "code": "@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }",
            "location": {
              "start": 56,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 5
          },
          {
            "id": "533fb7b0-480e-16b7-904b-c67f0177b52c",
            "ancestors": [
              "e57ffa39-6f94-bf91-af4f-ae6427f3ee35"
            ],
            "type": "function",
            "description": "maps a `CreateUserRequest` to a `UserDto` and creates a new user in the system using the `createUser` method, returning the created user as a `CreateUserResponse`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "user registration request provided by the client through the HTTP POST method, containing the necessary data to create a new user account in the system.\n\n* `@Valid`: This annotation indicates that the `request` object has been validated by an external framework, such as Spring Security.\n* `@RequestBody`: This annotation specifies that the `request` object is contained within the body of the HTTP request message.\n* `CreateUserRequest`: This is the class that represents the request data, which contains fields for user details such as name, email, and password.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateUserResponse",
              "description": "a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a `status` field that indicates the status code of the response (in this case, `HttpStatus.CREATED`).\n* `body`: This is a reference to the actual data returned in the response. In this case, it is an instance of the `CreateUserResponse` class, which represents the result of creating a new user.\n* `createdUserResponse`: This is the actual data returned in the response. It contains information about the newly created user, such as their ID and other relevant details.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class UserController {\n  @Autowired\n  private UserService userService;\n  \n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}\n",
              "description": "\nIn this example, the signUp method is called and passed a CreateUserRequest as an argument. The request is then converted into a UserDto using userApiMapper's createUserRequestToUserDto method. The resulting UserDto is then passed to the userService's createUser method which returns a UserDto. This resultant UserDto is then converted back into a CreateUserResponse and returned as part of the ResponseEntity."
            },
            "name": "signUp",
            "code": "@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }",
            "location": {
              "start": 95,
              "insert": 64,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 63,
                "end": 94
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 31
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "user-service/src/main/java/com/prathab/userservice/controllers/models/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` for automatic conversion between different models using Mapstruct. The interface provides four methods: `userDtoToCreateUserRequest`, `createUserRequestToUserDto`, `userDtoToCreateUserResponse`, and `createUserResponseToUserDto`. These methods map a `UserDto` object to a `CreateUserRequest` object, or vice versa, using the `Mapper` interface. The conversion is done for different types of models, including `UserDto`, `CreateUserRequest`, and `CreateUserResponse`.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.controllers.models.mapper.UserApiMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    UserApiMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n            subgraph cluster_3 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateUserRequest\n            }\n            subgraph cluster_4 {\n                label=\"response\"\n                color=\"#33363A\"\n                CreateUserResponse\n            }\n        }\n    }\n    subgraph cluster_5 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    UserApiMapper -> CreateUserResponse \n    UserApiMapper -> CreateUserRequest \n    CreateUserResponse -> UserApiMapper \n    UserDto -> UserApiMapper \n    CreateUserRequest -> UserApiMapper \n}\n",
        "items": [
          {
            "id": "b47dd48e-ccf1-f3b3-f843-02593c0a2707",
            "ancestors": [],
            "type": "function",
            "description": "provides a mapping between the UserDto and CreateUserRequest, CreateUserResponse classes in the given Java file, using Mapstruct for automatic conversion.",
            "name": "UserApiMapper",
            "code": "@Mapper\npublic interface UserApiMapper {\n  CreateUserRequest userDtoToCreateUserRequest(UserDto userDto);\n\n  UserDto createUserRequestToUserDto(CreateUserRequest createUserRequest);\n\n  CreateUserResponse userDtoToCreateUserResponse(UserDto userDto);\n\n  UserDto createUserResponseToUserDto(CreateUserResponse createUserResponse);\n}",
            "location": {
              "start": 27,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserRequest.java",
    "path": "user-service/src/main/java/com/prathab/userservice/controllers/models/request/CreateUserRequest.java",
    "content": {
      "structured": {
        "description": "A model class `CreateUserRequest` for creating a new user. The class has four fields: `name`, `email`, `password`, and `size`. The `@NotBlank` annotation is used on `name` and `email` to ensure that they are not left blank, while the `@Email` annotation is used on `email` to validate that it is a valid email address. The `@Size` annotation is used on `password` to ensure that it is between 8 and 80 characters long.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.controllers.models.request.CreateUserRequest\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        UserController\n        subgraph cluster_2 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                CreateUserResponse\n            }\n            subgraph cluster_4 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                UserApiMapper\n            }\n            subgraph cluster_5 {\n                label=\"request\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    CreateUserRequest [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    UserDto -> CreateUserRequest [style=\"dashed\"]\n    UserApiMapper -> CreateUserRequest \n    CreateUserRequest -> UserApiMapper \n    CreateUserRequest -> UserDto [style=\"dashed\"]\n    CreateUserRequest -> CreateUserResponse [style=\"dashed\"]\n    CreateUserRequest -> UserController \n}\n",
        "items": [
          {
            "id": "9348fe48-1403-ad8a-a149-30129423deeb",
            "ancestors": [],
            "type": "function",
            "description": "defines a request model for creating a new user with required fields for name, email, and password.\nFields:\n\t- name (String): in the CreateUserRequest model requires a non-empty string value.\n\t- email (String): in the CreateUserRequest model requires an email address to be provided.\n\t- password (String): requires a non-empty string between 8 and 80 characters in length.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserRequest",
                "description": "in the CreateUserRequest model requires a non-empty string value."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserRequest",
                "description": "in the CreateUserRequest model requires an email address to be provided."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserRequest",
                "description": "requires a non-empty string between 8 and 80 characters in length."
              }
            ],
            "name": "CreateUserRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateUserRequest {\n  @NotBlank\n  private String name;\n  @Email\n  private String email;\n  @NotBlank\n  @Size(min = 8, max = 80, message = \"Password should be between 8 and 80 characters\")\n  private String password;\n}",
            "location": {
              "start": 30,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "LoginUserRequest.java",
    "path": "user-service/src/main/java/com/prathab/userservice/controllers/models/request/LoginUserRequest.java",
    "content": {
      "structured": {
        "description": "A class called `LoginUserRequest` that represents a request model for logging into a service. The class has two fields: `email` and `password`, which are used to authenticate the user. The class uses Lombok, an automated programming tool, to manage constructor injection and getter/setter methods.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.controllers.models.request.LoginUserRequest\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "51183901-d720-73bf-044b-7da3a3983e6f",
            "ancestors": [],
            "type": "function",
            "description": "represents a request model for logging into a service with an email and password field.\nFields:\n\t- email (String): in the LoginUserRequest class is of type String.\n\t- password (String): in the LoginUserRequest class requires a string value.\n\n",
            "fields": [
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "LoginUserRequest",
                "description": "in the LoginUserRequest class is of type String."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "LoginUserRequest",
                "description": "in the LoginUserRequest class requires a string value."
              }
            ],
            "name": "LoginUserRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class LoginUserRequest {\n  private String email;\n  private String password;\n}",
            "location": {
              "start": 27,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "user-service/src/main/java/com/prathab/userservice/controllers/models/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A response model for create user request. The `CreateUserResponse` class has three attributes: `userId`, `name`, and `email`. These attributes are populated from the `CreateUserRequest` class using the `@AllArgsConstructor` and `@NoArgsConstructor` annotations, which indicate how the classes should be constructed. Additionally, the `Getter` and `Setter` annotations are used to specify getter and setter methods for each attribute.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.controllers.models.response.CreateUserResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        UserController\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateUserRequest\n            }\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    CreateUserResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n            subgraph cluster_4 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                UserApiMapper\n            }\n        }\n    }\n    subgraph cluster_5 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    CreateUserRequest -> CreateUserResponse [style=\"dashed\"]\n    UserApiMapper -> CreateUserResponse \n    UserController -> CreateUserResponse \n    CreateUserResponse -> UserApiMapper \n    UserDto -> CreateUserResponse [style=\"dashed\"]\n    CreateUserResponse -> UserDto [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "961e713c-8da4-2592-d844-a16cf5f695be",
            "ancestors": [],
            "type": "function",
            "description": "from the file is a response model for create user request with String userId, name, and email fields.\nFields:\n\t- userId (String): represents a unique identifier for a user in the system.\n\t- name (String): in the CreateUserResponse class represents a string value of a user's name.\n\t- email (String): in the CreateUserResponse class is of type String.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "in the CreateUserResponse class represents a string value of a user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "in the CreateUserResponse class is of type String."
              }
            ],
            "name": "CreateUserResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateUserResponse {\n  private String userId;\n  private String name;\n  private String email;\n}",
            "location": {
              "start": 30,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "user-service/src/main/java/com/prathab/userservice/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A BaseEntity class that serves as the base class for all Java Persistence API (JPA) entities. The class has an @Id annotation that generates a unique identifier using the Identity strategy when the object is created. The id field is of type Long, which is automatically generated by JPA. The class also implements Serializable, which allows it to be serialized for transmission or storage.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"211pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 211.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.prathab.userservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"191.5,-85 11.5,-85 11.5,-55 191.5,-55 191.5,-85\"/>\n<text text-anchor=\"start\" x=\"19.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1userservice_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"203,-19 0,-19 0,0 203,0 203,-19\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-44.75C101.5,-35.72 101.5,-26.03 101.5,-19.27\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-44.84 101.5,-54.84 105,-44.84 98,-44.84\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"138.5,-140 64.5,-140 64.5,-121 138.5,-121 138.5,-140\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-110.65C101.5,-102.36 101.5,-92.78 101.5,-85.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-110.87 101.5,-120.87 105,-110.87 98,-110.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.domain.BaseEntity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "ec8f64d4-00e6-56ab-3b4f-24286fa0e171",
            "ancestors": [],
            "type": "function",
            "description": "serves as a base class for all JPA Entities and provides an identifier (id) through generation using the Identity strategy.\nFields:\n\t- id (Long): in the BaseEntity class is an automatically generated unique identifier for each entity instance.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "BaseEntity",
                "description": "in the BaseEntity class is an automatically generated unique identifier for each entity instance."
              }
            ],
            "name": "BaseEntity",
            "code": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "User.java",
    "path": "user-service/src/main/java/com/prathab/userservice/domain/User.java",
    "content": {
      "structured": {
        "description": "an entity called `User` that represents a valid user in a service. The entity has several fields, including `name`, `userId`, `email`, and `encryptedPassword`. These fields are defined using Lombok annotations for convenience and consistency. The `@Entity` annotation indicates that the class is a Java Perspective (JPA) entity, which means it can be used to store data in a database. The `BaseEntity` class is likely an additional JPA entity that provides some basic functionality for entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"211pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 211.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.prathab.userservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"191.5,-85 11.5,-85 11.5,-55 191.5,-55 191.5,-85\"/>\n<text text-anchor=\"start\" x=\"19.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1userservice_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"203,-19 0,-19 0,0 203,0 203,-19\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-44.75C101.5,-35.72 101.5,-26.03 101.5,-19.27\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-44.84 101.5,-54.84 105,-44.84 98,-44.84\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"138.5,-140 64.5,-140 64.5,-121 138.5,-121 138.5,-140\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-110.65C101.5,-102.36 101.5,-92.78 101.5,-85.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-110.87 101.5,-120.87 105,-110.87 98,-110.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.domain.User\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            User [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        UserRepository\n    }\n    subgraph cluster_2 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n        subgraph cluster_3 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            UserMapper\n        }\n    }\n    UserDto -> User [style=\"dashed\"]\n    UserRepository -> User \n    User -> UserDto [style=\"dashed\"]\n    UserMapper -> User \n    User -> UserMapper \n}\n",
        "items": [
          {
            "id": "6912b966-0bdb-c2b6-384f-698db9ef3b05",
            "ancestors": [],
            "type": "function",
            "description": "in Java represents a valid user in the service with a unique user ID and email address, along with an encrypted password for security purposes.\nFields:\n\t- name (String): in the User class represents a unique identifier for each user.\n\t- userId (String): in the User entity is a unique identifier for each valid user in the service, provided as a string value.\n\t- email (String): in the User class represents an unique string of characters used for identifying and communicating with users in the service.\n\t- encryptedPassword (String): stores a string of password that has been encrypted for secure storage in the User entity.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a unique identifier for each user."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User entity is a unique identifier for each valid user in the service, provided as a string value."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents an unique string of characters used for identifying and communicating with users in the service."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "stores a string of password that has been encrypted for secure storage in the User entity."
              }
            ],
            "name": "User",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Setter\n@Entity\npublic class User extends BaseEntity {\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String userId;\n  @Column(unique = true, nullable = false)\n  private String email;\n  @Column(nullable = false)\n  private String encryptedPassword;\n}",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "class",
            "length": 14,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "user-service/src/main/java/com/prathab/userservice/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A `UserDto` class that represents essential information for a user account, including their ID, user ID, name, email, password, and encrypted password. The class uses Lombok's `@AllArgsConstructor`, `@Getter`, `@NoArgsConstructor`, and `@Setter` annotations to automate the construction of the object and provide easy access to its fields.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.dto.UserDto\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            UserDto [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n        subgraph cluster_1 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            UserMapper\n        }\n    }\n    subgraph cluster_2 {\n        label=\"security\"\n        color=\"#33363A\"\n        AppUserDetailsService\n    }\n    subgraph cluster_3 {\n        label=\"services\"\n        color=\"#33363A\"\n        UserService\n        subgraph cluster_4 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            UserSDJpaService\n        }\n    }\n    subgraph cluster_5 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_6 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_7 {\n                label=\"response\"\n                color=\"#33363A\"\n                CreateUserResponse\n            }\n            subgraph cluster_8 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateUserRequest\n            }\n            subgraph cluster_9 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                UserApiMapper\n            }\n        }\n    }\n    subgraph cluster_10 {\n        label=\"domain\"\n        color=\"#33363A\"\n        User\n    }\n    CreateUserRequest -> UserDto [style=\"dashed\"]\n    UserDto -> UserDto [style=\"dashed\"]\n    UserDto -> User [style=\"dashed\"]\n    UserService -> UserDto \n    UserDto -> UserSDJpaService \n    UserDto -> UserMapper \n    AppUserDetailsService -> UserDto \n    User -> UserDto [style=\"dashed\"]\n    CreateUserResponse -> UserDto [style=\"dashed\"]\n    UserDto -> CreateUserRequest [style=\"dashed\"]\n    UserDto -> UserService \n    UserDto -> CreateUserResponse [style=\"dashed\"]\n    UserDto -> UserApiMapper \n    UserSDJpaService -> UserDto \n}\n",
        "items": [
          {
            "id": "7c21e784-824a-e987-f049-7287f6d6e7b7",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object containing essential information for a user account, including their ID, user ID, name, email, password, and encrypted password.\nFields:\n\t- id (Long): in the UserDto class represents an integer identifier for each user record.\n\t- userId (String): represents a unique identifier for a user in the application.\n\t- name (String): in the UserDto class holds a string value representing a user's name.\n\t- email (String): in the UserDto class represents a string value containing an email address.\n\t- password (String): in the UserDto class stores an unencrypted string of text representing a user's password.\n\t- encryptedPassword (String): in the UserDto class stores an encrypted version of the password field for security purposes.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents an integer identifier for each user record."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user in the application."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class holds a string value representing a user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing an email address."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores an unencrypted string of text representing a user's password."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores an encrypted version of the password field for security purposes."
              }
            ],
            "name": "UserDto",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Setter\npublic class UserDto {\n  private Long id;\n  private String userId;\n  private String name;\n  private String email;\n  private String password;\n  private String encryptedPassword;\n}",
            "location": {
              "start": 40,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 39
              }
            },
            "item_type": "class",
            "length": 12,
            "docLength": 16
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "user-service/src/main/java/com/prathab/userservice/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides mappings between `UserDto` and `User` objects using Mapstruct. The interface has two methods: `userDtoToUser()` converts a `UserDto` object into a `User` object, while `userToUserDto()` converts a `User` object into a `UserDto` object.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.domain.User Pages: 1 -->\n<svg width=\"211pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 211.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.prathab.userservice.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"203,-19 0,-19 0,0 203,0 203,-19\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1userservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"191.5,-85 11.5,-85 11.5,-55 191.5,-55 191.5,-85\"/>\n<text text-anchor=\"start\" x=\"19.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-44.75C101.5,-35.72 101.5,-26.03 101.5,-19.27\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-44.84 101.5,-54.84 105,-44.84 98,-44.84\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"138.5,-140 64.5,-140 64.5,-121 138.5,-121 138.5,-140\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-110.65C101.5,-102.36 101.5,-92.78 101.5,-85.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-110.87 101.5,-120.87 105,-110.87 98,-110.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.dto.mapper.UserMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n        subgraph cluster_1 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                UserMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_2 {\n        label=\"domain\"\n        color=\"#33363A\"\n        User\n    }\n    UserDto -> UserMapper \n    User -> UserMapper \n    UserMapper -> User \n}\n",
        "items": [
          {
            "id": "e0455584-1354-ccaf-c24d-e58e55619c1e",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for a user domain object.",
            "name": "UserMapper",
            "code": "@Mapper\npublic interface UserMapper {\n  User userDtoToUser(UserDto userDto);\n\n  UserDto userToUserDto(User user);\n}",
            "location": {
              "start": 26,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 6,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserRepository.java",
    "path": "user-service/src/main/java/com/prathab/userservice/repositories/UserRepository.java",
    "content": {
      "structured": {
        "description": "A UserRepository interface that extends Spring Data's CrudRepository interface. It provides a method to find a user by their email address. The method is named `findByEmail()` and takes a `String` parameter representing the email address of the user to be found.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.domain.User Pages: 1 -->\n<svg width=\"211pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 211.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.prathab.userservice.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"203,-19 0,-19 0,0 203,0 203,-19\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1userservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"191.5,-85 11.5,-85 11.5,-55 191.5,-55 191.5,-85\"/>\n<text text-anchor=\"start\" x=\"19.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.domain.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-44.75C101.5,-35.72 101.5,-26.03 101.5,-19.27\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-44.84 101.5,-54.84 105,-44.84 98,-44.84\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"138.5,-140 64.5,-140 64.5,-121 138.5,-121 138.5,-140\"/>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-110.65C101.5,-102.36 101.5,-92.78 101.5,-85.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-110.87 101.5,-120.87 105,-110.87 98,-110.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.repositories.UserRepository\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        User\n    }\n    subgraph cluster_1 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            UserRepository [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    UserRepository -> User \n}\n",
        "items": [
          {
            "id": "92b81325-bf8d-8889-0248-a5820aa9f210",
            "ancestors": [],
            "type": "function",
            "description": "extends Spring Data's CrudRepository interface and provides a method to find a user by their email address.",
            "name": "UserRepository",
            "code": "@Repository\npublic interface UserRepository extends CrudRepository<User, Long> {\n  User findByEmail(String email);\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 4,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AppUserDetailsService.java",
    "path": "user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java",
    "content": {
      "structured": {
        "description": "An `AppUserDetailsService` class that implements the `UserDetailsService` interface in Spring Security. The service provides functionality for loading a user by their username and mapping the resulting user details to a `UserDto` object using a mapper. The code uses dependency injection to inject a `UserRepository` and a `UserMapper`, which are used to retrieve and map user data from the database.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.security.AppUserDetailsService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"security\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    AppUserDetailsService -> UserDto \n}\n",
        "items": [
          {
            "id": "1ca7d72e-8705-8095-954b-21638e97c348",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the `UserDetailsService` interface in Spring Security. It provides methods for loading user details by their username and mapping them to a `UserDto` object using a mapper. The service uses a `UserRepository` to retrieve user objects from the database based on the provided username, and then maps those objects to `UserDto` objects using a `UserMapper`.",
            "name": "AppUserDetailsService",
            "code": "@Service\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  public AppUserDetailsService(UserRepository userRepository,\n      UserMapper userMapper) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n  }\n\n  /**\n   * loads a user by their username and returns a `UserDetails` object containing the\n   * user's email, encrypted password, and other authentication-related information.\n   * \n   * @param username username for which the user details are to be loaded.\n   * \n   * @returns a `UserDetails` object containing the user's email, encrypted password,\n   * and other security-related information.\n   * \n   * \t- `email`: The email address of the user.\n   * \t- `encryptedPassword`: The encrypted password for the user.\n   * \t- `isAdmin`: A boolean indicating whether the user is an administrator or not.\n   * \t- `isEnabled`: A boolean indicating whether the user is enabled or not.\n   * \t- `isAccountNonExpired`: A boolean indicating whether the user's account is\n   * non-expired or not.\n   * \t- `isAccountNonLocked`: A boolean indicating whether the user's account is\n   * non-locked or not.\n   * \t- `groups`: An empty list, as there are no groups associated with this function.\n   */\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  /**\n   * retrieves a user's details by their username and maps them to a `UserDto` object\n   * using a mapper.\n   * \n   * @param username username for which the user details are to be retrieved.\n   * \n   * @returns a `UserDto` object containing the details of the user found in the database.\n   * \n   * \t- `user`: The user object retrieved from the database using the provided username.\n   * \t- `userMapper`: A mapper responsible for transforming the user object into a `UserDto`.\n   * \n   * The function returns a `UserDto`, which contains the following attributes:\n   * \n   * \t- `id`: The unique identifier of the user.\n   * \t- `username`: The username associated with the user.\n   * \t- `email`: The email address of the user.\n   * \t- `name`: The full name of the user.\n   * \t- `role`: The role assigned to the user.\n   */\n  public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}",
            "location": {
              "start": 32,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 74,
            "docLength": 3
          },
          {
            "id": "a587e2a9-317d-0680-8a47-f3c8c0754059",
            "ancestors": [
              "1ca7d72e-8705-8095-954b-21638e97c348"
            ],
            "type": "function",
            "description": "loads a user by their username and returns a `UserDetails` object representing the user's details.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "User",
              "description": "a `UserDetails` object containing email, encrypted password, and other properties.\n\n* `user`: A `User` object representing the user found in the database.\n* `email`: The email address of the user.\n* `encryptedPassword`: The encrypted password for the user.\n* `isAdmin`: Whether the user is an administrator or not.\n* `isActive`: Whether the user is active or not.\n* `isLocked`: Whether the user's account is locked or not.\n* `groups`: An empty list, as there are no groups associated with this function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n  var user = userRepository.findByEmail(username);\n  if (user == null) {\n    throw new UsernameNotFoundException(username);\n  }\n  return new User(user.getEmail(),\n          user.getEncryptedPassword(),\n          true,\n          true,\n          true,\n          true,\n          Collections.emptyList());\n}\n",
              "description": "\nThis example demonstrates the usage of the method by first looking up a user in the database using the given email address using `userRepository.findByEmail(username)`. If the user is not found, it throws a `UsernameNotFoundException`. Else, it creates a new instance of the `User` class and populates its attributes with the information retrieved from the database."
            },
            "name": "loadUserByUsername",
            "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }",
            "location": {
              "start": 62,
              "insert": 43,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 42,
                "end": 61
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 19
          },
          {
            "id": "145fc66c-127c-4d98-6547-9ca664c3a91f",
            "ancestors": [
              "1ca7d72e-8705-8095-954b-21638e97c348"
            ],
            "type": "function",
            "description": "retrieves a user's details by their username and maps them to a `UserDto` object using a mapper.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the details of the user with the provided username.\n\n* The `var user = userRepository.findByEmail(username)` line retrieves a `User` object from the repository based on the provided `username`.\n* If the `user` object is null, a `UsernameNotFoundException` is thrown.\n* The `userMapper.userToUserDto(user)` line maps the retrieved `User` object to a `UserDto` object, which is the output of the function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    UserDto user = new AppUserDetailsService().getUserDetailsByUsername(\"johndoe\");\n}\n",
              "description": ""
            },
            "name": "getUserDetailsByUsername",
            "code": "public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }",
            "location": {
              "start": 98,
              "insert": 79,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 78,
                "end": 97
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationFilter.java",
    "path": "user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java",
    "content": {
      "structured": {
        "description": "An authentication manager that handles user authentication through a RESTful web service. It uses Spring Security to authenticate users based on their email and password, and once successful, it creates and adds a token to the HTTP response headers containing the user ID and expiration date. The token is generated using JWT (JSON Web Tokens) library, and the response object has several properties and attributes that are used to add custom headers to the response with the authenticated user's details as a principal object.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.security.AuthenticationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        AuthenticationFilter [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity\n    WebSecurity -> AuthenticationFilter \n}\n",
        "items": [
          {
            "id": "4257c191-18ba-2a86-9247-6773272df1d4",
            "ancestors": [],
            "type": "function",
            "description": "in Spring Security is used to handle authentication requests and add a token to the HTTP response headers containing the user ID and expiration date. The successfulAuthentication method is called after authentication is successful, and it adds a token to the response headers containing the user ID and expiration date. The token is created using JWT and the secret key specified in the environment properties.",
            "name": "AuthenticationFilter",
            "code": "public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  /**\n   * attempts to authenticate a user by reading input from the request stream, creating\n   * an authentication token with the user's email and password, and passing it to the\n   * `authenticate` method of the `getAuthenticationManager()` instance.\n   * \n   * @param request HTTP request containing the login credentials of the user attempting\n   * authentication.\n   * \n   * The `HttpServletRequest request` contains the following attributes:\n   * \n   * \t- `InputStream inputStream`: The input stream for reading the JSON data from the\n   * request body.\n   * \t- `String method`: The HTTP method (e.g., GET, POST, PUT, DELETE) in the request.\n   * \t- `String protocol`: The protocol (e.g., HTTP/1.1, HTTP/2) in the request.\n   * \t- `Integer statusCode`: The HTTP status code (e.g., 200, 404) in the response.\n   * \t- `String url`: The URL of the request (including the path and query string).\n   * \t- `Map<String, Object> attributes`: A map of key-value pairs representing the\n   * request's attributes (e.g., user agent, accept language, etc.).\n   * \n   * @param response HTTP response object that is being used to handle the authentication\n   * request.\n   * \n   * \t- `getInputStream()`: This method returns the input stream of the HTTP request,\n   * which contains the login credentials in JSON format.\n   * \t- `getEmail()`: This method retrieves the email address of the user from the JSON\n   * body of the request.\n   * \t- `getPassword()`: This method retrieves the password of the user from the JSON\n   * body of the request.\n   * \t- `Collections.emptyList()`: This is an empty list, which is used as the\n   * authentication token's credentials.\n   * \n   * @returns an AuthenticationManager that authenticates a user using their email and\n   * password.\n   * \n   * \t- The AuthenticationException is thrown in case of any error during authentication.\n   * \t- The `IOException` is caught and transformed into a `RuntimeException` to handle\n   * any input/output errors.\n   * \t- The `getEmail()` and `getPassword()` methods are called on the `LoginUserRequest`\n   * object to retrieve the email address and password, respectively.\n   * \t- The `authenticate()` method of the `AuthenticationManager` class is called with\n   * a `UsernamePasswordAuthenticationToken` object containing the email address and password.\n   */\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  /**\n   * processes an authenticated request by creating and adding a token to the HTTP\n   * response headers, containing the user ID and expiration date.\n   * \n   * @param request HTTP request that triggered the authentication process.\n   * \n   * \t- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`\n   * class, which contains information about the HTTP request made by the client to the\n   * server. The request includes attributes such as the request method (e.g., GET,\n   * POST, PUT, DELETE), the request URL, the request headers, and the request body (if\n   * applicable).\n   * \t- `FilterChain chain`: This is an instance of the `FilterChain` class, which\n   * represents a chain of filters that are applied to the incoming request. Each filter\n   * in the chain can modify the request or produce a response.\n   * \t- `Authentication authResult`: This is an instance of the `Authentication` class,\n   * which encapsulates the result of authentication processing. The result includes\n   * the authenticated user principal (e.g., username) and any additional information\n   * about the user.\n   * \n   * @param response response object to which the authentication result is added with\n   * new headers containing the token and user ID.\n   * \n   * \t- `HttpServletRequest request`: The HTTP request that triggered the authentication\n   * process.\n   * \t- `HttpServletResponse response`: The HTTP response to which the authentication\n   * result is sent.\n   * \t- `FilterChain chain`: The chain of filters that led to this authentication\n   * function being called.\n   * \t- `Authentication authResult`: The authentication result obtained from the\n   * authentication process.\n   * \n   * The `response` object has several properties and attributes, including:\n   * \n   * \t- `addHeader()` method: Adds a custom header to the response with the given name\n   * and value.\n   * \t- `getHeader()` method: Returns the value of a custom header in the response with\n   * the given name.\n   * \t- `addHeader()` method (again): Adds multiple custom headers to the response at\n   * once.\n   * \t- `setHeader()` method: Sets a custom header in the response with the given name\n   * and value.\n   * \t- `getAllHeaders()` method: Returns a list of all custom headers in the response.\n   * \t- `getStatus()` method: Returns the HTTP status code of the response.\n   * \t- `setStatus()` method: Sets the HTTP status code of the response.\n   * \t- `getWriter()` method: Returns the writer object used for writing the response\n   * output.\n   * \n   * @param chain chain of filters that should be executed after successful authentication,\n   * and is passed through to the next filter in the chain.\n   * \n   * \t- `FilterChain`: This is an instance of the `FilterChain` interface, which\n   * represents a chain of filters that can be applied to a HTTP request. The `FilterChain`\n   * object contains a list of filters, each of which can modify the request in some\n   * way before it reaches the next filter or the servant.\n   * \t- `chain`: This is the original filter chain that was passed to the function as\n   * an argument. It represents the sequence of filters that were applied to the request\n   * before it reached the servant.\n   * \n   * @param authResult result of the authentication process, providing the authenticated\n   * user's details as a principal object.\n   * \n   * \t- `HttpServletRequest request`: The HTTP request that triggered the authentication\n   * process.\n   * \t- `HttpServletResponse response`: The HTTP response generated by the authentication\n   * process.\n   * \t- `FilterChain chain`: The chain of filters that led to this point in the\n   * authentication process.\n   * \t- `Authentication authResult`: The result of the authentication process, containing\n   * information about the authenticated user.\n   * \n   * The `authResult` object contains a principal attribute, which is a `User`,\n   * representing the authenticated user. Additionally, it may contain other attributes\n   * such as the reason for the authentication failure (if applicable) and any additional\n   * information that was used during the authentication process.\n   */\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}",
            "location": {
              "start": 42,
              "insert": 38,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 37,
                "end": 41
              }
            },
            "item_type": "class",
            "length": 163,
            "docLength": 4
          },
          {
            "id": "4457e054-ecda-65a9-f540-c606402fe8a8",
            "ancestors": [
              "4257c191-18ba-2a86-9247-6773272df1d4"
            ],
            "type": "function",
            "description": "authenticates a user based on their email and password by using an `AuthenticationManager`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that triggered the authentication attempt.\n\n* `getInputStream()` returns the input stream of the incoming HTTP request.\n* `getEmail()` returns the email address of the user in the login request.\n* `getPassword()` returns the password of the user in the login request.\n* `getAuthenticationManager()` returns an instance of the authentication manager for managing user authentications.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "response object that is being handled by the `attemptAuthentication()` method.\n\n* `getInputStream()`: returns the input stream of the HTTP request.\n* `getHttpRequest()`: returns the original HTTP request.\n* `getResponse()`: returns the response object for the current request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AuthenticationException",
              "description": "an AuthenticationManager that authenticates a user using their email and password.\n\n* The `AuthenticationException` that is thrown if there is an issue with the authentication process.\n* The `UsernamePasswordAuthenticationToken` object representing the user's credentials.\n\t+ The `email` field contains the user's email address.\n\t+ The `password` field contains the user's password.\n\t+ The `authorities` field is a list of authorities that the user is authorized to act on behalf of.\n* The `getAuthenticationManager()` method call, which retrieves an instance of the `AuthenticationManager` interface.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        LoginUserRequest loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n",
              "description": "\nIn this example, the method attemptAuthentication is called with two arguments request and response. The first argument request is an instance of HttpServletRequest, and the second argument response is an instance of HttpServletResponse.\n\nThe method reads a LoginUserRequest object from the input stream of the request object using an ObjectMapper. The method then gets the AuthenticationManager using getAuthenticationManager() method, creates an instance of UsernamePasswordAuthenticationToken by passing the email and password properties of the LoginUserRequest object as arguments to the constructor. The method then authenticates this token by getting the AuthenticationManager using the getAuthenticationManager() method and then authenticating the UsernamePasswordAuthenticationToken instance by calling the authenticate() method on it with the username, password and empty list arguments.\n\nThe method then throws a RuntimeException if any exception is encountered during this process."
            },
            "name": "attemptAuthentication",
            "code": "@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }",
            "location": {
              "start": 98,
              "insert": 56,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 55,
                "end": 97
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 42
          },
          {
            "id": "0b2bb3c5-baf7-dc9f-b245-8e8d57cea896",
            "ancestors": [
              "4257c191-18ba-2a86-9247-6773272df1d4"
            ],
            "type": "function",
            "description": "handles successful authentication and generates a token based on the user's username, expiration time, and secret key. It then adds the token and user ID to the HTTP response headers.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object containing information about the client's request, such as the URL, method, and headers.\n\n* `HttpServletRequest request`: This object contains information about the HTTP request, such as the method, URL, headers, and parameters.\n* `HttpServletResponse response`: This object contains information about the HTTP response, such as the status code, headers, and content.\n* `FilterChain chain`: This represents the chain of filters that are applied to the request before it reaches the handling method.\n* `Authentication authResult`: This object represents the result of the authentication process, including the authenticated user's identity and any additional information.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "response object to which the authentication result and token will be added as headers.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered the filter chain.\n* `HttpServletResponse response`: The outgoing HTTP response that will be sent to the client.\n* `FilterChain chain`: The chain of filters that have been applied to the request so far.\n* `Authentication authResult`: The result of the authentication attempt, containing the authenticated user as principal.\n\nThe function then performs the following operations:\n\n* Retrieves the username of the authenticated user from the `authResult` object.\n* Calls the `appUserDetailsService` to retrieve the user details for the retrieved username.\n* Creates a JWT token using the `Jwts` class, setting the subject and expiration time based on environment properties.\n* Signs the token with the specified algorithm using the `signWith` method.\n* Adds the token and user ID to the response headers.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "filter chain that the authentication request is part of, and allows the function to access the subsequent filters in the chain.\n\n* `HttpServletRequest request`: The incoming HTTP request from the client.\n* `HttpServletResponse response`: The outgoing HTTP response to be sent back to the client.\n* `FilterChain chain`: A filter chain that represents a series of filters that can be applied to the incoming request.\n* `Authentication authResult`: The result of the authentication process, which contains information about the authenticated user.",
                "complex_type": true
              },
              {
                "name": "authResult",
                "type_name": "Authentication",
                "description": "result of the authentication process, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: The HTTP request that triggered this filter chain execution.\n* `HttpServletResponse response`: The HTTP response generated by this filter chain execution.\n* `FilterChain chain`: The next stage in the filter chain processing.\n* `Authentication authResult`: The result of the authentication process, containing information about the authenticated user.\n\nThe properties of `authResult` include:\n\n* `getPrincipal()`: Returns the authenticated user object, which is a `User` instance in this case.\n* `getUserId()`: Returns the unique identifier of the authenticated user.\n\nThe `Jwts` class is used to generate and sign a JSON Web Token (JWT) containing the authenticated user's ID. The token is then added as an HTTP header in the response, along with the user ID.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) {\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n    \n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n    \n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n}\n",
              "description": "\nThe method takes in a HttpServletRequest object as the first input, and a HttpServletResponse object as its second input. It also takes in an Authentication object as its fourth input, which represents the result of the authentication process that has been successful. The method then extracts information from these inputs to create a token that will be added to the response header. The response headers include the user's ID and the generated token."
            },
            "name": "successfulAuthentication",
            "code": "@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }",
            "location": {
              "start": 187,
              "insert": 112,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 111,
                "end": 186
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 75
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A custom WebSecurity configuration for a Spring Security system. It disables CSRF protection and authorizes requests based on a specific IP address, and also disables frame options. The code creates an instance of AuthenticationFilter, configures it with various parameters, and returns the filter object. Additionally, it specifies the user details service and password encoder for an authentication manager builder, enabling customized authentication settings.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n",
        "items": [
          {
            "id": "56c90ff6-d30f-08b5-d34d-c7b9e46e01a5",
            "ancestors": [],
            "type": "function",
            "description": "is configured to disable CSRF protection and authorize requests based on the value of a specific property in the environment. It also disables frame options and adds an authentication filter to the configuration. The authentication filter is created using the `getAuthenticationFilter()` method and its `filterProcessesUrl` property is set to a specific path. Additionally, the `configure()` method of the class enables customized authentication settings by specifying the user details service and password encoder for the authentication manager builder.",
            "name": "WebSecurity",
            "code": "@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * disables CSRF protection and authorizes requests based on the value of\n   * `environment.getProperty(\"gateway.ip\")`. It also disables frame options.\n   * \n   * @param http HttpSecurity instance that is being configured.\n   * \n   * 1/ `csrf().disable()`: Disables Cross-Site Request Forgery (CSRF) protection for\n   * this configuration.\n   * 2/ `authorizeRequests().antMatchers(\"/**\")`: Enumerates all requests to any path\n   * in the application, including subpaths, and authorizes them based on the value of\n   * the `environment.getProperty(\"gateway.ip\")` property.\n   * 3/ `hasIpAddress(environment.getProperty(\"gateway.ip\"))`: Filters incoming requests\n   * based on the IP address specified in the `environment.getProperty(\"gateway.ip\")`\n   * property.\n   * 4/ `and()`: Used to chain multiple authorizations together.\n   * 5/ `addFilter(getAuthenticationFilter())`: Adds an authentication filter to the\n   * configuration. The filter can be accessed through the `getAuthenticationFilter()`\n   * method.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  /**\n   * creates an instance of `AuthenticationFilter`, configures it with various parameters,\n   * and returns the filter object.\n   * \n   * @returns an instance of `AuthenticationFilter`, which is a custom filter for\n   * authentication purposes.\n   * \n   * \t- `var authFilter`: This is an instance of the `AuthenticationFilter` class.\n   * \t- `objectMapper`: A reference to an `ObjectMapper` object, which is used to convert\n   * Java objects into and out of JSON format.\n   * \t- `appUserDetailsService`: A reference to an `AppUserDetailsService` object, which\n   * provides user details for authentication purposes.\n   * \t- `environment`: A reference to an `Environment` object, which contains configuration\n   * properties for the application.\n   * \t- `authenticationManager(): A reference to an `AuthenticationManager` object,\n   * which manages the authentication process for the application.\n   * \t- `setFilterProcessesUrl(String url)`: This method sets the `url` property of the\n   * `filterProcesses` attribute of the `AuthenticationFilter` instance.\n   */\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  /**\n   * specifies the user details service and password encoder for an authentication\n   * manager builder, enabling customized authentication settings.\n   * \n   * @param auth AuthenticationManagerBuilder instance, which is used to configure the\n   * builder with various authentication-related settings.\n   * \n   * \t- `userDetailsService`: It represents a service that manages user details for\n   * authentication purposes.\n   * \t- `passwordEncoder`: It encodes passwords for secure storage and retrieval during\n   * authentication.\n   */\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}",
            "location": {
              "start": 32,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 27,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 90,
            "docLength": 4
          },
          {
            "id": "b4e95a49-53d8-4bb7-2f4d-ffd1a2befb21",
            "ancestors": [
              "56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"
            ],
            "type": "function",
            "description": "disables CSRF protection, authorizes requests based on the IP address of the gateway server, and disables frame options.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "HTTP security context and provides methods for configuring various security features, such as disabling CSRF protection and authorizing requests based on IP addresses.\n\n* `csrf().disable()` disables Cross-Site Request Forgery (CSRF) protection for all requests.\n* `authorizeRequests()` specifies which request patterns are authorized and allowed to pass through, using the `hasIpAddress()` filter to restrict access based on the IP address of the requesting client.\n* `addFilter(getAuthenticationFilter());` adds an authentication filter to the pipeline for further authentication processing.\n* `headers().frameOptions().disable()` disables the Frame Options security feature that helps prevent clickjacking attacks.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n}\n",
              "description": "\nThis code would disable CSRF protection and only allow requests from the gateway ip address, then it would add an authentication filter to the configuration."
            },
            "name": "configure",
            "code": "@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }",
            "location": {
              "start": 69,
              "insert": 50,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 49,
                "end": 68
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 19
          },
          {
            "id": "81cb5ebb-07d1-f79b-794a-ce68075a5ced",
            "ancestors": [
              "56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"
            ],
            "type": "function",
            "description": "creates and returns an instance of the `AuthenticationFilter` class, which is used to filter incoming HTTP requests based on authentication requirements.",
            "params": [],
            "returns": {
              "type_name": "AuthenticationFilter",
              "description": "an instance of `AuthenticationFilter` configured with various properties and services for authentication management.\n\n* `objectMapper`: A reference to an object mapper instance used for serializing and deserializing objects.\n* `appUserDetailsService`: A reference to an app user details service used for retrieving user details.\n* `environment`: A reference to an environment instance used for storing configuration properties.\n* `authenticationManager`: A reference to an authentication manager instance used for managing authentication processes.\n* `filterProcessesUrl`: The URL path of the login page, which is set using the `setFilterProcessesUrl()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate WebSecurityConfigurerAdapter webSecurityConfigurerAdapter;\n\n@Bean\npublic FilterRegistrationBean authenticationFilter() throws Exception {\n    var filterRegistration = new FilterRegistrationBean();\n    filterRegistration.setFilter(webSecurityConfigurerAdapter.getAuthenticationFilter());\n    filterRegistration.addUrlPatterns(\"/*\");\n    return filterRegistration;\n}\n",
              "description": "\nThis code snippet creates a `FilterRegistrationBean` instance and sets the `filter` property to the result of invoking the `getAuthenticationFilter()` method on an instance of `WebSecurityConfigurerAdapter`. The `addUrlPatterns()` method is then used to specify that all requests should be filtered by this filter."
            },
            "name": "getAuthenticationFilter",
            "code": "private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }",
            "location": {
              "start": 99,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 98
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 19
          },
          {
            "id": "5d1ab520-bb84-a1ac-7849-ea2c70b0ec94",
            "ancestors": [
              "56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"
            ],
            "type": "function",
            "description": "sets up authentication-related configuration for a builder object, including specifying a user details service and password encoder.",
            "params": [
              {
                "name": "auth",
                "type_name": "AuthenticationManagerBuilder",
                "description": "AuthenticationManagerBuilder, which is being configured by setting the user details service and password encoder.\n\nThe `AuthenticationManagerBuilder` object is provided as an argument to the method, which enables customization of the authentication process.\n\nThe `userDetailsService` property sets the implementation of the UserDetailsService interface, which provides a way to retrieve user details for authentication purposes.\n\nThe `passwordEncoder` property sets the implementation of the PasswordEncoder interface, which is responsible for encoding and decoding passwords securely.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n}\n",
              "description": "\nIn this example, the `configure` method is overridden from its superclass and takes in a single parameter called `auth`, which is an instance of `AuthenticationManagerBuilder`. This method is used to configure the builder with various authentication-related settings. In this case, it sets the user details service and password encoder for the authentication manager builder, enabling customized authentication settings."
            },
            "name": "configure",
            "code": "@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }",
            "location": {
              "start": 118,
              "insert": 106,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 105,
                "end": 117
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 12
          }
        ]
      }
    }
  },
  {
    "name": "UserService.java",
    "path": "user-service/src/main/java/com/prathab/userservice/services/UserService.java",
    "content": {
      "structured": {
        "description": "An interface `UserService` that provides a method `createUser(UserDto request)` for creating a new user in the service layer.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.services.UserService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            UserService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    UserService -> UserDto \n    UserDto -> UserService \n}\n",
        "items": [
          {
            "id": "c7d0f750-f763-1494-3e44-aa5940f4e95a",
            "ancestors": [],
            "type": "function",
            "description": "defines a method for creating a user represented as a UserDto object.",
            "name": "UserService",
            "code": "public interface UserService {\n  UserDto createUser(UserDto request);\n}",
            "location": {
              "start": 24,
              "insert": 21,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 20,
                "end": 23
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserSDJpaService.java",
    "path": "user-service/src/main/java/com/prathab/userservice/services/springdatajpa/UserSDJpaService.java",
    "content": {
      "structured": {
        "description": "A `UserSDJpaService` class that implements the `UserService` interface using Spring Data JPA repository. It generates a unique user ID, encrypts the user password, and creates the user in a repository. The code also maps the created user back to a `UserDto` object for return.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.services.springdatajpa.UserSDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                UserSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_2 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    UserSDJpaService -> UserDto \n    UserDto -> UserSDJpaService \n}\n",
        "items": [
          {
            "id": "1b7374e0-131a-48b2-0147-894e20cfd0a8",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling user creation and management in a Java-based application. It provides methods for creating a new user, encrypting their password, and generating a unique ID for the user. The service also maps between the user DTO and entity, saving the user to the repository after encryption.",
            "name": "UserSDJpaService",
            "code": "@Service\n@Slf4j\npublic class UserSDJpaService implements UserService {\n\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n  private final PasswordEncoder passwordEncoder;\n\n  public UserSDJpaService(UserRepository userRepository,\n      UserMapper userMapper,\n      PasswordEncoder passwordEncoder) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * generates a unique user ID, encrypts the user password, and creates the user in a\n   * repository.\n   * \n   * @param request user data to be created, including its unique ID and encrypted\n   * password, which are generated and stored in the function.\n   * \n   * \t- `generateUniqueUserId`: generates a unique user ID for the created user\n   * \t- `encryptUserPassword`: encrypts the user password before storing it in the repository\n   * \t- `createUserInRepository`: creates a new user object in the repository, using\n   * the decrypted password and other attributes from `request`\n   * \n   * @returns a new UserDto object containing the created user's details.\n   * \n   * \t- The `generateUniqueUserId` method generates a unique identifier for the user,\n   * which is then passed to the `encryptUserPassword` method for encryption.\n   * \t- The `encryptUserPassword` method encrypts the user's password using a secret key.\n   * \t- The `createUserInRepository` method creates a new user object in the repository,\n   * which stores the encrypted password and other relevant information.\n   */\n  @Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }\n\n  /**\n   * converts a `UserDto` object into a `User` entity, saves it to the repository, and\n   * maps it back to a `UserDto` object for return.\n   * \n   * @param request UserDto object containing the details of the user to be created and\n   * saved in the repository.\n   * \n   * \t- `userMapper`: This is an instance of a class that maps between the user DTO and\n   * the entity User. The mapping involves converting data from the DTO into the entity's\n   * fields and vice versa.\n   * \t- `userRepository`: This is an instance of a repository class that handles saving\n   * user entities to a database or other storage.\n   * \t- `savedUser`: This is the user entity saved in the repository after conversion\n   * from the DTO. It has an `id` field, which is automatically generated by the repository.\n   * \n   * @returns a `UserDto` object representing the saved user.\n   * \n   * \t- `var user = userMapper.userDtoToUser(request)`: This line creates a new `User`\n   * object from the provided `UserDto` object using the `userMapper` service.\n   * \t- `var savedUser = userRepository.save(user)`: This line saves the newly created\n   * `User` object to the repository, which persists the data in the underlying database.\n   * \t- `log.trace(\"saved user with id[{}] to repository\", savedUser.getId())`: This\n   * line logs a trace message indicating that the user has been saved to the repository\n   * with its ID.\n   */\n  private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }\n\n  /**\n   * encrypts a user's password using a password encoder, storing the encrypted password\n   * in the request object.\n   * \n   * @param request UserDto object that contains the user's password, which is then\n   * encrypted and returned in the `encryptedPassword` field.\n   * \n   * \t- `request.setEncryptedPassword`: sets the encrypted password to an encoded value\n   * by utilizing the `passwordEncoder`.\n   */\n  private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }\n\n  /**\n   * generates a unique user ID for a `UserDto` object using the `UUID.randomUUID()`\n   * method and assigns it to the `UserDto` object's `userId` field.\n   * \n   * @param request UserDto object that contains the user's details, and it is updated\n   * with a unique user ID generated using UUID.\n   * \n   * \t- `request`: A `UserDto` object that contains information about a user, such as\n   * their ID and other attributes.\n   */\n  private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }\n}",
            "location": {
              "start": 31,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 27,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 102,
            "docLength": 3
          },
          {
            "id": "096638ae-16d9-0690-7141-6b5d080d1c03",
            "ancestors": [
              "1b7374e0-131a-48b2-0147-894e20cfd0a8"
            ],
            "type": "function",
            "description": "1) generates a unique user ID, 2) encodes the user password, and 3) saves the user in the repository.",
            "params": [
              {
                "name": "request",
                "type_name": "UserDto",
                "description": "UserDto object containing the user's details to be created, which is processed through three actions: generating a unique user ID, encrypting the password, and creating the user in the repository.\n\n* `generateUniqueUserId`: generates a unique user ID for the new user.\n* `encryptUserPassword`: encrypts the password of the new user using a specified encryption algorithm.\n* `createUserInRepository`: creates a new user object in the repository, leveraging the provided request data.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a new UserDto object containing the created user's details.\n\n* The `generateUniqueUserId` method creates a unique identifier for the user.\n* The `encryptUserPassword` method encrypts the user's password before storing it in the repository.\n* The `createUserInRepository` method creates a new user entry in the repository, including the encrypted password.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.prathab.userservice.dto.UserDto;\n\npublic class UserServiceExample {\n  public static void main(String[] args) {\n    // Create a new user\n    UserDto request = new UserDto();\n    request.setUsername(\"johndoe\");\n    request.setEmail(\"johndoe@example.com\");\n    request.setPassword(\"password123\");\n    \n    UserService service = new UserService();\n    UserDto user = service.createUser(request);\n  }\n}\n",
              "description": "\nIn this example, a new user is created with the username \"johndoe\", email \"johndoe@example.com\", and password \"password123\". The createUser method in the UserService class is called to save the new user to the database. Once saved, the newly created user is returned as a UserDto object which can then be used to authenticate the user or retrieve data from the database."
            },
            "name": "createUser",
            "code": "@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }",
            "location": {
              "start": 67,
              "insert": 47,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 46,
                "end": 66
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 20
          },
          {
            "id": "fadb85f1-a678-20a2-824a-01a84c14fa6b",
            "ancestors": [
              "1b7374e0-131a-48b2-0147-894e20cfd0a8"
            ],
            "type": "function",
            "description": "converts a `UserDto` object into a `User` object, saves it to a repository, and returns the resulting `User` object in a `UserDto` format.",
            "params": [
              {
                "name": "request",
                "type_name": "UserDto",
                "description": "UserDto object containing the details of a new user to be saved in the repository.\n\n* `var user = userMapper.userDtoToUser(request);`: The input `request` is mapped to a `User` object using the `userMapper`. This step transforms the DTO representation of the user into a native `User` object, which can be persisted in the repository.\n* `var savedUser = userRepository.save(user);`: The `savedUser` variable represents the persistently stored `User` object in the repository. The `save()` method takes the `User` object as input and returns a `User` object that has been persisted to the repository.\n* `log.trace(\"saved user with id[{}] to repository\", savedUser.getId());`: This line logs a trace message indicating that the `User` object with ID `{}` has been persistently stored in the repository.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a UserDto object representing the saved user in the repository.\n\n* `var user = userMapper.userDtoToUser(request)`: This step transforms the `UserDto` object provided in the request into a corresponding `User` object using the `userMapper` service. The resulting `User` object contains the same data as the original `UserDto`, but with additional fields added for persistence purposes.\n* `var savedUser = userRepository.save(user)`: This step saves the transformed `User` object to the repository, creating a new instance in the database if one does not already exist. The `savedUser` variable now contains the ID of the newly created or updated user in the repository.\n* `log.trace(\"saved user with id[{}] to repository\", savedUser.getId())`: This line logs a message indicating that the user has been saved with its ID in the repository. The `log` object is used for logging purposes, and the `trace` level indicates that the message should be logged at a medium level of detail.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        UserDto user = new UserDto();\n        user.setName(\"Prathab\");\n        user.setEmail(\"prathab@mailinator.com\");\n        user.setPassword(\"password123456789\");\n \n        UserRepository repository = new UserRepository();\n        UserMapper mapper = new UserMapper();\n \n        UserDto savedUser = createUserInRepository(repository, mapper, user);\n    }\n}\n",
              "description": ""
            },
            "name": "createUserInRepository",
            "code": "private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }",
            "location": {
              "start": 98,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 72,
                "end": 97
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 25
          },
          {
            "id": "2cdfe598-1698-e282-a048-1bf63f79e05c",
            "ancestors": [
              "1b7374e0-131a-48b2-0147-894e20cfd0a8"
            ],
            "type": "function",
            "description": "encrypts a user's password by encoding it using a password encoder.",
            "params": [
              {
                "name": "request",
                "type_name": "UserDto",
                "description": "UserDto object containing the user's password to be encrypted.\n\n* `request.setEncryptedPassword()`: This line sets the `encryptedPassword` field of `request` to an encoded password value generated by the `passwordEncoder`. The `passwordEncoder` is a dependency injected object that performs encryption on passwords.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    UserDto request = new UserDto();\n    request.setPassword(\"password\");\n    new UserSDJpaService().encryptUserPassword(request);\n    System.out.println(request.getEncryptedPassword()); // Prints an encrypted password\n}\n",
              "description": ""
            },
            "name": "encryptUserPassword",
            "code": "private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }",
            "location": {
              "start": 115,
              "insert": 105,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 104,
                "end": 114
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 10
          },
          {
            "id": "b6547a17-d8b7-07b0-a046-1e481743f976",
            "ancestors": [
              "1b7374e0-131a-48b2-0147-894e20cfd0a8"
            ],
            "type": "function",
            "description": "generates a unique user ID for a `UserDto` object by utilizing the `UUID` class to produce a random UUID string and assigning it to the `UserId` field of the request object.",
            "params": [
              {
                "name": "request",
                "type_name": "UserDto",
                "description": "`UserDto` object containing the user details that require a unique ID to be generated by the `generateUniqueUserId()` function.\n\n* `request`: A `UserDto` object that contains the user's details.\n* `setUserId`: A method that sets the `userId` property of the `request` object to a unique UUID string generated using `UUID.randomUUID()`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "private void generateUniqueUserId(UserDto request) {\n    //Generate a unique user ID for the user\n    request.setUserId(UUID.randomUUID().toString());\n}\n",
              "description": ""
            },
            "name": "generateUniqueUserId",
            "code": "private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }",
            "location": {
              "start": 129,
              "insert": 119,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 118,
                "end": 128
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "UserServiceApplicationTests.java",
    "path": "user-service/src/test/java/com/prathab/userservice/UserServiceApplicationTests.java",
    "content": {
      "structured": {
        "description": "A Spring Boot test class for testing the UserService Application. The @SpringBootTest annotation indicates that it should be executed as a Spring Boot test, and the single test method, contextLoads(), verifies that the application's context is properly loaded.",
        "diagram": "digraph G {\n    label=\"com.prathab.userservice.UserServiceApplicationTests\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "6d568471-652e-2686-5c48-c2c29d371a17",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot test class for verifying the loading of the application context, enabling access to Java EE features and services.",
            "name": "UserServiceApplicationTests",
            "code": "@SpringBootTest\nclass UserServiceApplicationTests {\n\n  /**\n   * loads the application context, enabling access to Java EE features and services.\n   */\n  @Test\n  void contextLoads() {\n  }\n}",
            "location": {
              "start": 28,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 6
          },
          {
            "id": "2f71a79a-17c2-5d8f-6244-d25fbd03f2ff",
            "ancestors": [
              "6d568471-652e-2686-5c48-c2c29d371a17"
            ],
            "type": "function",
            "description": "is likely responsible for initializing or loading necessary components during application startup, ensuring a smooth user experience upon launch.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void contextLoads() {\n    // Arrange\n\n    // Act\n    SpringBootApplicationUserService userService = new SpringBootApplicationUserService();\n\n    // Assert\n    assertNotNull(userService);\n  }\n",
              "description": ""
            },
            "name": "contextLoads",
            "code": "@Test\n  void contextLoads() {\n  }",
            "location": {
              "start": 34,
              "insert": 31,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 30,
                "end": 33
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 3
          }
        ]
      }
    }
  }
]