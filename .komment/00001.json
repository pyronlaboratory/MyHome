[
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An enriched SchedulePaymentRequest class that extends the standard SchedulePaymentRequest class. The enriched class includes additional fields for admin and house member information, which are used to map to user and HouseMember objects in the payment process. The class also includes constructor methods for creating instances of the class with specific values for each field.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.request.EnrichedSchedulePaymentRequest Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.request.EnrichedSchedulePaymentRequest</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.request.</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">EnrichedSchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"164,-85 21,-85 21,-66 164,-66 164,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "924579e9-99e7-bbb3-2d4e-e3e11a8fb5c5",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of the SchedulePaymentRequest class with additional fields to provide more details about the admin and house member, allowing for easier mapping to User and HouseMember fields during payment processing.\nFields:\n\t- adminEntityId (Long): represents an entity associated with the admin account, which may be used to enrich the SchedulePaymentRequest with additional information. \n\t- adminName (String): represents the name of an administrator associated with the Schedule Payment Request. \n\t- adminEmail (String): represents the email address of an administrator associated with the payment request. \n\t- adminEncryptedPassword (String): in the EnrichedSchedulePaymentRequest class likely stores an encrypted password for an administrative user of the application, as indicated by the presence of the `adminEncryptedPassword` field in the class definition. \n\t- adminCommunityIds (Set<String>): in the EnrichedSchedulePaymentRequest class contains a set of strings representing community IDs associated with the administrative entity identified by the adminEntityId field. \n\t- memberEntityId (Long): in the EnrichedSchedulePaymentRequest class represents an identifier for a member entity associated with the payment request. \n\t- houseMemberDocumentName (String): represents the name of the document associated with the member in the household. \n\t- houseMemberName (String): in the EnrichedSchedulePaymentRequest class contains the name of a member residing in a specific house, as indicated by the houseMemberHouseID field. \n\t- houseMemberHouseID (String): represents an identifier for a specific house within which the member resides. \n\n",
            "name": "EnrichedSchedulePaymentRequest",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\npublic class EnrichedSchedulePaymentRequest extends SchedulePaymentRequest {\n  private Long adminEntityId;\n  private String adminName;\n  private String adminEmail;\n  private String adminEncryptedPassword;\n  private Set<String> adminCommunityIds;\n  private Long memberEntityId;\n  private String houseMemberDocumentName;\n  private String houseMemberName;\n  private String houseMemberHouseID;\n\n  public EnrichedSchedulePaymentRequest(String type, String description, boolean recurring,\n      BigDecimal charge, String dueDate, String adminId, Long adminEntityId, String adminName,\n      String adminEmail, String adminEncryptedPassword, Set<String> adminCommunityIds,\n      String memberId, Long memberEntityId, String houseMemberDocumentName, String houseMemberName,\n      String houseMemberHouseID) {\n\n    super.type(type).description(description).recurring(recurring).charge(charge).dueDate(dueDate).adminId(adminId).memberId(memberId);\n\n    this.adminName = adminName;\n    this.adminEmail = adminEmail;\n    this.adminEncryptedPassword = adminEncryptedPassword;\n    this.adminCommunityIds = adminCommunityIds;\n    this.adminEntityId = adminEntityId;\n    this.memberEntityId = memberEntityId;\n    this.houseMemberDocumentName = houseMemberDocumentName;\n    this.houseMemberName = houseMemberName;\n    this.houseMemberHouseID = houseMemberHouseID;\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 34
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A `ForgotPasswordRequest` class that represents a user's request for a password reset. The class has three fields: `email`, which is a required email address for password reset; `token`, which is a unique token generated by the system for the user's password reset; and `newPassword`, which is the new password chosen by the user. The class uses Lombok, a dependency injection framework, to automatically generate constructors and field getters and setters.",
        "items": [
          {
            "id": "e450c617-bcbf-f28d-5845-b5065ebbd28d",
            "ancestors": [],
            "type": "function",
            "description": "represents a data class for requesting password recovery with email address and token for verification, as well as a new password to replace the previously recovered password.\nFields:\n\t- email (String): in the ForgotPasswordRequest class is of type String and is used to store the user's email address for password reset purposes. \n\t- token (String): in the ForgotPasswordRequest class represents a unique identifier generated by the system for the user's account. \n\t- newPassword (String): in the ForgotPasswordRequest class is a String variable representing a password provided by the user for resetting their account login credentials. \n\n",
            "name": "ForgotPasswordRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class ForgotPasswordRequest {\n  @Email\n  public String email;\n  public String token;\n  public String newPassword;\n}",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A response model for Create User Request, with attributes including userId, name, and email. The classes Lombok is used for constructor injection, getter, and setter methods.",
        "items": [
          {
            "id": "cbbcd60b-047c-d38e-754f-2f0c3940a5db",
            "ancestors": [],
            "type": "function",
            "description": "represents a response model for create user request in a Java file.\nFields:\n\t- userId (String): represents a unique identifier for a user in the system. \n\t- name (String): in the CreateUserResponse class represents a string value representing the user's name. \n\t- email (String): in the CreateUserResponse class represents a string value of an email address associated with the user. \n\n",
            "name": "CreateUserResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateUserResponse {\n  private String userId;\n  private String name;\n  private String email;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class `HouseDetailResponse` that contains a single instance field `house` of type `CommunityHouseDto`. The class uses Lombok annotations for constructor inference and data abstraction. The `CommunityHouseDto` class is not explicitly defined in the code snippet provided, but it likely contains information about a house or community. The `HouseDetailResponse` class is likely used to return detailed information about a specific house or community to a client or user.",
        "items": [
          {
            "id": "a75db931-fae7-14a7-674d-28f181ca7a3a",
            "ancestors": [],
            "type": "function",
            "description": "is an object that contains a CommunityHouseDto instance, representing a detailed response for a house detail request.\nFields:\n\t- house (CommunityHouseDto): in the HouseDetailResponse class represents an instance of the CommunityHouseDto data transfer object (DTO) containing details of a specific house. \n\n",
            "name": "HouseDetailResponse",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class HouseDetailResponse {\n  private CommunityHouseDto house;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/SchedulePaymentResponse.java",
    "content": {
      "structured": {
        "description": "A `SchedulePaymentResponse` class with various attributes and constructors. The class appears to be part of a payment processing system, as it includes fields for payment ID, charge amount, payment type, description, recurring payments, due date, and member and admin IDs. The class uses Lombok, an automated programming tool, which helps generate getters and setters, as well as other utility methods.",
        "items": [
          {
            "id": "8bfb7923-8f29-7bba-0849-f167911eb85e",
            "ancestors": [],
            "type": "function",
            "description": "represents a response related to a payment, containing various information such as payment ID, charge amount, and due date.\nFields:\n\t- paymentId (String): represents a unique identifier for a scheduled payment. \n\t- charge (BigDecimal): in the SchedulePaymentResponse class represents a monetary value. \n\t- type (String): represents the category or label of the payment being scheduled. \n\t- description (String): represents a string value that provides additional information about the payment, which may include a brief explanation of the charge or the purpose of the payment. \n\t- recurring (boolean): in the `SchedulePaymentResponse` class indicates whether the payment is recurring or not. \n\t- dueDate (String): represents the date on which a payment is due to be made, according to the SchedulePaymentResponse class definition in Java. \n\t- adminId (String): represents an identifier for an administrator who manages payments scheduled by the member associated with the paymentId. \n\t- memberId (String): in the SchedulePaymentResponse class represents an identifier for a specific member associated with the payment. \n\n",
            "name": "SchedulePaymentResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class SchedulePaymentResponse {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private String adminId;\n  private String memberId;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "Amenity.java",
    "path": "service/src/main/java/com/myhome/domain/Amenity.java",
    "content": {
      "structured": {
        "description": "An entity called Amenity, which represents a particular amenity available in a community. The class has several attributes, including a unique identifier (amenityId), name, description, price, and a reference to a Community and CommunityHouse. Additionally, there is a many-to-one relationship with the BookingItems entity set.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "3256ccb5-5792-0caa-eb4b-bf427c169fe6",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity with unique identifier, name, description, price, and community associations, as well as a many-to-one relationship with BookingItems entities.\nFields:\n\t- amenityId (String): represents a unique identifier for each amenity instance. \n\t- name (String): in the Amenity class represents a unique identifier for each amenity instance. \n\t- description (String): in the Amenity class represents a brief summary of an amenity's characteristics or features. \n\t- price (BigDecimal): represents a monetary value associated with an amenity. \n\t- community (Community): represents an association between an amenity and a community or community house. \n\t- communityHouse (CommunityHouse): of the Amenity class represents a reference to a CommunityHouse entity. \n\t- bookingItems (Set<AmenityBookingItem>): of the Amenity class represents a set of objects related to bookings for the amenity. \n\n",
            "name": "Amenity",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Amenity.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Amenity.bookingItems\",\n        attributeNodes = {\n            @NamedAttributeNode(\"bookingItems\"),\n        }\n    )\n})\n\npublic class Amenity extends BaseEntity {\n  @Column(nullable = false, unique = true)\n  private String amenityId;\n  @Column(nullable = false)\n  private String name;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private BigDecimal price;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @ManyToOne\n  private CommunityHouse communityHouse;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"amenity\")\n  private Set<AmenityBookingItem> bookingItems = new HashSet<>();\n}",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 38
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItem.java",
    "path": "service/src/main/java/com/myhome/domain/AmenityBookingItem.java",
    "content": {
      "structured": {
        "description": "An entity called AmenityBookingItem, which represents a booking for an amenity. The entity has attributes such as amenity Booking item ID, amenity, booking start date, booking end date, and booking user. It also defines relationships with other entities using the `@ManyToOne` annotation. The code uses Lombok, Java Persistence API, and Apache Licenses.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.AmenityBookingItem Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.AmenityBookingItem</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-30 5.5,-30 5.5,0 173.5,0 173.5,-30\"/>\n<text text-anchor=\"start\" x=\"13.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "a6dc327e-166e-c3aa-8d4a-dad244ebba1b",
            "ancestors": [],
            "type": "function",
            "description": "represents a booking item for an amenity, containing the amenity ID, booking start and end dates, and the user who made the booking.\nFields:\n\t- amenityBookingItemId (String): in the AmenityBookingItem class represents a unique identifier for each amenity booking item, which can be used to distinguish it from other items of the same type. \n\t- amenity (Amenity): in the AmenityBookingItem entity represents an amenity or service that is being booked or used during a specific time period, along with information about the user who made the booking. \n\t- bookingStartDate (LocalDateTime): in the AmenityBookingItem class represents the date and time when the booking for an amenity began. \n\t- bookingEndDate (LocalDateTime): in the AmenityBookingItem class represents the end date of a booking for an amenity, which is represented by the amenity field. \n\t- bookingUser (User): represents the user who made the booking for the amenity item. \n\n",
            "name": "AmenityBookingItem",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@EqualsAndHashCode(callSuper = false, of = {\"amenityBookingItemId\"})\n@Getter\n@Setter\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"AmenityBookingItem.amenity\",\n        attributeNodes = {\n            @NamedAttributeNode(\"amenity\"),\n        }),\n    @NamedEntityGraph(\n        name = \"AmenityBookingItem.bookingUser\",\n        attributeNodes = {\n            @NamedAttributeNode(\"bookingUser\"),\n        })\n})\n\npublic class AmenityBookingItem extends BaseEntity {\n\n  @Column(nullable = false, unique = true)\n  private String amenityBookingItemId;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Amenity amenity;\n  @Column(nullable = false)\n  private LocalDateTime bookingStartDate;\n  @Column\n  private LocalDateTime bookingEndDate;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private User bookingUser;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 33
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationData.java",
    "path": "service/src/main/java/com/myhome/domain/AuthenticationData.java",
    "content": {
      "structured": {
        "description": "A class called AuthenticationData that consists of two instance variables: jwtToken and userId. The class uses Lombok's @Getter and @RequiredArgsConstructor annotations to automatically generate getters and constructors for these instance variables.",
        "items": [
          {
            "id": "209cae3e-6213-4587-ec4d-87cc8b980d2b",
            "ancestors": [],
            "type": "function",
            "description": "represents an object containing two attributes: JWT token and user ID, which can be used for authentication purposes.\nFields:\n\t- jwtToken (String): in the AuthenticationData class represents a unique identifier for authenticated users. \n\t- userId (String): in the AuthenticationData class represents a unique identifier for a user. \n\n",
            "name": "AuthenticationData",
            "code": "@Getter\n@RequiredArgsConstructor\npublic class AuthenticationData {\n  private final String jwtToken;\n  private final String userId;\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "service/src/main/java/com/myhome/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base class for all JPA entities, providing an automatically generated ID and implementing equality and hash code functionality. The class also implements Serializable and uses Lombok annotations for constructor injection and equivalence checking.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "7b6a09ff-5dec-81ba-7f4b-6eb20e362728",
            "ancestors": [],
            "type": "function",
            "description": "serves as a base class for all JPA Entities and provides an ID field generated by Hibernate using the Identity strategy.\nFields:\n\t- id (Long): in BaseEntity represents an auto-generated unique identifier for each instance of the class. \n\n",
            "name": "BaseEntity",
            "code": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\n@EqualsAndHashCode(callSuper = false)\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "Community.java",
    "path": "service/src/main/java/com/myhome/domain/Community.java",
    "content": {
      "structured": {
        "description": "An entity called `Community` that represents a valid user in a service. It has various attributes and relationships, including `admins`, `houses`, `amenities`, and `district`. The code also uses several high-level packages, such as `@Data`, `@EqualsAndHashCode`, `@NoArgsConstructor`, `@AllArgsConstructor`, and `@With`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "8e209064-fd37-9c9a-1f49-33ee3c37854e",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service and has attributes such as name, communityId, district, admins, houses, amenities, etc.\nFields:\n\t- admins (Set<User>): in the Community class represents a set of user accounts that have administrative privileges within the community. \n\t- houses (Set<CommunityHouse>): in the Community class represents a set of houses associated with the community. \n\t- name (String): in the Community class represents a unique identifier for a community within a specific district. \n\t- communityId (String): represents a unique identifier for a particular community. \n\t- district (String): represents the geographic area in which a community is located. \n\t- amenities (Set<Amenity>): in the Community entity represents a set of Amenity objects related to the community, where each Amenity object has a reference to the corresponding community through the mappedBy attribute. \n\n",
            "name": "Community",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"communityId\", \"name\", \"district\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Community.amenities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"amenities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.admins\",\n        attributeNodes = {\n            @NamedAttributeNode(\"admins\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.houses\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houses\"),\n        }\n    )\n})\npublic class Community extends BaseEntity {\n  @ToString.Exclude\n  @ManyToMany(fetch = FetchType.LAZY)\n  private Set<User> admins = new HashSet<>();\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<CommunityHouse> houses = new HashSet<>();\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String communityId;\n  @Column(nullable = false)\n  private String district;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"community\", orphanRemoval = true)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 43
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouse.java",
    "path": "service/src/main/java/com/myhome/domain/CommunityHouse.java",
    "content": {
      "structured": {
        "description": "An entity named \"CommunityHouse\" and its corresponding database table structure. The class has various attributes and relationships with other entities, such as \"Community\", \"HouseMembers\", and \"Amenities\". The code uses Lombok, a dependency injection framework, to automatically generate getters, setters, and other methods for the entity.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "b45a8853-ecc2-46bc-3147-4ccc93e739a3",
            "ancestors": [],
            "type": "function",
            "description": "represents a house belonging to a community with attributes for the community and house members, and relationships with amenities and HouseMember objects.\nFields:\n\t- community (Community): in the CommunityHouse class represents an association with a community entity, whose identity is stored in the @ManyToOne annotated field \"community\". \n\t- name (String): in the CommunityHouse class represents the name of a house or building associated with the community. \n\t- houseId (String): represents a unique identifier for each CommunityHouse entity in the database. \n\t- houseMembers (Set<HouseMember>): in the CommunityHouse class represents a set of entities referencing HouseMember objects, which are related to the CommunityHouse through a many-to-one relationship. \n\t- amenities (Set<Amenity>): in the CommunityHouse class represents a set of Amenity objects associated with the house, which are not necessarily exclusive to the community. \n\n",
            "name": "CommunityHouse",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@EqualsAndHashCode(of = {\"houseId\", \"name\"}, callSuper = false)\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"CommunityHouse.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"CommunityHouse.houseMembers\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houseMembers\"),\n        }\n    )\n})\npublic class CommunityHouse extends BaseEntity {\n  @With\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @With\n  @Column(nullable = false)\n  private String name;\n  @With\n  @Column(unique = true, nullable = false)\n  private String houseId;\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<HouseMember> houseMembers = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 35
          }
        ]
      }
    }
  },
  {
    "name": "HouseMember.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMember.java",
    "content": {
      "structured": {
        "description": "A `HouseMember` entity with fields for `memberId`, `name`, and `communityHouse`. The `HouseMemberDocument` field is also defined as an association between the `HouseMember` and `HouseMemberDocument` entities through a one-to-one join column. The code uses Lombok to implement the `@AllArgsConstructor`, `@NoArgsConstructor`, `@Data`, `@EqualsAndHashCode` annotations.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "5c2ab641-5498-839d-3a41-a84ff54a8964",
            "ancestors": [],
            "type": "function",
            "description": "represents a member of a house with unique identification and associated documents, name, and community house.\nFields:\n\t- memberId (String): in the HouseMember class represents a unique identifier for each member in the community. \n\t- houseMemberDocument (HouseMemberDocument): represents an association between a house member and a document related to them. \n\t- name (String): in the HouseMember class stores a string value representing the member's name. \n\t- communityHouse (CommunityHouse): in the HouseMember class represents a single association between a member and a community house. \n\n",
            "name": "HouseMember",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, exclude = \"communityHouse\")\npublic class HouseMember extends BaseEntity {\n\n  @With\n  @Column(nullable = false, unique = true)\n  private String memberId;\n\n  @OneToOne(orphanRemoval = true)\n  @JoinColumn(name = \"document_id\")\n  private HouseMemberDocument houseMemberDocument;\n\n  @With\n  @Column(nullable = false)\n  private String name;\n\n  @ManyToOne\n  private CommunityHouse communityHouse;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 22
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocument.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMemberDocument.java",
    "content": {
      "structured": {
        "description": "A class called `HouseMemberDocument` that extends the `BaseEntity` class. It has two fields: `documentFilename`, which is a unique string column, and `documentContent`, which is a binary large object (BLOB) field that contains the document's content. The class also uses Lombok annotations for constructor injection and equivalence checking.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0592f44f-3443-2b91-6548-f512930b91dc",
            "ancestors": [],
            "type": "function",
            "description": "in the given Java file defines a new entity with a unique document filename and binary data content.\nFields:\n\t- documentFilename (String): in the HouseMemberDocument class represents the filename of a document. \n\t- documentContent (byte[]): in the HouseMemberDocument class contains a byte array of unknown length. \n\n",
            "name": "HouseMemberDocument",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(of = {\"documentFilename\"}, callSuper = false)\npublic class HouseMemberDocument extends BaseEntity {\n\n  @Column(unique = true)\n  private String documentFilename;\n\n  @Lob\n  @Column\n  private byte[] documentContent = new byte[0];\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          }
        ]
      }
    }
  },
  {
    "name": "PasswordActionType.java",
    "path": "service/src/main/java/com/myhome/domain/PasswordActionType.java",
    "content": {
      "structured": {
        "description": "An enumeration called PasswordActionType that has two members: FORGOT and RESET. These members represent two possible actions related to passwords.",
        "items": []
      }
    }
  },
  {
    "name": "Payment.java",
    "path": "service/src/main/java/com/myhome/domain/Payment.java",
    "content": {
      "structured": {
        "description": "An entity called `Payment` that represents a payment made by a user to a HouseMember. The entity has attributes for payment ID, charge amount, payment type, description, recurring status, and due date, as well as relationships to an admin and member. The code also uses Lombok, Jackson, and JPA annotations to define getters and setters, and to handle persistence and database operations.",
        "items": [
          {
            "id": "6e518e7e-89ba-3589-8f4a-9b527dfec210",
            "ancestors": [],
            "description": "represents a payment made by a user to a HouseMember, with attributes for payment ID, charge amount, type, description, recurring status, and due date, along with relationships to an admin and member.\nFields:\n\t- paymentId (String): in the Payment class represents a unique identifier for each payment made by a user.\n\t- charge (BigDecimal): represents a monetary value associated with a payment made by a user or member to a service provider.\n\t- type (String): in the Payment class represents the payment's type of payment.\n\t- description (String): in the Payment class represents a brief textual description of the payment.\n\t- recurring (boolean): in the Payment entity represents whether a payment is part of a recurring series.\n\t- dueDate (LocalDate): represents the date on which a payment is due, in the format of 'yyyy-MM-dd'.\n\t- admin (User): in the Payment class represents a user who made the payment.\n\t- member (HouseMember): in the Payment class represents an association with a HouseMember entity.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents a unique identifier for each payment made by a user."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents a monetary value associated with a payment made by a user or member to a service provider."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents the payment's type of payment."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents a brief textual description of the payment."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity represents whether a payment is part of a recurring series."
              },
              {
                "name": "dueDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents the date on which a payment is due, in the format of 'yyyy-MM-dd'."
              },
              {
                "name": "admin",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents a user who made the payment."
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents an association with a HouseMember entity."
              }
            ],
            "name": "Payment",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\n@Entity\npublic class Payment extends BaseEntity {\n  @Column(unique = true, nullable = false)\n  private String paymentId;\n  @Column(nullable = false)\n  private BigDecimal charge;\n  @Column(nullable = false)\n  private String type;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private boolean recurring;\n  @JsonFormat(pattern = \"yyyy-MM-dd\")\n  private LocalDate dueDate;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private User admin;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private HouseMember member;\n}",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 34,
                "end": 55
              }
            },
            "item_type": "class",
            "length": 23
          }
        ]
      }
    }
  },
  {
    "name": "SecurityToken.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityToken.java",
    "content": {
      "structured": {
        "description": "A `SecurityToken` class that represents a security token with various attributes, including a unique identifier, creation and expiry dates, and an owner user. The class uses Lombok annotations for constructor injection and toString() functionality.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9fb794ba-4b44-96a7-6843-48b5594839ff",
            "ancestors": [],
            "type": "function",
            "description": "represents a security token with attributes such as token type, token value, creation date, expiry date, and ownership information, providing a basic structure for storing and managing security tokens in a Java application.\nFields:\n\t- tokenType (SecurityTokenType): represents an enumerated type that defines the classification of the security token, such as \"Access Token\" or \"Refund Token\". \n\t- token (String): in the SecurityToken class represents a unique identifier for a security token with an associated type, token value, creation date, expiry date, and ownership by a user. \n\t- creationDate (LocalDate): represents the date when the security token was created. \n\t- expiryDate (LocalDate): represents the date after which the SecurityToken is no longer valid or usable. \n\t- isUsed (boolean): indicates whether the SecurityToken has been used or not. \n\t- tokenOwner (User): represents a reference to a user who owns the security token. \n\n",
            "name": "SecurityToken",
            "code": "@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = {\"tokenOwner\"})\npublic class SecurityToken extends BaseEntity {\n  @Column(nullable = false)\n  @Enumerated(EnumType.STRING)\n  private SecurityTokenType tokenType;\n  @Column(nullable = false, unique = true)\n  private String token;\n  @Column(nullable = false)\n  private LocalDate creationDate;\n  @Column(nullable = false)\n  private LocalDate expiryDate;\n  private boolean isUsed;\n  @ManyToOne\n  private User tokenOwner;\n}",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenType.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityTokenType.java",
    "content": {
      "structured": {
        "description": "An enumeration class `SecurityTokenType` with two constant values: `RESET` and `EMAIL_CONFIRM`.",
        "items": []
      }
    }
  },
  {
    "name": "User.java",
    "path": "service/src/main/java/com/myhome/domain/User.java",
    "content": {
      "structured": {
        "description": "An entity class called `User` representing a valid user in a service with various relationships to other entities through many-to-many and one-to-many associations. The code includes fields for user ID, email, name, encrypted password, and communities and userTokens, which are set collections of related entities. The code also defines named entity graphs for these sets, allowing for efficient querying and manipulation of the associated entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "3f9b19bc-194c-7a9d-6248-3b36fd356b04",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in a service with various relationships to other entities through many-to-many and one-to-many associations.\nFields:\n\t- name (String): a personal name of a valid user in a service.\n\t- userId (String): a unique identifier for each user account in the system.\n\t- email (String): an email address associated with each user account in the system.\n\t- emailConfirmed (boolean): a boolean value indicating whether an email address associated with the User entity has been confirmed by the user.\n\t- encryptedPassword (String): an encrypted string value used for security purposes in the application.\n\t- communities (Set<Community>): a set of Community objects associated with each user account in the system.\n\t- userTokens (Set<SecurityToken>): a set of SecurityToken objects associated with each User entity in the system.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "a personal name of a valid user in a service."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "a unique identifier for each user account in the system."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "an email address associated with each user account in the system."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": "false",
                "constant": false,
                "class_name": "User",
                "description": "a boolean value indicating whether an email address associated with the User entity has been confirmed by the user."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "an encrypted string value used for security purposes in the application."
              },
              {
                "name": "communities",
                "type_name": "Set<Community>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "a set of Community objects associated with each user account in the system."
              },
              {
                "name": "userTokens",
                "type_name": "Set<SecurityToken>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "a set of SecurityToken objects associated with each User entity in the system."
              }
            ],
            "name": "User",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"userId\", \"email\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"User.communities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"communities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"User.userTokens\",\n        attributeNodes = {\n            @NamedAttributeNode(\"userTokens\"),\n        }\n    )\n})\npublic class User extends BaseEntity {\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String userId;\n  @Column(unique = true, nullable = false)\n  private String email;\n  @Column(nullable = false)\n  private boolean emailConfirmed = false;\n  @Column(nullable = false)\n  private String encryptedPassword;\n  @ManyToMany(mappedBy = \"admins\", fetch = FetchType.LAZY)\n  private Set<Community> communities = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = \"tokenOwner\")\n  private Set<SecurityToken> userTokens = new HashSet<>();\n}",
            "location": {
              "start": 96,
              "insert": 96,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 77,
                "end": 95
              }
            },
            "item_type": "class",
            "length": 37
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItemRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "content": {
      "structured": {
        "description": "An interface AmenityBookingItemRepository, which extends the JpaRepository interface and provides additional methods for querying amenity booking items in a database. The interface includes two methods: findByAmenityBookingItemId, which returns an optional amenity booking item based on its ID; and the other is the standard JpaRepository method findAll, which returns a list of all amenity booking items in the database.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.AmenityBookingItemRepository Pages: 1 -->\n<svg width=\"184pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 184.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.AmenityBookingItemRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"174.5,-30 1.5,-30 1.5,0 174.5,0 174.5,-30\"/>\n<text text-anchor=\"start\" x=\"9.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenityBookingItemRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"176,-96 0,-96 0,-66 176,-66 176,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; AmenityBooking</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Item, String &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88,-55.54C88,-46.96 88,-37.61 88,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.5,-55.8 88,-65.8 91.5,-55.8 84.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e8fa4648-29b2-7ea1-a849-4e5685322f2b",
            "ancestors": [],
            "type": "function",
            "description": "extends JpaRepository and provides a method for finding an Optional<AmenityBookingItem> by amenityBookingItemId.",
            "name": "AmenityBookingItemRepository",
            "code": "public interface AmenityBookingItemRepository extends JpaRepository<AmenityBookingItem, String> {\n  Optional<AmenityBookingItem> findByAmenityBookingItemId(String amenityBookingItemId);\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "AmenityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityRepository` that extends `JpaRepository`, providing CRUD operations for `Amenity` entities. The code defines several queries and methods, including:\n\n* `findByAmenityIdWithCommunity()`: Finds an `Amenity` entity by its `amenityId` and retrieves the associated community data using an entity graph.\n* `findByAmenityId()`: Finds an `Amenity` entity by its `amenityId`.\n\nThese methods utilize Spring Data JPA's query capabilities and entity graph functionality to perform database queries and retrieve relevant data.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "64aad1b1-eab4-c084-7344-acddc3db72da",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for interacting with the Amenity entity in a Spring Data JPA repository context, including findByAmenityIdWithCommunity and findByAmenityId methods.",
            "name": "AmenityRepository",
            "code": "public interface AmenityRepository extends JpaRepository<Amenity, Long> {\n\n  @Query(\"from Amenity amenity where amenity.amenityId = :amenityId\")\n  @EntityGraph(value = \"Amenity.community\")\n  Optional<Amenity> findByAmenityIdWithCommunity(@Param(\"amenityId\") String amenityId);\n\n  Optional<Amenity> findByAmenityId(String amenityId);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityHouseRepository.java",
    "content": {
      "structured": {
        "description": "A repository interface for managing `CommunityHouse` entities in a Spring Data JPA-based application. The interface provides methods for finding and manipulating `CommunityHouse` instances, including finding by `houseId`, finding with community information, and deleting by `houseId`. Additionally, the interface includes methods for paginating and sorting data when querying the repository.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "852b17a9-a4c1-d2b9-b445-624e8881f7d8",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the CommunityHouse entity in a Spring Data JPA environment, including finding and deleting individual CommunityHouses or lists of CommunityHouses based on various criteria.",
            "name": "CommunityHouseRepository",
            "code": "@Repository\npublic interface CommunityHouseRepository extends PagingAndSortingRepository<CommunityHouse, Long> {\n\n  Optional<CommunityHouse> findByHouseId(String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.community\")\n  Optional<CommunityHouse> findByHouseIdWithCommunity(@Param(\"houseId\") String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.houseMembers\")\n  Optional<CommunityHouse> findByHouseIdWithHouseMembers(@Param(\"houseId\") String houseId);\n\n  @EntityGraph(value = \"CommunityHouse.community\")\n  List<CommunityHouse> findAllByCommunity_CommunityId(String communityId, Pageable pageable);\n\n  void deleteByHouseId(String houseId);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 18
          }
        ]
      }
    }
  },
  {
    "name": "CommunityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityRepository.java",
    "content": {
      "structured": {
        "description": "A repository interface `CommunityRepository` for interacting with a `Community` entity in a Spring Data JPA environment. The interface provides various methods for querying and manipulating communities, including finding a community by ID, retrieving communities with houses, admins, or amenities, and checking if a community exists by ID. The code uses the `EntityGraph` annotation to specify the graph structure of the community entity and its relationships with other entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "82359648-e243-219b-2143-1ae4ebfbc231",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and managing communities in a Spring Data JPA repository, including finding specific communities by communityId, and checking if a community exists by communityId.",
            "name": "CommunityRepository",
            "code": "@Repository\npublic interface CommunityRepository extends PagingAndSortingRepository<Community, Long> {\n\n  Optional<Community> findByCommunityId(String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.houses\")\n  Optional<Community> findByCommunityIdWithHouses(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.admins\")\n  Optional<Community> findByCommunityIdWithAdmins(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.amenities\")\n  Optional<Community> findByCommunityIdWithAmenities(@Param(\"communityId\") String communityId);\n\n  boolean existsByCommunityId(String communityId);\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberDocumentRepository.java",
    "content": {
      "structured": {
        "description": "An interface called `HouseMemberDocumentRepository` that extends the `JpaRepository` interface from Spring Data JPA. The interface provides a way to interact with the `HouseMemberDocument` entity in a persistence context, including CRUD (create, read, update, delete) operations and other functionalities such as querying and sorting.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberDocumentRepository Pages: 1 -->\n<svg width=\"199pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 199.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberDocumentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"191,-30 0,-30 0,0 191,0 191,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberDocumentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-96 12,-96 12,-66 179,-66 179,-96\"/>\n<text text-anchor=\"start\" x=\"20\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; HouseMember</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document, Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95.5,-55.54C95.5,-46.96 95.5,-37.61 95.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"92,-55.8 95.5,-65.8 99,-55.8 92,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "89d810ba-0c22-fe8e-c041-6a75f0954e80",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of JpaRepository for storing and retrieving HouseMemberDocument entities in a Spring Data JPA environment.",
            "name": "HouseMemberDocumentRepository",
            "code": "public interface HouseMemberDocumentRepository extends JpaRepository<HouseMemberDocument, Long> {\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a HouseMemberRepository, which is a Spring Data repository for handling house members. The interface provides three methods: findByMemberId, findAllByCommunityHouse_HouseId, and findAllByCommunityHouse_Community_Admins_UserId. These methods allow for retrieving specific house members or lists of house members based on various criteria such as member ID, community house ID, and user ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberRepository Pages: 1 -->\n<svg width=\"185pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 185.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"162.5,-30 14.5,-30 14.5,0 162.5,0 162.5,-30\"/>\n<text text-anchor=\"start\" x=\"22.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"177,-96 0,-96 0,-66 177,-66 177,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CrudRepository&lt; HouseMember,</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88.5,-55.54C88.5,-46.96 88.5,-37.61 88.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85,-55.8 88.5,-65.8 92,-55.8 85,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "65189e11-bcb3-488d-e447-cbdc12646b16",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for retrieving and manipulating HouseMember objects within a Spring Data repository.",
            "name": "HouseMemberRepository",
            "code": "public interface HouseMemberRepository extends CrudRepository<HouseMember, Long> {\n  Optional<HouseMember> findByMemberId(String memberId);\n\n  List<HouseMember> findAllByCommunityHouse_HouseId(String houseId, Pageable pageable);\n\n  List<HouseMember> findAllByCommunityHouse_Community_Admins_UserId(String userId,\n      Pageable pageable);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "PaymentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/PaymentRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a PaymentRepository, which is a Spring Data JPA repository for the Payment entity. The interface provides methods for finding and deleting payments by payment ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.PaymentRepository Pages: 1 -->\n<svg width=\"156pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 156.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.PaymentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"148,-30 0,-30 0,0 148,0 148,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-96 3.5,-96 3.5,-66 144.5,-66 144.5,-96\"/>\n<text text-anchor=\"start\" x=\"11.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; Payment,</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M74,-55.54C74,-46.96 74,-37.61 74,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"70.5,-55.8 74,-65.8 77.5,-55.8 70.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "8a85d1be-be86-569b-8649-1ec6117d5881",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and deleting payments based on their IDs using Optional and void methods respectively.",
            "name": "PaymentRepository",
            "code": "public interface PaymentRepository extends JpaRepository<Payment, Long> {\n  Optional<Payment> findByPaymentId(String paymentId);\n\n  void deleteByPaymentId(String paymentId);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/SecurityTokenRepository.java",
    "content": {
      "structured": {
        "description": "An interface called SecurityTokenRepository, which extends the JpaRepository interface from Spring Data JPA. The interface defines a single method for interacting with the database to retrieve SecurityToken objects based on their ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.SecurityTokenRepository Pages: 1 -->\n<svg width=\"174pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 174.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.SecurityTokenRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"157,-30 9,-30 9,0 157,0 157,-30\"/>\n<text text-anchor=\"start\" x=\"17\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SecurityTokenRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"166,-96 0,-96 0,-66 166,-66 166,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; SecurityToken,</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M83,-55.54C83,-46.96 83,-37.61 83,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"79.5,-55.8 83,-65.8 86.5,-55.8 79.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d1bf6372-019a-8fad-dd4b-891e5d5d9232",
            "ancestors": [],
            "type": "function",
            "description": "extends JpaRepository and provides a standard way to interact with SecurityToken entities in a Spring Data JPA environment.",
            "name": "SecurityTokenRepository",
            "code": "public interface SecurityTokenRepository extends JpaRepository<SecurityToken, Long> {\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "UserRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/UserRepository.java",
    "content": {
      "structured": {
        "description": "A repository interface for managing user data in a Spring Data JPA environment. The interface includes methods for finding specific users by email or user ID, as well as methods for retrieving users with their associated communities or tokens. Additionally, there are methods for retrieving all users within a specified community or page range.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "95e5c9b5-e809-959d-6d43-fe135baf8a9b",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and manipulating data related to users in a Spring Data JPA repository context.",
            "name": "UserRepository",
            "code": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n  User findByEmail(String email);\n\n  Optional<User> findByUserId(String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.communities\")\n  Optional<User> findByUserIdWithCommunities(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByUserIdWithTokens(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.email = :email\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByEmailWithTokens(@Param(\"email\") String email);\n\n  List<User> findAllByCommunities_CommunityId(String communityId, Pageable pageable);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "AppUserDetailsService.java",
    "path": "service/src/main/java/com/myhome/security/AppUserDetailsService.java",
    "content": {
      "structured": {
        "description": "An custom implementation of Spring Security's `UserDetailsService`, which cater to the need of service logic. The class has a constructor that takes a `UserRepository` and a `UserMapper` as dependencies. The `loadUserByUsername()` method is responsible for loading a user by their username, and it throws a `UsernameNotFoundException` if the user is not found. The `getUserDetailsByUsername()` method maps the user from the domain to the DTO level.",
        "items": [
          {
            "id": "e3005702-0c21-b3b0-434c-181a59e999d0",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "AppUserDetailsService",
            "code": "@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 31
          },
          {
            "id": "b70ab352-dc16-3bb1-ce46-a7c5b9184259",
            "ancestors": [
              "e3005702-0c21-b3b0-434c-181a59e999d0"
            ],
            "type": "function",
            "description": "loads a user by their username, retrieving the user from the repository if found, and creating a new `User` object with the email, encrypted password, and other attributes set to default values if not found.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the corresponding user details are to be loaded.\n\n* `username`: This is a String object representing the username to be searched in the user repository.\n* `userRepository`: This is an instance of a class that provides access to a user database or repository.\n* `findByEmail(String username)`: This method is called on the `userRepository` instance and returns a `com.myhome.domain.User` object if a user with the specified `username` exists in the repository, otherwise returns `null`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "User",
              "description": "a `UserDetails` object containing the user's email, encrypted password, and other attributes.\n\n* `Email`: The email address of the user.\n* `EncryptedPassword`: The encrypted password for the user.\n* `IsActive`: A boolean indicating whether the user is active (true) or not (false).\n* `IsAdmin`: A boolean indicating whether the user is an administrator (true) or not (false).\n* `IsPhoneNumberVerified`: A boolean indicating whether the user's phone number is verified (true) or not (false).\n* `Collections.emptyList()`: An empty list of type `List<String>`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public UserDetails loadUserByUsername(String username) \n    throws UsernameNotFoundException {\n  \n  com.myhome.domain.User user = userRepository.findByEmail(username);\n  if (user == null) {\n    throw new UsernameNotFoundException(username);\n  }\n  \n  return new User(user.getEmail(),\n      user.getEncryptedPassword(),\n      true,\n      true,\n      true,\n      true,\n      Collections.emptyList());\n}\n",
              "description": "\nIn this method, we first call the repository to find a user by their email address and store it in a variable called user. We then check if the user is null and throw an exception if they are. Finally, we create a new User object using the information from the user domain object and return it."
            },
            "name": "loadUserByUsername",
            "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "52bbdad4-90a1-76b2-884d-9d6d40c5f16f",
            "ancestors": [
              "e3005702-0c21-b3b0-434c-181a59e999d0"
            ],
            "type": "function",
            "description": "retrieves a user's details from the repository and maps them to a `UserDto` object using a mapper.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are to be retrieved.\n\n* `username`: A string representing the username to search for in the user repository.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the details of the user with the specified username.\n\n* The output is a `UserDto` object representing a user entity in domain-driven design.\n* The user entity contains fields for email, username, and other relevant information.\n* The `findByEmail` method from the `userRepository` returns a `User` object if found, otherwise throws a `UsernameNotFoundException`.\n* The `userMapper` is used to map the `User` object to a `UserDto` object for convenience and ease of use in the application.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    AppUserDetailsService userDetailsService = new AppUserDetailsService();\n    UserDto user = userDetailsService.getUserDetailsByUsername(\"username\");\n}\n",
              "description": ""
            },
            "name": "getUserDetailsByUsername",
            "code": "public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom authentication filter called CommunityAuthorizationFilter that extends the basic authentication filter. The filter checks if the user has administrative privileges in a specific community by matching the request URI against a pattern and checking if the user is an admin in the community. If the user is not an admin, it returns an unauthorized response. The filter also calls the super doFilterInternal method to continue the authentication process.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "5b33fdf6-fecb-47b3-4142-7426e46eb008",
            "ancestors": [
              "fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4"
            ],
            "type": "function",
            "description": "filters incoming HTTP requests based on a pattern and checks if the user is an admin or not before passing the request to the next filter in the chain.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request received by the filter.\n\n* `getRequestURI()`: Returns the String representation of the request URI.\n* `isUserCommunityAdmin()`: A boolean method that checks if the user is an administrator for a community.\n\nThe function then performs its internal processing and delegates to the superclass's `doFilterInternal` method, passing in the original input `request`.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HttpServletResponse object that is used to handle the filtered request.\n\n* `HttpServletResponse`: This is an instance of the `HttpServletResponse` class, which represents the response object in an HTTP request-response cycle. It contains various attributes and methods related to handling HTTP requests and responses.\n* `status`: The `status` attribute of the `HttpServletResponse` object indicates the status code returned by the server. In this function, it is set to `SC_UNAUTHORIZED`.\n* ` ServletException`: This is an exception that is thrown if the filter chain cannot handle the request due to a security-related reason. It is caught and handled in the `doFilterInternal` function.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "Chain of filters to execute.\n\n* `request`: The original HTTP request that was passed to the filter chain.\n* `response`: The HTTP response object that is being filtered.\n* `chain`: An instance of `FilterChain`, which represents the filter chain in which the current filter is nested.\n* `super`: A reference to the parent `doFilterInternal` function, which will be called if the current filter does not handle the request.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n    \n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        return;\n    }\n    \n    super.doFilterInternal(request, response, chain);\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "ad00435a-160c-12a0-2744-56794d887f2b",
            "ancestors": [
              "fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4"
            ],
            "type": "function",
            "description": "determines if a user is an administrator of a community based on their user ID and the community ID in the request URL. If the user ID matches the ID of an admin for the community, the function returns `true`. Otherwise, it returns `false`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that triggered the method, providing the community ID from the request URI.\n\n1. `getRequestURI()`: This method returns the string representation of the request URI, which is the part of the URL after the domain name.\n2. `split(\"/\")`: This method splits the request URI into an array of strings using the \"/\" character as the delimiter. The second element in the array is the community ID.\n3. `getAuthentication()`: This method returns the current authentication context, which contains information about the user who made the request.\n4. `getPrincipal()`: This method returns the principal (i.e., user) associated with the current authentication context.\n5. `findCommunityAdminsById(communityId, null)`: This method finds a list of community admins for a given community ID using the `communityService` interface. The second argument `null` means that no filter is applied to the list of admins.\n6. `stream()`: This method creates a stream from the list of community admins.\n7. `filter(communityAdmin -> communityAdmin.getUserId().equals(userId))` : This method filters the stream of community admins to find the user ID that matches the input `userId`. The `filter()` method takes a lambda expression as an argument, which in this case checks if the `getUserId()` method returns the same value as the input `userId`.\n8. `findFirst()`: This method finds the first element in the filtered stream of community admins that matches the input `userId`. If no match is found, it returns `null`.\n9. `orElse(null)`: This method returns the result of the previous call to `findFirst()` or `null` if no match was found.\n\nIn summary, the `request` object contains information about the user who made the request and the community ID that is being checked for admin privileges.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the current user is an admin of the specified community.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    // Get the community ID from the request URI\n    String communityId = request.getRequestURI().split(\"/\")[2];\n    \n    // Get the user ID of the current authenticated user\n    String userId = (String) SecurityContextHolder.getContext()\n            .getAuthentication().getPrincipal();\n    \n    // Check if the current user is an admin of the community with the given ID\n    Optional<List<User>> optional = communityService.findCommunityAdminsById(communityId, null);\n    if (optional.isPresent()) {\n        List<User> communityAdmins = optional.get();\n        User admin = communityAdmins.stream()\n                .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                .findFirst()\n                .orElse(null);\n        return admin != null;\n    }\n    \n    // If the user is not an admin, return false\n    return false;\n}\n",
              "description": "\nThis method uses a variety of techniques to check if a user is a community administrator. Firstly, it extracts the ID of the community from the request URI using `split(\"/\")`. Secondly, it retrieves the current authenticated user's ID using `SecurityContextHolder.getContext().getAuthentication().getPrincipal()`. Thirdly, it checks if the current user is an admin of the community with the given ID by calling `findCommunityAdminsById()` and filtering the list of admins for the current user's ID. Finally, it returns true if the user is an admin and false otherwise."
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": " ",
              "indent": 4
            },
            "item_type": "method",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom filter in Spring Security called MyHomeAuthorizationFilter. The filter checks for an authorization token in the HTTP request headers and decodes it using the AppJwtEncoderDecoder class. If a valid token is found, the filter sets the authentication context using the SecurityContextHolder class and passes the request to the next filter in the chain.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "64442b18-bb7d-0792-7f4c-95ae48313a80",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "MyHomeAuthorizationFilter",
            "code": "public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "515e0a51-af89-a290-5044-42f819aea3fd",
            "ancestors": [
              "64442b18-bb7d-0792-7f4c-95ae48313a80"
            ],
            "type": "function",
            "description": "authenticates a user by checking for an authentication token in the HTTP request header. If the token is present and has the correct prefix, it sets the SecurityContextHolder with the corresponding UsernamePasswordAuthenticationToken and allows the filter chain to proceed.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object that is being processed by the filter.\n\n1. `authHeaderName`: The name of the HTTP header that contains the authorization token.\n2. `authHeaderPrefix`: The prefix of the authorization token in the HTTP header.\n3. `authHeader`: The value of the authorization token in the HTTP header, which is either null or starts with the prefix provided by `authHeaderPrefix`.\n4. `getAuthentication()`: A method that returns an instance of `UsernamePasswordAuthenticationToken`, which is then set as the authentication for the security context using `SecurityContextHolder.getContext().setAuthentication()`.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "output of the current filter chain and is passed on to the next filter in the chain for further processing.\n\n1. `HttpServletRequest request`: This is the original HTTP request that triggered the filter chain.\n2. `HttpServletResponse response`: This is the HTTP response generated by the filter chain.\n3. `FilterChain chain`: This is the chain of filters that was executed in sequence to process the request.\n4. `IOException IOException`: This exception can be thrown if there is an I/O error while processing the request or generating the response.\n5. `ServletException ServletException`: This exception can be thrown if there is a problem with the filter chain or the HTTP request/response processing.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the filter chain to be executed after the current filter is applied to the request.\n\n* `HttpServletRequest request`: The HTTP request sent by the client to the server.\n* `HttpServletResponse response`: The HTTP response generated by the server in response to the request.\n* `FilterChain chain`: An instance of `FilterChain`, which is a chain of filters that process the incoming request.\n* `IOException`: A subclass of `Throwable` representing an error occurring during communication between a client and server.\n* `ServletException`: A subclass of `Throwable` representing an error occurring while processing an HTTP request.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                   FilterChain chain) throws IOException, ServletException {\n        // get the authorization header from the request\n        String authHeader = request.getHeader(\"Authorization\");\n\n        // check if the header is null or does not start with \"Bearer\"\n        if (authHeader == null || !authHeader.startsWith(\"Bearer\")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        // get the token from the authorization header\n        String token = authHeader.replace(\"Bearer \", \"\");\n\n        // validate the token using a method or class that you have implemented\n        if (!validateToken(token)) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        // get the user information from the token and set it in the security context\n        UsernamePasswordAuthenticationToken authentication = getAuthenticationFromToken(token);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        // continue with the filter chain\n        chain.doFilter(request, response);\n    }\n}\n",
              "description": "\nIn this example, we are using the \"Authorization\" header to extract the token from the request and then validating it before setting the user information in the security context. If the token is not valid, the filter chain will continue without any further processing."
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "054c528e-fc13-00b8-d948-baa50a7fd9fc",
            "ancestors": [
              "64442b18-bb7d-0792-7f4c-95ae48313a80"
            ],
            "type": "function",
            "description": "retrieves an authentication token from a HTTP request header and decodes it into a `UsernamePasswordAuthenticationToken`. If the token is null, the function returns null.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request made by the client and contains information about the authentication token in its header.\n\n1. `getHeader`: This method returns the value of a header field in the HTTP request. In this case, it returns the value of the authorization token header.\n2. `getProperty`: This method retrieves a property from the environment. The property is specified as a string, and its value can be any valid value.\n3. `getId`: This method returns the user ID extracted from the JWT token.\n4. `decode`: This method decodes the JWT token and extracts the user ID. It uses the `appJwtEncoderDecoder` class to perform the decoding.\n5. `getUserId`: This method returns the user ID extracted from the JWT token.\n6. `getSecret`: This method retrieves the secret key used for encoding the JWT token.\n7. `return new UsernamePasswordAuthenticationToken`: This line creates a new instance of the `UsernamePasswordAuthenticationToken` class, passing in the user ID and a list of credentials (which is empty in this case).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UsernamePasswordAuthenticationToken",
              "description": "a `UsernamePasswordAuthenticationToken` object representing the authenticated user.\n\n* The function returns an instance of `UsernamePasswordAuthenticationToken`.\n* The `username` field of the token is set to the value of `jwt.getUserId()`.\n* The `password` field of the token is set to `null`.\n* The `groups` list of the token is set to an empty list.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n}\n",
              "description": ""
            },
            "name": "getAuthentication",
            "code": "private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "service/src/main/java/com/myhome/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A WebSecurity class that configures spring security for an API. It sets up CORS, disabled CSFR, and disable session management. It adds a filter after the CommunityAuthorizationFilter to handle community-related authorizations. The configure method sets up authentication managers, password encoders, and user details services.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.Community</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"162,-85 23,-85 23,-66 162,-66 162,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "df855d59-27f2-62bf-4641-19a2743848e1",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "WebSecurity",
            "code": "@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n  private final UserDetailsService userDetailsService;\n  private final CommunityService communityService;\n  private final PasswordEncoder passwordEncoder;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }\n\n  private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "ccbe7051-8d06-6e8a-be4c-ad2439e06ad4",
            "ancestors": [
              "df855d59-27f2-62bf-4641-19a2743848e1"
            ],
            "type": "function",
            "description": "sets up security for an API gateway by disabling CSRF and frame options, enabling stateful session management, adding a filter after the `CommunityFilter`, and authorizing requests based on Ant-based patterns.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "HTTP security configuration object, which is used to configure various settings related to request processing and authentication.\n\n* `cors()` - Enables Cross-Origin Resource Sharing (CORS) for this HTTP security object.\n* `csrf()`.disable() - Disables Cross-Site Request Forgery (CSRF) protection for this HTTP security object.\n* `headers().frameOptions()`.disable() - Disables the setting of the `X-Frame-Options` header for this HTTP security object.\n* `sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)` - Specifies that sessions are not created for this HTTP security object.\n* `addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class)` - Adds a filter after the `getCommunityFilter()` filter in the chain of filters.\n* `authorizeRequests()` - Configures which requests are authorized or unauthorized for this HTTP security object.\n\nThe properties of `http` include:\n\n* `antMatchers()` - Matches HTTP methods (e.g., GET, POST, PUT) and URLs (e.g., \"/hello\").\n* `permitAll()` - Allows any request to pass through without authentication or authorization.\n* `addFilter()` - Adds a filter to the chain of filters for this HTTP security object.\n* `and()` - Conjunctively combines multiple configuration options for this HTTP security object.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // Allows all requests to access the /api/public/h2console URL path without authentication\n    http.authorizeRequests()\n      .antMatchers(\"/api/public/h2console\")\n        .permitAll();\n  }\n",
              "description": ""
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 33
          },
          {
            "id": "ffd8c48d-3e23-62b8-8840-4a6756f9c4e2",
            "ancestors": [
              "df855d59-27f2-62bf-4641-19a2743848e1"
            ],
            "type": "function",
            "description": "creates an instance of the `CommunityAuthorizationFilter`, which combines authentication and community service functionality to filter access to community resources.",
            "params": [],
            "returns": {
              "type_name": "Filter",
              "description": "a `Filter` object that implements authentication and community service functionality.\n\n* `authenticationManager()` is an instance of `AuthenticationManager`. This parameter represents the authentication management component of the system.\n* `communityService` is an instance of `CommunityService`. This parameter represents the community service component of the system, which provides data and functionality related to communities.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic void configure(AuthenticationManagerBuilder auth) throws Exception {\n    //...\n    auth.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n}\n",
              "description": ""
            },
            "name": "getCommunityFilter",
            "code": "private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }",
            "location": {
              "start": 80,
              "insert": 80,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 3
          },
          {
            "id": "eadf5da1-d17c-688e-7845-2feceec6e139",
            "ancestors": [
              "df855d59-27f2-62bf-4641-19a2743848e1"
            ],
            "type": "function",
            "description": "sets up authentication-related configurations by providing a user details service and password encoder.",
            "params": [
              {
                "name": "auth",
                "type_name": "AuthenticationManagerBuilder",
                "description": "AuthenticationManagerBuilder, which is used to configure the authentication settings for the application.\n\n* `userDetailsService`: This is an instance of `UserDetailsService`, which provides user details for authentication.\n* `passwordEncoder`: This is an instance of a `PasswordEncoder`, which is responsible for encoding and decoding passwords securely.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(new MyUserDetailsService()).passwordEncoder(new BCryptPasswordEncoder());\n}\n",
              "description": "\nIn this code, the method configure is being used to provide authentication for a user. The method takes an AuthenticationManagerBuilder object as its input, which allows for the configuration of various security features of Spring Security. In this example, the userDetailsService() method is being called on the AuthenticationManagerBuilder object, providing a custom MyUserDetailsService implementation that will be used to load and verify user credentials. The passwordEncoder() method is also being called on the AuthenticationManagerBuilder object, providing a custom BCryptPasswordEncoder implementation that will be used to encode and validate passwords."
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/filters/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A Spring Security filter called CommunityAuthorizationFilter that restricts access to a specific endpoint based on the user's role in a community. The filter uses the `BasicAuthenticationFilter` class as a base and adds its own logic to check if the user is an admin of the community before allowing access to the requested amenity. The code also defines a `CommunityService` class for querying the community admins and a `Pattern` class for matching URLs.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.filters.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.filters.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.filters.</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"151.5,-85 12.5,-85 12.5,-66 151.5,-66 151.5,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "df1400bc-a3ab-ea8d-c241-91abf73807af",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n  private final CommunityService communityService;\n  private static final String UUID_PATTERN =\n      \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =\n      Pattern.compile(\"/communities/\" + UUID_PATTERN + \"/amenities\");\n\n  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n      CommunityService communityService) {\n    super(authenticationManager);\n    this.communityService = communityService;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n\n  private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }\n}",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 40
          },
          {
            "id": "2e9852f4-d081-fca6-1a4a-370864b2565f",
            "ancestors": [
              "df1400bc-a3ab-ea8d-c241-91abf73807af"
            ],
            "type": "function",
            "description": "in the provided code is a filter that checks the request URI against a pattern and performs an administrative check on the user. If the user is not an administrator, it sets the status code to `SC_FORBIDDEN` and returns without further processing.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object that is being processed by the filter.\n\n* `getRequestURI()` - This method returns the request URI (path) of the incoming HTTP request.\n* `isUserCommunityAdmin()` - This method checks if the user is an admin for a specific community.\n* `super.doFilterInternal()` - This method calls the superclass's `doFilterInternal` method to handle the rest of the request processing.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that is being filtered.\n\n* `HttpServletResponse`: This is the response object that is passed as an argument to the function. It contains information about the HTTP request and response, such as the status code, headers, and buffered content.\n* `status`: This is a property of the `HttpServletResponse` object that represents the current status code of the response. In this particular case, it can take on values from 100 to 599, indicating different types of responses, such as success, redirection, or error.\n* `headers`: This is another property of the `HttpServletResponse` object that contains a collection of HTTP headers associated with the response. These headers provide additional information about the response, such as caching directives, content type, and expiration time.\n* `bufferedContent`: This is a property of the `HttpServletResponse` object that represents the buffered content of the response. In this context, it could contain the deserialized input data that needs to be processed by the filter chain.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the filter chain that the current filter is processing.\n\n* `HttpServletRequest request`: The current HTTP request received by the filter.\n* `HttpServletResponse response`: The current HTTP response generated by the filter.\n* `FilterChain chain`: The chain of filters that the current filter is part of, which can be further processed or executed.\n* `IOException IOException`: Thrown if any I/O-related errors occur during the filtering process.\n* `ServletException ServletException`: Thrown if any processing-related errors occur during the filtering process.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "18260029-dc1b-c7b5-2d4c-f332afeb056c",
            "ancestors": [
              "df1400bc-a3ab-ea8d-c241-91abf73807af"
            ],
            "type": "function",
            "description": "checks if a user is an admin of a community based on their principal ID and the community ID in the request URL. It uses community service to find admins and then filters and maps the IDs to check if the user is an admin.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request received by the server, providing information about the URL path and query parameters that can be used to identify the community being accessed.\n\n* `request.getRequestURI()`: Returns the requested URI path of the incoming HTTP request. It splits into two parts: the scheme and authority (if present), followed by the path and any fragments.\n* `request.getAuthentication()`: Provides the authenticated principal, which is usually a user object in a web application context.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the current user is an admin of the specified community.\n\n* The function returns a boolean value indicating whether the current user is a community admin for the specified community ID.\n* The input parameters include the current request and the community ID.\n* The function first retrieves the user ID of the authenticated principal using SecurityContextHolder.\n* Then, it queries the community service to find the admins of the community ID and filters them based on the user ID.\n* Finally, it checks if the user ID is present in the filtered list of admins using the `flatMap` and `findFirst` methods.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n}\n",
              "description": "\nIn this example, the method is called with an HttpServletRequest object as input. The method extracts the user ID and community ID from the request URI, and then checks if the current user is a community admin using the communityService.findCommunityAdminsById() method.\nThe method returns true if the user is a community admin and false otherwise."
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AppJwt.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwt.java",
    "content": {
      "structured": {
        "description": "A class called `AppJwt` that represents a JWT in an application. The class has two fields: `userId` and `expiration`, which are used to generate and validate the JWT. The `Builder`, `ToString`, and `@Getter` annotations are used to create a builder-like structure for the class, allowing for easy construction of instances.",
        "items": [
          {
            "id": "a5fd7487-1884-1899-3b42-9be48c66244b",
            "ancestors": [],
            "type": "function",
            "description": "represents a JWT in an application, having a user ID and an expiration date.\nFields:\n\t- userId (String): represents a unique identifier for a user in the application. \n\t- expiration (LocalDateTime): represents the date and time after which the JWT will no longer be considered valid. \n\n",
            "name": "AppJwt",
            "code": "@Builder\n@ToString\n@Getter\npublic class AppJwt {\n  private final String userId;\n  private final LocalDateTime expiration;\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AppJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An interface `AppJwtEncoderDecoder` that provides logic for encoding and decoding application JWTs. The interface has two methods: `decode(String encodedJwt, String secret)` and `encode(AppJwt jwt, String secret)`.",
        "items": [
          {
            "id": "e70b8e41-ebbb-eeb8-7046-ece8421047bf",
            "ancestors": [],
            "type": "function",
            "description": "defines an interface for encoding and decoding JWTs, with two methods provided: `decode(String encodedJwt, String secret)` and `encode(AppJwt jwt, String secret)`.",
            "name": "AppJwtEncoderDecoder",
            "code": "public interface AppJwtEncoderDecoder {\n  AppJwt decode(String encodedJwt, String secret);\n\n  String encode(AppJwt jwt, String secret);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "NoSecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of `AppJwtEncoderDecoder`, a class that encodes and decodes JSON Web Tokens (JWTs). The `NoSecretJwtEncoderDecoder` class is used only in testing, and it splits the encoded JWT into user ID and expiration time using the `split()` method. It then creates a new `AppJwt` object with the user ID and expiration time and returns it. The `encode()` method takes an existing `AppJwt` object and a secret string and returns the encoded JWT, while the `decode()` method takes an encoded JWT and a secret string and returns the original `AppJwt` object.",
        "items": [
          {
            "id": "fdc7274a-b600-b88a-f449-c5fa743e308b",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "NoSecretJwtEncoderDecoder",
            "code": "@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "988bf03d-ac7e-dcbe-7c4e-45e8787b4552",
            "ancestors": [
              "fdc7274a-b600-b88a-f449-c5fa743e308b"
            ],
            "type": "function",
            "description": "decodes a JSON Web Token (JWT) and returns an `AppJwt` object with the user ID and expiration time extracted from the JWT.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that contains the user ID and expiration time, which are decoded and used to construct a new `AppJwt` object.\n\n* `encodedJwt`: The serialized JWT string to be decoded.\n* `secret`: The secret key used for signing the JWT.\n\nThe function splits the `encodedJwt` string into an array of strings using the `split` method, with the `SEPARATOR` constant as the delimiter. It then returns an instance of `AppJwt` built from the `userId` and `expiration` properties of the resulting array of strings.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to sign the JWT token, which is necessary for decoding and verifying the authenticity of the token.\n\n* The string `encodedJwt` is split into two parts using the separator `SEPARATOR`, resulting in an array of two strings.\n* The first string in the array represents the user ID.\n* The second string represents the expiration time, which is parsed and converted to a `LocalDateTime` object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt`, containing the user ID and expiration date extracted from the encoded JWT.\n\n* `AppJwt` is the class that represents the decoded JWT token.\n* `builder()` is a method of the `AppJwt` class that creates a new instance of the class with the given properties.\n* `userId(strings[0])` sets the value of the `userId` attribute of the decoded token to the first element of the `strings` array.\n* `expiration(LocalDateTime.parse(strings[1]))` sets the value of the `expiration` attribute of the decoded token to the second element of the `strings` array, which represents the expiration time of the token in ISO 8601 format.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String encodedJwt = \"1234567890+2020-06-14T10:20:30.000\";\nAppJwt jwt = NoSecretJwtEncoderDecoder.decode(encodedJwt, \"secret\");\n",
              "description": "\nIn this example, the encoded JWT string is passed to the decode method along with a secret key that is used for encoding and decoding the JWT. The method splits the input string using the `\\\\+` separator and uses the resulting array of strings to build an AppJwt object with the user ID (the first element in the array) and the expiration date (the second element in the array)."
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "f1434378-5cd2-df85-244a-31446c1aa8e0",
            "ancestors": [
              "fdc7274a-b600-b88a-f449-c5fa743e308b"
            ],
            "type": "function",
            "description": "takes a `AppJwt` object and a secret as input, returns a encoded string consisting of the user ID and expiration time.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JWT (JSON Web Token) object that contains the user ID and expiration time, which are used to generate the encoded string returned by the function.\n\n* `jwt`: A `AppJwt` object representing a JSON Web Token, which contains information about the token, including its user ID and expiration time.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to sign the JWT.\n\n* `secret`: A string representing a secret used in the JWT encoding process. It can have various attributes such as length, format, and content, depending on its usage.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a concatenation of the `userId` and `expiration` properties of the `AppJwt` object, separated by a separator.\n\n* The output is a string representation of a JWT token.\n* The first component of the output is the user ID, which is extracted from the `jwt.getUserId()` method.\n* The second component is the separator character (`SEPARATOR`), which is passed as an argument to the function.\n* The third component is the expiration time, which is obtained from the `jwt.getExpiration()` method.\n\nThe output string can be used for authentication and authorization purposes in a variety of applications.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AppJwt jwt = AppJwt.builder().userId(\"123456789\").expiration(LocalDateTime.now()).build();\nString secret = \"secret\";\nString encodedJwt = NoSecretJwtEncoderDecoder.encode(jwt, secret);\n",
              "description": ""
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "SecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of the `AppJwtEncoderDecoder` interface, which is responsible for encoding and decoding JSON Web Tokens (JWTs). The code uses the `io.jsonwebtoken` library to handle JWT parsing and signing, and it defines a concrete implementation of the interface with the ability to set signing keys and parse claims from JWTs. The code also defines two methods, `decode` and `encode`, which perform the decoding and encoding of JWTs respectively.",
        "items": [
          {
            "id": "aca3372c-7a52-5da3-9b40-66fb2979db81",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "SecretJwtEncoderDecoder",
            "code": "@Component\n@Profile(\"default\")\npublic class SecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 26
          },
          {
            "id": "66826ab8-23a9-1895-a84f-c35dc2e76992",
            "ancestors": [
              "aca3372c-7a52-5da3-9b40-66fb2979db81"
            ],
            "type": "function",
            "description": "decodes a JWT and extracts the user ID and expiration time from the claims, then builds a new `AppJwt` object with the extracted information.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that is being decoded and returned as a reconstructed AppJwt object with user ID and expiration date.\n\n* `encodedJwt`: This is the JSON Web Token (JWT) that needs to be decoded. It contains claims related to the user's identity and other information.\n* `secret`: This is the secret key used for HMAC-SHA256 signing of the JWT.\n\nThe function first uses the `Jwts` parser builder to create a `Claims` object from the `encodedJwt`. The `build()` method creates a `Parser` instance that can be used to parse the JWT. The `parseClaimsJws()` method is then called on the `Parser` instance, which returns a `Claims` object representing the decoded claims.\n\nThe `getBody()` method of the `Claims` object returns the decoded body of the JWT, which contains the user's ID and expiration time as properties. Finally, an `AppJwt` instance is created with the user's ID and expiration time, and returned.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "128-bit HMAC SHA key used for signing the JWT claims, which is necessary for verifying the authenticity of the JWT token.\n\n* `secret`: This is a secret key used for signing the JWT token. Its bytes are passed to the `Jwts.parserBuilder()` method to create a signature verification key.\n* `Keys.hmacShaKeyFor(secret.getBytes())`: This is a method that generates an HMAC-SHA-256 signature key for the given secret. The resulting key is used for signing the JWT token.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a new `AppJwt` instance containing the decoded user ID and expiration date.\n\n* The `userId` field represents the Subject claim in the JWT, which contains the unique identifier of the user.\n* The `expiration` field represents the Expiration claim in the JWT, which specifies the time at which the JWT becomes invalid. It is converted to a `LocalDateTime` object using the `atZone` method to specify the time zone.\n\nThese properties are essential for creating an AppJwt object that can be used to authenticate and authorize requests in a Spring Boot application.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String encodedJwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2p3dC5nb29nbGVhcmVyLmNvbSIsImF1ZCI6WyJ0aXRsZTogcGxlYXNlIiwgInN1YnNjcmliZSI6bnVsbCwgImV4cCI6MTY0MDU5MzQxMywiYXVkIjoiQUlOIiwiaWF0IjoxNTQyMTUzOTE0fQ.JrXbW9eo1Hn3d2u8CZg-pDt9PvKVwFqmAx23h046M7Y\";\nString secret = \"mysecretkey\";\nAppJwt appJwt = decode(encodedJwt, secret);\nSystem.out.println(\"User ID: \" + appJwt.getUserId());\nSystem.out.println(\"Expiration: \" + appJwt.getExpiration().toString());\n",
              "description": ""
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "f2bb1949-8f26-3c97-ed4e-4cc02174fda0",
            "ancestors": [
              "aca3372c-7a52-5da3-9b40-66fb2979db81"
            ],
            "type": "function",
            "description": "takes a `Jwt` object and a secret as input, and generates a new JWT token with an updated expiration time based on the current date and time, and signs it using HMAC-SHA-512 algorithm.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JSON Web Token to be encoded, containing the user ID and expiration time.\n\n* `jwt`: A `AppJwt` object containing user ID and expiration timestamp in milliseconds since epoch.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used for signing the JWT.\n\n* `secret`: This is a String object that contains the secret key used for signing JWTs.\n* `getExpiration()`: This method returns an instance of `Date` representing the expiration time of the JWT in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).\n* `setSubject(jwt.getUserId())`: This sets the subject of the JWT to the value of the `jwt.getUserId()` method, which is a String representing the user ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a compact JWT representation of the input `jwt` and `secret`.\n\n* `Builder`: The object returned is an instance of `Jwts.builder()`.\n* `setSubject`: This sets the subject of the JWT to the value of `jwt.getUserId()`.\n* `setExpiration`: This sets the expiration time of the JWT to the value of `expiration`. The expiration time is represented as an Instant in the Java Time API.\n* `signWith`: This method uses the specified secret key to sign the JWT with the HMAC-SHA-512 algorithm, resulting in a signed JWT.\n* `compact()`: This method flattens the JWT into its compact form.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AppJwt jwt = AppJwt.builder()\n        .userId(\"prathab\")\n        .expiration(LocalDateTime.of(2021, 4, 3, 23, 59))\n        .build();\nString secret = \"secretKey\";\nencode(jwt, secret);\n",
              "description": "\nThis would generate a JWT token with the subject being \"prathab\" and expiration set to April 3rd, 2021 at 11:59 PM. The method would return a string representing the generated JWT token."
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityService.java",
    "path": "service/src/main/java/com/myhome/services/AmenityService.java",
    "content": {
      "structured": {
        "description": "An interface for amenity services, which includes creating, retrieving, deleting, and updating amenities. The interface provides methods for listing all amenities in a community and updating an amenity's details.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.AmenityService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.AmenityService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"186,-96 14,-96 14,-66 186,-66 186,-96\"/>\n<text text-anchor=\"start\" x=\"22\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Amenity</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1AmenitySDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitySDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "897e7d2a-77a5-6bb1-e645-02b8cb79f987",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for creating, retrieving, deleting, and updating amenities in a community.",
            "name": "AmenityService",
            "code": "public interface AmenityService {\n\n  Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId);\n\n  Optional<Amenity> getAmenityDetails(String amenityId);\n\n  boolean deleteAmenity(String amenityId);\n\n  Set<Amenity> listAllAmenities(String communityId);\n\n  boolean updateAmenity(AmenityDto updatedAmenityDto);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationService.java",
    "path": "service/src/main/java/com/myhome/services/AuthenticationService.java",
    "content": {
      "structured": {
        "description": "An interface called AuthenticationService, which allows for authentication of users through a login method that takes a LoginRequest object as input and returns an AuthenticationData object as output.",
        "items": [
          {
            "id": "c4ac78e8-980c-34a0-9548-99c2e254d118",
            "ancestors": [],
            "type": "function",
            "description": "allows for authentication of users through a login method that takes a LoginRequest object as input and returns an AuthenticationData object as output.",
            "name": "AuthenticationService",
            "code": "public interface AuthenticationService {\n  AuthenticationData login(LoginRequest loginRequest);\n}",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 9
              }
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "BookingService.java",
    "path": "service/src/main/java/com/myhome/services/BookingService.java",
    "content": {
      "structured": {
        "description": "An interface for a booking service that allows for the deletion of bookings based on amenity and booking IDs. The interface includes a single method, `deleteBooking`, which takes two parameters: `amenityId` and `bookingId`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.BookingService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.BookingService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-96 15,-96 15,-66 185,-66 185,-96\"/>\n<text text-anchor=\"start\" x=\"23\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Booking</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1BookingSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "2b3cc4ce-0f8f-e2a5-a24b-9e1dd96b8766",
            "ancestors": [],
            "type": "function",
            "description": "defines a method for deleting bookings based on amenity ID and booking ID.",
            "name": "BookingService",
            "code": "public interface BookingService {\n\n  boolean deleteBooking(String amenityId, String bookingId);\n\n}",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": "service/src/main/java/com/myhome/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface for managing communities in a Spring Boot application. It includes methods for creating and listing communities, retrieving community details, adding admins and houses, removing houses, deleting communities, and removing admins. The code uses packages from Spring Data Domain, which provides tools for working with domain objects in Spring Boot applications.",
        "items": [
          {
            "id": "8787f69c-6278-b5a5-2240-38cf25d8add1",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating and managing communities in a Spring Boot application.",
            "name": "CommunityService",
            "code": "public interface CommunityService {\n  Community createCommunity(CommunityDto communityDto);\n\n  Set<Community> listAll();\n\n  Set<Community> listAll(Pageable pageable);\n\n  Optional<Community> getCommunityDetailsById(String communityId);\n\n  Optional<List<CommunityHouse>> findCommunityHousesById(String communityId, Pageable pageable);\n\n  Optional<List<User>> findCommunityAdminsById(String communityId, Pageable pageable);\n\n  Optional<User> findCommunityAdminById(String adminId);\n\n  Optional<Community> getCommunityDetailsByIdWithAdmins(String communityId);\n\n  Optional<Community> addAdminsToCommunity(String communityId, Set<String> admins);\n\n  Set<String> addHousesToCommunity(String communityId, Set<CommunityHouse> houses);\n\n  boolean removeHouseFromCommunityByHouseId(Community community, String houseId);\n\n  boolean deleteCommunity(String communityId);\n\n  boolean removeAdminFromCommunity(String communityId, String adminId);\n}",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 27
          }
        ]
      }
    }
  }
]