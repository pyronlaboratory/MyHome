{"name":"PageInfo.java","path":"api/src/main/java/com/myhome/utils/PageInfo.java","content":{"structured":{"description":"A `PageInfo` class that holds information about a page of data. The class has fields for the current page number, page limit, total pages, and total elements. It also has a constructor that takes a `Pageable` object and a `Page` object as parameters and initializes the fields accordingly. Additionally, there is a static method `of()` that creates a new instance of `PageInfo`.","items":[{"id":"31a6c0f9-326d-dfb5-384b-e2ae9e1bf83d","ancestors":[],"type":"function","description":"TODO","name":"PageInfo","code":"@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":19},{"id":"ee5a0699-b77e-d3a9-8f48-44f624cfa04f","ancestors":["31a6c0f9-326d-dfb5-384b-e2ae9e1bf83d"],"type":"function","description":"generates a `PageInfo` object containing metadata about a pageable and its corresponding page. The object includes page number, size, total pages, and total elements.","params":[{"name":"pageable","type_name":"Pageable","description":"pageable interface, which provides methods for manipulating the current page of data being processed.\n\n* The `getPageNumber()` method returns the page number associated with the current page being processed.\n* The `getPageSize()` method returns the size of a single page in terms of the number of elements it can contain.\n* The `getTotalPages()` method returns the total number of pages available for processing.\n* The `getTotalElements()` method returns the total number of elements that can be processed across all pages.","complex_type":true},{"name":"page","type_name":"Page<?>","description":"current page being processed, providing the total number of elements on that page.\n\n* `pageNumber`: The page number that the input is associated with.\n* `pageSize`: The number of elements in each page of the input.\n* `totalPages`: The total number of pages in the input.\n* `totalElements`: The total number of elements in the input.","complex_type":true}],"returns":{"type_name":"PageInfo","description":"a `PageInfo` object containing information about the page of data.\n\n* The page number is represented by the first element of the PageInfo object (pageable.getPageNumber()). This indicates the current page being displayed to the user.\n* The size of a page is described by the second component of the PageInfo object (pageable.getPageSize()). It represents how many items may be shown on a single page.\n* The total number of pages is represented by the third element of the PageInfo object (page.getTotalPages()). This indicates how many web pages are available in total.\n* The overall amount of items is described by the fourth element of the PageInfo object (page.getTotalElements()). It represents the sum of all objects in the entire collection.","complex_type":true},"usage":{"language":"java","code":"Pageable pageable = PageRequest.of(0, 10); // page number and size\nPage<?> page = myRepository.findAll(pageable); // find all elements in repository\nPageInfo info = PageInfo.of(pageable, page); // create a new PageInfo object with the page information\n","description":""},"name":"of","code":"public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }","location":{"start":21,"insert":21,"offset":" ","indent":2},"item_type":"method","length":8}]}}}