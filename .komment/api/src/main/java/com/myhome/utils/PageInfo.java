{"name":"PageInfo.java","path":"api/src/main/java/com/myhome/utils/PageInfo.java","content":{"structured":{"description":"A `PageInfo` class that generates metadata about a pageable and its corresponding page. The class contains four components: current page number, page size, total pages, and total elements. These components are used to create a `PageInfo` object, which can be used to represent the current state of a paginated data set.","items":[{"id":"224fff7a-e975-f291-fa47-7e81833d325b","ancestors":[],"type":"function","description":"from the file is a data structure that provides metadata about a pageable and its corresponding page, including page number, size, total pages, and total elements. The class offers a convenient way to access and manipulate pageable data by providing an easy-to-use API for working with pages and their associated information.","name":"PageInfo","code":"@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  /**\n   * generates a `PageInfo` object containing metadata about a pageable and its\n   * corresponding page. The object includes page number, size, total pages, and total\n   * elements.\n   * \n   * @param pageable pageable interface, which provides methods for manipulating the\n   * current page of data being processed.\n   * \n   * \t- The `getPageNumber()` method returns the page number associated with the current\n   * page being processed.\n   * \t- The `getPageSize()` method returns the size of a single page in terms of the\n   * number of elements it can contain.\n   * \t- The `getTotalPages()` method returns the total number of pages available for processing.\n   * \t- The `getTotalElements()` method returns the total number of elements that can\n   * be processed across all pages.\n   * \n   * @param page current page being processed, providing the total number of elements\n   * on that page.\n   * \n   * \t- `pageNumber`: The page number that the input is associated with.\n   * \t- `pageSize`: The number of elements in each page of the input.\n   * \t- `totalPages`: The total number of pages in the input.\n   * \t- `totalElements`: The total number of elements in the input.\n   * \n   * @returns a `PageInfo` object containing information about the page of data.\n   * \n   * \t- The page number is represented by the first element of the PageInfo object\n   * (pageable.getPageNumber()). This indicates the current page being displayed to the\n   * user.\n   * \t- The size of a page is described by the second component of the PageInfo object\n   * (pageable.getPageSize()). It represents how many items may be shown on a single page.\n   * \t- The total number of pages is represented by the third element of the PageInfo\n   * object (page.getTotalPages()). This indicates how many web pages are available in\n   * total.\n   * \t- The overall amount of items is described by the fourth element of the PageInfo\n   * object (page.getTotalElements()). It represents the sum of all objects in the\n   * entire collection.\n   */\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}","location":{"start":14,"insert":14,"offset":" ","indent":0,"comment":{"start":10,"end":13}},"item_type":"class","length":57},{"id":"073f596b-93c0-b395-8e42-a3c7e2ee4108","ancestors":["224fff7a-e975-f291-fa47-7e81833d325b"],"type":"function","description":"generates a `PageInfo` object containing information about the number of pages and elements in a specified range.","params":[{"name":"pageable","type_name":"Pageable","description":"pageable object containing information about the current page of data to be processed, which is used to calculate the page number, size, and total pages and elements.\n\n* The page number (0-based index) returned by the `getPageNumber()` method is included in the first component of the output `PageInfo`.\n* The total number of pages that can be produced by calling `getPageSize()` on `pageable` is included in the second component of the output `PageInfo`.\n* The total number of elements that can be processed by `pageable` is returned by the `getTotalElements()` method and incorporated into the third component of the output `PageInfo`.","complex_type":true},{"name":"page","type_name":"Page<?>","description":"current page of data being processed, providing the total number of elements on that page.\n\n* `pageNumber`: The number of the page being accessed.\n* `pageSize`: The number of elements in each page.\n* `totalPages`: The total number of pages in the result set.\n* `totalElements`: The total number of elements in the result set.","complex_type":true}],"returns":{"type_name":"PageInfo","description":"a `PageInfo` object containing page number, size, total pages, and total elements.\n\n* `pageNumber`: The page number that the pageable object represents.\n* `pageSize`: The number of elements that can be displayed on each page.\n* `totalPages`: The total number of pages in the result set.\n* `totalElements`: The total number of elements in the result set.","complex_type":true},"name":"of","code":"public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2,"comment":{"start":23,"end":61}},"item_type":"method","length":8}]}}}