{"name":"UserControllerIntegrationTest.java","path":"integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java","content":{"structured":{"description":"An integration test for a user controller in a Spring Boot application. The test creates a new user using the registration path, and then verifies that the response entity has a status code of HTTP 201 Created, indicating successful registration. Additionally, it checks that the response body matches the input data, and that the returned user ID refers to a user stored in the database.","items":[{"id":"d05871af-5329-8fac-6f40-20bd83eac006","ancestors":[],"type":"function","description":"TODO","name":"UserControllerIntegrationTest","code":"@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}","location":{"start":23,"insert":23,"offset":" ","indent":0},"item_type":"class","length":53},{"id":"ba9cd04c-45fb-52b2-9947-c1e242b3a4a8","ancestors":["d05871af-5329-8fac-6f40-20bd83eac006"],"type":"function","description":"tests the creation of a new user via REST API. It verifies that the response status code is 'CREATED', and the created user's name, email, and password match the input values. Additionally, it checks if the returned user ID refers to a user stored in the database and ensures that the corresponding values in the database match the input values.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n","description":"\nThe test method above makes a post request to the registration endpoint, then asserts that the response entity contains the correct status code and body values. Additionally, it checks that the user ID returned in the response body refers to an existing user in the database, and that the corresponding name and email values in the database match those provided in the test."},"name":"shouldSignUpSuccessful","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2},"item_type":"method","length":31}]}}}