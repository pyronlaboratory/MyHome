{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The class provides a `getPasswordEncoder()` method that returns a BCryptPasswordEncoder instance, which is used to encrypt passwords using the bcrypt algorithm.","diagram":"digraph G {\n    label=\"com.prathab.userservice.UserServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"2836f64d-4fae-8991-6c44-5953c226a376","ancestors":[],"type":"function","description":"is a Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The class provides a `getPasswordEncoder()` method that returns a BCryptPasswordEncoder instance, which is used to encrypt passwords using the bcrypt algorithm.","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  /**\n   * runs the `UserServiceApplication` and starts its execution.\n   * \n   * @param args 1 or more command-line arguments passed to the Java application when\n   * it is launched, which are then passed to the `SpringApplication.run()` method for\n   * further processing.\n   * \n   * \t- `String[] args`: This is an array of strings that represents the command-line\n   * arguments passed to the application when it was launched.\n   * \t- `SpringApplication.run()`: This method runs a Spring Boot application using the\n   * `SpringApplication` instance, passing in the `UserServiceApplication` class and\n   * the `args` array as arguments.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  /**\n   * returns a `BCryptPasswordEncoder` instance, which is a widely-used password hashing\n   * algorithm that provides strong security against brute force attacks.\n   * \n   * @returns a `BCryptPasswordEncoder` instance, which is used to encrypt passwords\n   * using the bcrypt algorithm.\n   * \n   * The function returns an instance of `BCryptPasswordEncoder`. This class is a part\n   * of the Java cryptography API and provides password hashing functionality using the\n   * BCrypt algorithm.\n   * \n   * The `BCryptPasswordEncoder` object has several attributes that can be used to\n   * customize its behavior, such as the cost parameter, which controls the work factor\n   * used for hashing, and the salt parameter, which generates a random salt value for\n   * each hash calculation.\n   */\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":32,"insert":26,"offset":" ","indent":0,"comment":{"start":25,"end":31}},"item_type":"class","length":42,"docLength":6},{"id":"71310b49-6ecf-0190-994e-e23f75319301","ancestors":["2836f64d-4fae-8991-6c44-5953c226a376"],"type":"function","description":"runs a SpringApplication, which launches and manages the user service application.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\n* `String[]`: Indicates that `args` is an array of strings.\n* `SpringApplication.run()`: The method call to start the Spring application.\n* `UserServiceApplication.class`: The fully qualified class name of the application being started.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":49,"insert":36,"offset":" ","indent":2,"comment":{"start":35,"end":48}},"item_type":"method","length":3,"docLength":13},{"id":"d522fd53-4e04-5693-e647-f218f2378123","ancestors":["2836f64d-4fae-8991-6c44-5953c226a376"],"type":"function","description":"returns a `BCryptPasswordEncoder` instance, which is a widely used and secure password encryption algorithm.","params":[],"returns":{"type_name":"BCryptPasswordEncoder","description":"a BCryptPasswordEncoder instance, which is used to encrypt passwords securely.\n\n* The function returns an instance of the `BCryptPasswordEncoder` class, which is a robust password encryption algorithm that provides both security and simplicity.\n* The `BCryptPasswordEncoder` class implements the `PasswordEncoder` interface, which defines the methods for encrypting and decrypting passwords.\n* The returned object has all the necessary attributes to perform password encryption and decryption, including the cost factor, salt size, and work factor.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n  \npublic class UserServiceApplication {\n  //...\n  \n  @Autowired\n  private PasswordEncoder passwordEncoder;\n  \n  //...\n  \n  public void addUser(String username, String email, String password) {\n    User user = new User();\n    user.setUsername(username);\n    user.setEmail(email);\n    \n    // encode the password with BCrypt\n    String encodedPassword = passwordEncoder.encode(password);\n    user.setPassword(encodedPassword);\n  }\n}\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":69,"insert":53,"offset":" ","indent":2,"comment":{"start":52,"end":68}},"item_type":"method","length":4,"docLength":16}]}}}