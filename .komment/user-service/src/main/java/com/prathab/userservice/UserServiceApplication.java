{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The `main` method starts the application by running the `UserServiceApplication`. The `getPasswordEncoder()` method returns a `BCryptPasswordEncoder` instance, which is used to encrypt passwords using the bcrypt algorithm.","diagram":"digraph G {\n    label=\"com.prathab.userservice.UserServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"96cbbf61-e8a4-4f88-fc4a-c7cda33b4d4c","ancestors":[],"type":"function","description":"is a Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The class provides a `getPasswordEncoder()` method that returns a BCryptPasswordEncoder instance, which is used to encrypt passwords using the bcrypt algorithm.","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  /**\n   * starts the Spring application by running the `UserServiceApplication`.\n   * \n   * @param args command-line arguments passed to the application when it is launched.\n   * \n   * \t- `SpringApplication.run()` is called to launch the application with the specified\n   * `UserServiceApplication` class and `args`.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  /**\n   * returns a `BCryptPasswordEncoder` object, which is used to encrypt passwords using\n   * bcrypt algorithm.\n   * \n   * @returns a BCrypt password encoder instance.\n   * \n   * 1/ Return type: The function returns an instance of the `BCryptPasswordEncoder` class.\n   * 2/ Object identity: Each instance of `BCryptPasswordEncoder` has its own set of\n   * internal state, including the encryption salt and IV.\n   * 3/ Encryption algorithm: The function uses the BCrypt algorithm to encrypt passwords.\n   * This algorithm is designed to be slow and computationally expensive, making it\n   * resistant to brute-force attacks.\n   * 4/ Salt and IV generation: The `BCryptPasswordEncoder` class generates a random\n   * salt and IV for each password encryption. These values are used to create a unique\n   * encryption key for each password.\n   */\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":30,"insert":26,"offset":" ","indent":0,"comment":{"start":25,"end":29}},"item_type":"class","length":37,"docLength":4},{"id":"e3e97cbe-bc7f-1a9f-d54a-9eed03cc1283","ancestors":["96cbbf61-e8a4-4f88-fc4a-c7cda33b4d4c"],"type":"function","description":"runs the `UserServiceApplication` and starts its execution.","params":[{"name":"args","type_name":"String[]","description":"1 or more command-line arguments passed to the Java application when it is launched, which are then passed to the `SpringApplication.run()` method for further processing.\n\n* `String[] args`: This is an array of strings that represents the command-line arguments passed to the application when it was launched.\n* `SpringApplication.run()`: This method runs a Spring Boot application using the `SpringApplication` instance, passing in the `UserServiceApplication` class and the `args` array as arguments.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":42,"insert":34,"offset":" ","indent":2,"comment":{"start":33,"end":41}},"item_type":"method","length":3,"docLength":8},{"id":"0916e831-047b-b19c-a746-209639f9b897","ancestors":["96cbbf61-e8a4-4f88-fc4a-c7cda33b4d4c"],"type":"function","description":"returns a `BCryptPasswordEncoder` instance, which is a widely-used password hashing algorithm that provides strong security against brute force attacks.","params":[],"returns":{"type_name":"instance","description":"a `BCryptPasswordEncoder` instance, which is used to encrypt passwords using the bcrypt algorithm.\n\nThe function returns an instance of `BCryptPasswordEncoder`. This class is a part of the Java cryptography API and provides password hashing functionality using the BCrypt algorithm.\n\nThe `BCryptPasswordEncoder` object has several attributes that can be used to customize its behavior, such as the cost parameter, which controls the work factor used for hashing, and the salt parameter, which generates a random salt value for each hash calculation.","complex_type":true},"usage":{"language":"java","code":"@Bean\npublic PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n}\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":62,"insert":46,"offset":" ","indent":2,"comment":{"start":45,"end":61}},"item_type":"method","length":4,"docLength":16}]}}}