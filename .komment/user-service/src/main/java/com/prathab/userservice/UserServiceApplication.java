{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The `main` method starts the execution of the application, and the `getPasswordEncoder()` method returns a BCryptPasswordEncoder instance.","diagram":"digraph G {\n    label=\"com.prathab.userservice.UserServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"235e2f1d-5e8e-ffb8-5e47-2d9abe5d85c2","ancestors":[],"type":"function","description":"is a Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption. The class provides a `getPasswordEncoder()` method that returns a BCryptPasswordEncoder instance, which is used to encrypt passwords using the bcrypt algorithm.","name":"UserServiceApplication","location":{"start":32,"insert":26,"offset":" ","indent":0,"comment":{"start":25,"end":31}},"item_type":"class","length":42,"docLength":6},{"id":"4e44ce82-d61a-139d-5340-068ab565944b","ancestors":["235e2f1d-5e8e-ffb8-5e47-2d9abe5d85c2"],"type":"function","description":"runs a Spring Application, specifically the `UserServiceApplication`, passing it the `args`.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\nThe `String[] args` represents an array of command-line arguments passed to the application when it is launched.","complex_type":true}],"name":"main","location":{"start":49,"insert":36,"offset":" ","indent":2,"comment":{"start":35,"end":48}},"item_type":"method","length":3,"docLength":13},{"id":"85143bdb-37e9-e0ae-ca46-7917e07d0b87","ancestors":["235e2f1d-5e8e-ffb8-5e47-2d9abe5d85c2"],"type":"function","description":"returns a `BCryptPasswordEncoder` object, which is used to encrypt passwords using the bcrypt algorithm.","params":[],"returns":{"type_name":"instance","description":"a `BCryptPasswordEncoder` instance, which is used to hash and compare passwords securely.\n\n* The `BCryptPasswordEncoder` object is a class that implements the `PasswordEncoder` interface in Java.\n* The `BCryptPasswordEncoder` class uses the BCrypt password hashing algorithm to encrypt passwords securely.\n* The algorithm is designed to handle passwords of varying lengths and complexity, making it suitable for use in a wide range of applications.","complex_type":true},"usage":{"language":"java","code":"public class UserServiceApplication {\n  @Autowired\n  private PasswordEncoder passwordEncoder;\n  \n  // Example usage of the BCryptPasswordEncoder\n  public void verifyUser(String email, String password) {\n    // Retrieve the user from the database using the email address provided\n    User user = retrieveUserByEmail(email);\n    \n    if (user == null) {\n      throw new UsernameNotFoundException(\"User not found\");\n    }\n    \n    if (!passwordEncoder.matches(password, user.getPassword())) {\n      throw new BadCredentialsException(\"Invalid password\");\n    }\n  }\n}\n","description":""},"name":"getPasswordEncoder","location":{"start":69,"insert":53,"offset":" ","indent":2,"comment":{"start":52,"end":68}},"item_type":"method","length":4,"docLength":16}]}}}