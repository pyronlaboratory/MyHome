{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application with Spring Security features and Eureka client auto-configuration. It creates a BCrypt PasswordEncoder bean for password encryption and main method for starting the application.","items":[{"id":"f92bb2ad-e8cb-0ea1-6144-0ca04eab2efa","ancestors":[],"type":"function","description":"TODO","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0},"item_type":"class","length":13},{"id":"b1b46e6e-3155-87a0-994a-72fb68326743","ancestors":["f92bb2ad-e8cb-0ea1-6144-0ca04eab2efa"],"type":"function","description":"runs a Spring Application using the `SpringApplication.run()` method, passing the `UserServiceApplication` class as an argument.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the `SpringApplication.run()` method when the application is started.\n\n`SpringApplication.run()` takes in the `UserServiceApplication` class as an argument and runs it using the given command-line arguments. `args` is a string array containing the command-line arguments passed to the application.","complex_type":true}],"usage":{"language":"java","code":"public class TestClass {\n  public static void main(String[] args) {\n    UserServiceApplication.main(args);\n  }\n}\n","description":""},"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"a7c42165-7830-aab7-2b42-22adff794097","ancestors":["f92bb2ad-e8cb-0ea1-6144-0ca04eab2efa"],"type":"function","description":"returns a `BCryptPasswordEncoder`, which is a password encryption algorithm that provides secure hashing for storing and verifying passwords.","params":[],"returns":{"type_name":"BCryptPasswordEncoder","description":"a `BCryptPasswordEncoder` instance, which can be used to encrypt passwords using the bcrypt algorithm.\n\n* The function returns a `PasswordEncoder` object, which is an interface in Java that provides methods for encrypting passwords.\n* The specific implementation of the `PasswordEncoder` interface used in this case is `BCryptPasswordEncoder`.\n* This implementation uses the BCrypt hashing algorithm to encrypt passwords, which is considered secure and reliable for password storage.","complex_type":true},"usage":{"language":"java","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n \n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n}\n","description":"\nThis code imports the required classes, and a method that creates a new instance of BCryptPasswordEncoder is provided as a bean using the @Bean annotation."},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2},"item_type":"method","length":4}]}}}