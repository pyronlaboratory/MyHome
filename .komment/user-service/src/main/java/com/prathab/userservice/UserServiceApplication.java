{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that uses Spring Security to handle password encryption and enables the use of the Eureka client for service discovery. The `main` method starts the application, and the `@Bean` annotation is used to provide a BCrypt-based password encoder.","items":[{"id":"6d73912a-2ca2-449d-2a48-b0181dee8660","ancestors":[],"type":"function","description":"is a Spring Boot application that provides an API for managing user accounts. The class includes a main method for starting the application and a bean method for defining a password encoder using BCrypt.","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":13},{"id":"71460563-d62a-6799-264d-dd78ff772030","ancestors":["6d73912a-2ca2-449d-2a48-b0181dee8660"],"type":"function","description":"starts a Spring application by running the `UserServiceApplication`.","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the `SpringApplication.run()` method when the program is started directly from the command line.\n\n* The function calls the `run()` method of the SpringApplication class using the `SpringApplication.run()` method.\n* The `args` parameter is an array of strings that represents the command-line arguments passed to the application when it was launched.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"2576199d-5390-02af-844d-4e145056bd28","ancestors":["6d73912a-2ca2-449d-2a48-b0181dee8660"],"type":"function","description":"returns a `BCryptPasswordEncoder` instance, which is a password hashing and verification class that uses bcrypt to securely store and compare passwords.","params":[],"returns":{"type_name":"instance","description":"a `BCryptPasswordEncoder` instance, which is a password encryption class.\n\nThe `BCryptPasswordEncoder` object is returned, which is an implementation of the `PasswordEncoder` interface in Java. This encoder uses the BCrypt hashing algorithm to securely store and compare passwords. The `BCryptPasswordEncoder` class provides various methods for encrypting and verifying passwords, including `encrypt()` and `verify()`.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4}]}}}