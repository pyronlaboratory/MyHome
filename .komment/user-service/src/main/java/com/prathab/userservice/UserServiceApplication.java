{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application with Eureka client enabled, and includes a custom password encoder implementation using BCrypt.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"e3535249-7bec-7480-9848-e840adf4abf6","ancestors":[],"type":"function","description":"is a Spring Boot application that enables Eureka client functionality and uses BCrypt PasswordEncoder for password encryption.","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":13,"docLength":null},{"id":"111c4877-671f-9ba8-824c-736fcd842b75","ancestors":["e3535249-7bec-7480-9848-e840adf4abf6"],"type":"function","description":"starts the Spring application by running the `UserServiceApplication`.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the application when it is launched.\n\n* `SpringApplication.run()` is called to launch the application with the specified `UserServiceApplication` class and `args`.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"a1eeef5d-57d5-e18b-1142-5331bfa84c06","ancestors":["e3535249-7bec-7480-9848-e840adf4abf6"],"type":"function","description":"returns a `BCryptPasswordEncoder` object, which is used to encrypt passwords using bcrypt algorithm.","params":[],"returns":{"type_name":"PasswordEncoder","description":"a BCrypt password encoder instance.\n\n1. Return type: The function returns an instance of the `BCryptPasswordEncoder` class.\n2. Object identity: Each instance of `BCryptPasswordEncoder` has its own set of internal state, including the encryption salt and IV.\n3. Encryption algorithm: The function uses the BCrypt algorithm to encrypt passwords. This algorithm is designed to be slow and computationally expensive, making it resistant to brute-force attacks.\n4. Salt and IV generation: The `BCryptPasswordEncoder` class generates a random salt and IV for each password encryption. These values are used to create a unique encryption key for each password.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}\n\npublic class UserServiceApplication {\n    \n  @Autowired\n  private PasswordEncoder passwordEncoder;\n\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n  \n  public String encodePassword(String password){\n    return passwordEncoder.encode(password);\n  }\n}\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4,"docLength":null}]}}}