{"name":"UserServiceApplication.java","path":"user-service/src/main/java/com/prathab/userservice/UserServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that enables Eureka client functionality and uses BCrypt password encryption. The application main method launches the SpringApplication runtime, and the getPasswordEncoder bean provides a BCrypt PasswordEncoder instance for encrypting passwords.","items":[{"id":"0505d052-b9e2-748c-4449-ffa44f711a56","ancestors":[],"type":"function","description":"TODO","name":"UserServiceApplication","code":"@SpringBootApplication\n@EnableEurekaClient\npublic class UserServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0},"item_type":"class","length":13},{"id":"caf79a62-e5df-bcb8-444a-d077be77d79d","ancestors":["0505d052-b9e2-748c-4449-ffa44f711a56"],"type":"function","description":"runs a SpringApplication, which initiates the execution of the `UserServiceApplication`.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the application\n\n* Length: The input `args` has a length of 1.\n* Types: The types of the elements in `args` are String.\n* Attributes: `args` does not have any attributes.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n}\n","description":""},"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"97b21f9d-7f22-d0a9-3648-382d6da89c5d","ancestors":["0505d052-b9e2-748c-4449-ffa44f711a56"],"type":"function","description":"returns a `BCryptPasswordEncoder`, which is a secure password encryption algorithm used to protect sensitive data.","params":[],"returns":{"type_name":"instance","description":"a `BCryptPasswordEncoder` instance, which can be used to encrypt passwords using the bcrypt hashing algorithm.\n\n* `BCryptPasswordEncoder`: This is an implementation of a password encoder using the BCrypt algorithm.\n* `new`: The keyword used to create a new instance of the `BCryptPasswordEncoder` class.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}\n","description":"\nThe above snippet shows a Java method named `getPasswordEncoder()` that returns an object of type `BCryptPasswordEncoder`. The `BCryptPasswordEncoder` is a class from the Spring Security library that provides a simple way to generate salted, hashed passwords. The returned object can be used to encode and verify passwords in various parts of the application."},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2},"item_type":"method","length":4}]}}}