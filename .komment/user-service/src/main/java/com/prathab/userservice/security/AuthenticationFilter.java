{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"an authentication filter for Spring WebFlux security that extracts user details from a successful authentication attempt and generates a JSON Web Token (JWT) to be added to the HTTP response headers with the user ID. The filter chain is passed as an argument, which represents a sequence of filters that can be applied to the current request. The successful authentication result contains information about the authenticated user's details as its principal, which is deserialized to access its properties, such as the user principal and token expiration time. The code uses packages such as `org.springframework.web.filter`, `io.jsonwebtoken`, and `jdk.security`.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AuthenticationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        AuthenticationFilter [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"e50aaf3f-5930-46ad-d648-203559b699ce","ancestors":[],"type":"function","description":"in Spring Security is used to handle incoming HTTP requests and authenticate users using a custom authentication manager. The filter uses the `Jwts` class to generate a JSON Web Token (JWT) for the authenticated user, which is then added to the response headers along with the user ID. The filter also passes the authentication request through a chain of filters before returning the response, allowing for additional security measures such as authentication manager validation and input validation.","name":"AuthenticationFilter","code":"public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  /**\n   * attempts to authenticate a user by reading the user's credentials from an input\n   * stream, passing them to the `authenticate` method of the authentication manager,\n   * and returning the result.\n   * \n   * @param request HTTP request made by the user, which contains the login details in\n   * its input stream.\n   * \n   * \t- `getInputStream()` - returns the input stream of the request, which contains\n   * the JSON data sent by the client.\n   * \t- `getEmail()` - retrieves the email address of the user from the JSON data.\n   * \t- `getPassword()` - retrieves the password of the user from the JSON data.\n   * \t- `Collections.emptyList()` - returns an empty list, which is used as the\n   * authentication token's principal.\n   * \n   * @param response response object, which is used to handle any exceptions or errors\n   * that may occur during the authentication process.\n   * \n   * \t- `getInputStream()`: returns the input stream for reading the request body.\n   * \t- `getMethod()`: returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in\n   * the incoming request.\n   * \t- `getPathInfo()`: returns the path segment after the URL's last slash (e.g.,\n   * \"/login\" for a URL like \"http://example.com/login\").\n   * \t- `getQueryString()`: returns the query string (e.g., \"?q=search&p=10\") appended\n   * to the URL.\n   * \t- `getRemoteAddr()`: returns the client's IP address.\n   * \t- `getRequestURI()`: returns the absolute path of the incoming request (e.g., \"/login\").\n   * \t- `getScheme()`: returns the scheme of the URL (e.g., \"http\" or \"https\").\n   * \n   * @returns an Authentication object representing a successful authentication attempt.\n   * \n   * \t- The output is an instance of `AuthenticationException` indicating that an error\n   * occurred during authentication.\n   * \t- The error is thrown as a `RuntimeException`, which means it will be propagated\n   * to the calling code and handled appropriately.\n   * \t- The exception contains an `IOException` cause, which represents the underlying\n   * issue that led to the authentication failure.\n   */\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  /**\n   * authenticates a user and generates a JWT token, adding it to the HTTP response\n   * headers with the user ID.\n   * \n   * @param request HTTP request that triggered the authentication process.\n   * \n   * \t- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`\n   * class, which contains information about the HTTP request received by the filter.\n   * \t+ `method`: The method (e.g., GET, POST, PUT, DELETE) used to make the request.\n   * \t+ `path`: The URL path of the requested resource.\n   * \t+ `queryString`: The query string (if any) part of the URL.\n   * \t+ `serverName`: The hostname and port number of the server that served the request.\n   * \t+ `serverPort`: The port number of the server that served the request.\n   * \t+ `contextPath`: The context path (if any) of the requested resource.\n   * \t+ `requestURI`: The request URI (i.e., the part of the URL after the last forward\n   * slash).\n   * \t+ `RemoteAddr`: The IP address and port number of the client that made the request.\n   * \t+ `userAgent`: The user agent string (i.e., the browser or app making the request).\n   * \n   * The filter chain `chain` is also passed as an argument, which represents a sequence\n   * of filters that can be applied to the current request.\n   * \n   * Finally, the authentication result `authResult` contains information about the\n   * successful authentication attempt, including the user principal (i.e., the username)\n   * and other details.\n   * \n   * @param response ServletResponse object to which the authentication information is\n   * added, specifically the token and user ID, in the form of headers.\n   * \n   * \t- `HttpServletRequest request`: represents the HTTP request object\n   * \t- `HttpServletResponse response`: represents the HTTP response object\n   * \t- `FilterChain chain`: represents the filter chain\n   * \t- `Authentication authResult`: represents the authentication result\n   * \n   * The function then performs the following actions:\n   * \n   * \t- extracts the username from the authenticated user principal (`var username =\n   * ((User) authResult.getPrincipal()).getUsername();`)\n   * \t- retrieves the user details for the extracted username using the `appUserDetailsService`\n   * (`var userDto = appUserDetailsService.getUserDetailsByUsername(username);`)\n   * \t- generates a JSON Web Token (JWT) using the `Jwts` class (`var token =\n   * Jwts.builder().setSubject(userDto.getUserId()).setExpiration(new Date(System.currentTimeMillis()\n   * + Long.parseLong(environment.getProperty(\"token.expiration_time\")))) ...`)\n   * \t- adds the generated token to the response (`response.addHeader(\"token\", token;`))\n   * and also adds the user ID to the response (`response.addHeader(\"userId\", userDto.getUserId();)`)\n   * \n   * @param chain chain of filters that the authentication request is passing through,\n   * and it is used to determine the appropriate action to take once the authentication\n   * is successful.\n   * \n   * \t- `request`: The HTTP request received from the client for authentication.\n   * \t- `response`: The HTTP response to be sent back to the client after authentication\n   * is successful.\n   * \t- `authResult`: The result of the authentication process, which contains the\n   * authenticated user's details as its principal.\n   * \t- `FilterChain`: The chain of filters that the request passed through before\n   * reaching the authentication filter.\n   * \n   * @param authResult authentication result returned by the filter chain, providing\n   * the authenticated user's principal and details.\n   * \n   * \t- `HttpServletRequest request`: This represents the incoming HTTP request that\n   * triggered the authentication process.\n   * \t- `HttpServletResponse response`: This represents the outgoing HTTP response that\n   * will include the authentication token.\n   * \t- `FilterChain chain`: This represents the chain of filters that were applied to\n   * the incoming request, leading to the current point in the authentication process.\n   * \t- `Authentication authResult`: This represents the result of the authentication\n   * process, which includes the user principal and other information. The `authResult`\n   * object can be deserialized to access its properties, such as `getPrincipal()` for\n   * the user principal, and `getExpiration()` for the token expiration time.\n   */\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}","location":{"start":42,"insert":38,"offset":" ","indent":0,"comment":{"start":37,"end":41}},"item_type":"class","length":156,"docLength":4},{"id":"0ad5eb05-1f1a-e2bf-3c47-757431f9fbef","ancestors":["e50aaf3f-5930-46ad-d648-203559b699ce"],"type":"function","description":"attempts to authenticate a user by reading the login request from the input stream, passing it to the authentication manager for verification, and returning the authenticated user's details if successful.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request made by the user to authenticate with the application.\n\n* `getInputStream()`: Returns an input stream that can be used to read the request body.\n* `getEmail()`: Returns the email address of the user attempting authentication.\n* `getPassword()`: Returns the password of the user attempting authentication.\n* `Collections.emptyList()`: Returns an empty list, which is used as a default value in the `authenticate` method.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is used to send the authentication result back to the client.\n\n* `HttpServletRequest request`: This is the incoming HTTP request containing user login credentials.\n* `HttpServletResponse response`: This is the HTTP response generated by the server in response to the client's request.\n\nThe function attempts authentication using the `getAuthenticationManager()` method, which returns an `Authentication` object upon successful authentication.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an AuthenticationException if the login attempt fails, otherwise it returns a successfully authenticated AuthenticationToken.\n\n* The input stream is read using `objectMapper.readValue()` method from the `HttpServletRequest`.\n* The resulting object is of type `LoginUserRequest`, which represents a login request containing an email and password.\n* The authentication manager is called with a `UsernamePasswordAuthenticationToken` object containing the email and password from the login request.\n* The authentication manager returns an authentication result, which is stored in the `Authentication` object.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        var loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList());\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n","description":"\nThe attemptAuthentication method is a java method that is overridden in the custom AuthenticationFilter class. It is used to handle authentication requests from the client. This method should be provided an HttpServletRequest and HttpServletResponse object, which it then uses to extract the data for the login credentials. This method then passes this extracted data to the getAuthenticationManager() method to authenticate the user using a UsernamePasswordAuthenticationToken. This is done by calling the authenticate() method of the AuthenticationManager class. The authentication process is then completed and an Authentication object is returned as a result.\nIn the example code, the attemptAuthentication() method first attempts to extract login credentials from the request's input stream in the form of an LoginUserRequest object using ObjectMapper's readValue method. It then passes this extracted data to the getAuthenticationManager() method by creating a UsernamePasswordAuthenticationToken with the email and password provided as arguments. This is then authenticated using the authenticate() method of the AuthenticationManager class, which returns an Authentication object. The authentication process is completed and the returned Authentication object is then returned as a result from this method to handle the authentication request from the client."},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":94,"insert":56,"offset":" ","indent":2,"comment":{"start":55,"end":93}},"item_type":"method","length":13,"docLength":38},{"id":"5d312215-6e6d-ce88-b249-022677295f5e","ancestors":["e50aaf3f-5930-46ad-d648-203559b699ce"],"type":"function","description":"authenticates a user and generates a token with an expiration time set by the environment variable. The token is added to the HTTP response headers along with the user ID.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process and contains information about the user's credentials and actions.\n\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the HTTP request made to the servlet. The request can be deserialized using `ObjectDeserializer`, and its properties/attributes include:\n\t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n\t+ `getPathInfo()`: Returns the path part of the URL after the context path (e.g., /login)\n\t+ `getPathTranslated()`: Returns the translated path (e.g., /login)\n\t+ `getQueryString()`: Returns the query string (e.g., ?username=john&password=123456)\n\t+ `getParameterMap()`: Returns a map of all query parameters (e.g., {username=\"john\", password=\"123456\"})\n\t+ `getRemoteAddr()`: Returns the remote IP address of the client making the request\n\t+ `getLocalAddr()`: Returns the local IP address of the servlet container making the request\n\t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n\t+ `getRequestURI()`: Returns the request URI without the query string (e.g., /login)\n\t+ `getProtocol()`: Returns the protocol used to make the request (e.g., HTTP/1.1)\n\t+ `getContentLength()`: Returns the content length of the request body (if any)\n\t+ `getContentType()`: Returns the MIME type of the request body (if any)","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"ServletResponse object that will receive the token and user ID headers.\n\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, containing information about the HTTP request received by the filter.\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, providing information about the HTTP response generated by the filter.\n* `FilterChain chain`: This is an instance of the `FilterChain` class, representing the chain of filters that have been applied to the incoming request.\n* `Authentication authResult`: This is an instance of the `Authentication` class, containing details about the authentication result, such as the user principal and the authentication status.\n\nThe function then extracts information from the authentication result and generates a token using the `Jwts` class. The generated token is added to the response headers as follows:\n\n* `response.addHeader(\"token\", token)`: Adds the token to the HTTP response headers.\n* `response.addHeader(\"userId\", userDto.getUserId())`: Adds the user ID to the HTTP response headers.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"filter chain that the successful authentication request is being processed through.\n\n* `HttpServletRequest request`: The HTTP request object that triggered the filter's execution.\n* `HttpServletResponse response`: The HTTP response object that the filter will write its output to.\n* `FilterChain chain`: The filter chain that this function is a part of, which contains other filters that can modify the input before it reaches this one.\n* `Authentication authResult`: The result of the authentication attempt, which contains the user principal (username) and other details.\n\nThe function then performs the following actions:\n\n1. Retrieves the username from the authentication result using the `((User) authResult.getPrincipal())`.\n2. Calls the `appUserDetailsService` to retrieve the user details for the retrieved username.\n3. Generates a JSON Web Token (JWT) using the `Jwts` class, which includes the user ID, expiration time, and secret key.\n4. Adds the generated token as an HTTP header in the response object.\n5. Adds the user ID as another HTTP header in the response object.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"authentication result of the current request, providing the authenticated principal and related information to generate an access token.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered the filter chain execution.\n* `HttpServletResponse response`: The outgoing HTTP response generated by the filter chain execution.\n* `FilterChain chain`: The next filter in the chain to be executed, which is passed as an argument to this function.\n* `Authentication authResult`: The deserialized authentication result object, containing the authenticated principal and other attributes.","complex_type":true}],"usage":{"language":"java","code":"// Successful authentication, so send the token back to the client\nsuccessfulAuthentication(request, response, chain, authResult);\n","description":"\nIn this example, the method `successfulAuthentication` is called with four arguments. The first argument is an instance of type `HttpServletRequest`, which represents the incoming HTTP request that triggered the authentication process. The second argument is an instance of type `HttpServletResponse`, which represents the outgoing HTTP response that will include the authentication token. The third argument is an instance of type `FilterChain`, which represents the chain of filters that were applied to the incoming request, leading to the current point in the authentication process. The fourth argument is an instance of type `Authentication`, which represents the result of the authentication process, including the user principal and other information.\n\nInside the method, we first extract the username from the authenticated user's principal using the `getUsername()` method of the `User` class. We then use this username to retrieve the user details for this user by calling the `appUserDetailsService.getUserDetailsByUsername(username)` method. This method is responsible for retrieving and returning the user details for a given username from the database.\n\nNext, we create a JSON Web Token (JWT) using the `Jwts` class of Spring Security. We set its subject to the user ID that was retrieved earlier, and we set its expiration time to the current system time plus the value of the `token.expiration_time` property from the application configuration file. We also sign it with the HS512 algorithm using the `token.secret` property as a secret key. Finally, we compact the JWT into a string representation using the `compact()` method, which is then added to the response headers under the `token` header name and the `userId` header name.\n\nThis completes the successful authentication process by sending the authentication token back to the client. Note that this method is called automatically when the authentication process is successful."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":180,"insert":108,"offset":" ","indent":2,"comment":{"start":107,"end":179}},"item_type":"method","length":17,"docLength":72}]}}}