{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An `AuthenticationFilter` class that extends `UsernamePasswordAuthenticationFilter`. It generates a JWT token as a response for login requests and caches user details in an `AppUserDetailsService`. The filter attempts authentication using an `AuthenticationManager`, successful authentication sets headers with the user ID and a token generated using `Jwts`.","items":[{"id":"3ddfab38-36f2-f687-b749-3e293777592e","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationFilter","code":"public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}","location":{"start":42,"insert":42,"offset":" ","indent":0},"item_type":"class","length":46},{"id":"5504fc92-a659-4bac-6445-ca062404e99f","ancestors":["3ddfab38-36f2-f687-b749-3e293777592e"],"type":"function","description":"authenticates a user by reading their login details from the request input stream, passing them to the `getAuthenticationManager()` method for authentication, and returning the result.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication attempt.\n\n* `getInputStream()`: returns the underlying input stream of the `HttpServletRequest` object.\n* `getEmail()`: retrieves the email address of the user in the login request.\n* `getPassword()`: retrieves the password of the user in the login request.\n* `getAuthenticationManager()`: references the authentication manager responsible for authenticating the user.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that will receive the result of the authentication attempt.\n\n* `getInputStream()` - Gets an InputStream object from the Servlet request.\n* `getEmail()` - Returns the email address of the user.\n* `getPassword()` - Returns the password of the user.\n* `getAuthenticationManager()` - Gets an instance of AuthenticationManager, which is responsible for authenticating users.\n* `authenticate()` - Calls the `authenticate()` method of the AuthenticationManager to perform authentication using a UsernamePasswordAuthenticationToken object.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an authentication result object representing the success or failure of the login attempt.\n\n* `var loginUserRequest`: The `LoginUserRequest` object read from the input stream using ObjectMapper.\n* `getEmail()` and `getPassword()`: Methods that retrieve the email address and password of the user, respectively.\n* `Collections.emptyList()`: An empty list used as the authentication token's principal.\n* `getAuthenticationManager()`: A method that returns an instance of the `AuthenticationManager` interface, which provides the actual authentication functionality.\n* `authenticate()`: The method called on the `AuthenticationManager` instance to perform the authentication. It takes a `UsernamePasswordAuthenticationToken` object as its parameter.","complex_type":true},"usage":{"language":"java","code":"import org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\npublic class MyCustomLoginController extends UsernamePasswordAuthenticationFilter {\n    @Override\n    protected Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n        String email = request.getParameter(\"email\"); // Get the email from the login page\n        String password = request.getParameter(\"password\"); // Get the password from the login page\n        \n        UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(email, password);\n        return super.attemptAuthentication(authRequest, response);\n    }\n}\n","description":""},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"def3f566-1ead-2db4-2548-b452c16861a8","ancestors":["3ddfab38-36f2-f687-b749-3e293777592e"],"type":"function","description":"verifies a user's authentication and generates a JWT token with the user's ID and expiration time. It adds the token and user ID to the HTTP response headers for further processing.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process and contains information such as the user's credentials and other details.\n\n* `HttpServletRequest request`: This is an instance of a Java class that represents an HTTP request. It contains various attributes and methods related to the request, such as `getMethod()`, `getRemoteAddr()`, `getHeader()` etc.\n* `HttpServletResponse response`: This is an instance of a Java class that represents an HTTP response. It contains various attributes and methods related to the response, such as `setStatus()`, `setContentLength()`, `setContentType()` etc.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object, to which additional headers containing the authentication token and user ID are added.\n\n* `HttpServletRequest request`: The HTTP request that triggered the authentication process.\n* `HttpServletResponse response`: The HTTP response generated by the authentication process.\n* `FilterChain chain`: The filter chain that led to the authentication function being called.\n* `Authentication authResult`: The result of the authentication process, including the authenticated user and any additional information.\n\nThe `response` object has several attributes, including:\n\n* `addHeader()` method: Adds a header to the HTTP response with the specified name and value.\n* `getHeader()` method: Retrieves the value of an HTTP header.\n* `setHeader()` method: Sets an HTTP header with the specified name and value.\n* `addMethod()` method: Adds an HTTP method (e.g., GET, POST, PUT, DELETE) to the HTTP request or response.\n* `getMethod()` method: Retrieves the HTTP method of the request or response.\n* `setMethod()` method: Sets the HTTP method of the request or response.\n\nTherefore, in the `successfulAuthentication` function, the `response` object is used to add headers containing the authenticated user's details and to set the appropriate HTTP methods for the response.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain that contains the current authentication request, allowing the method to access and modify its behavior within the chain.\n\n* `HttpServletRequest request`: Represents the HTTP request received by the filter.\n* `HttpServletResponse response`: Represents the HTTP response generated by the filter.\n* `FilterChain chain`: Represents the chain of filters that were executed before this filter in the pipeline.\n* `Authentication authResult`: Represents the result of the authentication process, containing the authenticated user principal and other details.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of the authentication process, providing the authenticated user's details as a principal object, which is then used to generate a JWT token.\n\n* `authResult.getPrincipal()` returns an instance of `User`, representing the authenticated user.\n* `authResult.getExpired()` returns a boolean indicating whether the token has expired.\n* `authResult.getIssuer()` returns the issuer of the token.\n* `authResult.getJwtId()` returns the JWT ID of the token.\n* `authResult.getNotBefore()` returns the date and time when the token becomes valid.\n* `authResult.getSubject()` returns the subject of the token, which is usually the user's username.\n* `authResult.getExpiration()` returns the expiration time of the token in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).\n\nThe function then creates a new JWT using the `Jwts` class and sets various properties such as the subject, expiration time, and signature algorithm. The resulting token is added to the response headers as a `token` header, while the user ID is added as a `userId` header.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n","description":"\nThe method is a part of the UsernamePasswordAuthenticationFilter class, which authenticates a user's credentials and generates a JSON Web Token (JWT) for them if successful. The method takes in four parameters: an HttpServletRequest object representing the incoming request, an HttpServletResponse object representing the outgoing response, a FilterChain object representing the filter chain that is being processed, and an Authentication object representing the authentication result of the request.\nThe method first retrieves the user's username from the Authentication object using the getPrincipal() method, and then uses the AppUserDetailsService class to retrieve the User object for this username. The method then generates a JSON Web Token (JWT) using the Jwts class and adds it as an \"token\" header in the response, along with the user's ID as a \"userId\" header."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2},"item_type":"method","length":17}]}}}