{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An `AuthenticationFilter` class that extends Spring Security's `UsernamePasswordAuthenticationFilter`. The filter generates a JWT token as a response for login requests and caches user details in a custom service. The `objectMapper` is used to read JSON data from the request input stream, while the `Environment` object provides property values for token expiration time and secret. The `appUserDetailsService` retrieves user details based on the username, and the `AuthenticationManager` authenticates the login request using a custom principal.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"1a9f579d-c3d2-2192-a94b-9ee25b4f53ea","ancestors":["46116bb5-b39d-a1ba-9a4c-affc32571189"],"type":"function","description":"attempts to authenticate a user by reading the user's credentials from an input stream, passing them to the `authenticate` method of the authentication manager, and returning the result.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request made by the user, which contains the login details in its input stream.\n\n* `getInputStream()` - returns the input stream of the request, which contains the JSON data sent by the client.\n* `getEmail()` - retrieves the email address of the user from the JSON data.\n* `getPassword()` - retrieves the password of the user from the JSON data.\n* `Collections.emptyList()` - returns an empty list, which is used as the authentication token's principal.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object, which is used to handle any exceptions or errors that may occur during the authentication process.\n\n* `getInputStream()`: returns the input stream for reading the request body.\n* `getMethod()`: returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in the incoming request.\n* `getPathInfo()`: returns the path segment after the URL's last slash (e.g., \"/login\" for a URL like \"http://example.com/login\").\n* `getQueryString()`: returns the query string (e.g., \"?q=search&p=10\") appended to the URL.\n* `getRemoteAddr()`: returns the client's IP address.\n* `getRequestURI()`: returns the absolute path of the incoming request (e.g., \"/login\").\n* `getScheme()`: returns the scheme of the URL (e.g., \"http\" or \"https\").","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an Authentication object representing a successful authentication attempt.\n\n* The output is an instance of `AuthenticationException` indicating that an error occurred during authentication.\n* The error is thrown as a `RuntimeException`, which means it will be propagated to the calling code and handled appropriately.\n* The exception contains an `IOException` cause, which represents the underlying issue that led to the authentication failure.","complex_type":true},"usage":{"language":"java","code":"// Create an instance of the ObjectMapper class\nObjectMapper objectMapper = new ObjectMapper();\n\n// Set up a login request for the user with email \"user@example.com\" and password \"password1234\"\nLoginUserRequest loginUserRequest = new LoginUserRequest(\"user@example.com\", \"password1234\");\n\n// Serialize the login request into a JSON string using the ObjectMapper class\nString jsonLoginRequest = objectMapper.writeValueAsString(loginUserRequest);\n\n// Create an instance of the HttpServletRequest class with the serialized JSON string as the input stream\nHttpServletRequest request = new MockHttpServletRequest(jsonLoginRequest, \"POST\", \"/login\");\n\n// Create an instance of the HttpServletResponse class\nHttpServletResponse response = new MockHttpServletResponse();\n\n// Call the attemptAuthentication method and pass in the HttpServletRequest and HttpServletResponse instances as arguments\nattemptAuthentication(request, response);\n","description":""},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13,"docLength":null},{"id":"b26a9ab6-9523-648a-5d4c-4c7e9dedb0c3","ancestors":["46116bb5-b39d-a1ba-9a4c-affc32571189"],"type":"function","description":"authenticates a user and generates a JWT token, adding it to the HTTP response headers with the user ID.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process.\n\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the HTTP request received by the filter.\n\t+ `method`: The method (e.g., GET, POST, PUT, DELETE) used to make the request.\n\t+ `path`: The URL path of the requested resource.\n\t+ `queryString`: The query string (if any) part of the URL.\n\t+ `serverName`: The hostname and port number of the server that served the request.\n\t+ `serverPort`: The port number of the server that served the request.\n\t+ `contextPath`: The context path (if any) of the requested resource.\n\t+ `requestURI`: The request URI (i.e., the part of the URL after the last forward slash).\n\t+ `RemoteAddr`: The IP address and port number of the client that made the request.\n\t+ `userAgent`: The user agent string (i.e., the browser or app making the request).\n\nThe filter chain `chain` is also passed as an argument, which represents a sequence of filters that can be applied to the current request.\n\nFinally, the authentication result `authResult` contains information about the successful authentication attempt, including the user principal (i.e., the username) and other details.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"ServletResponse object to which the authentication information is added, specifically the token and user ID, in the form of headers.\n\n* `HttpServletRequest request`: represents the HTTP request object\n* `HttpServletResponse response`: represents the HTTP response object\n* `FilterChain chain`: represents the filter chain\n* `Authentication authResult`: represents the authentication result\n\nThe function then performs the following actions:\n\n* extracts the username from the authenticated user principal (`var username = ((User) authResult.getPrincipal()).getUsername();`)\n* retrieves the user details for the extracted username using the `appUserDetailsService` (`var userDto = appUserDetailsService.getUserDetailsByUsername(username);`)\n* generates a JSON Web Token (JWT) using the `Jwts` class (`var token = Jwts.builder().setSubject(userDto.getUserId()).setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(environment.getProperty(\"token.expiration_time\")))) ...`)\n* adds the generated token to the response (`response.addHeader(\"token\", token;`)) and also adds the user ID to the response (`response.addHeader(\"userId\", userDto.getUserId();)`)","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"chain of filters that the authentication request is passing through, and it is used to determine the appropriate action to take once the authentication is successful.\n\n* `request`: The HTTP request received from the client for authentication.\n* `response`: The HTTP response to be sent back to the client after authentication is successful.\n* `authResult`: The result of the authentication process, which contains the authenticated user's details as its principal.\n* `FilterChain`: The chain of filters that the request passed through before reaching the authentication filter.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"authentication result returned by the filter chain, providing the authenticated user's principal and details.\n\n* `HttpServletRequest request`: This represents the incoming HTTP request that triggered the authentication process.\n* `HttpServletResponse response`: This represents the outgoing HTTP response that will include the authentication token.\n* `FilterChain chain`: This represents the chain of filters that were applied to the incoming request, leading to the current point in the authentication process.\n* `Authentication authResult`: This represents the result of the authentication process, which includes the user principal and other information. The `authResult` object can be deserialized to access its properties, such as `getPrincipal()` for the user principal, and `getExpiration()` for the token expiration time.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n","description":"\nThis method is a part of the AuthenticationFilter class which extends UsernamePasswordAuthenticationFilter in spring security framework. The method is called successfulAuthentication() and takes in HttpServletRequest, HttpServletResponse, FilterChain, and Authentication as parameters. \nThe method first retrieves the username from the authentication principal of type User, then it retrieves the user details based on this username using the getUserDetailsByUsername() method from AppUserDetailsService which is a service class that interacts with database to retrieve user details based on the given username. \nThen it creates a JWT token using the generated secret key and expiration time as configured in application properties, compiles the builder and adds the created token as a response header, and also adds the userId as a separate response header. The method then forwards to the next filter in chain.\nThe example code shows how this method can be used to generate JWT tokens for authentication."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17,"docLength":null}]}}}