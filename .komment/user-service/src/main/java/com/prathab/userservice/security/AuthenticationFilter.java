{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"A filter in the spring framework for authenticating users. It uses the Spring Security module to handle authentication and generates a JSON Web Token (JWT) upon successful authentication. The token includes the user ID and expiration time set by an environment variable. The filter chain is processed, and the generated token is added to the HTTP response headers as well as the user ID.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AuthenticationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    WebSecurity\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        AuthenticationFilter [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"67cda459-fa87-ebb9-bf41-b76f58a3d9f4","ancestors":[],"type":"function","description":"is a Java filter that processes incoming HTTP requests and performs authentication tasks. It takes in a request object, response object, chain of filters, and an authentication result, and generates a token using the Jwts class based on the authenticated principal's username. The token and user ID are then added to the response headers.","name":"AuthenticationFilter","location":{"start":47,"insert":38,"offset":" ","indent":0,"comment":{"start":37,"end":46}},"item_type":"class","length":164,"docLength":9},{"id":"2bab40a7-7fc6-3793-4d41-4e775e8e940f","ancestors":["67cda459-fa87-ebb9-bf41-b76f58a3d9f4"],"type":"function","description":"authenticates a user using an email and password, using the provided `getAuthenticationManager()` instance.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request received by the server and contains information about the user's login attempt, including the user's email and password.\n\n* `getInputStream()` - This method returns the input stream of the HTTP request.\n* `getEmail()` - This method retrieves the email address of the user from the login request.\n* `getPassword()` - This method retrieves the password of the user from the login request.\n* `getAuthenticationManager()` - This method provides an instance of the authentication manager, which is responsible for authenticating users.\n\nThe function then attempts to authenticate the user using the `authenticate()` method of the authentication manager, passing in a `UsernamePasswordAuthenticationToken` object containing the email and password of the user.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object, which is used to send the authentication result back to the client.\n\n* `getInputStream()`: Returns the input stream of the HTTP request.\n* `getAuthenticationManager()`: Returns an instance of the authentication manager class, which is responsible for authenticating the user.\n* `authenticate()`: Performs authentication using the provided username and password.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an AuthenticationManager that authenticates a user based on their email and password.\n\n* `getEmail()` - Returns the email address of the user being authenticated.\n* `getPassword()` - Returns the password of the user being authenticated.\n* `getAuthenticationManager()` - The authentication manager used to perform the authentication.\n* `authenticate()` - The method called on the authentication manager to perform the authentication. It takes a `UsernamePasswordAuthenticationToken` object as its parameter, which contains the user's email and password.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        var loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n","description":"\nIn this example, the attemptAuthentication method is overridden to read the user's email and password from an input stream of the HttpServletRequest object. The UsernamePasswordAuthenticationToken class is used to create a token using the user's credentials. The getAuthenticationManager() method is then called to authenticate the token, which checks if the user's credentials are valid or not. If the authentication is successful, it returns an instance of Authentication containing the user's principal and other details.\n\nThis method is used by Spring Security to verify a user's credentials when they submit them to the application during the login process. It ensures that the user's input is properly sanitized and validated before the authentication attempt is made, which helps prevent unauthorized access to the application."},"name":"attemptAuthentication","location":{"start":97,"insert":61,"offset":" ","indent":2,"comment":{"start":60,"end":96}},"item_type":"method","length":13,"docLength":36},{"id":"bcac554c-b706-e5a6-e449-267f3f8ed210","ancestors":["67cda459-fa87-ebb9-bf41-b76f58a3d9f4"],"type":"function","description":"authenticates a user and generates a JWT token with the user's ID and expiration time, which is then added to the HTTP response headers as a security measure.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process and contains information about the user's authentication attempt.\n\n* `HttpServletRequest request`: This object represents an HTTP request, which contains information about the client's request, such as the URL, method, headers, and parameters.\n* `HttpServletResponse response`: This object represents the HTTP response, which is generated by the server in response to the client's request. It contains information about the status of the response, such as the status code, headers, and body.\n* `FilterChain chain`: This object represents a chain of filters that are applied to the incoming request before it reaches the authentication filter. Each filter in the chain can modify the request in some way, such as adding security headers or performing authentication checks.\n* `Authentication authResult`: This object represents the result of the authentication process. It contains information about the user who was authenticated, such as their username and principal attributes.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object, to which additional headers containing the authentication token and user ID are added.\n\n* `HttpServletRequest request`: Represents an HTTP request object containing information about the incoming request.\n* `HttpServletResponse response`: Represents an HTTP response object used to send a response back to the client.\n* `FilterChain chain`: Represents a filter chain, which is a set of filters that can be applied to a single request.\n* `Authentication authResult`: Represents an authentication result object containing information about the authentication process.\n\nThe function then proceeds to extract information from the authentication result object and create a JWT token. The properties of the token are explained below:\n\n* `var username`: Represents the username of the authenticated user.\n* `var userDto`: Represents a user details object containing information about the user.\n* `var token`: Represents the generated JWT token.\n* `setSubject(userDto.getUserId())`: Sets the subject of the token to the user ID of the authenticated user.\n* `setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(environment.getProperty(\"token.expiration_time\"))))`: Sets the expiration time of the token based on the property `token.expiration_time`.\n* `signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))`: Signs the token using the HS512 signature algorithm and the secret provided by the `environment.getProperty()` method.\n* `compact()`: Compresses the token into a string.\n* `response.addHeader(\"token\", token)`: Adds the generated token to the response headers.\n* `response.addHeader(\"userId\", userDto.getUserId())`: Adds the user ID of the authenticated user to the response headers.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"chain of filters that the authentication request is passing through, and it allows the function to access and modify the filter chain as needed.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered this filter chain execution.\n* `HttpServletResponse response`: The outgoing HTTP response generated by the filter chain execution.\n* `FilterChain chain`: The filter chain that was executed, which may include multiple filters in a pipeline.\n* `Authentication authResult`: The result of the authentication process, including the authenticated user and any additional information.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of an authentication attempt, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: The HTTP request that triggered the authentication filter.\n* `HttpServletResponse response`: The HTTP response to be generated by the filter.\n* `FilterChain chain`: The chain of filters that led to the authentication filter being called.\n* `Authentication authResult`: The result of the authentication process, containing the authenticated principal and other information.\n\nThe properties of `authResult` include:\n\n* `getPrincipal()`: Returns the authenticated principal, which is typically an object representing the user who was authenticated.\n* `getUsername()`: Returns the username of the authenticated user.\n* `getUserId()`: Returns the ID of the authenticated user.\n\nThe function then creates a JWT token using the `Jwts` class, based on the authenticated principal and various configuration properties. The token is added to the HTTP response headers as a security token.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n    String username = ((User) authResult.getPrincipal()).getUsername();\n    UserDto userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    String token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n","description":"\nThis method is called whenever an authentication request has been processed successfully by the filter chain, and it takes four arguments:\n\n* `request` - The incoming HTTP request that triggered the filter chain execution.\n* `response` - The outgoing HTTP response generated by the filter chain execution.\n* `chain` - The next filter in the chain to be executed, which is passed as an argument to this function.\n* `authResult` - The deserialized authentication result object, containing the authenticated principal and other attributes.\n\nIn this method, we first extract the username from the authentication result using `((User) authResult.getPrincipal()).getUsername()`. We then call `appUserDetailsService.getUserDetailsByUsername(username)` to retrieve user details for the retrieved username.\n\nNext, we generate a JSON Web Token (JWT) using the `Jwts` class, which includes the user ID, expiration time, and secret key. We set the subject of the token with the retrieved user ID, set its expiration time with the current time plus the configured expiration time, sign it with the secret key, and compact it into a single string.\n\nFinally, we add the generated token as an HTTP header in the response object using `response.addHeader(\"token\", token)`. We also add the user ID as another HTTP header in the response object using `response.addHeader(\"userId\", userDto.getUserId())`."},"name":"successfulAuthentication","location":{"start":193,"insert":111,"offset":" ","indent":2,"comment":{"start":110,"end":192}},"item_type":"method","length":17,"docLength":82}]}}}