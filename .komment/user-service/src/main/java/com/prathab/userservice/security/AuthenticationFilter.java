{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An `AuthenticationFilter` class that extends `UsernamePasswordAuthenticationFilter`. The filter generates a JWT token as a response for login requests and catering to service needs. It uses an `ObjectMapper`, `Environment`, and `AppUserDetailsService` to read and process the login request, generate the JWT token, and retrieve user details, respectively. The filter also includes a successful authentication method that adds the JWT token and user ID to the HTTP response headers.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"fbd8eb10-d4d2-3ca0-8f4e-2abafe427716","ancestors":["70b9e3cb-e1c1-e59e-3941-92214f0cf9c2"],"type":"function","description":"attempts to authenticate a user by reading input from the request stream, creating an authentication token with the user's email and password, and passing it to the `authenticate` method of the `getAuthenticationManager()` instance.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request containing the login credentials of the user attempting authentication.\n\nThe `HttpServletRequest request` contains the following attributes:\n\n* `InputStream inputStream`: The input stream for reading the JSON data from the request body.\n* `String method`: The HTTP method (e.g., GET, POST, PUT, DELETE) in the request.\n* `String protocol`: The protocol (e.g., HTTP/1.1, HTTP/2) in the request.\n* `Integer statusCode`: The HTTP status code (e.g., 200, 404) in the response.\n* `String url`: The URL of the request (including the path and query string).\n* `Map<String, Object> attributes`: A map of key-value pairs representing the request's attributes (e.g., user agent, accept language, etc.).","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that is being used to handle the authentication request.\n\n* `getInputStream()`: This method returns the input stream of the HTTP request, which contains the login credentials in JSON format.\n* `getEmail()`: This method retrieves the email address of the user from the JSON body of the request.\n* `getPassword()`: This method retrieves the password of the user from the JSON body of the request.\n* `Collections.emptyList()`: This is an empty list, which is used as the authentication token's credentials.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an AuthenticationManager that authenticates a user using their email and password.\n\n* The AuthenticationException is thrown in case of any error during authentication.\n* The `IOException` is caught and transformed into a `RuntimeException` to handle any input/output errors.\n* The `getEmail()` and `getPassword()` methods are called on the `LoginUserRequest` object to retrieve the email address and password, respectively.\n* The `authenticate()` method of the `AuthenticationManager` class is called with a `UsernamePasswordAuthenticationToken` object containing the email address and password.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        var loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n","description":"\nThis method is used to attempt authentication for a request, where the input parameters are of type `HttpServletRequest` and `HttpServletResponse`. The method first attempts to deserialize the login user request from the body of the request using the `objectMapper`, and then authenticates the request with the `getAuthenticationManager()`. If any exception occurs during this process, a new `RuntimeException` is thrown."},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13,"docLength":null},{"id":"13c02f23-b96f-42aa-a045-8f95bb46e08c","ancestors":["70b9e3cb-e1c1-e59e-3941-92214f0cf9c2"],"type":"function","description":"processes an authenticated request by creating and adding a token to the HTTP response headers, containing the user ID and expiration date.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process.\n\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the HTTP request made by the client to the server. The request includes attributes such as the request method (e.g., GET, POST, PUT, DELETE), the request URL, the request headers, and the request body (if applicable).\n* `FilterChain chain`: This is an instance of the `FilterChain` class, which represents a chain of filters that are applied to the incoming request. Each filter in the chain can modify the request or produce a response.\n* `Authentication authResult`: This is an instance of the `Authentication` class, which encapsulates the result of authentication processing. The result includes the authenticated user principal (e.g., username) and any additional information about the user.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object to which the authentication result is added with new headers containing the token and user ID.\n\n* `HttpServletRequest request`: The HTTP request that triggered the authentication process.\n* `HttpServletResponse response`: The HTTP response to which the authentication result is sent.\n* `FilterChain chain`: The chain of filters that led to this authentication function being called.\n* `Authentication authResult`: The authentication result obtained from the authentication process.\n\nThe `response` object has several properties and attributes, including:\n\n* `addHeader()` method: Adds a custom header to the response with the given name and value.\n* `getHeader()` method: Returns the value of a custom header in the response with the given name.\n* `addHeader()` method (again): Adds multiple custom headers to the response at once.\n* `setHeader()` method: Sets a custom header in the response with the given name and value.\n* `getAllHeaders()` method: Returns a list of all custom headers in the response.\n* `getStatus()` method: Returns the HTTP status code of the response.\n* `setStatus()` method: Sets the HTTP status code of the response.\n* `getWriter()` method: Returns the writer object used for writing the response output.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"chain of filters that should be executed after successful authentication, and is passed through to the next filter in the chain.\n\n* `FilterChain`: This is an instance of the `FilterChain` interface, which represents a chain of filters that can be applied to a HTTP request. The `FilterChain` object contains a list of filters, each of which can modify the request in some way before it reaches the next filter or the servant.\n* `chain`: This is the original filter chain that was passed to the function as an argument. It represents the sequence of filters that were applied to the request before it reached the servant.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of the authentication process, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: The HTTP request that triggered the authentication process.\n* `HttpServletResponse response`: The HTTP response generated by the authentication process.\n* `FilterChain chain`: The chain of filters that led to this point in the authentication process.\n* `Authentication authResult`: The result of the authentication process, containing information about the authenticated user.\n\nThe `authResult` object contains a principal attribute, which is a `User`, representing the authenticated user. Additionally, it may contain other attributes such as the reason for the authentication failure (if applicable) and any additional information that was used during the authentication process.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n","description":"\nThis code is using a method called successfulAuthentication from the UsernamePasswordAuthenticationFilter. It requires four arguments: request, response, chain, and authResult. This method is called when authentication is successful. The first thing this code does is to create a new variable username which gets its value from the Principal object in the Authentication object. The next step is to get the user details by calling appUserDetailsService's getUserDetailsByUsername method with the argument of this new username variable. Next, this code creates a JWT token for the user using the user id that was retrieved earlier and adds it to the response headers as a token header. Finally, it adds another header called userId which is also set to the user id that was used to create the JWT token."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17,"docLength":null}]}}}