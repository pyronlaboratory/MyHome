{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An custom `UsernamePasswordAuthenticationFilter` in Spring Security for service needs. The filter generates a JSON Web Token (JWT) as a response for login requests. It uses the `ObjectMapper`, `Environment`, and `AppUserDetailsService` classes provided by Spring Security Core, along with the `AuthenticationManager` class from Spring Security. The filter attempts authentication using the `getAuthenticationManager()` method, returns an `Authentication` object if successful, and generates a JWT token as a response.","items":[{"id":"53653df4-31e5-fc87-cd45-b4c9ddbcf654","ancestors":[],"type":"function","description":"is a custom implementation of the UsernamePasswordAuthenticationFilter that generates a JWT token as a response for login requests. It takes in an HttpServletRequest and HttpServletResponse objects, and uses them to attempt authentication through the provided AuthenticationManager. If successful, it adds a token to the response and passes it on to the next filter in the chain.","name":"AuthenticationFilter","code":"public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}","location":{"start":42,"insert":42,"offset":" ","indent":0,"comment":{"start":37,"end":41}},"item_type":"class","length":46},{"id":"fe61fba3-988a-37a5-8e46-07de71592d04","ancestors":["53653df4-31e5-fc87-cd45-b4c9ddbcf654"],"type":"function","description":"attempts to authenticate a user based on an HTTP request input stream, using an authentication manager to check the user's credentials.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request sent by the client to the server, containing the user's login details in its body.\n\nThe input to this function is an `HttpServletRequest` object, which contains information about the incoming HTTP request. Some of the properties of this object include:\n\n* `getInputStream()`: Returns the input stream of the request.\n* `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE) of the incoming request.\n* `getParameterMap()`: Returns a map of all the parameter names and values in the request.\n* `getRemoteAddr()`: Returns the remote IP address of the client making the request.\n\nThe function then deserializes the input stream using an `ObjectMapper` instance, and reads the contents as a `LoginUserRequest` object. Finally, it calls the `authenticate` method of the `AuthenticationManager` instance with the deserialized `LoginUserRequest` object as the authentication token.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that is modified by the function's execution.\n\n* `getInputStream()` method returns the input stream of the incoming HTTP request.\n* `getHttpRequest()` method returns the original HTTP request object.\n* `getResponse()` method returns the response object for the current HTTP request.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an AuthenticationManagerResponse object representing the result of authenticating a user.\n\n* The `AuthenticationManager` is used to authenticate the user using the provided email and password.\n* The `UsernamePasswordAuthenticationToken` object represents the authentication attempt, with the email and password of the user in its constructor.\n* The `Collections.emptyList()` argument passed to the `authenticate` method indicates that no additional credentials are provided for the authentication attempt.","complex_type":true},"usage":{"language":"java","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        var loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n","description":""},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"6d1a8249-0a53-c985-4749-0ba984782ca8","ancestors":["53653df4-31e5-fc87-cd45-b4c9ddbcf654"],"type":"function","description":"authenticates a user and generates an access token based on the user's username, expiration time, and secret key. The token is added to the HTTP response headers for further use.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication process and provides information about the user's credentials and actions.\n\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the HTTP request made by the client to the server. It includes headers, parameters, and other metadata related to the request.\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which contains information about the HTTP response generated by the server in response to the client's request. It includes status code, headers, and other metadata related to the response.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object, which is updated by adding headers containing the token and user ID of the authenticated user.\n\n* `HttpServletRequest request`: The incoming HTTP request containing authentication details.\n* `HttpServletResponse response`: The outgoing HTTP response with the authenticated user's details.\n* `FilterChain chain`: The chain of filters that led to this function being executed.\n* `Authentication authResult`: The result of the authentication process, providing the authenticated user and any additional details.\n\nThe `response` object has several attributes:\n\n* `addHeader()` method: Adds a custom header to the response with the specified value.\n* `getHeader()` method: Retrieves the value of a custom header from the response.\n* `addObject()` method: Adds an object to the response as a JSON-formatted string.\n* `getObject()` method: Retrieves the JSON-formatted object from the response.\n\nIn summary, this function processes the authentication result and generates a token for the authenticated user, which is then added to the response object's headers.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"chain of filters that should be executed after successful authentication, and it is used to pass the authenticated user through these filters.\n\n* `FilterChain`: This is an instance of the `FilterChain` interface, which represents a chain of filters that can be applied to a incoming HTTP request.\n* `FilterChain` has several attributes, including:\n\t+ `doFilter`: This method is called when the filter chain is executed. It takes an `HttpServletRequest` and an `HttpServletResponse` as parameters and returns a `FilterChain` instance.\n\t+ `getFilter`: This method returns the current filter in the chain.\n\t+ `setNext`: This method sets the next filter in the chain.\n\nIn the given code, `chain` is not destructured, so none of these attributes can be accessed directly. However, you can infer their presence based on the interface definition and the context of the function.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of the authentication process, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: The HTTP request that triggered the authentication.\n* `HttpServletResponse response`: The HTTP response that will be generated by the authentication process.\n* `FilterChain chain`: The filter chain that led to this authentication function being called.\n* `Authentication authResult`: The result of the authentication process, containing information about the user and their authentication status.\n* `User principal`: The user who was authenticated, represented as an instance of `User`.\n* `UserDetailsService appUserDetailsService`: A service used to retrieve user details based on the username.\n* `Long expirationTime`: The time in milliseconds until the token will expire, determined by the `environment.getProperty(\"token.expiration_time\")` property.\n* `String secret`: The secret key used to sign the token, obtained from the `environment.getProperty(\"token.secret\")` property.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}\n","description":"\nThis method is used when the login credentials are validated successfully and it creates a JSON Web Token (JWT) with the user's ID as the subject and adds it to the HTTP response headers. The JWT token also has an expiration time set in the environment properties file."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17}]}}}