{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An authentication filter for a Spring Boot application that uses JWT tokens to authenticate users. The filter attempts authentication using the `getAuthenticationManager()` method and returns an AuthenticationException if the login attempt fails. If successful, it generates a token with an expiration time set by an environment variable and adds it to the response headers as well as the user ID.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AuthenticationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    WebSecurity\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        AuthenticationFilter [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"45524d91-7123-bbb9-984f-a929ff400d41","ancestors":[],"type":"function","description":"in Spring Security is used to handle authentication requests and generate an access token for successful authentications. The filter performs various actions such as retrieving the username from the authentication result, calling the UserDetailsService to retrieve user details, generating a JSON Web Token (JWT) using the Jwts class, and adding the generated token and user ID to the HTTP response headers.","name":"AuthenticationFilter","code":"public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  /**\n   * attempts to authenticate a user by reading the login request from the input stream,\n   * passing it to the authentication manager for verification, and returning the\n   * authenticated user's details if successful.\n   * \n   * @param request HTTP request made by the user to authenticate with the application.\n   * \n   * \t- `getInputStream()`: Returns an input stream that can be used to read the request\n   * body.\n   * \t- `getEmail()`: Returns the email address of the user attempting authentication.\n   * \t- `getPassword()`: Returns the password of the user attempting authentication.\n   * \t- `Collections.emptyList()`: Returns an empty list, which is used as a default\n   * value in the `authenticate` method.\n   * \n   * @param response response object that is used to send the authentication result\n   * back to the client.\n   * \n   * \t- `HttpServletRequest request`: This is the incoming HTTP request containing user\n   * login credentials.\n   * \t- `HttpServletResponse response`: This is the HTTP response generated by the\n   * server in response to the client's request.\n   * \n   * The function attempts authentication using the `getAuthenticationManager()` method,\n   * which returns an `Authentication` object upon successful authentication.\n   * \n   * @returns an AuthenticationException if the login attempt fails, otherwise it returns\n   * a successfully authenticated AuthenticationToken.\n   * \n   * \t- The input stream is read using `objectMapper.readValue()` method from the `HttpServletRequest`.\n   * \t- The resulting object is of type `LoginUserRequest`, which represents a login\n   * request containing an email and password.\n   * \t- The authentication manager is called with a `UsernamePasswordAuthenticationToken`\n   * object containing the email and password from the login request.\n   * \t- The authentication manager returns an authentication result, which is stored\n   * in the `Authentication` object.\n   */\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  /**\n   * authenticates a user and generates a token with an expiration time set by the\n   * environment variable. The token is added to the HTTP response headers along with\n   * the user ID.\n   * \n   * @param request HTTP request that triggered the authentication process and contains\n   * information about the user's credentials and actions.\n   * \n   * \t- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`\n   * class, which contains information about the HTTP request made to the servlet. The\n   * request can be deserialized using `ObjectDeserializer`, and its properties/attributes\n   * include:\n   * \t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n   * \t+ `getPathInfo()`: Returns the path part of the URL after the context path (e.g.,\n   * /login)\n   * \t+ `getPathTranslated()`: Returns the translated path (e.g., /login)\n   * \t+ `getQueryString()`: Returns the query string (e.g., ?username=john&password=123456)\n   * \t+ `getParameterMap()`: Returns a map of all query parameters (e.g., {username=\"john\",\n   * password=\"123456\"})\n   * \t+ `getRemoteAddr()`: Returns the remote IP address of the client making the request\n   * \t+ `getLocalAddr()`: Returns the local IP address of the servlet container making\n   * the request\n   * \t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n   * \t+ `getRequestURI()`: Returns the request URI without the query string (e.g., /login)\n   * \t+ `getProtocol()`: Returns the protocol used to make the request (e.g., HTTP/1.1)\n   * \t+ `getContentLength()`: Returns the content length of the request body (if any)\n   * \t+ `getContentType()`: Returns the MIME type of the request body (if any)\n   * \n   * @param response ServletResponse object that will receive the token and user ID headers.\n   * \n   * \t- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`\n   * class, containing information about the HTTP request received by the filter.\n   * \t- `HttpServletResponse response`: This is an instance of the `HttpServletResponse`\n   * class, providing information about the HTTP response generated by the filter.\n   * \t- `FilterChain chain`: This is an instance of the `FilterChain` class, representing\n   * the chain of filters that have been applied to the incoming request.\n   * \t- `Authentication authResult`: This is an instance of the `Authentication` class,\n   * containing details about the authentication result, such as the user principal and\n   * the authentication status.\n   * \n   * The function then extracts information from the authentication result and generates\n   * a token using the `Jwts` class. The generated token is added to the response headers\n   * as follows:\n   * \n   * \t- `response.addHeader(\"token\", token)`: Adds the token to the HTTP response headers.\n   * \t- `response.addHeader(\"userId\", userDto.getUserId())`: Adds the user ID to the\n   * HTTP response headers.\n   * \n   * @param chain filter chain that the successful authentication request is being\n   * processed through.\n   * \n   * \t- `HttpServletRequest request`: The HTTP request object that triggered the filter's\n   * execution.\n   * \t- `HttpServletResponse response`: The HTTP response object that the filter will\n   * write its output to.\n   * \t- `FilterChain chain`: The filter chain that this function is a part of, which\n   * contains other filters that can modify the input before it reaches this one.\n   * \t- `Authentication authResult`: The result of the authentication attempt, which\n   * contains the user principal (username) and other details.\n   * \n   * The function then performs the following actions:\n   * \n   * 1/ Retrieves the username from the authentication result using the `((User) authResult.getPrincipal())`.\n   * 2/ Calls the `appUserDetailsService` to retrieve the user details for the retrieved\n   * username.\n   * 3/ Generates a JSON Web Token (JWT) using the `Jwts` class, which includes the\n   * user ID, expiration time, and secret key.\n   * 4/ Adds the generated token as an HTTP header in the response object.\n   * 5/ Adds the user ID as another HTTP header in the response object.\n   * \n   * @param authResult authentication result of the current request, providing the\n   * authenticated principal and related information to generate an access token.\n   * \n   * \t- `HttpServletRequest request`: The incoming HTTP request that triggered the\n   * filter chain execution.\n   * \t- `HttpServletResponse response`: The outgoing HTTP response generated by the\n   * filter chain execution.\n   * \t- `FilterChain chain`: The next filter in the chain to be executed, which is\n   * passed as an argument to this function.\n   * \t- `Authentication authResult`: The deserialized authentication result object,\n   * containing the authenticated principal and other attributes.\n   */\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}","location":{"start":47,"insert":38,"offset":" ","indent":0,"comment":{"start":37,"end":46}},"item_type":"class","length":164,"docLength":9},{"id":"9ca93d2a-ca1e-9ca3-8944-9b53e6fe078d","ancestors":["45524d91-7123-bbb9-984f-a929ff400d41"],"type":"function","description":"attempts authentication for a given request by reading the login user details from the request input stream, passing them to the authentication manager to verify, and returning the authenticated user token if successful.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request made by the user to the authentication endpoint.\n\n* `getInputStream()` returns the underlying stream of the request.\n* `getEmail()` returns the email address of the user in the login request.\n* `getPassword()` returns the password of the user in the login request.\n* `getAuthenticationManager()` returns the authentication manager instance.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is being processed by the attemptAuthentication method.\n\n* `getInputStream()` returns an InputStream object that can be used to read data from the request body.\n* `HttpServletResponse response` is an instance of a class that provides information about the HTTP request and response, such as status code, headers, and other metadata.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an `AuthenticationException` if there is an issue with the provided login details.\n\n* The `AuthenticationException` thrown if any errors occur during authentication.\n* The `IOException` caught and re-thrown if any issues arise while reading the input from the request's input stream.\n* The `UsernamePasswordAuthenticationToken` created by passing the login user's email and password to the `authenticate()` method of the `getAuthenticationManager()` instance. The token's `username` field holds the login user's email address, while its `password` field contains their password. The `Collections.emptyList()` argument passed to `authenticate()` represents an empty list of authorities for the authenticated user.","complex_type":true},"usage":{"language":"java","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        var loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n","description":"\nHere, the method reads the request's body and tries to deserialize it into a LoginUserRequest object using the ObjectMapper instance. If successful, this information is used to construct an UsernamePasswordAuthenticationToken that is passed on to the getAuthenticationManager() method for authentication. The AuthenticationManager then checks if the user is valid and returns an Authentication object containing the logged in user's details. In case of an exception during the deserialization process, a RuntimeException is thrown."},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":97,"insert":61,"offset":" ","indent":2,"comment":{"start":60,"end":96}},"item_type":"method","length":13,"docLength":36},{"id":"1c77a073-855d-babb-3743-b347f6c8d62a","ancestors":["45524d91-7123-bbb9-984f-a929ff400d41"],"type":"function","description":"handles authentication requests by generating a token and adding it to the HTTP response headers, along with the user ID.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object containing authentication-related information, such as the username and password, that is being processed by the filter chain.\n\n* `HttpServletRequest request`: This object represents an HTTP request and contains information such as the method used to make the request (e.g., GET, POST, PUT), the URL of the request, any data sent with the request (e.g., form fields or files), and other headers and metadata.\n* `HttpServletResponse response`: This object represents an HTTP response and contains information such as the status code of the response (e.g., 200 OK), any data sent with the response (e.g., binary data or a textual representation of the response body), and other headers and metadata.\n* `FilterChain chain`: This object represents the chain of filters that have been applied to the request, in the order they were applied. Each filter in the chain can modify the request or response in some way before passing it on to the next filter.\n* `Authentication authResult`: This object represents the result of the authentication process, containing information such as the authenticated user's principal (e.g., a username or email address), any roles or permissions associated with the user, and other metadata related to the authentication process.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object, where the authentication information is added as headers.\n\n* `HttpServletRequest request`: The HTTP request made by the user to authenticate.\n* `HttpServletResponse response`: The HTTP response generated by the authentication process.\n* `FilterChain chain`: A filter chain containing multiple filters that can be executed in a specific order during the authentication process.\n* `Authentication authResult`: The result of the authentication process, which includes the principal (username) and details of the user.\n\nThe function then performs the following operations:\n\n1. Retrieves the username of the authenticated user from the `authResult` object.\n2. Calls the `appUserDetailsService` to retrieve the details of the user with the matching username.\n3. Generates a JSON Web Token (JWT) using the `Jwts` class, passing in the user details and the expiration time.\n4. Adds the JWT token to the `response` object as a header.\n5. Adds the user ID of the authenticated user to the `response` object as another header.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"chain of filters that should be executed after the successful authentication, and is used to pass the response object through those filters.\n\n* `chain`: This is an instance of the `FilterChain` class, which represents a chain of filters that can be applied to a HTTP request. It has various attributes such as `doFilter`, `doFilterEx`, `getNext`, and `setNext`.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of the authentication process, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: This is the HTTP request object that contains information about the user's authentication attempt.\n* `HttpServletResponse response`: This is the HTTP response object that will be used to send the authentication result back to the client.\n* `FilterChain chain`: This is a filter chain that contains multiple filters, which are executed in sequence during the authentication process.\n* `Authentication authResult`: This is the deserialized input parameter that represents the authentication result, containing information about whether the authentication was successful or not.\n* `User principal`: This is the user principal that was authenticated, which can be obtained from the `authResult` object.\n* `Long expirationTime`: This is the expiration time of the token in milliseconds, which can be obtained from the `environment` property.\n* `String secret`: This is the secret key used for signing the token, which can be obtained from the `environment` property.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    // Generate JSON Web Token (JWT) using the Jwts class, which includes the user ID, expiration time, and secret key.\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    // Add the generated token as an HTTP header in the response object.\n    response.addHeader(\"token\", token);\n\n    // Add the user ID as another HTTP header in the response object.\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n","description":"\nThe example above is a succinct implementation of successfulAuthentication. It extracts information from the authentication result and generates a JSON Web Token (JWT) using the `Jwts` class, adding the token to the response headers as \"token\" and the user ID to another header as \"userId\"."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":193,"insert":111,"offset":" ","indent":2,"comment":{"start":110,"end":192}},"item_type":"method","length":17,"docLength":82}]}}}