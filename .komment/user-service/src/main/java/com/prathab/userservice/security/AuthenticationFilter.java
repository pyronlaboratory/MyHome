{"name":"AuthenticationFilter.java","path":"user-service/src/main/java/com/prathab/userservice/security/AuthenticationFilter.java","content":{"structured":{"description":"An authentication manager that handles user authentication through a RESTful web service. It uses Spring Security to authenticate users based on their email and password, and once successful, it creates and adds a token to the HTTP response headers containing the user ID and expiration date. The token is generated using JWT (JSON Web Tokens) library, and the response object has several properties and attributes that are used to add custom headers to the response with the authenticated user's details as a principal object.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AuthenticationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        AuthenticationFilter [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"4257c191-18ba-2a86-9247-6773272df1d4","ancestors":[],"type":"function","description":"in Spring Security is used to handle authentication requests and add a token to the HTTP response headers containing the user ID and expiration date. The successfulAuthentication method is called after authentication is successful, and it adds a token to the response headers containing the user ID and expiration date. The token is created using JWT and the secret key specified in the environment properties.","name":"AuthenticationFilter","code":"public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n  private final ObjectMapper objectMapper;\n  private final Environment environment;\n  private final AppUserDetailsService appUserDetailsService;\n\n  public AuthenticationFilter(ObjectMapper objectMapper,\n      AppUserDetailsService appUserDetailsService, Environment environment,\n      AuthenticationManager authenticationManager) {\n    super.setAuthenticationManager(authenticationManager);\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.environment = environment;\n  }\n\n  /**\n   * attempts to authenticate a user by reading input from the request stream, creating\n   * an authentication token with the user's email and password, and passing it to the\n   * `authenticate` method of the `getAuthenticationManager()` instance.\n   * \n   * @param request HTTP request containing the login credentials of the user attempting\n   * authentication.\n   * \n   * The `HttpServletRequest request` contains the following attributes:\n   * \n   * \t- `InputStream inputStream`: The input stream for reading the JSON data from the\n   * request body.\n   * \t- `String method`: The HTTP method (e.g., GET, POST, PUT, DELETE) in the request.\n   * \t- `String protocol`: The protocol (e.g., HTTP/1.1, HTTP/2) in the request.\n   * \t- `Integer statusCode`: The HTTP status code (e.g., 200, 404) in the response.\n   * \t- `String url`: The URL of the request (including the path and query string).\n   * \t- `Map<String, Object> attributes`: A map of key-value pairs representing the\n   * request's attributes (e.g., user agent, accept language, etc.).\n   * \n   * @param response HTTP response object that is being used to handle the authentication\n   * request.\n   * \n   * \t- `getInputStream()`: This method returns the input stream of the HTTP request,\n   * which contains the login credentials in JSON format.\n   * \t- `getEmail()`: This method retrieves the email address of the user from the JSON\n   * body of the request.\n   * \t- `getPassword()`: This method retrieves the password of the user from the JSON\n   * body of the request.\n   * \t- `Collections.emptyList()`: This is an empty list, which is used as the\n   * authentication token's credentials.\n   * \n   * @returns an AuthenticationManager that authenticates a user using their email and\n   * password.\n   * \n   * \t- The AuthenticationException is thrown in case of any error during authentication.\n   * \t- The `IOException` is caught and transformed into a `RuntimeException` to handle\n   * any input/output errors.\n   * \t- The `getEmail()` and `getPassword()` methods are called on the `LoginUserRequest`\n   * object to retrieve the email address and password, respectively.\n   * \t- The `authenticate()` method of the `AuthenticationManager` class is called with\n   * a `UsernamePasswordAuthenticationToken` object containing the email address and password.\n   */\n  @Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  /**\n   * processes an authenticated request by creating and adding a token to the HTTP\n   * response headers, containing the user ID and expiration date.\n   * \n   * @param request HTTP request that triggered the authentication process.\n   * \n   * \t- `HttpServletRequest request`: This is an instance of the `HttpServletRequest`\n   * class, which contains information about the HTTP request made by the client to the\n   * server. The request includes attributes such as the request method (e.g., GET,\n   * POST, PUT, DELETE), the request URL, the request headers, and the request body (if\n   * applicable).\n   * \t- `FilterChain chain`: This is an instance of the `FilterChain` class, which\n   * represents a chain of filters that are applied to the incoming request. Each filter\n   * in the chain can modify the request or produce a response.\n   * \t- `Authentication authResult`: This is an instance of the `Authentication` class,\n   * which encapsulates the result of authentication processing. The result includes\n   * the authenticated user principal (e.g., username) and any additional information\n   * about the user.\n   * \n   * @param response response object to which the authentication result is added with\n   * new headers containing the token and user ID.\n   * \n   * \t- `HttpServletRequest request`: The HTTP request that triggered the authentication\n   * process.\n   * \t- `HttpServletResponse response`: The HTTP response to which the authentication\n   * result is sent.\n   * \t- `FilterChain chain`: The chain of filters that led to this authentication\n   * function being called.\n   * \t- `Authentication authResult`: The authentication result obtained from the\n   * authentication process.\n   * \n   * The `response` object has several properties and attributes, including:\n   * \n   * \t- `addHeader()` method: Adds a custom header to the response with the given name\n   * and value.\n   * \t- `getHeader()` method: Returns the value of a custom header in the response with\n   * the given name.\n   * \t- `addHeader()` method (again): Adds multiple custom headers to the response at\n   * once.\n   * \t- `setHeader()` method: Sets a custom header in the response with the given name\n   * and value.\n   * \t- `getAllHeaders()` method: Returns a list of all custom headers in the response.\n   * \t- `getStatus()` method: Returns the HTTP status code of the response.\n   * \t- `setStatus()` method: Sets the HTTP status code of the response.\n   * \t- `getWriter()` method: Returns the writer object used for writing the response\n   * output.\n   * \n   * @param chain chain of filters that should be executed after successful authentication,\n   * and is passed through to the next filter in the chain.\n   * \n   * \t- `FilterChain`: This is an instance of the `FilterChain` interface, which\n   * represents a chain of filters that can be applied to a HTTP request. The `FilterChain`\n   * object contains a list of filters, each of which can modify the request in some\n   * way before it reaches the next filter or the servant.\n   * \t- `chain`: This is the original filter chain that was passed to the function as\n   * an argument. It represents the sequence of filters that were applied to the request\n   * before it reached the servant.\n   * \n   * @param authResult result of the authentication process, providing the authenticated\n   * user's details as a principal object.\n   * \n   * \t- `HttpServletRequest request`: The HTTP request that triggered the authentication\n   * process.\n   * \t- `HttpServletResponse response`: The HTTP response generated by the authentication\n   * process.\n   * \t- `FilterChain chain`: The chain of filters that led to this point in the\n   * authentication process.\n   * \t- `Authentication authResult`: The result of the authentication process, containing\n   * information about the authenticated user.\n   * \n   * The `authResult` object contains a principal attribute, which is a `User`,\n   * representing the authenticated user. Additionally, it may contain other attributes\n   * such as the reason for the authentication failure (if applicable) and any additional\n   * information that was used during the authentication process.\n   */\n  @Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }\n}","location":{"start":42,"insert":38,"offset":" ","indent":0,"comment":{"start":37,"end":41}},"item_type":"class","length":163,"docLength":4},{"id":"4457e054-ecda-65a9-f540-c606402fe8a8","ancestors":["4257c191-18ba-2a86-9247-6773272df1d4"],"type":"function","description":"authenticates a user based on their email and password by using an `AuthenticationManager`.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the authentication attempt.\n\n* `getInputStream()` returns the input stream of the incoming HTTP request.\n* `getEmail()` returns the email address of the user in the login request.\n* `getPassword()` returns the password of the user in the login request.\n* `getAuthenticationManager()` returns an instance of the authentication manager for managing user authentications.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is being handled by the `attemptAuthentication()` method.\n\n* `getInputStream()`: returns the input stream of the HTTP request.\n* `getHttpRequest()`: returns the original HTTP request.\n* `getResponse()`: returns the response object for the current request.","complex_type":true}],"returns":{"type_name":"AuthenticationException","description":"an AuthenticationManager that authenticates a user using their email and password.\n\n* The `AuthenticationException` that is thrown if there is an issue with the authentication process.\n* The `UsernamePasswordAuthenticationToken` object representing the user's credentials.\n\t+ The `email` field contains the user's email address.\n\t+ The `password` field contains the user's password.\n\t+ The `authorities` field is a list of authorities that the user is authorized to act on behalf of.\n* The `getAuthenticationManager()` method call, which retrieves an instance of the `AuthenticationManager` interface.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {\n    try {\n        LoginUserRequest loginUserRequest = objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n        return getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(), loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n","description":"\nIn this example, the method attemptAuthentication is called with two arguments request and response. The first argument request is an instance of HttpServletRequest, and the second argument response is an instance of HttpServletResponse.\n\nThe method reads a LoginUserRequest object from the input stream of the request object using an ObjectMapper. The method then gets the AuthenticationManager using getAuthenticationManager() method, creates an instance of UsernamePasswordAuthenticationToken by passing the email and password properties of the LoginUserRequest object as arguments to the constructor. The method then authenticates this token by getting the AuthenticationManager using the getAuthenticationManager() method and then authenticating the UsernamePasswordAuthenticationToken instance by calling the authenticate() method on it with the username, password and empty list arguments.\n\nThe method then throws a RuntimeException if any exception is encountered during this process."},"name":"attemptAuthentication","code":"@Override public Authentication attemptAuthentication(HttpServletRequest request,\n      HttpServletResponse response) throws AuthenticationException {\n\n    try {\n      var loginUserRequest =\n          objectMapper.readValue(request.getInputStream(), LoginUserRequest.class);\n      return getAuthenticationManager().authenticate(\n          new UsernamePasswordAuthenticationToken(loginUserRequest.getEmail(),\n              loginUserRequest.getPassword(), Collections.emptyList()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","location":{"start":98,"insert":56,"offset":" ","indent":2,"comment":{"start":55,"end":97}},"item_type":"method","length":13,"docLength":42},{"id":"0b2bb3c5-baf7-dc9f-b245-8e8d57cea896","ancestors":["4257c191-18ba-2a86-9247-6773272df1d4"],"type":"function","description":"handles successful authentication and generates a token based on the user's username, expiration time, and secret key. It then adds the token and user ID to the HTTP response headers.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object containing information about the client's request, such as the URL, method, and headers.\n\n* `HttpServletRequest request`: This object contains information about the HTTP request, such as the method, URL, headers, and parameters.\n* `HttpServletResponse response`: This object contains information about the HTTP response, such as the status code, headers, and content.\n* `FilterChain chain`: This represents the chain of filters that are applied to the request before it reaches the handling method.\n* `Authentication authResult`: This object represents the result of the authentication process, including the authenticated user's identity and any additional information.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object to which the authentication result and token will be added as headers.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered the filter chain.\n* `HttpServletResponse response`: The outgoing HTTP response that will be sent to the client.\n* `FilterChain chain`: The chain of filters that have been applied to the request so far.\n* `Authentication authResult`: The result of the authentication attempt, containing the authenticated user as principal.\n\nThe function then performs the following operations:\n\n* Retrieves the username of the authenticated user from the `authResult` object.\n* Calls the `appUserDetailsService` to retrieve the user details for the retrieved username.\n* Creates a JWT token using the `Jwts` class, setting the subject and expiration time based on environment properties.\n* Signs the token with the specified algorithm using the `signWith` method.\n* Adds the token and user ID to the response headers.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"filter chain that the authentication request is part of, and allows the function to access the subsequent filters in the chain.\n\n* `HttpServletRequest request`: The incoming HTTP request from the client.\n* `HttpServletResponse response`: The outgoing HTTP response to be sent back to the client.\n* `FilterChain chain`: A filter chain that represents a series of filters that can be applied to the incoming request.\n* `Authentication authResult`: The result of the authentication process, which contains information about the authenticated user.","complex_type":true},{"name":"authResult","type_name":"Authentication","description":"result of the authentication process, providing the authenticated user's details as a principal object.\n\n* `HttpServletRequest request`: The HTTP request that triggered this filter chain execution.\n* `HttpServletResponse response`: The HTTP response generated by this filter chain execution.\n* `FilterChain chain`: The next stage in the filter chain processing.\n* `Authentication authResult`: The result of the authentication process, containing information about the authenticated user.\n\nThe properties of `authResult` include:\n\n* `getPrincipal()`: Returns the authenticated user object, which is a `User` instance in this case.\n* `getUserId()`: Returns the unique identifier of the authenticated user.\n\nThe `Jwts` class is used to generate and sign a JSON Web Token (JWT) containing the authenticated user's ID. The token is then added as an HTTP header in the response, along with the user ID.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) {\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n    \n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n    \n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n}\n","description":"\nThe method takes in a HttpServletRequest object as the first input, and a HttpServletResponse object as its second input. It also takes in an Authentication object as its fourth input, which represents the result of the authentication process that has been successful. The method then extracts information from these inputs to create a token that will be added to the response header. The response headers include the user's ID and the generated token."},"name":"successfulAuthentication","code":"@Override\n  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain, Authentication authResult) throws IOException, ServletException {\n\n    var username = ((User) authResult.getPrincipal()).getUsername();\n    var userDto = appUserDetailsService.getUserDetailsByUsername(username);\n\n    var token = Jwts.builder()\n        .setSubject(userDto.getUserId())\n        .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(\n            environment.getProperty(\"token.expiration_time\"))))\n        .signWith(SignatureAlgorithm.HS512, environment.getProperty(\"token.secret\"))\n        .compact();\n\n    response.addHeader(\"token\", token);\n    response.addHeader(\"userId\", userDto.getUserId());\n  }","location":{"start":187,"insert":112,"offset":" ","indent":2,"comment":{"start":111,"end":186}},"item_type":"method","length":17,"docLength":75}]}}}