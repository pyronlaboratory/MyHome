{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A custom `WebSecurityConfigurerAdapter` for securing a web application. It disables CSRF attacks and authorizes requests based on the gateway IP address. The filter processes user authentication requests and encodes passwords using the `PasswordEncoder`.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"cd23c12d-5db3-7091-654a-93421e49df0a","ancestors":[],"type":"function","description":"TODO","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0},"item_type":"class","length":40},{"id":"d0a35b4c-9b35-40ac-1a4c-451e6e2cbf1b","ancestors":["cd23c12d-5db3-7091-654a-93421e49df0a"],"type":"function","description":"disable CSRF protection, authorize requests based on the IP address of the gateway server, and disable frame options.","params":[{"name":"http","type_name":"HttpSecurity","description":"HttpSecurity object that is being configured, allowing for the disabling of CSRF protection and the authorization of requests based on IP addresses and the addition of an authentication filter.\n\n* `csrf()`: Disables CSRF (Cross-Site Request Forgery) protection.\n* `authorizeRequests()`: Allows or denies requests based on a set of antMatchers.\n* `antMatchers()`: Defines the URLs to which the authorization logic applies. In this case, it matches all URLs (\"/**\").\n* `hasIpAddress()`: Checks if the request comes from a specific IP address (obtained from the `environment.getProperty(\"gateway.ip\")` property).\n* `addFilter(getAuthenticationFilter())`: Adds an authentication filter to the security chain. The `getAuthenticationFilter()` method returns an instance of a filter that performs authentication.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF protection\n    http.csrf().disable();\n    \n    // Allow access to all requests from the gateway IP only\n    http.authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    \n    // Disable the frame options header\n    http.headers().frameOptions().disable();\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"8142d234-08a1-80b6-154d-78271d6da8e5","ancestors":["cd23c12d-5db3-7091-654a-93421e49df0a"],"type":"function","description":"creates an instance of `AuthenticationFilter` and configures it with various properties, including the URL path for filtering processes.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter` with custom configuration for login URL and authentication manager.\n\n* `objectMapper`: An instance of the `ObjectMapper` class, which is used to handle JSON serialization and deserialization.\n* `appUserDetailsService`: An instance of the `AppUserDetailsService` class, which provides user details for authentication purposes.\n* `environment`: A reference to the `Environment` class, which contains configuration properties and environment variables for the application.\n* `authenticationManager()`: An instance of the `AuthenticationManager` class, which manages authentication for the application.\n* `setFilterProcessesUrl(String url)`: A method that sets the filter processes URL for the authentication filter. The URL is specified as a string parameter and can be any valid URL.","complex_type":true},"usage":{"language":"java","code":"public class AuthenticationService {\n    private final Environment environment;\n    private final ObjectMapper objectMapper;\n    private final AppUserDetailsService appUserDetailsService;\n    private final PasswordEncoder passwordEncoder;\n\n    public AuthenticationService(Environment environment, \n        ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n        PasswordEncoder passwordEncoder) {\n            this.environment = environment;\n            this.objectMapper = objectMapper;\n            this.appUserDetailsService = appUserDetailsService;\n            this.passwordEncoder = passwordEncoder;\n        }\n\n    public AuthenticationFilter getAuthenticationFilter() throws Exception {\n        var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment, authenticationManager());\n        authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n        return authFilter;\n    }\n}\n","description":"\nThis is an example of how the getAuthenticationFilter method would be used in a larger program. In this case, it is used to create a new AuthenticationFilter object that uses the provided dependencies and set its filter processes url."},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"3850916d-b5e4-a287-8648-999cc9ccda87","ancestors":["cd23c12d-5db3-7091-654a-93421e49df0a"],"type":"function","description":"configures an Authentication Manager Builder by specifying a user details service and a password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder instance, which is being configured by setting the user details service and password encoder.\n\n* `userDetailsService`: This property is an instance of `UserDetailsService`, which represents a service for handling user details.\n* `passwordEncoder`: This property is an instance of `PasswordEncoder`, which represents a mechanism for encoding passwords securely.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n}\n","description":"\nIn this example, the `configure` method is being called on an instance of `AuthenticationManagerBuilder`. The method takes two parameters:\n* `auth`: An instance of `AuthenticationManagerBuilder`, which represents a builder for creating and configuring authentication managers.\n* `passwordEncoder`: A password encoder that is used to encode passwords. This parameter is optional, and if not provided, the default password encoder will be used.\n\nThe method sets the user details service and password encoder on the `AuthenticationManagerBuilder` instance using the `userDetailsService()` and `passwordEncoder()` methods respectively. These methods are provided by the Spring Security framework to configure the authentication manager with the necessary dependencies."},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":68,"insert":68,"offset":" ","indent":2},"item_type":"method","length":3}]}}}