{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"Security configurations for an web application using Spring Security. It disables CSRF protection, restricts API access to a specific IP address, and adds an authentication filter with customized configuration for login processing. The code also sets up an Authentication Manager by specifying a user details service and password encoder.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"deb6e04b-298d-d798-6141-73f001c4f556","ancestors":[],"type":"function","description":"is configured to disable CSRF protection and authorize requests based on the IP address of the gateway server. It also disables frame options for security reasons. Additionally, an authentication filter is set up to filter incoming HTTP requests based on user authentication, using a user details service and password encoder.","name":"WebSecurity","location":{"start":34,"insert":28,"offset":" ","indent":0,"comment":{"start":27,"end":33}},"item_type":"class","length":92,"docLength":6},{"id":"ca4c359a-f4ce-d5a2-3747-9e358b031736","ancestors":["deb6e04b-298d-d798-6141-73f001c4f556"],"type":"function","description":"disables CSRF protection and authorizes requests based on the IP address of the gateway server. It also disables frame options for improved performance.","params":[{"name":"http","type_name":"HttpSecurity","description":"HttpSecurity object, which is being configured to disable CSRF protection and authorize requests based on the IP address of the gateway server.\n\n* `csrf().disable()` disables CSRF protection for all routes.\n* `authorizeRequests()` specifies which requests are authorized to access the application. It takes an array of ant matchers as its argument, with each ant matcher specifying a pattern that matches a route. In this case, the entire root URL (`\"/**\"` ) is matched.\n* `hasIpAddress(environment.getProperty(\"gateway.ip\"))` restricts access to the application based on the IP address of the request. The `environment.getProperty()` method retrieves a property from the application's environment. In this case, the property is named \"gateway.ip\".\n* `and()` is used to chain multiple authorization rules together.\n* `addFilter(getAuthenticationFilter())` adds an authentication filter to thechain of filters for the application. The `getAuthenticationFilter()` method returns a reference to an authentication filter that has been created separately.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n}\n","description":""},"name":"configure","location":{"start":71,"insert":52,"offset":" ","indent":2,"comment":{"start":51,"end":70}},"item_type":"method","length":10,"docLength":19},{"id":"f8e8068b-249d-52b9-0c4c-dd249e9ea7cd","ancestors":["deb6e04b-298d-d798-6141-73f001c4f556"],"type":"function","description":"creates an instance of `AuthenticationFilter`, setting various properties and methods, such as `setFilterProcessesUrl`, to enable authentication processing for the application.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter`, which is a custom filter for authenticating users.\n\n* `var authFilter`: This is an instance of the `AuthenticationFilter` class, which is a custom filter used for authentication in Spring Security.\n* `objectMapper`: This is an instance of the `ObjectMapper` class, which is used to map Java objects to and from JSON format.\n* `appUserDetailsService`: This is an instance of the `AppUserDetailsService` interface, which provides user details for authentication purposes.\n* `environment`: This is an instance of the `Environment` class, which contains various properties and settings for the application.\n* `authenticationManager()`: This is a method that returns an instance of the `AuthenticationManager` interface, which manages authentication requests and responses.\n* `setFilterProcessesUrl(String url)`: This method sets the URL path for the filter processes.\n\nOverall, the `getAuthenticationFilter` function returns a custom filter that can be used to perform authentication tasks in Spring Security.","complex_type":true},"usage":{"language":"java","code":"// Get the AuthenticationFilter instance from the method\nprivate AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    // Set the URL path for login functionality\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n// Use the returned instance to filter incoming HTTP requests based on user authentication.\n","description":""},"name":"getAuthenticationFilter","location":{"start":103,"insert":82,"offset":" ","indent":2,"comment":{"start":81,"end":102}},"item_type":"method","length":6,"docLength":21},{"id":"16fd694a-8000-d6a3-9c49-f54f266fe1b6","ancestors":["deb6e04b-298d-d798-6141-73f001c4f556"],"type":"function","description":"configures the AuthenticationManagerBuilder by setting the user details service and password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder, which is used to configure various aspects of the authentication system, including the user details service and password encoder.\n\n1. `userDetailsService`: This attribute specifies the user details service used for authentication. It is assigned an instance of `appUserDetailsService`.\n2. `passwordEncoder`: This attribute specifies the password encoder used to encrypt passwords. It is assigned an instance of `passwordEncoder`.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}\n","description":"\nThis is how to use the configure method in this example. The method is taking an AuthenticationManagerBuilder as its parameter and it is being used for user details services and password encoders."},"name":"configure","location":{"start":122,"insert":110,"offset":" ","indent":2,"comment":{"start":109,"end":121}},"item_type":"method","length":3,"docLength":12}]}}}