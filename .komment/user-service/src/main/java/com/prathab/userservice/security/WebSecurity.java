{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A custom WebSecurityConfigurerAdapter for Spring Security, which configures the security settings for an application. The adapter disables CSRF protection, authorizes requests based on the gateway IP address, and sets the login URL path. It also defines an authentication filter and configures the user details service and password encoder.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"3c758e5d-57be-53aa-a54c-c223e8627aba","ancestors":[],"type":"function","description":"is a custom configuration class for Spring Security that disables any request other than from a specific gateway IP address and enables setting of a custom login URL. It also provides an authentication filter that processes the authentication requests using the UserDetailsService, PasswordEncoder, and AuthenticationManagerBuilder.","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":{"start":27,"end":31}},"item_type":"class","length":40},{"id":"f9364a24-7d15-24b3-e845-1b126edda3a0","ancestors":["3c758e5d-57be-53aa-a54c-c223e8627aba"],"type":"function","description":"disables CSRF protection and authorizes requests based on the IP address of the gateway server. It also disables frame options.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security context, allowing the code to configure various aspects of it, such as disabling CSRF protection and authorizing requests based on IP addresses.\n\n* `csrf().disable()` disables CSRF (Cross-Site Request Forgery) protection for all requests.\n* `authorizeRequests().antMatchers(\"/**\")` allows only requests to any path (\"/**\") after successful authentication.\n* `hasIpAddress(environment.getProperty(\"gateway.ip\"))` authorizes requests based on the IP address of the gateway server, as specified in the `environment.getProperty()` method.\n* `and()` is a concatenation operator in Java, used to chain multiple security rules together.\n* `addFilter(getAuthenticationFilter())` adds an authentication filter to the pipeline, which will be executed for each request. The `getAuthenticationFilter()` method returns an instance of an authentication filter.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF protection\n    http.csrf().disable();\n    \n    // Authorize all requests from the gateway IP address\n    http.authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    \n    // Disable frame options header\n    http.headers().frameOptions().disable();\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10},{"id":"cf3f5a4c-89af-c9aa-534a-8d48dc4637c0","ancestors":["3c758e5d-57be-53aa-a54c-c223e8627aba"],"type":"function","description":"creates an instance of the `AuthenticationFilter` class, sets properties related to login processing, and returns the filtered object.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter`.\n\n* `var authFilter`: The AuthenticationFilter object that is created with various dependencies such as `objectMapper`, `appUserDetailsService`, `environment`, and `authenticationManager()`.\n* `setFilterProcessesUrl(String url)`: This method sets the URL path for filtering processes.\n* `Environment` class: This class represents the environment in which the application is running, providing access to various properties and configurations.\n* `ObjectMapper` class: This class is used for mapping objects from one format to another.\n* `AppUserDetailsService` class: This class provides user details for authentication purposes.\n* `AuthenticationManager` class: This class manages the authentication process for the application.","complex_type":true},"usage":{"language":"java","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n","description":"\nIn this example, the getAuthenticationFilter() method is called and creates a new AuthenticationFilter object using the parameters passed to it. The setFilterProcessesUrl() method is then used to set the filterProcessesUrl property of the AuthenticationFilter object to the value specified in the \"login.url.path\" environment variable. Finally, the created AuthenticationFilter object is returned as the result of the method call."},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"548e5668-c02d-a892-814a-bd84e5966eb9","ancestors":["3c758e5d-57be-53aa-a54c-c223e8627aba"],"type":"function","description":"configures an Authentication Manager by setting the user details service and password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder instance, which is being configured by setting the user details service and password encoder using the methods provided by the builder.\n\n* `userDetailsService`: The user details service is not provided in the input.\n* `passwordEncoder`: The password encoder is set to an instance of `PasswordEncoder`.","complex_type":true}],"usage":{"language":"java","code":"public class CustomWebSecurity extends WebSecurityConfigurerAdapter {\n    private final AppUserDetailsService appUserDetailsService;\n    private final PasswordEncoder passwordEncoder;\n\n    public CustomWebSecurity(AppUserDetailsService appUserDetailsService, PasswordEncoder passwordEncoder) {\n        this.appUserDetailsService = appUserDetailsService;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n    }\n}\n","description":""},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":68,"insert":68,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3}]}}}