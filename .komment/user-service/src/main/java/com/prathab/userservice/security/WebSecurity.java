{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A Spring Security configuration for a web application, which includes disabling CSRF protection, restricting API access to a specific IP address, adding an authentication filter with customized configuration, and disabling frame options for improved security. The code also sets up an Authentication Manager by specifying a user details service and password encoder.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"e134b339-5b96-6a96-4741-71619b99dc2c","ancestors":[],"type":"function","description":"in this file is configuring the HTTP security for an application. It disables CSRF protection and authorizes requests based on the IP address of the gateway server, while also disabling frame options for security reasons. Additionally, it sets up an authentication filter to filter incoming HTTP requests based on user authentication, using a user details service and password encoder.","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * disables CSRF protection and authorizes requests based on the IP address of the\n   * gateway server. It also disables frame options for security reasons.\n   * \n   * @param http HTTP security configuration object that is being customized by the method.\n   * \n   * \t- `csrf().disable()` disables CSRF protection for this security configuration.\n   * \t- `authorizeRequests().antMatchers(\"/**\")` specifies that all requests to any\n   * endpoint in the application should be authorized.\n   * \t- `.hasIpAddress(environment.getProperty(\"gateway.ip\"))` allows only requests\n   * from a specific IP address to be authorized. The specified property \"gateway.ip\"\n   * contains the allowed IP address.\n   * \t- `.and()` is a conjunction operator that combines multiple security rules in the\n   * same block.\n   * \t- `.addFilter(getAuthenticationFilter());` adds an authentication filter to the\n   * configuration, which will be executed before the application's endpoints are\n   * accessed. The `getAuthenticationFilter()` method returns a reference to the\n   * authentication filter implementation.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  /**\n   * creates an instance of the `AuthenticationFilter` class, passing in various\n   * dependencies such as object mapper, user details service, and authentication\n   * manager. The function also sets a property for the filter's URL processing.\n   * \n   * @returns an instance of `AuthenticationFilter` initialized with various components\n   * to handle authentication processes.\n   * \n   * \t- `objectMapper`: An instance of the `ObjectMapper` class, which is used for\n   * mapping JSON data to and from objects.\n   * \t- `appUserDetailsService`: An instance of the `AppUserDetailsService` class, which\n   * provides user details for authentication.\n   * \t- `environment`: A variable containing the environment properties, including the\n   * `login.url.path` property, which sets the URL path for the login functionality.\n   * \t- `authenticationManager()`: An instance of the `AuthenticationManager` class,\n   * which manages the authentication process.\n   * \n   * The function returns an instance of the `AuthenticationFilter` class, which is\n   * responsible for filtering incoming HTTP requests based on user authentication. The\n   * `setFilterProcessesUrl()` method sets the URL path for the login functionality.\n   */\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  /**\n   * sets up an Authentication Manager by specifying a user details service and password\n   * encoder.\n   * \n   * @param auth AuthenticationManagerBuilder, which is being configured by setting the\n   * user details service and password encoder.\n   * \n   * \t- `userDetailsService`: This represents the user details service used by the\n   * authentication manager builder to configure user details-related functionality.\n   * \t- `passwordEncoder`: This property defines the password encoder used by the\n   * authentication manager builder for password encryption and decryption.\n   */\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":34,"insert":28,"offset":" ","indent":0,"comment":{"start":27,"end":33}},"item_type":"class","length":92,"docLength":6},{"id":"c6201f66-3242-b180-f745-4e01c8a4b222","ancestors":["e134b339-5b96-6a96-4741-71619b99dc2c"],"type":"function","description":"disables CSRF protection and authorizes requests based on the value of `environment.getProperty(\"gateway.ip\")`. Additionally, it disables frame options.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security context, and it is used to configure various aspects of the security settings for the application, including disabling CSRF protection and authorizing requests based on IP addresses.\n\n* `csrf().disable()` disables Cross-Site Request Forgery (CSRF) protection.\n* `authorizeRequests().antMatchers(\"/**\")` specifies that all requests to any endpoint are authorized.\n* `hasIpAddress(environment.getProperty(\"gateway.ip\"))` allows only requests from a specific IP address (stored in the `gateway.ip` property).\n* `addFilter(getAuthenticationFilter());` adds an authentication filter to the chain.\n* `headers().frameOptions().disable()` disables the Framerate option for performance reasons.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":71,"insert":52,"offset":" ","indent":2,"comment":{"start":51,"end":70}},"item_type":"method","length":10,"docLength":19},{"id":"502ad75a-59d4-89b9-8f41-4d3fbd340e41","ancestors":["e134b339-5b96-6a96-4741-71619b99dc2c"],"type":"function","description":"creates an instance of `AuthenticationFilter` by injecting dependencies and setting filter URL, which enables authentication processing for incoming requests.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter` with customized configuration for authentication processing.\n\n* `objectMapper`: A reference to an Object Mapping instance that is used for mapping Java objects to and from JSON format.\n* `appUserDetailsService`: A reference to an App User Details Service that is used to retrieve user details.\n* `environment`: A reference to an Environment instance that contains various configuration properties.\n* `authenticationManager`: A reference to an Authentication Manager that is used to manage authentication processes.\n* `filterProcessesUrl`: The URL path for filtering processes, which is set using the `setFilterProcessesUrl` method.","complex_type":true},"usage":{"language":"java","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment, authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n}\n","description":""},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":103,"insert":82,"offset":" ","indent":2,"comment":{"start":81,"end":102}},"item_type":"method","length":6,"docLength":21},{"id":"cbf9ee04-b028-dba0-df4c-7537abf4af9f","ancestors":["e134b339-5b96-6a96-4741-71619b99dc2c"],"type":"function","description":"sets up authentication by specifying a user details service and a password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder instance, which is used to configure various aspects of the authentication system, including the user details service and password encoder.\n\n* `userDetailsService`: This is an instance of the `UserDetailsService` interface, which provides methods for retrieving user details.\n* `passwordEncoder`: This is an instance of a `PasswordEncoder` class, which handles password encryption and decryption.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n","description":"\nIn this example, the method `configure` is being overridden from its parent class. The method takes an object of type AuthenticationManagerBuilder as an input. Within this method, we are setting the user details service and password encoder for the authentication manager builder. We are using the `userDetailsService` method to set the user details service and the `passwordEncoder` method to set the password encoder.\n\nIt is important to note that this method should be used within a subclass of WebSecurityConfigurerAdapter, and it should be called by the framework during the configuration phase of the application."},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":122,"insert":110,"offset":" ","indent":2,"comment":{"start":109,"end":121}},"item_type":"method","length":3,"docLength":12}]}}}