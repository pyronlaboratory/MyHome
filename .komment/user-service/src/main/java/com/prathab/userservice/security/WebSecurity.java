{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A custom WebSecurity configuration for a Spring Security system. It disables CSRF protection and authorizes requests based on a specific IP address, and also disables frame options. The code creates an instance of AuthenticationFilter, configures it with various parameters, and returns the filter object. Additionally, it specifies the user details service and password encoder for an authentication manager builder, enabling customized authentication settings.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"56c90ff6-d30f-08b5-d34d-c7b9e46e01a5","ancestors":[],"type":"function","description":"is configured to disable CSRF protection and authorize requests based on the value of a specific property in the environment. It also disables frame options and adds an authentication filter to the configuration. The authentication filter is created using the `getAuthenticationFilter()` method and its `filterProcessesUrl` property is set to a specific path. Additionally, the `configure()` method of the class enables customized authentication settings by specifying the user details service and password encoder for the authentication manager builder.","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * disables CSRF protection and authorizes requests based on the value of\n   * `environment.getProperty(\"gateway.ip\")`. It also disables frame options.\n   * \n   * @param http HttpSecurity instance that is being configured.\n   * \n   * 1/ `csrf().disable()`: Disables Cross-Site Request Forgery (CSRF) protection for\n   * this configuration.\n   * 2/ `authorizeRequests().antMatchers(\"/**\")`: Enumerates all requests to any path\n   * in the application, including subpaths, and authorizes them based on the value of\n   * the `environment.getProperty(\"gateway.ip\")` property.\n   * 3/ `hasIpAddress(environment.getProperty(\"gateway.ip\"))`: Filters incoming requests\n   * based on the IP address specified in the `environment.getProperty(\"gateway.ip\")`\n   * property.\n   * 4/ `and()`: Used to chain multiple authorizations together.\n   * 5/ `addFilter(getAuthenticationFilter())`: Adds an authentication filter to the\n   * configuration. The filter can be accessed through the `getAuthenticationFilter()`\n   * method.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  /**\n   * creates an instance of `AuthenticationFilter`, configures it with various parameters,\n   * and returns the filter object.\n   * \n   * @returns an instance of `AuthenticationFilter`, which is a custom filter for\n   * authentication purposes.\n   * \n   * \t- `var authFilter`: This is an instance of the `AuthenticationFilter` class.\n   * \t- `objectMapper`: A reference to an `ObjectMapper` object, which is used to convert\n   * Java objects into and out of JSON format.\n   * \t- `appUserDetailsService`: A reference to an `AppUserDetailsService` object, which\n   * provides user details for authentication purposes.\n   * \t- `environment`: A reference to an `Environment` object, which contains configuration\n   * properties for the application.\n   * \t- `authenticationManager(): A reference to an `AuthenticationManager` object,\n   * which manages the authentication process for the application.\n   * \t- `setFilterProcessesUrl(String url)`: This method sets the `url` property of the\n   * `filterProcesses` attribute of the `AuthenticationFilter` instance.\n   */\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  /**\n   * specifies the user details service and password encoder for an authentication\n   * manager builder, enabling customized authentication settings.\n   * \n   * @param auth AuthenticationManagerBuilder instance, which is used to configure the\n   * builder with various authentication-related settings.\n   * \n   * \t- `userDetailsService`: It represents a service that manages user details for\n   * authentication purposes.\n   * \t- `passwordEncoder`: It encodes passwords for secure storage and retrieval during\n   * authentication.\n   */\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":32,"insert":28,"offset":" ","indent":0,"comment":{"start":27,"end":31}},"item_type":"class","length":90,"docLength":4},{"id":"b4e95a49-53d8-4bb7-2f4d-ffd1a2befb21","ancestors":["56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"],"type":"function","description":"disables CSRF protection, authorizes requests based on the IP address of the gateway server, and disables frame options.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security context and provides methods for configuring various security features, such as disabling CSRF protection and authorizing requests based on IP addresses.\n\n* `csrf().disable()` disables Cross-Site Request Forgery (CSRF) protection for all requests.\n* `authorizeRequests()` specifies which request patterns are authorized and allowed to pass through, using the `hasIpAddress()` filter to restrict access based on the IP address of the requesting client.\n* `addFilter(getAuthenticationFilter());` adds an authentication filter to the pipeline for further authentication processing.\n* `headers().frameOptions().disable()` disables the Frame Options security feature that helps prevent clickjacking attacks.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n}\n","description":"\nThis code would disable CSRF protection and only allow requests from the gateway ip address, then it would add an authentication filter to the configuration."},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":69,"insert":50,"offset":" ","indent":2,"comment":{"start":49,"end":68}},"item_type":"method","length":10,"docLength":19},{"id":"81cb5ebb-07d1-f79b-794a-ce68075a5ced","ancestors":["56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"],"type":"function","description":"creates and returns an instance of the `AuthenticationFilter` class, which is used to filter incoming HTTP requests based on authentication requirements.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter` configured with various properties and services for authentication management.\n\n* `objectMapper`: A reference to an object mapper instance used for serializing and deserializing objects.\n* `appUserDetailsService`: A reference to an app user details service used for retrieving user details.\n* `environment`: A reference to an environment instance used for storing configuration properties.\n* `authenticationManager`: A reference to an authentication manager instance used for managing authentication processes.\n* `filterProcessesUrl`: The URL path of the login page, which is set using the `setFilterProcessesUrl()` method.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate WebSecurityConfigurerAdapter webSecurityConfigurerAdapter;\n\n@Bean\npublic FilterRegistrationBean authenticationFilter() throws Exception {\n    var filterRegistration = new FilterRegistrationBean();\n    filterRegistration.setFilter(webSecurityConfigurerAdapter.getAuthenticationFilter());\n    filterRegistration.addUrlPatterns(\"/*\");\n    return filterRegistration;\n}\n","description":"\nThis code snippet creates a `FilterRegistrationBean` instance and sets the `filter` property to the result of invoking the `getAuthenticationFilter()` method on an instance of `WebSecurityConfigurerAdapter`. The `addUrlPatterns()` method is then used to specify that all requests should be filtered by this filter."},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":99,"insert":80,"offset":" ","indent":2,"comment":{"start":79,"end":98}},"item_type":"method","length":6,"docLength":19},{"id":"5d1ab520-bb84-a1ac-7849-ea2c70b0ec94","ancestors":["56c90ff6-d30f-08b5-d34d-c7b9e46e01a5"],"type":"function","description":"sets up authentication-related configuration for a builder object, including specifying a user details service and password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder, which is being configured by setting the user details service and password encoder.\n\nThe `AuthenticationManagerBuilder` object is provided as an argument to the method, which enables customization of the authentication process.\n\nThe `userDetailsService` property sets the implementation of the UserDetailsService interface, which provides a way to retrieve user details for authentication purposes.\n\nThe `passwordEncoder` property sets the implementation of the PasswordEncoder interface, which is responsible for encoding and decoding passwords securely.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n}\n","description":"\nIn this example, the `configure` method is overridden from its superclass and takes in a single parameter called `auth`, which is an instance of `AuthenticationManagerBuilder`. This method is used to configure the builder with various authentication-related settings. In this case, it sets the user details service and password encoder for the authentication manager builder, enabling customized authentication settings."},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":118,"insert":106,"offset":" ","indent":2,"comment":{"start":105,"end":117}},"item_type":"method","length":3,"docLength":12}]}}}