{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A custom `WebSecurityConfigurerAdapter` for securing an application. It disables CSRF protections, authorizes requests based on the gateway IP address, and sets a custom login URL. Additionally, it configures an authentication filter and user details service using the `ObjectMapper`, `Environment`, and `PasswordEncoder` packages.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"3d6ff561-a503-368c-aa41-5429299e567c","ancestors":["d84f0a9e-75f5-af97-2b45-e8fe8ad63150"],"type":"function","description":"disables CSRF protection and restricts API access to a specific IP address. It also adds an authentication filter and disables frame options for improved security.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security context, and it is used to configure various settings related to CSRF protection, IP-based authorizations, and frame options.\n\n* `csrf().disable()` disables CSRF protection for all requests.\n* `authorizeRequests().antMatchers(\"/**\")` specifies that all requests to any endpoint in the application are authorized.\n* `hasIpAddress(environment.getProperty(\"gateway.ip\"))` authorizes requests from a specific IP address (configured in the property `gateway.ip`).\n* `addFilter(getAuthenticationFilter());` adds an authentication filter to the chain for further authentication checks.\n* `headers().frameOptions().disable()` disables frame options for security reasons.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF protection\n    http.csrf().disable();\n\n    // Authorize all requests to have the specified IP address\n    http.authorizeRequests().antMatchers(\"/**\").hasIpAddress(environment.getProperty(\"gateway.ip\"));\n\n    // Add an authentication filter to check for a valid login\n    http.addFilter(getAuthenticationFilter());\n\n    // Disable frame options\n    http.headers().frameOptions().disable();\n}\n","description":"\nNote that this is just one possible way of using the method, and there are many other ways to use it depending on your specific requirements."},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10,"docLength":null},{"id":"787b3c95-e7f7-f4ae-bb43-20e1e7588a58","ancestors":["d84f0a9e-75f5-af97-2b45-e8fe8ad63150"],"type":"function","description":"creates an instance of `AuthenticationFilter`, configures it with various service objects, and returns the filtered instance.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter` with customized configuration for login processing.\n\n* `objectMapper`: A reference to an Object Mapper instance that is used for serializing and deserializing objects.\n* `appUserDetailsService`: A reference to an App User Details Service instance that provides user details information.\n* `environment`: A reference to an Environment instance that contains configuration properties and other environment-related information.\n* `authenticationManager`: A reference to an Authentication Manager instance that manages authentication-related operations.\n* `filterProcessesUrl`: The URL path of the login page, which is set using the `setFilterProcessesUrl` method.","complex_type":true},"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    //...\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    //...\n}\n","description":""},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6,"docLength":null},{"id":"338f4527-9ec3-b2a5-f442-9f37d344bd6d","ancestors":["d84f0a9e-75f5-af97-2b45-e8fe8ad63150"],"type":"function","description":"specifies the user details service and password encoder used for authentication.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder object, which is being configured to use the `appUserDetailsService` for user details and the `passwordEncoder` for password encryption.\n\n* `userDetailsService`: The `AuthenticationManagerBuilder` is provided with an instance of `UserDetailsService`. This service is responsible for handling user authentication.\n* `passwordEncoder`: The `AuthenticationManagerBuilder` is given an instance of `PasswordEncoder`. This encoder is used to encrypt passwords securely.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    // Set the authentication manager to use our custom user details service and password encoder\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n}\n","description":"\nThis method is used in the WebSecurity class, which extends WebSecurityConfigurerAdapter. It is called during the initialization of Spring Security, and it allows us to configure how authentication should work for our application. In this example, we are configuring the AuthenticationManagerBuilder to use our custom user details service and password encoder. This will allow us to authenticate users using the provided username and password combination."},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":68,"insert":68,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null}]}}}