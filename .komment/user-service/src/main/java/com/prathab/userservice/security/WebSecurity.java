{"name":"WebSecurity.java","path":"user-service/src/main/java/com/prathab/userservice/security/WebSecurity.java","content":{"structured":{"description":"A custom `WebSecurity` class that extends `WebSecurityConfigurerAdapter`. It configures various security settings for an application, including disabling CSRF protection, restricting API access to a specific IP address, adding an authentication filter, and disabling frame options. The code also sets up a `PasswordEncoder` and an `AppUserDetailsService` for user authentication.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.userservice.security.AppUserDetailsService Pages: 1 -->\n<svg width=\"189pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 189.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.userservice.security.AppUserDetailsService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"181,-30 0,-30 0,0 181,0 181,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.userservice.security.</text>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AppUserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"145.5,-85 35.5,-85 35.5,-66 145.5,-66 145.5,-85\"/>\n<text text-anchor=\"middle\" x=\"90.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserDetailsService</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M90.5,-55.65C90.5,-47.36 90.5,-37.78 90.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87,-55.87 90.5,-65.87 94,-55.87 87,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    AuthenticationFilter\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"7143d31c-0047-45b9-2e4c-9696c1332577","ancestors":[],"type":"function","description":"is configured to disable CSRF protection and restrict API access to a specific IP address, add an authentication filter and disable frame options for improved security. The configuration also authorizes all requests and adds an authentication filter with customized configuration for login processing.","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n\n  private final Environment environment;\n  private final ObjectMapper objectMapper;\n  private final AppUserDetailsService appUserDetailsService;\n  private final PasswordEncoder passwordEncoder;\n\n  public WebSecurity(Environment environment,\n      ObjectMapper objectMapper, AppUserDetailsService appUserDetailsService,\n      PasswordEncoder passwordEncoder) {\n    this.environment = environment;\n    this.objectMapper = objectMapper;\n    this.appUserDetailsService = appUserDetailsService;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * disables CSRF protection and restricts API access to a specific IP address. It\n   * also adds an authentication filter and disables frame options for improved security.\n   * \n   * @param http HTTP security context, and it is used to configure various settings\n   * related to CSRF protection, IP-based authorizations, and frame options.\n   * \n   * \t- `csrf().disable()` disables CSRF protection for all requests.\n   * \t- `authorizeRequests().antMatchers(\"/**\")` specifies that all requests to any\n   * endpoint in the application are authorized.\n   * \t- `hasIpAddress(environment.getProperty(\"gateway.ip\"))` authorizes requests from\n   * a specific IP address (configured in the property `gateway.ip`).\n   * \t- `addFilter(getAuthenticationFilter());` adds an authentication filter to the\n   * chain for further authentication checks.\n   * \t- `headers().frameOptions().disable()` disables frame options for security reasons.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }\n\n  /**\n   * creates an instance of `AuthenticationFilter`, configures it with various service\n   * objects, and returns the filtered instance.\n   * \n   * @returns an instance of `AuthenticationFilter` with customized configuration for\n   * login processing.\n   * \n   * \t- `objectMapper`: A reference to an Object Mapper instance that is used for\n   * serializing and deserializing objects.\n   * \t- `appUserDetailsService`: A reference to an App User Details Service instance\n   * that provides user details information.\n   * \t- `environment`: A reference to an Environment instance that contains configuration\n   * properties and other environment-related information.\n   * \t- `authenticationManager`: A reference to an Authentication Manager instance that\n   * manages authentication-related operations.\n   * \t- `filterProcessesUrl`: The URL path of the login page, which is set using the\n   * `setFilterProcessesUrl` method.\n   */\n  private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n\n  /**\n   * specifies the user details service and password encoder used for authentication.\n   * \n   * @param auth AuthenticationManagerBuilder object, which is being configured to use\n   * the `appUserDetailsService` for user details and the `passwordEncoder` for password\n   * encryption.\n   * \n   * \t- `userDetailsService`: The `AuthenticationManagerBuilder` is provided with an\n   * instance of `UserDetailsService`. This service is responsible for handling user authentication.\n   * \t- `passwordEncoder`: The `AuthenticationManagerBuilder` is given an instance of\n   * `PasswordEncoder`. This encoder is used to encrypt passwords securely.\n   */\n  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":32,"insert":28,"offset":" ","indent":0,"comment":{"start":27,"end":31}},"item_type":"class","length":86,"docLength":4},{"id":"7885c58d-78ce-23a2-ef47-d100c7d4c152","ancestors":["7143d31c-0047-45b9-2e4c-9696c1332577"],"type":"function","description":"disables CSRF protection and authorizes requests based on the IP address of the gateway server. It also disables frame options for security reasons.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security configuration object that is being customized by the method.\n\n* `csrf().disable()` disables CSRF protection for this security configuration.\n* `authorizeRequests().antMatchers(\"/**\")` specifies that all requests to any endpoint in the application should be authorized.\n* `.hasIpAddress(environment.getProperty(\"gateway.ip\"))` allows only requests from a specific IP address to be authorized. The specified property \"gateway.ip\" contains the allowed IP address.\n* `.and()` is a conjunction operator that combines multiple security rules in the same block.\n* `.addFilter(getAuthenticationFilter());` adds an authentication filter to the configuration, which will be executed before the application's endpoints are accessed. The `getAuthenticationFilter()` method returns a reference to the authentication filter implementation.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF protection for all requests\n    http.csrf().disable();\n    \n    // Only allow requests from the specific IP address specified in the environment variable 'gateway.ip'\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    \n    // Disable frame options for security reasons\n    http.headers().frameOptions().disable();\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http\n        .authorizeRequests()\n        .antMatchers(\"/**\")\n        .hasIpAddress(environment.getProperty(\"gateway.ip\"))\n        .and()\n        .addFilter(getAuthenticationFilter());\n    http.headers().frameOptions().disable();\n  }","location":{"start":66,"insert":50,"offset":" ","indent":2,"comment":{"start":49,"end":65}},"item_type":"method","length":10,"docLength":16},{"id":"ca9022c5-ea13-55bc-b349-8734737675ff","ancestors":["7143d31c-0047-45b9-2e4c-9696c1332577"],"type":"function","description":"creates an instance of the `AuthenticationFilter` class, passing in various dependencies such as object mapper, user details service, and authentication manager. The function also sets a property for the filter's URL processing.","params":[],"returns":{"type_name":"AuthenticationFilter","description":"an instance of `AuthenticationFilter` initialized with various components to handle authentication processes.\n\n* `objectMapper`: An instance of the `ObjectMapper` class, which is used for mapping JSON data to and from objects.\n* `appUserDetailsService`: An instance of the `AppUserDetailsService` class, which provides user details for authentication.\n* `environment`: A variable containing the environment properties, including the `login.url.path` property, which sets the URL path for the login functionality.\n* `authenticationManager()`: An instance of the `AuthenticationManager` class, which manages the authentication process.\n\nThe function returns an instance of the `AuthenticationFilter` class, which is responsible for filtering incoming HTTP requests based on user authentication. The `setFilterProcessesUrl()` method sets the URL path for the login functionality.","complex_type":true},"usage":{"language":"java","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }\n","description":""},"name":"getAuthenticationFilter","code":"private AuthenticationFilter getAuthenticationFilter() throws Exception {\n    var authFilter = new AuthenticationFilter(objectMapper, appUserDetailsService, environment,\n        authenticationManager());\n    authFilter.setFilterProcessesUrl(environment.getProperty(\"login.url.path\"));\n    return authFilter;\n  }","location":{"start":95,"insert":77,"offset":" ","indent":2,"comment":{"start":76,"end":94}},"item_type":"method","length":6,"docLength":18},{"id":"eaacf5e5-c71b-099d-4047-67e0f0ae4abe","ancestors":["7143d31c-0047-45b9-2e4c-9696c1332577"],"type":"function","description":"sets up an Authentication Manager by specifying a user details service and password encoder.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder, which is being configured by setting the user details service and password encoder.\n\n* `userDetailsService`: This represents the user details service used by the authentication manager builder to configure user details-related functionality.\n* `passwordEncoder`: This property defines the password encoder used by the authentication manager builder for password encryption and decryption.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n  auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n}\n","description":"\nThis code is a part of the WebSecurity class which extends the WebSecurityConfigurerAdapter. In this example, the user details service and password encoder are being configured for authentication using the AuthenticationManagerBuilder object provided as an argument to the method configure."},"name":"configure","code":"@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(appUserDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":114,"insert":102,"offset":" ","indent":2,"comment":{"start":101,"end":113}},"item_type":"method","length":3,"docLength":12}]}}}