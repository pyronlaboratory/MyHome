{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"A custom `UserDetailsService` implementation that caters to the needs of service logic. The class has a constructor that takes a `UserRepository` and a `UserMapper`, which are used to load user details by username. The `loadUserByUsername()` method throws a `UsernameNotFoundException` if the user is not found, and returns a `UserDetails` object containing email, encrypted password, and other attributes. The `getUserDetailsByUsername()` method returns a `UserDto` object representing the user details.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"security\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"dto\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        UserDto\n    }\n    edge [color=\"#26de81\"]\n    AppUserDetailsService -> UserDto \n}\n","items":[{"id":"253ee37e-74fe-35aa-874f-1d2f98d2a7bc","ancestors":["5d2a5d15-b1c3-2d92-4d42-45591fb74aaf"],"type":"function","description":"loads a user by their username and returns a `UserDetails` object containing the user's email, encrypted password, and various other attributes.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be loaded.","complex_type":false}],"returns":{"type_name":"instance","description":"a `User` object containing the user's email, encrypted password, and various boolean flags indicating their role and permissions.\n\n* `Email`: The email address of the user.\n* `EncryptedPassword`: The encrypted password for the user.\n* `AccountNonExpired`: Whether the user's account is non-expired.\n* `AccountNonLocked`: Whether the user's account is non-locked.\n* `CredentialsNonExpired`: Whether the user's credentials are non-expired.\n* `Role`: The role of the user (empty list means no role).","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate AppUserDetailsService userDetailsService;\n\n// ...\n\nString username = \"johndoe\";\n\nUserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\nif (userDetails != null) {\n    // do something with the UserDetails object\n} else {\n    // handle error or throw exception\n}\n","description":""},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16,"docLength":null},{"id":"1b177417-4ef2-07b1-414e-7f2a5a4b24d8","ancestors":["5d2a5d15-b1c3-2d92-4d42-45591fb74aaf"],"type":"function","description":"retrieves a user's details from the repository and mapper, using their email address as a reference.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the provided username.\n\n* `user`: A `User` object representing the user details, retrieved from the database using the `findByEmail` method.\n* `username`: The username for which the user details were retrieved.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    AppUserDetailsService userService = new AppUserDetailsService(new UserRepository(), new UserMapper());\n    String username = \"prathab.murugan@example.com\";\n    UserDto userDto = userService.getUserDetailsByUsername(username);\n    System.out.println(\"userDto: \" + userDto);\n  }\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7,"docLength":null}]}}}