{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"An implementation of `UserDetailsService` that cater's to the need of service logic. The class has a constructor that takes a `UserRepository` and a `UserMapper` as parameters, indicating that it relies on these classes for data access and mapping respectively. The `loadUserByUsername` method is responsible for loading a user by their username, returning a `UserDetails` object containing the user's email, encrypted password, and various other attributes. Additionally, the class provides a `getUserDetailsByUsername` method that retrieves a user's details from the repository and mapper using their email address as a reference, and returns a `UserDto` object containing the user's details.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AppUserDetailsService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"security\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    AppUserDetailsService -> UserDto \n}\n","items":[{"id":"73ed1047-a7fd-2987-2547-faacc1feb407","ancestors":[],"type":"function","description":"is a custom implementation of Spring Security's `UserDetailsService` interface, providing user details loading and retrieval functionality. It takes in a username and returns a `UserDetails` object containing the user's email, encrypted password, and various other attributes. Additionally, it provides methods for retrieving a user's details from the repository and mapper using their email address as a reference.","name":"AppUserDetailsService","code":"@Service\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  public AppUserDetailsService(UserRepository userRepository,\n      UserMapper userMapper) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n  }\n\n  /**\n   * loads a user by their username and returns a `UserDetails` object containing the\n   * user's email, encrypted password, and various other attributes.\n   * \n   * @param username username for which the user details are to be loaded.\n   * \n   * @returns a `User` object containing the user's email, encrypted password, and\n   * various boolean flags indicating their role and permissions.\n   * \n   * \t- `Email`: The email address of the user.\n   * \t- `EncryptedPassword`: The encrypted password for the user.\n   * \t- `AccountNonExpired`: Whether the user's account is non-expired.\n   * \t- `AccountNonLocked`: Whether the user's account is non-locked.\n   * \t- `CredentialsNonExpired`: Whether the user's credentials are non-expired.\n   * \t- `Role`: The role of the user (empty list means no role).\n   */\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  /**\n   * retrieves a user's details from the repository and mapper, using their email address\n   * as a reference.\n   * \n   * @param username username for which the user details are to be retrieved.\n   * \n   * @returns a `UserDto` object containing the details of the user with the provided\n   * username.\n   * \n   * \t- `user`: A `User` object representing the user details, retrieved from the\n   * database using the `findByEmail` method.\n   * \t- `username`: The username for which the user details were retrieved.\n   */\n  public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":32,"insert":29,"offset":" ","indent":0,"comment":{"start":28,"end":31}},"item_type":"class","length":65,"docLength":3},{"id":"85842921-ab89-8fa0-534f-1d68f712e9e9","ancestors":["73ed1047-a7fd-2987-2547-faacc1feb407"],"type":"function","description":"retrieves a user from the repository based on their username and returns a `UserDetails` object with the user's email, encrypted password, and various flags indicating whether the user is active, locked out, or has a valid account.","params":[{"name":"username","type_name":"String","description":"username for which the UserDetails object is to be loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object containing user information and authentication details.\n\n* `user`: This is an instance of the `User` class, representing a user in the system.\n* `email`: The email address of the user.\n* `encryptedPassword`: The encrypted password for the user.\n* `isAdmin`: A boolean indicating whether the user is an administrator or not.\n* `isVerified`: A boolean indicating whether the user's account has been verified or not.\n* `isActive`: A boolean indicating whether the user's account is active or not.\n* `groups`: An empty list, as there are no groups associated with this user.","complex_type":true},"usage":{"language":"java","code":"// get the user details using the email address as input\nUserDetails user = loadUserByUsername(\"email@example.com\");\n\n// check if the user exists\nif (user != null) {\n    // do something with the user details\n    System.out.println(user.getUsername());\n} else {\n    // handle non-existent user\n}\n","description":""},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":59,"insert":43,"offset":" ","indent":2,"comment":{"start":42,"end":58}},"item_type":"method","length":16,"docLength":16},{"id":"883bc5f1-fad3-ba97-6f4a-f2e748c7926a","ancestors":["73ed1047-a7fd-2987-2547-faacc1feb407"],"type":"function","description":"retrieves a user's details by their username from a repository and maps them to a `UserDto` object using a mapper.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user found in the repository.\n\n* `user`: A `User` object obtained from the `userRepository`.\n* `userMapper`: A `UserMapper` object used to convert the `User` object into a `UserDto` object.\n\nThe `UserDto` object contains attributes related to the user, such as their email and name.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    UserDto user = AppUserDetailsService.getUserDetailsByUsername(\"prathab@example.com\");\n    System.out.println(user);\n  }\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":89,"insert":76,"offset":" ","indent":2,"comment":{"start":75,"end":88}},"item_type":"method","length":7,"docLength":13}]}}}