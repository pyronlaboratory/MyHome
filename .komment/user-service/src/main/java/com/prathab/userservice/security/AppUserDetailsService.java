{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"An `AppUserDetailsService` class that implements Spring Security's `UserDetailsService` interface. The service provides user details loading and retrieval functionality using a repository and mapper. It loads a user from the repository based on their username and returns a `UserDetails` object, and it also retrieves a user's details from the repository and mapper using their email address as a reference.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AppUserDetailsService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"security\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    AppUserDetailsService -> UserDto \n}\n","items":[{"id":"1bf6e0b6-67d8-75b8-d749-61029fc66c90","ancestors":[],"type":"function","description":"is an implementation of the UserDetailsService interface, which provides methods for retrieving user details based on their username and mapping them to a `UserDto` object using a mapper. The class has a dependency on a `UserRepository` and a `UserMapper`, which it uses to retrieve user details from the repository and map them to the desired format, respectively.","name":"AppUserDetailsService","code":"@Service\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  public AppUserDetailsService(UserRepository userRepository,\n      UserMapper userMapper) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n  }\n\n  /**\n   * retrieves a user from the repository based on their username and returns a\n   * `UserDetails` object with the user's email, encrypted password, and various flags\n   * indicating whether the user is active, locked out, or has a valid account.\n   * \n   * @param username username for which the UserDetails object is to be loaded.\n   * \n   * @returns a `UserDetails` object containing user information and authentication details.\n   * \n   * \t- `user`: This is an instance of the `User` class, representing a user in the system.\n   * \t- `email`: The email address of the user.\n   * \t- `encryptedPassword`: The encrypted password for the user.\n   * \t- `isAdmin`: A boolean indicating whether the user is an administrator or not.\n   * \t- `isVerified`: A boolean indicating whether the user's account has been verified\n   * or not.\n   * \t- `isActive`: A boolean indicating whether the user's account is active or not.\n   * \t- `groups`: An empty list, as there are no groups associated with this user.\n   */\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  /**\n   * retrieves a user's details by their username from a repository and maps them to a\n   * `UserDto` object using a mapper.\n   * \n   * @param username username for which the user details are to be retrieved.\n   * \n   * @returns a `UserDto` object containing the details of the user found in the repository.\n   * \n   * \t- `user`: A `User` object obtained from the `userRepository`.\n   * \t- `userMapper`: A `UserMapper` object used to convert the `User` object into a\n   * `UserDto` object.\n   * \n   * The `UserDto` object contains attributes related to the user, such as their email\n   * and name.\n   */\n  public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":36,"insert":29,"offset":" ","indent":0,"comment":{"start":28,"end":35}},"item_type":"class","length":69,"docLength":7},{"id":"1d9f74df-c3b5-bdbd-7b44-8ce128862d6b","ancestors":["1bf6e0b6-67d8-75b8-d749-61029fc66c90"],"type":"function","description":"loads a user by their username and returns a `UserDetails` object containing the user's email, encrypted password, and other metadata.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object representing the user with the specified username.\n\n* `UserDetails`: This is the class that represents a user in the application, with properties such as email, encrypted password, and other identity-related information.\n* `username`: The username for which the user details are being loaded.\n* `userRepository`: A repository object that provides access to the user data stored in the application.\n* `findByEmail()`: A method of the `userRepository` class that finds a user by their email address.\n* `null`: If no user is found with the given username, this variable will be `null`.\n* `throw new UsernameNotFoundException()`: This line throws an exception with the provided username if no user is found.\n\nIn summary, the `loadUserByUsername` function takes a username as input and returns a `UserDetails` object containing information about the user associated with that username, or throws an exception if no such user exists.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n        throw new UsernameNotFoundException(username);\n    }\n    return new User(user.getEmail(),\n            user.getEncryptedPassword(),\n            true,\n            true,\n            true,\n            true,\n            Collections.emptyList());\n}\n","description":""},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":65,"insert":47,"offset":" ","indent":2,"comment":{"start":46,"end":64}},"item_type":"method","length":16,"docLength":18},{"id":"45b992ff-df45-2ebf-4546-78abc6c9dd1c","ancestors":["1bf6e0b6-67d8-75b8-d749-61029fc66c90"],"type":"function","description":"retrieves a user from the repository based on the given username, maps it to a `UserDto` object, and returns it.","params":[{"name":"username","type_name":"String","description":"username for which the user details are being requested.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the specified username.\n\n* `user`: A `User` object containing the details of the user retrieved from the database.\n* `userMapper`: A mapper responsible for mapping the `User` object to a corresponding `UserDto` object.","complex_type":true},"usage":{"language":"java","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n","description":"\nIn this example, the method getUserDetailsByUsername takes in a String argument called \"username\". The method first queries the repository to find the user with the given email address. If no such user is found, it throws a UsernameNotFoundException. Otherwise, it converts the retrieved user object into a UserDto using the mapper and returns it."},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":97,"insert":82,"offset":" ","indent":2,"comment":{"start":81,"end":96}},"item_type":"method","length":7,"docLength":15}]}}}