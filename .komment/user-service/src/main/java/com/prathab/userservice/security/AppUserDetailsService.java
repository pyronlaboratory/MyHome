{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"An implementation of Spring Security's `UserDetailsService` interface, providing user details loading and retrieval functionality through a repository and mapper. The `AppUserDetailsService` class loads a user from the repository based on their username and returns a `UserDetails` object containing their email, encrypted password, and various flags. It also provides methods for retrieving a user's details from the repository and mapper using their email address as a reference.","diagram":"digraph G {\n    label=\"com.prathab.userservice.security.AppUserDetailsService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"security\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    AppUserDetailsService -> UserDto \n}\n","items":[{"id":"2657bca6-85d4-72be-ac42-3ead3ef6b070","ancestors":[],"type":"function","description":"is an implementation of the `UserDetailsService` interface in Java. It provides methods for retrieving a user's details by their username from a repository and mapping them to a `UserDto` object using a mapper. The service also loads a user based on their username and returns a `UserDetails` object containing the user's email, encrypted password, and various flags indicating their account status.","name":"AppUserDetailsService","location":{"start":36,"insert":29,"offset":" ","indent":0,"comment":{"start":28,"end":35}},"item_type":"class","length":69,"docLength":7},{"id":"805a97cf-a9e8-2983-844d-3c8baba5994d","ancestors":["2657bca6-85d4-72be-ac42-3ead3ef6b070"],"type":"function","description":"loads a user by their username and returns a `UserDetails` object containing the user's email, encrypted password, and various flags indicating whether they are an administrator or not.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object containing the user's email address, encrypted password, and other properties.\n\n* `email`: The email address of the user.\n* `encryptedPassword`: The encrypted password for the user.\n* `isEnabled`: A boolean indicating whether the user is enabled or not.\n* `isAdmin`: A boolean indicating whether the user is an administrator or not.\n* `isAccountNonExpired`: A boolean indicating whether the user's account is non-expired.\n* `isAccountNonLocked`: A boolean indicating whether the user's account is non-locked.\n* `Collections.emptyList()`: An empty list of extra attributes associated with the user.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n  return appUserDetailsService.loadUserByUsername(username);\n}\n","description":"\nIn this example, the userRepository is called to find a user by their email address (as given by the String argument 'username') and then the returned value from that is used as an argument in the loadUserByUsername method."},"name":"loadUserByUsername","location":{"start":65,"insert":47,"offset":" ","indent":2,"comment":{"start":46,"end":64}},"item_type":"method","length":16,"docLength":18},{"id":"51d4ef14-ad0c-faaa-8144-2e9afb55c6e9","ancestors":["2657bca6-85d4-72be-ac42-3ead3ef6b070"],"type":"function","description":"retrieves a user's details from the repository and maps them to a `UserDto` object using a mapper.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the specified username.\n\n* The function returns a `UserDto` object representing the user details.\n* The `user` variable is retrieved from the `userRepository` using the `findByEmail` method. If the user is not found, a `UsernameNotFoundException` is thrown.\n* The `userMapper` is used to convert the `User` object to a `UserDto` object.","complex_type":true},"usage":{"language":"java","code":"public class AppUserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  public AppUserDetailsService(UserRepository userRepository, UserMapper userMapper) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}\n","description":""},"name":"getUserDetailsByUsername","location":{"start":97,"insert":82,"offset":" ","indent":2,"comment":{"start":81,"end":96}},"item_type":"method","length":7,"docLength":15}]}}}