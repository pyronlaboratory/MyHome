{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"An custom `UserDetailsService` class that loads user details using a repository and mapper. The service implements the `UserDetailsService` interface and provides methods for loading user details by username and converting user objects to `UserDto` objects. The `loadUserByUsername()` method uses a repository to find a user by their email address, and if they are not found, throws a `UsernameNotFoundException`. The `getUserDetailsByUsername()` method returns a `UserDto` object representing the user details.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"security\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AppUserDetailsService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    edge [color=\"#26de81\"]\n    AppUserDetailsService -> UserDto \n}\n","items":[{"id":"81134f03-810a-7a8a-084d-69a4a3310615","ancestors":["a588e829-7039-86bf-5e43-1affaaa4a2ae"],"type":"function","description":"loads a user by their username and returns a `UserDetails` object containing the user's email, encrypted password, and other authentication-related information.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object containing the user's email, encrypted password, and other security-related information.\n\n* `email`: The email address of the user.\n* `encryptedPassword`: The encrypted password for the user.\n* `isAdmin`: A boolean indicating whether the user is an administrator or not.\n* `isEnabled`: A boolean indicating whether the user is enabled or not.\n* `isAccountNonExpired`: A boolean indicating whether the user's account is non-expired or not.\n* `isAccountNonLocked`: A boolean indicating whether the user's account is non-locked or not.\n* `groups`: An empty list, as there are no groups associated with this function.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n        throw new UsernameNotFoundException(username);\n    }\n    return new User(user.getEmail(), user.getEncryptedPassword(), true, true, true, true, Collections.emptyList());\n}\n","description":"\nThe method takes in a String parameter 'username' and returns a UserDetails object. If the repository cannot find a user with the given email address, it throws an exception with the username as an argument. Otherwise, it creates a new User object with the email, encrypted password, boolean values for enabled and account non-expired, credentials non-expired, and account non-locked, and an empty list of authorities (roles)."},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16,"docLength":null},{"id":"a531a522-fcc1-06bf-8440-88e667957699","ancestors":["a588e829-7039-86bf-5e43-1affaaa4a2ae"],"type":"function","description":"retrieves a user's details by their username and maps them to a `UserDto` object using a mapper.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user found in the database.\n\n* `user`: The user object retrieved from the database using the provided username.\n* `userMapper`: A mapper responsible for transforming the user object into a `UserDto`.\n\nThe function returns a `UserDto`, which contains the following attributes:\n\n* `id`: The unique identifier of the user.\n* `username`: The username associated with the user.\n* `email`: The email address of the user.\n* `name`: The full name of the user.\n* `role`: The role assigned to the user.","complex_type":true},"usage":{"language":"java","code":"// import statements\nimport com.prathab.userservice.dto.UserDto;\nimport com.prathab.userservice.repositories.UserRepository;\nimport com.prathab.userservice.security.AppUserDetailsService;\n\npublic class UserServiceExample {\n  public static void main(String[] args) {\n    // create an instance of the AppUserDetailsService\n    AppUserDetailsService userDetailsService = new AppUserDetailsService();\n    \n    // retrieve a user by username\n    String username = \"prathab.murugan@example.com\";\n    UserDto user = userDetailsService.getUserDetailsByUsername(username);\n    \n    // print the retrieved user's details\n    System.out.println(\"User ID: \" + user.getId());\n    System.out.println(\"User Email: \" + user.getEmail());\n  }\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7,"docLength":null}]}}}