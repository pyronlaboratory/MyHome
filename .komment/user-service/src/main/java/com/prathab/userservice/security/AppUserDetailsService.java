{"name":"AppUserDetailsService.java","path":"user-service/src/main/java/com/prathab/userservice/security/AppUserDetailsService.java","content":{"structured":{"description":"An `AppUserDetailsService` class that implements Spring Security's `UserDetailsService` interface. It provides custom logic for loading user details by username and mapping user entities to `UserDetails` objects. The class uses dependencies on `UserRepository` and `UserMapper` to perform these operations.","items":[{"id":"4a504cc0-3d05-989a-c243-ba9ffd7cb14c","ancestors":[],"type":"function","description":"is a custom implementation of Spring Security's UserDetailsService interface. It provides methods for loading user details by username and returning user DTOs by username. The service uses the UserRepository and UserMapper classes to interact with the underlying data storage and map users to DTOs, respectively.","name":"AppUserDetailsService","code":"@Service\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  public AppUserDetailsService(UserRepository userRepository,\n      UserMapper userMapper) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n  }\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":{"start":28,"end":31}},"item_type":"class","length":36},{"id":"ca8c846d-c457-6a8f-2e4b-0768660fad8d","ancestors":["4a504cc0-3d05-989a-c243-ba9ffd7cb14c"],"type":"function","description":"loads a user by their username and returns a `UserDetails` object containing the user's email address, encrypted password, and other information such as authorization and auditing flags.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object containing the user's email, encrypted password, and other attributes.\n\n* `user`: The user object that is loaded from the database.\n\t+ `email`: The email address of the user.\n\t+ `encryptedPassword`: The encrypted password for the user.\n\t+ `isAdmin`: Whether the user is an administrator or not.\n\t+ `isLockedOut`: Whether the user is locked out or not.\n\t+ `isAccountNonExpired`: Whether the user's account is non-expired or not.\n\t+ `isAccountNonLocked`: Whether the user's account is non-locked or not.\n\t+ `isPasswordValid`: Whether the user's password is valid or not.\n\nNote: The `loadUserByUsername` function throws a `UsernameNotFoundException` if the user with the specified username does not exist in the database.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate AppUserDetailsService userDetailsService;\n\n//...\nString username = \"test@example.com\";\n\nUserDetails userDetails = userDetailsService.loadUserByUsername(username);\n","description":""},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"99b4e252-8580-3fa7-e449-a5a1b412a228","ancestors":["4a504cc0-3d05-989a-c243-ba9ffd7cb14c"],"type":"function","description":"retrieves a user details object from a repository by their username, maps it to a UserDto object, and returns it.","params":[{"name":"username","type_name":"String","description":"username of the user whose details are being retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing details of the specified user.\n\n* The user object is retrieved from the `userRepository` using the `findByEmail` method with the provided username as parameter.\n* If the user is null, a `UsernameNotFoundException` is thrown.\n* The user object is then mapped to a `UserDto` object using the `userMapper` method.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    UserDto user = new AppUserDetailsService().getUserDetailsByUsername(\"username\");\n    System.out.println(user);\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    var user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}