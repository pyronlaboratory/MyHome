{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that handles user-related operations, including creating new users and returning created user responses. The controller uses the `UserService` and `UserApiMapper` classes to map requests to and from the database, and the `HttpStatus` class to define the status code of the response. The `signUp()` method takes a `CreateUserRequest` object as input, validates it against its schema, maps it to a `UserDTO` object, creates a new user in the database using the `UserDTO` object as input, and maps the newly created user account back to a `CreateUserResponse` object, which is then returned in the function's response.","diagram":"digraph G {\n    label=\"com.prathab.userservice.controllers.UserController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateUserResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            CreateUserRequest\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        UserController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    UserController -> CreateUserResponse \n    CreateUserRequest -> UserController \n}\n","items":[{"id":"f5c47fae-8381-c3ae-f84f-73358e268681","ancestors":[],"type":"function","description":"in Spring Boot handles sign-up requests from clients and creates new user accounts in the database. The function receives a `CreateUserRequest` request body from the client, creates a new user entity using the provided data, and returns a `CreateUserResponse` object representing the created user resource. The function uses the `@Valid` annotation to validate the `CreateUserRequest` object against its schema, and the `@RequestBody` annotation to send the request body as the function's input. Additionally, the function consumes both JSON and XML media types and produces a JSON and XML response.","name":"UserController","location":{"start":40,"insert":34,"offset":" ","indent":0,"comment":{"start":33,"end":39}},"item_type":"class","length":90,"docLength":6},{"id":"63785e7c-8a4f-8595-0548-0551cef8e385","ancestors":["f5c47fae-8381-c3ae-f84f-73358e268681"],"type":"function","description":"logs information to the log file and returns a string indicating that it is working.","params":[],"returns":{"type_name":"String","description":"\"Working\".","complex_type":false},"usage":{"language":"java","code":"@Autowired\nprivate MockMvc mockMvc;\n\n@Test\npublic void testStatus() throws Exception {\n    mockMvc.perform(get(\"/users/status\"))\n        .andExpect(status().isOk());\n}\n","description":"\nIn this example, we're using a `MockMvc` object to perform a GET request on the `/users/status` endpoint. We then expect that the response should be an OK (200) status code. This test is successful because the server returns a 200 status code when hitting this endpoint.\n\nNote: In order for this test to work, we need to have the `MockMvc` object autowired in our test class. Additionally, make sure that you're using the same dependencies as the ones used in your production code."},"name":"status","location":{"start":65,"insert":54,"offset":" ","indent":2,"comment":{"start":53,"end":64}},"item_type":"method","length":7,"docLength":11},{"id":"52672930-9edd-6fb8-c146-ea6f5599bdd2","ancestors":["f5c47fae-8381-c3ae-f84f-73358e268681"],"type":"function","description":"maps a `CreateUserRequest` object to a `CreatedUserResponse` object, creates a new user using the `userService`, and returns the created user in the response body.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object that contains the user's information to be created in the system.\n\n* `@Valid`: Indicates that the input `request` must be validated before processing.\n* `@RequestBody`: Marks the input as a JSON or XML body in the request.\n* `CreateUserRequest`: The type of the input object, which contains attributes for creating a new user.\n* `requestUserDto`: The converted version of the input `request` to a `UserDto` object, which can be used by the method's logic.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message with a status code and a body. The status code indicates the outcome of the operation, while the body contains the actual response data.\n* `status`: This is the status code of the response, which is set to `HttpStatus.CREATED` in this case. This indicates that the user was successfully created.\n* `body`: This is the actual response data, which is a `CreateUserResponse` object. This class contains the details of the newly created user, including their ID, email, and other relevant information.","complex_type":true},"usage":{"language":"java","code":"@Test\nvoid sign_up() throws Exception {\n    // Arrange\n    final CreateUserRequest request = new CreateUserRequest(\"johndoe\", \"john.doe@example.com\", \"password123\");\n    \n    // Act\n    mockMvc.perform(post(\"/users\")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content(objectMapper.writeValueAsString(request)))\n            .andExpect(status().isCreated());\n}\n","description":"\nNote that the `mockMvc` and `objectMapper` variables are already configured in the `@BeforeEach` method. The `post()` method is used to create a new user using the `/users` endpoint, with the correct media type (`MediaType.APPLICATION_JSON`) and request body (the `CreateUserRequest` object serialized as JSON).\n\nThe `.andExpect(status().isCreated())` line of code specifies that the status code returned by the server should be 201 Created, which is the expected outcome for a successful user creation."},"name":"signUp","location":{"start":117,"insert":73,"offset":" ","indent":2,"comment":{"start":72,"end":116}},"item_type":"method","length":12,"docLength":44}]}}}