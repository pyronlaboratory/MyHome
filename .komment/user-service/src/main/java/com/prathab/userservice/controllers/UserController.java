{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"a controller class called `UserController` that handles user-related actions in a spring web application. The class has a constructor that takes an instance of `UserService`, an instance of `UserApiMapper`, and an instance of `Environment` as parameters. The controller then uses these objects to handle requests related to creating, reading, updating, and deleting users. Specifically, the code defines methods for handling sign-up requests, which involve mapping the request body to a `CreateUserRequest` object, validating the request, creating a new user instance using the service, mapping the created user instance to a `CreateUserResponse` object, and returning the response entity with the created user details.","items":[{"id":"e4acddd1-94f8-6894-e148-5c1715c8babb","ancestors":[],"type":"function","description":"TODO","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0},"item_type":"class","length":35},{"id":"4a130199-2e1f-7a97-3340-55679cc1e1af","ancestors":["e4acddd1-94f8-6894-e148-5c1715c8babb"],"type":"function","description":"logs information to the log and returns a constant message \"Working\".","params":[],"returns":{"type_name":"string","description":"a brief message indicating that the function is working properly.\n\nThe output is a string value of \"Working\".\nThe function uses two environment properties, `local.server.port` and `token.secret`, to generate the output.\nThe log statement `trace(\"Running on port{} with jwt_secret{}\", environment.getProperty(\"local.server.port\"), environment.getProperty(\"token.secret\"));` is used to provide additional information about the function's execution.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\npublic String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\", environment.getProperty(\"local.server.port\"), environment.getProperty(\"token.secret\"));\n    return \"Working\";\n}\n","description":""},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"74536a80-39df-7eab-f64e-54a9fd3599ff","ancestors":["e4acddd1-94f8-6894-e148-5c1715c8babb"],"type":"function","description":"maps a `CreateUserRequest` to a `UserDto`, creates a new user in the system, and maps the created user back to a `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"user creation request provided by the client, which is used to create a new user entity in the system.\n\n* `@Valid`: Indicates that the request body must be validated using Java Bean validation.\n* `@RequestBody`: Annotation indicating that the request body is serialized and sent as a JSON or XML payload in the HTTP request.\n* `CreateUserRequest`: The class that represents the request body, which contains fields for user details such as name, email, and password.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. The `status` attribute specifies the HTTP status code of the response, and the `body` attribute contains the actual response data.\n* `HttpStatus`: This is an enumeration that represents the HTTP status code of the response. In this case, it is set to `CREATED`, which indicates that the request was successful and the requested resource was created.\n* `CreateUserResponse`: This is a class that represents the response to the sign-up request. It contains various attributes, including `id`, `username`, `password`, and `email`, which were provided in the `CreateUserRequest` object.\n* `userDto`: This is an instance of the `UserDto` class, which represents a user entity with its attributes. It was created by the `userService` using the `CreateUserRequest` object.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testSignUp() {\n    // Arrange\n    UserController controller = new UserController();\n    CreateUserRequest request = new CreateUserRequest(\"John\", \"Doe\", \"johndoe@example.com\", \"password\");\n    \n    // Act\n    ResponseEntity<CreateUserResponse> response = controller.signUp(request);\n    \n    // Assert\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n}\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":12}]}}}