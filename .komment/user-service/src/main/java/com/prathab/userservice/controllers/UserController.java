{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A REST controller class called `UserController` that handles user-related actions. The class has a constructor that takes an instance of `UserService`, a `UserApiMapper`, and an `Environment` object as parameters. The controller includes methods for handling sign-up requests and retrieving the status of the server. The `signUp()` method accepts a `CreateUserRequest` object as a request body and creates a new user in the system, returning the created user's response as a ResponseEntity.","items":[{"id":"46962411-16ff-94ae-4548-380947f8d2cc","ancestors":[],"type":"function","description":"is a RESTful web service that facilitates user actions. It has three main methods: `status()`, `signUp()`, and `@GetMapping(\"/users/status\")` returns a string indicating the server's status, while `@PostMapping()` handles sign-up requests by creating a new user in the system and returning the created user's response.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":35},{"id":"996dcce4-c1ad-6b8a-094b-28410b37cfb7","ancestors":["46962411-16ff-94ae-4548-380947f8d2cc"],"type":"function","description":"runs a trace log statement and returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"a string containing the message \"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":"\nIn this example, the method \"status\" is mapped to \"/users/status\" using the @GetMapping annotation. The method simply returns a string \"Working\", which indicates that the server is working correctly and is running on the specified port."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"9a229795-5334-f9ac-7c4a-e5ee0b893374","ancestors":["46962411-16ff-94ae-4548-380947f8d2cc"],"type":"function","description":"handles user sign-up requests by creating a new user in the system and returning a response indicating successful creation.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object sent by the client as part of the sign-up process, which contains essential information about the user to be created.\n\n* `@Valid`: This annotation indicates that the input request body must be valid according to the specified validation rules.\n* `@RequestBody`: This annotation specifies that the input request is a JSON or XML body.\n* `CreateUserRequest`: This is the class that defines the structure of the input request, which contains fields for user details such as name, email, and password.\n* `userApiMapper`: This is an instance of a class that maps the request DTO to a response DTO, which is used to convert the internal representation of the user data into a format that can be returned in the response.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `CreateUserResponse` object containing the created user details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response with a status code and a body.\n* `status`: This is an integer that represents the HTTP status code of the response, which in this case is `HttpStatus.CREATED`.\n* `body`: This is an object that contains the data returned by the function. In this case, it is a `CreateUserResponse` object.\n\nThe `CreateUserResponse` object has several properties, including:\n\n* `id`: This is an integer that represents the ID of the created user.\n* `username`: This is a string that represents the username of the created user.\n* `email`: This is a string that represents the email address of the created user.\n* `name`: This is a string that represents the full name of the created user.\n* `createdAt`: This is a date-time object that represents the time when the user was created.\n* `updatedAt`: This is a date-time object that represents the time when the user was last updated.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testSignUp() throws Exception {\n    // Setup\n    var userService = Mockito.mock(UserService.class);\n    var userApiMapper = Mockito.mock(UserApiMapper.class);\n    var environment = Mockito.mock(Environment.class);\n    var controller = new UserController(userService, userApiMapper, environment);\n\n    // Input\n    var request = CreateUserRequest()\n            .setEmail(\"test@example.com\")\n            .setPassword(\"password\");\n\n    // Expected output\n    var expectedResponse = CreateUserResponse().setMessage(\"Created User\");\n\n    // Mock behavior for userService.createUser()\n    when(userService.createUser(Mockito.any())).thenReturn(createdUserDto);\n\n    // Mock behavior for userApiMapper.userDtoToCreateUserResponse()\n    when(userApiMapper.userDtoToCreateUserResponse(createdUserDto)).thenReturn(expectedResponse);\n\n    // Call the signUp method\n    var response = controller.signUp(request);\n\n    // Verify the output\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n}\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}