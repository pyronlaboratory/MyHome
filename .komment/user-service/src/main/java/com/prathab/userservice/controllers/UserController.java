{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A RestController class named UserController that facilitates user actions through various endpoints. The controller uses Spring Boot's dependency injection to inject UserService and UserApiMapper instances. The endpoints include a status endpoint that returns a static message, and two create user endpoints that handle the creation of new users through JSON or XML input. The create user endpoints use validation and produce HTTP 201 Created response upon successful creation.","items":[{"id":"7a2bd5d0-bfe2-6081-284b-501b6456b231","ancestors":[],"type":"function","description":"is a Spring Boot controller that facilitates user actions through various methods. It receives sign-up requests and creates new users in the system using the UserService and UserApiMapper classes. The controller also provides a status message upon request.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":35},{"id":"717bd819-5d0a-468f-c842-25b83e34a4f9","ancestors":["7a2bd5d0-bfe2-6081-284b-501b6456b231"],"type":"function","description":"logs information using the `log.trace()` method and returns a string indicating that it is working.","params":[],"returns":{"type_name":"String","description":"\"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\npublic String status() {\n    return \"Working\";\n}\n","description":"\nIn this example, the `status()` method is annotated with `@GetMapping` and has no parameters. When a GET request is made to `/users/status`, the method will be called and it will simply return the string \"Working\". This means that if you make a GET request to /users/status in your web browser or using a tool like Postman, you should receive the response \"Working\" in the body of the HTTP response."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"67b65118-0ead-62ba-b041-ac1638f57447","ancestors":["7a2bd5d0-bfe2-6081-284b-501b6456b231"],"type":"function","description":"takes a `CreateUserRequest` object from the request body, converts it to a `UserDto`, creates a new user in the database using the `createUser` method, and returns the created user as a `CreateUserResponse` object in the response.","params":[{"name":"request","type_name":"CreateUserRequest","description":"user data passed from the client to the server through the `@Valid` annotation, which ensures that the request body is validated according to the provided schema.\n\n* `@Valid`: The `@Valid` annotation indicates that the request body must contain a valid instance of `CreateUserRequest`.\n* `@RequestBody`: The `@RequestBody` annotation specifies that the request body contains the request object.\n* `CreateUserRequest`: This is the class representing the request body, which contains attributes for user information.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` object with a status of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is the overall response entity that contains the status code and body.\n* `status`: This is the HTTP status code of the response, which is set to `HttpStatus.CREATED` in this case.\n* `body`: This is the content of the response body, which is a `CreateUserResponse` object.\n* `CreateUserResponse`: This class represents the response returned by the `signUp` function, containing information about the newly created user. Its properties are:\n\t+ `id`: The ID of the newly created user.\n\t+ `username`: The username chosen by the user during sign-up.\n\t+ `email`: The email address of the user.\n\t+ `password`: The password chosen by the user during sign-up.","complex_type":true},"usage":{"language":"java","code":"CreateUserRequest request = new CreateUserRequest();\nrequest.setName(\"username\");\nrequest.setPassword(\"password\");\nrequest.setEmail(\"email@example.com\");\n\nResponseEntity<CreateUserResponse> response = userController.signUp(request);\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}