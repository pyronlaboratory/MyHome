{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A RESTful API controller for user-related operations, including creating new users and returning created user responses. The class uses Spring packages such as `@RestController`, `@Slf4j`, `Environment`, `MediaType`, and `ResponseEntity` to validate the request body against a schema, create a new user in the database using the `userService` class, and map the newly created `UserDTO` object back to a `CreateUserResponse` object for return in the function's response.","diagram":"digraph G {\n    label=\"com.prathab.userservice.controllers.UserController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateUserResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            CreateUserRequest\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        UserController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    UserController -> CreateUserResponse \n    CreateUserRequest -> UserController \n}\n","items":[{"id":"34952b8a-2cc9-41a9-8646-2045b90839d5","ancestors":[],"type":"function","description":"is responsible for handling user-related requests, including creating new users and returning their created status to the client. The class uses dependency injection to inject the `UserService` and `UserApiMapper` classes, which are used to create a new user in the database and map the request data to a format suitable for the response, respectively. The `signUp()` method receives a `CreateUserRequest` object from the client, creates a new user entity using the provided data, and returns a `CreateUserResponse` object representing the created user resource to the client.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  /**\n   * logs information to the log and returns a string indicating that it is working.\n   * \n   * @returns a brief message indicating that it is working properly, with the port\n   * number and JWT secret included for debugging purposes.\n   * \n   * \t- \"Working\": This is the literal message returned by the function.\n   * \t- \"local.server.port\": This property is used to trace the current port on which\n   * the server is running.\n   * \t- \"token.secret\": This property is used to trace the value of the JWT secret.\n   */\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  /**\n   * receives a `CreateUserRequest` request body from the client, creates a new user\n   * entity using the provided data, and returns a `CreateUserResponse` object representing\n   * the created user resource.\n   * \n   * @param request CreateUserRequest object passed from the client to the server,\n   * containing the user details for creation.\n   * \n   * \t- `@Valid`: Indicates that the `CreateUserRequest` object should be validated\n   * against the schema defined in the Java class `CreateUserRequest`.\n   * \t- `@RequestBody`: Indicates that the `CreateUserRequest` object should be sent\n   * as the body of the HTTP request, rather than as a query parameter or form data.\n   * \t- `produces`: Defines the media types that the function can produce in its response.\n   * In this case, it produces both JSON and XML media types.\n   * \t- `consumes`: Defines the media types that the function consumes in its input.\n   * In this case, it consumes both JSON and XML media types.\n   * \n   * The `var requestUserDto = userApiMapper.createUserRequestToUserDto(request)` line\n   * of code deserializes the `CreateUserRequest` object into a `UserDTO` object using\n   * the `userApiMapper` class. This allows for the mapping of the request data to a\n   * format that can be used by the `userService` class to create a new user in the database.\n   * \n   * The `var createdUserDto = userService.createUser(requestUserDto)` line of code\n   * creates a new user in the database using the `UserDTO` object as input.\n   * \n   * Finally, the `var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto)`\n   * line of code maps the newly created `UserDTO` object back to a `CreateUserResponse`\n   * object, which is then returned in the function's response.\n   * \n   * @returns a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body\n   * containing the created user response.\n   * \n   * \t- `ResponseEntity`: This is a wrapper class that holds the status code and body\n   * of the response. In this case, the status code is `HttpStatus.CREATED`, indicating\n   * that the request was successful and the user account was created.\n   * \t- `body`: This property contains the actual response entity, which in this case\n   * is a `CreateUserResponse` object.\n   * \t- `CreateUserResponse`: This class represents the response to the sign-up request.\n   * It has several properties, including `id`, `username`, `email`, `password`, and\n   * `role`. The `id` property is a unique identifier for the user account, while the\n   * `username`, `email`, and `password` properties represent the user's login credentials.\n   * The `role` property indicates the user's role within the application (e.g., \"user\",\n   * \"admin\").\n   */\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":40,"insert":34,"offset":" ","indent":0,"comment":{"start":33,"end":39}},"item_type":"class","length":90,"docLength":6},{"id":"b670d5d1-30e0-5986-9040-c7bc34d43164","ancestors":["34952b8a-2cc9-41a9-8646-2045b90839d5"],"type":"function","description":"logs a message with the server's port number and the JWT secret, then returns the string \"Working\".","params":[],"returns":{"type_name":"string","description":"the string \"Working\".\n\n* \"Working\" is the literal string that is returned as the output of the function. This indicates that the function is successfully executing and returning a result.\n* The use of `log.trace()` within the function allows for logging of various information related to the function's execution, including the value of two environment properties (`local.server.port` and `token.secret`). This provides additional context for understanding the function's behavior and can be useful for debugging or monitoring purposes.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    // Start the application context with the server running at port 8080\n    ConfigurableApplicationContext context = SpringApplication.run(Main.class, \"--server.port=8080\");\n\n    // Get a reference to the user controller bean\n    UserController userController = (UserController) context.getBean(\"userController\");\n\n    // Call the status method on the user controller\n    String message = userController.status();\n\n    System.out.println(message); // Output: Working\n\n    // Close the application context when done\n    context.close();\n  }\n}\n","description":"\nThe code above starts a Spring Boot application with port 8080 and gets a reference to the user controller bean using its name `userController` from the Spring container, then calls the status method on the `UserController` class, finally, it outputs the response message."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":65,"insert":54,"offset":" ","indent":2,"comment":{"start":53,"end":64}},"item_type":"method","length":7,"docLength":11},{"id":"4ad905d0-4f73-1ea8-2149-d0187fa8efd8","ancestors":["34952b8a-2cc9-41a9-8646-2045b90839d5"],"type":"function","description":"receives a `CreateUserRequest` object from the client, converts it into a `UserDto`, creates a new user in the system using the `createUser` method, and returns the created user as a `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object passed from the client to the server for creating a new user account.\n\n* `@Valid`: Indicates that the input request body is validated using Java Validation API.\n* `@RequestBody`: Marks the input request body as a JSON or XML document.\n* `CreateUserRequest`: The class that defines the request body, which contains the fields required to create a new user.\n* `userApiMapper`: A utility class that maps the request body to a `UserDto` object for further processing.\n* `userService`: The service responsible for creating a new user in the system.\n* `createdUserDto`: The `UserDto` object created by the `userService`.\n* `createdUserResponse`: The response object returned by the function, which contains the newly created user details.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` object with a status of `HTTP_CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It contains information about the status code and body of the response. In this case, the status code is `HttpStatus.CREATED`, indicating that the request was successful and the resource was created.\n* `body`: This is a reference to the body of the response, which in this case is an instance of the `CreateUserResponse` class. This class contains information about the created user, including their ID, name, email, and other properties.\n\nThe various attributes of the `CreateUserResponse` class are as follows:\n\n* `id`: The ID of the created user.\n* `name`: The name of the created user.\n* `email`: The email address of the created user.\n* `userDto`: A reference to the original `CreateUserRequest` object, which contains additional information about the user being created.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate UserApiController userApiController;\n\n// ...\n\nuserApiController.signUp(new CreateUserRequest(\n    \"username\", \n    \"email\", \n    \"password\", \n    UserRole.USER, \n    Locale.getDefault(), \n    ZoneId.systemDefault()\n));\n","description":"\nThis would create a new user account with the provided username, email, password, and role. The locale and time zone are set to the default values for the system on which the code is running. Note that the `signUp` method returns a `ResponseEntity<CreateUserResponse>` object, but in this example we do not use its return value because it is not necessary to do so."},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":117,"insert":73,"offset":" ","indent":2,"comment":{"start":72,"end":116}},"item_type":"method","length":12,"docLength":44}]}}}