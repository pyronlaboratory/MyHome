{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that handles user-related requests at a RESTful web service. The controller includes methods for retrieving a message indicating the server is running and creating a new user using a request body. The latter method maps a `CreateUserRequest` to a `UserDto`, creates a new user using the `createUser` method, and returns the created user as a `CreateUserResponse`.","diagram":"digraph G {\n    label=\"com.prathab.userservice.controllers.UserController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateUserResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            CreateUserRequest\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        UserController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    UserController -> CreateUserResponse \n    CreateUserRequest -> UserController \n}\n","items":[{"id":"1b717065-75cd-c6b7-954a-0f394480f172","ancestors":[],"type":"function","description":"is a RESTful API controller that handles user-related operations, including creating new users and returning created user responses. The class uses the `UserService` and `UserApiMapper` to map requests to and from the user domain model, and the `Environment` to handle configuration properties.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  /**\n   * logs a message to the trace log and returns the string \"Working\".\n   * \n   * @returns \"Working\".\n   */\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  /**\n   * maps a `CreateUserRequest` to a `UserDto`, creates a new user using the `createUser`\n   * method, and returns the created user as a `CreateUserResponse`.\n   * \n   * @param request CreateUserRequest object that contains the user's information to\n   * be created, which is then converted into a UserDTO by the userApiMapper and used\n   * to create a new user in the system.\n   * \n   * \t- `@Valid`: Indicates that the request body is annotated with `@Valid`, which\n   * means it has been validated by the `UserValidator` class.\n   * \t- `@RequestBody`: Marks the request body as an input to the function.\n   * \t- `CreateUserRequest`: Represents the request body, which contains the user details\n   * to be created.\n   * \n   * The function performs various operations on the `request` object, including:\n   * \n   * \t- Logging a trace message using the `log.trace()` method.\n   * \t- Converting the `request` object into a `UserDto` object using the\n   * `userApiMapper.createUserRequestToUserDto()` method.\n   * \t- Creating a new user using the `userService.createUser()` method, passing in the\n   * `UserDto` object as an argument.\n   * \t- Converting the newly created `UserDto` object into a `CreateUserResponse` object\n   * using the `userApiMapper.userDtoToCreateUserResponse()` method.\n   * \t- Returning a `ResponseEntity` object with a status code of `HttpStatus.CREATED`,\n   * along with the `CreateUserResponse` object as its body.\n   * \n   * @returns a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body\n   * containing the created user response.\n   * \n   * \t- `ResponseEntity`: This is the generic type of the response entity, which indicates\n   * that it can be either in JSON or XML format.\n   * \t- `status`: This property represents the HTTP status code of the response, which\n   * is set to `HttpStatus.CREATED` in this case.\n   * \t- `body`: This property contains the actual response data, which is a\n   * `CreateUserResponse` object in this case.\n   */\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":34,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":76,"docLength":3},{"id":"afe70d93-e06e-0da0-d648-8fd660815d34","ancestors":["1b717065-75cd-c6b7-954a-0f394480f172"],"type":"function","description":"logs information to the log and returns a string indicating that it is working.","params":[],"returns":{"type_name":"string","description":"a brief message indicating that it is working properly, with the port number and JWT secret included for debugging purposes.\n\n* \"Working\": This is the literal message returned by the function.\n* \"local.server.port\": This property is used to trace the current port on which the server is running.\n* \"token.secret\": This property is used to trace the value of the JWT secret.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) throws Exception {\n    //create a new user controller object\n    UserController userController = new UserController();\n    //call the status method\n    String result = userController.status();\n    //print the result\n    System.out.println(\"Status: \" + result);\n}\n","description":""},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":56,"insert":51,"offset":" ","indent":2,"comment":{"start":50,"end":55}},"item_type":"method","length":7,"docLength":5},{"id":"d1228b0b-350c-33a5-e24c-bd2e43f72362","ancestors":["1b717065-75cd-c6b7-954a-0f394480f172"],"type":"function","description":"receives a `CreateUserRequest` request body from the client, creates a new user entity using the provided data, and returns a `CreateUserResponse` object representing the created user resource.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object passed from the client to the server, containing the user details for creation.\n\n* `@Valid`: Indicates that the `CreateUserRequest` object should be validated against the schema defined in the Java class `CreateUserRequest`.\n* `@RequestBody`: Indicates that the `CreateUserRequest` object should be sent as the body of the HTTP request, rather than as a query parameter or form data.\n* `produces`: Defines the media types that the function can produce in its response. In this case, it produces both JSON and XML media types.\n* `consumes`: Defines the media types that the function consumes in its input. In this case, it consumes both JSON and XML media types.\n\nThe `var requestUserDto = userApiMapper.createUserRequestToUserDto(request)` line of code deserializes the `CreateUserRequest` object into a `UserDTO` object using the `userApiMapper` class. This allows for the mapping of the request data to a format that can be used by the `userService` class to create a new user in the database.\n\nThe `var createdUserDto = userService.createUser(requestUserDto)` line of code creates a new user in the database using the `UserDTO` object as input.\n\nFinally, the `var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto)` line of code maps the newly created `UserDTO` object back to a `CreateUserResponse` object, which is then returned in the function's response.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is a wrapper class that holds the status code and body of the response. In this case, the status code is `HttpStatus.CREATED`, indicating that the request was successful and the user account was created.\n* `body`: This property contains the actual response entity, which in this case is a `CreateUserResponse` object.\n* `CreateUserResponse`: This class represents the response to the sign-up request. It has several properties, including `id`, `username`, `email`, `password`, and `role`. The `id` property is a unique identifier for the user account, while the `username`, `email`, and `password` properties represent the user's login credentials. The `role` property indicates the user's role within the application (e.g., \"user\", \"admin\").","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void signUp() {\n    // GIVEN\n    var request = new CreateUserRequest();\n    request.setUsername(\"prathab\");\n    request.setPassword(\"1234567890\");\n    request.setEmailAddress(\"prathab@email.com\");\n    request.setPhoneNumber(\"123-456-7890\");\n    // WHEN\n    var response = signUp(request);\n    // THEN\n    assertEquals(response.getStatusCode(), HttpStatus.CREATED);\n}\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":100,"insert":64,"offset":" ","indent":2,"comment":{"start":63,"end":99}},"item_type":"method","length":12,"docLength":36}]}}}