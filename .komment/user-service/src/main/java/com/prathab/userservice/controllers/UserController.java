{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that serves as a rest controller for handling user actions. It includes two methods: `status()` and `signUp()`, both of which handle different types of requests. The `status()` method returns a string indicating the server's status, while the `signUp()` method creates a new user in the system and responds with the created user details. Both methods use Spring packages such as `@GetMapping`, `@PostMapping`, `@RequestBody`, `@Valid`, and `@ResponseEntity`.","items":[{"id":"86776bc1-3333-e4b0-f847-868613aa701d","ancestors":[],"type":"function","description":"is a RESTful controller for managing user actions. It has several methods, including a get method for retrieving the current status of the server and a post method for creating new users. The post method accepts a request body in the form of a CreateUserRequest object and maps it to a UserDto object before passing it to the UserService for creation. The resulting CreateUserResponse is then returned to the client.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":35},{"id":"f8cfd1ba-2f4d-c198-2841-2f1a92753d2e","ancestors":["86776bc1-3333-e4b0-f847-868613aa701d"],"type":"function","description":"logs information using log4j2, and returns a string indicating that it is working.","params":[],"returns":{"type_name":"string","description":"\"Working\".\n\n* \"Working\": This is the value returned by the function, indicating that it is working properly.\n* `log.trace(\"Running on port{} with jwt_secret{}\", environment.getProperty(\"local.server.port\"), environment.getProperty(\"token.secret\"))`: This line of code logs a message at the trace level, providing information about the server's port number and JWT secret.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":"\nThis is a GET method that will return a string indicating if the API is running and what port it is running on, as well as the secret used for JWT generation."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"d5225067-d62a-489d-c34e-69b2964794ca","ancestors":["86776bc1-3333-e4b0-f847-868613aa701d"],"type":"function","description":"receives a `CreateUserRequest` object from the client, creates a new user entity using the provided data, and returns a `CreateUserResponse` object representing the created user.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object passed from the client-side code, containing the user data to be created.\n\nThe `@Valid` stereotype on the `CreateUserRequest` indicates that the class must be validated against a validation configuration, such as Java Bean validation.\n\nThe `@RequestBody` annotation indicates that the `CreateUserRequest` object should be deserialized from the request body, rather than from a file or query parameter.\n\nThe `produces` and `consumes` annotations specify the media types that the function can produce or consume, respectively. In this case, the function produces JSON and XML, while it consumes only JSON and XML.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that contains both a status code and a body. In this case, the status code is set to `HttpStatus.CREATED`, indicating that the request was successful and the user account was created.\n* `body`: This property contains the actual response body, which in this case is an instance of the `CreateUserResponse` class. This class represents the response to the sign-up request, including the user ID, username, and other relevant information.","complex_type":true},"usage":{"language":"java","code":"import com.prathab.userservice.controllers.models.request.CreateUserRequest;\nimport org.springframework.http.ResponseEntity;\n\npublic class UserControllerTest {\n    @Test\n    void createUser_validInput_createsUser() {\n        // Arrange\n        var request = new CreateUserRequest(\"username\", \"password\");\n        var userService = Mockito.mock(UserService.class);\n        var userApiMapper = Mockito.mock(UserApiMapper.class);\n        var environment = Mockito.mock(Environment.class);\n        var controller = new UserController(userService, userApiMapper, environment);\n\n        // Act\n        ResponseEntity<CreateUserResponse> response = controller.signUp(request);\n\n        // Assert\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    }\n}\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}