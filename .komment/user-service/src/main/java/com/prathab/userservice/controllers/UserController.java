{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that handles user-related actions in a Spring Boot application. The controller has a single method, `signUp()`, which takes a `CreateUserRequest` object as input and creates a new user in the system using the `createUser()` method of the `UserService` class. The `signUp()` method returns a `ResponseEntity` object with a status of `HttpStatus.CREATED` and a body containing the created user response.","diagram":"digraph G {\n    label=\"com.prathab.userservice.controllers.UserController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"request\"\n            color=\"#33363A\"\n            CreateUserRequest\n        }\n        subgraph cluster_2 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateUserResponse\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        UserController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    CreateUserRequest -> UserController \n    UserController -> CreateUserResponse \n}\n","items":[{"id":"e57ffa39-6f94-bf91-af4f-ae6427f3ee35","ancestors":[],"type":"function","description":"is a RESTful web service that handles user-related operations, such as signing up new users and retrieving user information. The class uses Spring WebFlux and Spring Data JPA to handle HTTP requests and database interactions, respectively. The signUp method maps a `CreateUserRequest` object to a `UserDto` object, creates a new user using the `createUser()` method, and returns a `CreateUserResponse` object in a HTTP `CREATED` status.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  /**\n   * traces the port and token secret used to run it and returns the message \"Working\".\n   * \n   * @returns the string \"Working\".\n   */\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  /**\n   * maps a `CreateUserRequest` object to a `UserDto` object, creates a new user using\n   * the `createUser()` method, and returns a `CreateUserResponse` object in a HTTP\n   * `CREATED` status.\n   * \n   * @param request CreateUserRequest object that contains the user's information to\n   * be created, which is converted into a UserDto object by the userApiMapper and then\n   * used to create a new user in the system.\n   * \n   * \t- `@Valid`: Indicates that the input object should be validated against the schema\n   * defined in the Java classes or annotations.\n   * \t- `@RequestBody`: Represents the request body as a single entity, which is the\n   * case here since the function accepts a `CreateUserRequest` object as its only parameter.\n   * \t- `MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE`: Defines\n   * the media types that the function can handle for input and output. In this case,\n   * it can handle both JSON and XML formats for input and output.\n   * \n   * @returns a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body\n   * containing the created user response.\n   * \n   * \t- `ResponseEntity`: This is an instance of the `ResponseEntity` class, which\n   * represents a response to a HTTP request. It has several attributes, including the\n   * status code, body, and headers. In this case, the status code is `HttpStatus.CREATED`,\n   * indicating that the request was successful and the resource was created.\n   * \t- `body`: This attribute contains the response body, which in this case is an\n   * instance of the `CreateUserResponse` class. This class represents the result of\n   * the sign-up operation, including the user ID and other relevant information.\n   * \t- `HttpStatus`: This attribute represents the HTTP status code associated with\n   * the response. In this case, it is `HttpStatus.CREATED`, indicating that the request\n   * was successful and the resource was created.\n   */\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":34,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":71,"docLength":3},{"id":"9a866da8-044d-e498-714b-e21cd158df07","ancestors":["e57ffa39-6f94-bf91-af4f-ae6427f3ee35"],"type":"function","description":"logs a message to the trace log and returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"\"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":"\nHere, the method is called status and it returns a string response of “Working”. The method’s body has only one line of code which is log.trace() which prints a message on the console about the application running on a specific port with a secret key."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":56,"insert":51,"offset":" ","indent":2,"comment":{"start":50,"end":55}},"item_type":"method","length":7,"docLength":5},{"id":"533fb7b0-480e-16b7-904b-c67f0177b52c","ancestors":["e57ffa39-6f94-bf91-af4f-ae6427f3ee35"],"type":"function","description":"maps a `CreateUserRequest` to a `UserDto` and creates a new user in the system using the `createUser` method, returning the created user as a `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"user registration request provided by the client through the HTTP POST method, containing the necessary data to create a new user account in the system.\n\n* `@Valid`: This annotation indicates that the `request` object has been validated by an external framework, such as Spring Security.\n* `@RequestBody`: This annotation specifies that the `request` object is contained within the body of the HTTP request message.\n* `CreateUserRequest`: This is the class that represents the request data, which contains fields for user details such as name, email, and password.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a `status` field that indicates the status code of the response (in this case, `HttpStatus.CREATED`).\n* `body`: This is a reference to the actual data returned in the response. In this case, it is an instance of the `CreateUserResponse` class, which represents the result of creating a new user.\n* `createdUserResponse`: This is the actual data returned in the response. It contains information about the newly created user, such as their ID and other relevant details.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class UserController {\n  @Autowired\n  private UserService userService;\n  \n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}\n","description":"\nIn this example, the signUp method is called and passed a CreateUserRequest as an argument. The request is then converted into a UserDto using userApiMapper's createUserRequestToUserDto method. The resulting UserDto is then passed to the userService's createUser method which returns a UserDto. This resultant UserDto is then converted back into a CreateUserResponse and returned as part of the ResponseEntity."},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":95,"insert":64,"offset":" ","indent":2,"comment":{"start":63,"end":94}},"item_type":"method","length":12,"docLength":31}]}}}