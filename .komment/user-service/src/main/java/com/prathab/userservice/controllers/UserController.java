{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that acts as an interface between the user and the service. It has multiple methods: `status()`, `signUp()`, and `@PostMapping()` with multiple parameters. The `status()` method simply returns a message indicating the service is working, while the `signUp()` method takes a `CreateUserRequest` object as a request body and creates a new user in the service using the provided details. It then returns the created user details in the form of a `CreateUserResponse`.","items":[{"id":"f3d86b69-5c1a-0fb2-a549-aca93449d281","ancestors":[],"type":"function","description":"TODO","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0},"item_type":"class","length":35},{"id":"70c01356-81b3-d3a9-314c-05d5b04ced9f","ancestors":["f3d86b69-5c1a-0fb2-a549-aca93449d281"],"type":"function","description":"logs information to the log and returns a string indicating that it is working.","params":[],"returns":{"type_name":"String","description":"\"Working\".\n\n* \"Working\": This is the literal message returned by the function.\n* `log.trace(\"Running on port{} with jwt_secret{}\", environment.getProperty(\"local.server.port\"), environment.getProperty(\"token.secret\"));`: This line logs a trace message indicating the port number and JWT secret used by the application. The `environment` object provides properties for the local server port and JWT secret.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":""},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"6e6006a1-ceff-7da0-564d-e9d8c229cb27","ancestors":["f3d86b69-5c1a-0fb2-a549-aca93449d281"],"type":"function","description":"maps a `CreateUserRequest` to a `UserDTO`, creates a new user using the `UserService`, and returns a `CreateUserResponse` in the form of a `ResponseEntity`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object that contains the user's details to be created.\n\n* `@Valid`: The request body is validated using the `Validation` interface from Spring Security.\n* `@RequestBody`: The request body is used to pass the request content directly to the method.\n* `CreateUserRequest`: This class represents the request body, which contains user details for creation.\n* `userApiMapper`: A mapping service that converts between the request and response bodies.\n* `userService`: An implementation of a service layer that creates a new user in the system.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status of `HTTP_CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is a class that represents a response entity in Spring WebFlux. It has a status code and a body, which contains the actual data being returned.\n* `HttpStatus`: This is an enum representing the HTTP status code of the response. In this case, it is set to `CREATED`, indicating that the request was successful and the user account was created.\n* `CreateUserResponse`: This is a class that represents the data being returned in the response body. It contains various attributes, including the user ID, username, email, and whether the sign-up was successful.\n* `createdUserDto`: This is an instance of the `UserDto` class, which contains the same attributes as the `CreateUserResponse` class. It represents the user object that was created in the service layer.","complex_type":true},"usage":{"language":"java","code":"@PostMapping(path = \"/users\", produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE }, consumes = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })\npublic ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n}\n","description":"\nIn this example, the method is called with a request body that contains information about the user to be created, and it returns a response entity that contains the created user's data in JSON or XML format, with a status of 201 CREATED."},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":12}]}}}