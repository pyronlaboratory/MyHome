{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that serves as a rest controller for user actions. It includes a `@GetMapping` method for retrieving a status message and a `@PostMapping` method for creating new users through a RESTful API. The `signUp()` method takes in a `CreateUserRequest` object as a request body and returns a `ResponseEntity` with the created user's response.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_1 {\n            label=\"request\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            CreateUserRequest\n        }\n        subgraph cluster_2 {\n            label=\"response\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            CreateUserResponse\n        }\n    }\n    edge [color=\"#26de81\"]\n    CreateUserRequest -> UserController \n    UserController -> CreateUserResponse \n}\n","items":[{"id":"f9ff4fcb-3260-cd87-1c47-92396058c165","ancestors":["86d05a94-81dc-fc80-1d44-6b67e4306fee"],"type":"function","description":"logs a message to the trace log and returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"\"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":"\nThe example is short and to the point, as it only shows the method signature and a few lines of code. It does not explain how the method works or provide any information about its inputs or outputs. The method returns a string literal that says \"Working\", which suggests that the method is used to check the status of the application."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7,"docLength":null},{"id":"6368d0aa-ec0d-799c-7745-67f9b78e518b","ancestors":["86d05a94-81dc-fc80-1d44-6b67e4306fee"],"type":"function","description":"maps a `CreateUserRequest` to a `UserDto`, creates a new user using the `createUser` method, and returns the created user as a `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object that contains the user's information to be created, which is then converted into a UserDTO by the userApiMapper and used to create a new user in the system.\n\n* `@Valid`: Indicates that the request body is annotated with `@Valid`, which means it has been validated by the `UserValidator` class.\n* `@RequestBody`: Marks the request body as an input to the function.\n* `CreateUserRequest`: Represents the request body, which contains the user details to be created.\n\nThe function performs various operations on the `request` object, including:\n\n* Logging a trace message using the `log.trace()` method.\n* Converting the `request` object into a `UserDto` object using the `userApiMapper.createUserRequestToUserDto()` method.\n* Creating a new user using the `userService.createUser()` method, passing in the `UserDto` object as an argument.\n* Converting the newly created `UserDto` object into a `CreateUserResponse` object using the `userApiMapper.userDtoToCreateUserResponse()` method.\n* Returning a `ResponseEntity` object with a status code of `HttpStatus.CREATED`, along with the `CreateUserResponse` object as its body.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is the generic type of the response entity, which indicates that it can be either in JSON or XML format.\n* `status`: This property represents the HTTP status code of the response, which is set to `HttpStatus.CREATED` in this case.\n* `body`: This property contains the actual response data, which is a `CreateUserResponse` object in this case.","complex_type":true},"usage":{"language":"java","code":"@Test\nvoid createUser() {\n  CreateUserRequest request = new CreateUserRequest(\"username\", \"password\");\n  ResponseEntity<CreateUserResponse> response = userController.signUp(request);\n  assertEquals(HttpStatus.CREATED, response.getStatusCode());\n  assertNotNull(response.getBody().getId());\n}\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12,"docLength":null}]}}}