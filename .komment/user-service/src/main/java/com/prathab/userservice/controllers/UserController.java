{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that serves as a gateway for user actions in a Spring Boot application. The controller handles sign-up requests and returns a response indicating the status of the request. It also includes environment-dependent logging statements.","items":[{"id":"49b767db-1df0-c1b2-c642-d1d635abe75d","ancestors":[],"type":"function","description":"TODO","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0},"item_type":"class","length":35},{"id":"0b0ea2be-a727-1fbe-de4a-5d266be92b46","ancestors":["49b767db-1df0-c1b2-c642-d1d635abe75d"],"type":"function","description":"logs an informational message to the trace log and returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"\"Working\".\n\n* The log statement trace() is called with two properties, \"port\" and \"jwt_secret\", which are obtained from environment variables.\n* The return statement returns a string value of \"Working\".","complex_type":true},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\npublic String status() {\n    log.trace(\"Running on port {} with jwt_secret{}\", environment.getProperty(\"local.server.port\"), environment.getProperty(\"token.secret\"));\n    return \"Working\";\n}\n","description":"\nIn this example, the `status()` method is annotated as a GET request mapping to `/users/status`. When this endpoint is called, it will log a trace message using the `log.trace()` method with two placeholders for the local server port and JWT secret properties. It then returns the string \"Working\". The return value of this method is expected to be a HTTP status code 200 (OK) with a response body containing the string \"Working\"."},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"c3f71a05-baec-76b6-8049-a7b533aa5581","ancestors":["49b767db-1df0-c1b2-c642-d1d635abe75d"],"type":"function","description":"maps a `CreateUserRequest` to a `CreateUserResponse` by using the `userApiMapper` to transform the request into a `UserDto`, creating a new user using the `userService`, and then mapping the resulting `UserDto` back to the `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object sent from the client, containing user details to be created in the system.\n\n* `@Valid`: Indicates that the `request` object is validated using bean validation.\n* `@RequestBody`: Represents the input request as a JSON or XML body in the HTTP request message.\n* `CreateUserRequest`: The request class that represents the request body, which contains the user details to be created.\n* `userApiMapper`: A mapping object used for converting the `CreateUserRequest` to a `UserDTO`.\n* `userService`: A service class that handles the creation of a new user in the application.\n* `createdUserDto`: The resulting `UserDTO` object created by the `userService` after creating the new user.\n* `createdUserResponse`: The response object that represents the created user, which is constructed using the `createdUserDto`.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a status of `HttpStatus.CREATED` and a body containing the created user response.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response with both status code and body.\n* `status`: The status code of the response, which in this case is `HttpStatus.CREATED`.\n* `body`: The body of the response, which contains the created user response.\n* `CreateUserResponse`: This is a class that represents the response containing information about the created user. It has properties such as `id`, `username`, `email`, and `password`.","complex_type":true},"usage":{"language":"java","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n","description":""},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":12}]}}}