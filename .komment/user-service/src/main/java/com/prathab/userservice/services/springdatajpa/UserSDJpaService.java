{"name":"UserSDJpaService.java","path":"user-service/src/main/java/com/prathab/userservice/services/springdatajpa/UserSDJpaService.java","content":{"structured":{"description":"An implementation of `UserService` using Spring Data JPA repository. It generates a unique user ID, encrypts the user password, and creates a new user entry in the repository. The code also maps the saved user object back to a `UserDto` object for return to the caller.","diagram":"digraph G {\n    label=\"com.prathab.userservice.services.springdatajpa.UserSDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                UserSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    UserSDJpaService -> UserDto \n    UserDto -> UserSDJpaService \n}\n","items":[{"id":"f55a670d-4a31-f39b-6d4e-fd0ef0e508f8","ancestors":[],"type":"function","description":"is a Java class that provides functionality for creating and managing users in a database using JPA (Java Persistence API). The class has several methods for creating, mapping, saving, and logging user data. It also provides encryption of user passwords using a password encoder.","name":"UserSDJpaService","code":"@Service\n@Slf4j\npublic class UserSDJpaService implements UserService {\n\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n  private final PasswordEncoder passwordEncoder;\n\n  public UserSDJpaService(UserRepository userRepository,\n      UserMapper userMapper,\n      PasswordEncoder passwordEncoder) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  /**\n   * generates a unique user ID, encrypts the user password, and creates a new user in\n   * a repository.\n   * \n   * @param request user data to be created, which is processed through three methods:\n   * `generateUniqueUserId`, `encryptUserPassword`, and `createUserInRepository`.\n   * \n   * 1/ `generateUniqueUserId`: generates an unique user ID for the created user.\n   * 2/ `encryptUserPassword`: encrypts the password of the created user using a specific\n   * encryption method.\n   * 3/ `createUserInRepository`: creates a new user entry in the repository, which\n   * stores user data.\n   * \n   * @returns a user DTO object containing the created user's details.\n   * \n   * 1/ `generateUniqueUserId(request)`: This method generates a unique user ID for the\n   * requesting user.\n   * 2/ `encryptUserPassword(request)`: This method encrypts the user password before\n   * storing it in the repository.\n   * 3/ `createUserInRepository(request)`: This method creates a new user entry in the\n   * repository with the generated unique ID and encrypted password.\n   */\n  @Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }\n\n  /**\n   * maps a `UserDto` object to a `User` object, saves the `User` object to the repository,\n   * and then maps the saved `User` object back to a `UserDto` object.\n   * \n   * @param request UserDto object containing information about a new user to be created\n   * in the repository.\n   * \n   * \t- `userMapper`: A mapper responsible for converting between the `UserDto` and\n   * `User` objects.\n   * \t- `userRepository`: An interface for storing and retrieving users from a repository.\n   * \t- `savedUser`: The saved user object after being persisted to the repository.\n   * \t- `log`: A logging mechanism used to log messages related to the function's execution.\n   * \n   * @returns a `UserDto` object representing the saved user in the repository.\n   * \n   * \t- `var user = userMapper.userDtoToUser(request)`: This line converts the `UserDto`\n   * object passed as a parameter into a corresponding `User` object using the `userMapper`\n   * service.\n   * \t- `var savedUser = userRepository.save(user)`: This line saves the converted\n   * `User` object to the repository, persisting it in the database.\n   * \t- `log.trace(\"saved user with id [{}] to repository\", savedUser.getId())`: This\n   * line logs a tracing message indicating that the `User` object has been saved to\n   * the repository with its ID.\n   */\n  private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }\n\n  /**\n   * encrypts a user's password by encoding it using a password encoder.\n   * \n   * @param request UserDto object that contains the user's password to be encrypted.\n   * \n   * \t- `request`: The input parameter is an instance of the `UserDto` class, which\n   * contains various attributes such as `password`, `username`, and `email`.\n   */\n  private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }\n\n  /**\n   * generates a unique user ID for a `UserDto` object using the `UUID.randomUUID()`\n   * method and assigns it to the `UserId` field of the request object.\n   * \n   * @param request UserDto object that contains the user's information, and its\n   * `setUserId()` method sets the user's unique ID generated by the function.\n   * \n   * \t- `request`: A `UserDto` object, which is a data transfer object containing\n   * user-related information.\n   */\n  private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }\n}","location":{"start":31,"insert":28,"offset":" ","indent":0,"comment":{"start":27,"end":30}},"item_type":"class","length":101,"docLength":3},{"id":"098d5381-7941-f2b1-5f4d-dbb7c1407ab9","ancestors":["f55a670d-4a31-f39b-6d4e-fd0ef0e508f8"],"type":"function","description":"generates a unique user ID, encrypts the user password, and creates the user in a repository.","params":[{"name":"request","type_name":"UserDto","description":"user to be created and provides the necessary data for the creation, including the unique user ID and encrypted password.\n\n* `generateUniqueUserId`: creates a unique user ID for the newly created user.\n* `encryptUserPassword`: encrypts the password provided in the `request`.\n* `createUserInRepository`: creates a new user entry in the repository using the encrypted password.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a UserDto object containing the created user's details.\n\nThe `generateUniqueUserId` method creates an unique identifier for the user.\nThe `encryptUserPassword` method encrypts the user's password.\nThe `createUserInRepository` method inserts the user into a repository.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n}\n","description":"\nThis is how the code would work: \n- Firstly, a new user is created. \n- Secondly, an unique user ID for this user is generated using UUID.randomUUID().toString() method. \n- Thirdly, the password of the user is encrypted using PasswordEncoder.encode(request.getPassword()). \n- Finally, the user's information is persisted to a repository by calling createUserInRepository() method."},"name":"createUser","code":"@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }","location":{"start":69,"insert":47,"offset":" ","indent":2,"comment":{"start":46,"end":68}},"item_type":"method","length":5,"docLength":22},{"id":"02e313b8-1750-1e9c-5247-78b7dc9cad5f","ancestors":["f55a670d-4a31-f39b-6d4e-fd0ef0e508f8"],"type":"function","description":"converts a `UserDto` object to a `User` entity, saves it to the repository, and returns the converted `UserDto` object.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the data for creating a new user in the repository.\n\n* `userMapper`: This is an object responsible for mapping between a `UserDto` and a `User`.\n* `userRepository`: This is an object that provides methods for saving or retrieving users from a repository.\n* `savedUser`: This is the user object saved in the repository after processing the input. Its `id` attribute contains the ID of the saved user.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object representing the saved user in the repository.\n\n* `user`: A `User` object representing the saved user in the repository.\n* `savedUser`: The user object that was saved to the repository.\n* `id`: The unique identifier for the saved user, represented as an integer.","complex_type":true},"usage":{"language":"java","code":"// A request object with user information, such as the password and username\nUserDto userRequest = new UserDto(\"prathab\", \"123456\");\n\n// Calling the createUserInRepository method\nUserDto createdUser = createUserInRepository(userRequest);\n\n// Prints the unique ID of the saved user \nSystem.out.println(createdUser.getUserId());\n","description":""},"name":"createUserInRepository","code":"private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }","location":{"start":99,"insert":75,"offset":" ","indent":2,"comment":{"start":74,"end":98}},"item_type":"method","length":6,"docLength":24},{"id":"97580f9e-6d08-e386-3647-78d234a52a2e","ancestors":["f55a670d-4a31-f39b-6d4e-fd0ef0e508f8"],"type":"function","description":"encrypts a user's password by encoding it using a password encoder, replacing the original password with an encrypted version.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the user's password that is being encrypted.\n\n* `request.setEncryptedPassword`: The user password is encrypted using the provided encoder.\n* `request.getPassword()`: The original plaintext password of the user.","complex_type":true}],"usage":{"language":"java","code":"request = new UserDto(\"username\", \"password\", \"email\");\nencryptUserPassword(request);\n// The request now contains the encrypted password.\n","description":"\nIn this example, a new instance of UserDto with the username, password, and email is created. Then, the encryptUserPassword method is called with the request as its parameter. This updates the request's encryptedPassword field to the encoded password using the PasswordEncoder provided in the constructor."},"name":"encryptUserPassword","code":"private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }","location":{"start":114,"insert":106,"offset":" ","indent":2,"comment":{"start":105,"end":113}},"item_type":"method","length":3,"docLength":8},{"id":"579b395a-23ff-d08e-ab4b-a6d4dbd25824","ancestors":["f55a670d-4a31-f39b-6d4e-fd0ef0e508f8"],"type":"function","description":"generates a unique user ID for a given `UserDto` instance using the `UUID.randomUUID()` method and assigns it to the `UserId` field of the request object.","params":[{"name":"request","type_name":"UserDto","description":"`UserDto` object that requires a unique user ID to be generated by the `generateUniqueUserId()` method.\n\n* `request`: A `UserDto` object that contains information about the user for whom an unique ID is being generated.","complex_type":true}],"usage":{"language":"java","code":"private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }\n","description":"\nThis method takes in a UserDto object as an argument and generates a unique user ID for it. It does this by using the UUID.randomUUID() method to generate a random UUID string, which is then set as the userId of the input request object. This way, the method is able to create a unique identifier for each user in the system."},"name":"generateUniqueUserId","code":"private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }","location":{"start":128,"insert":118,"offset":" ","indent":2,"comment":{"start":117,"end":127}},"item_type":"method","length":3,"docLength":10}]}}}