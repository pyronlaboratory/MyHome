{"name":"UserSDJpaService.java","path":"user-service/src/main/java/com/prathab/userservice/services/springdatajpa/UserSDJpaService.java","content":{"structured":{"description":"A `UserSDJpaService` class that implements the `UserService` interface using Spring Data JPA repository. It has three main methods: `createUser()`, `encryptUserPassword()`, and `generateUniqueUserId()`. These methods work together to create, encrypt, and save a user in the database. The code uses Lombok, Slf4j, and Spring Security packages for its implementation.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        UserDto\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                UserSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    edge [color=\"#26de81\"]\n    UserSDJpaService -> UserDto \n    UserDto -> UserSDJpaService \n}\n","items":[{"id":"f53b3ab0-92a9-5187-f641-50223def1ee0","ancestors":["39cd72fc-d0e4-01b8-8a4c-569648843537"],"type":"function","description":"generates a unique user ID, encrypts the user password, and creates the user in a repository.","params":[{"name":"request","type_name":"UserDto","description":"user data to be created, including its unique ID and encrypted password, which are generated and stored in the function.\n\n* `generateUniqueUserId`: generates a unique user ID for the created user\n* `encryptUserPassword`: encrypts the user password before storing it in the repository\n* `createUserInRepository`: creates a new user object in the repository, using the decrypted password and other attributes from `request`","complex_type":true}],"returns":{"type_name":"UserDto","description":"a new UserDto object containing the created user's details.\n\n* The `generateUniqueUserId` method generates a unique identifier for the user, which is then passed to the `encryptUserPassword` method for encryption.\n* The `encryptUserPassword` method encrypts the user's password using a secret key.\n* The `createUserInRepository` method creates a new user object in the repository, which stores the encrypted password and other relevant information.","complex_type":true},"usage":{"language":"java","code":"// Create a UserDto object to pass in request parameter for the createUser method\nUserDto user = new UserDto(123, \"prathab\", \"password\");\n\n// Call the createUser method and pass in the user object as the request parameter\nUserDto createdUser = createUser(user);\n","description":"\nThe example creates a UserDto object with an ID of 123, username \"prathab\" and password \"password\". It then calls the createUser method and passes in this object as the request parameter. The method generates a unique user ID for the user, encrypts the password using the PasswordEncoder class, and saves the user to the repository using the UserRepository class. Finally, it returns a UserDto object that contains the newly created user's information."},"name":"createUser","code":"@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"557a377a-6471-c2bf-4a4f-7d4ada1a9699","ancestors":["39cd72fc-d0e4-01b8-8a4c-569648843537"],"type":"function","description":"converts a `UserDto` object into a `User` entity, saves it to the repository, and maps it back to a `UserDto` object for return.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the details of the user to be created and saved in the repository.\n\n* `userMapper`: This is an instance of a class that maps between the user DTO and the entity User. The mapping involves converting data from the DTO into the entity's fields and vice versa.\n* `userRepository`: This is an instance of a repository class that handles saving user entities to a database or other storage.\n* `savedUser`: This is the user entity saved in the repository after conversion from the DTO. It has an `id` field, which is automatically generated by the repository.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object representing the saved user.\n\n* `var user = userMapper.userDtoToUser(request)`: This line creates a new `User` object from the provided `UserDto` object using the `userMapper` service.\n* `var savedUser = userRepository.save(user)`: This line saves the newly created `User` object to the repository, which persists the data in the underlying database.\n* `log.trace(\"saved user with id[{}] to repository\", savedUser.getId())`: This line logs a trace message indicating that the user has been saved to the repository with its ID.","complex_type":true},"usage":{"language":"java","code":"UserDto request = new UserDto();\nrequest.setUserId(\"123\");\nrequest.setEmail(\"user@email.com\");\nrequest.setPassword(\"password\");\nrequest.setFirstName(\"John\");\nrequest.setLastName(\"Doe\");\n\ncreateUserInRepository(request);\n","description":""},"name":"createUserInRepository","code":"private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6,"docLength":null},{"id":"8f2e9ee3-d2a7-8b9f-f54d-8e80581db39b","ancestors":["39cd72fc-d0e4-01b8-8a4c-569648843537"],"type":"function","description":"encrypts a user's password using a password encoder, storing the encrypted password in the request object.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object that contains the user's password, which is then encrypted and returned in the `encryptedPassword` field.\n\n* `request.setEncryptedPassword`: sets the encrypted password to an encoded value by utilizing the `passwordEncoder`.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    UserDto user = new UserDto();\n    user.setName(\"Prathab\");\n    user.setEmail(\"prathab@example.com\");\n    user.setPassword(\"password\");\n    \n    // Encrypt the password before saving it to the database\n    encryptUserPassword(user);\n    \n    System.out.println(user.getEncryptedPassword()); // Output: $2a$10$dXv486eQJhKkj97qPmN/Cu4GwFpZMgLlB4R3rWtSzIx5EhZ9fQDy\n}\n","description":""},"name":"encryptUserPassword","code":"private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"053bc116-40ff-07bb-3842-3ffd2a8c42e4","ancestors":["39cd72fc-d0e4-01b8-8a4c-569648843537"],"type":"function","description":"generates a unique user ID for a `UserDto` object using the `UUID.randomUUID()` method and assigns it to the `UserDto` object's `userId` field.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object that contains the user's details, and it is updated with a unique user ID generated using UUID.\n\n* `request`: A `UserDto` object that contains information about a user, such as their ID and other attributes.","complex_type":true}],"usage":{"language":"java","code":"@Test\nvoid testGenerateUniqueUserId() {\n    UserDto request = new UserDto();\n    userService.generateUniqueUserId(request);\n    assertNotNull(request.getUserId());\n}\n","description":"\nThe method is tested by creating a new object of the class UserDto, passing it to generateUniqueUserId method, and asserting that the generated user id is not null."},"name":"generateUniqueUserId","code":"private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3,"docLength":null}]}}}