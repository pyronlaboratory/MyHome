{"name":"UserSDJpaService.java","path":"user-service/src/main/java/com/prathab/userservice/services/springdatajpa/UserSDJpaService.java","content":{"structured":{"description":"A `UserSDJpaService` class that implements the `UserService` interface using Spring Data JPA repository. The service creates a new user by generating a unique ID, encrypting the password, and saving the user in the repository. The summary is:\n\nThe `UserSDJpaService` class provides a high-quality implementation of the `UserService` interface using Spring Data JPA repository. It creates a new user by generating a unique ID, encrypting the password, and saving the user in the repository.","items":[{"id":"5cf9bad7-54ab-ecac-7f4d-c664f9b8fa0f","ancestors":[],"type":"function","description":"is an implementation of the UserService interface that utilizes Spring Data JPA repository to perform its operations. It takes in a UserDto object and creates a new user in the repository, encrypting the password and generating a unique user ID along the way.","name":"UserSDJpaService","code":"@Service\n@Slf4j\npublic class UserSDJpaService implements UserService {\n\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n  private final PasswordEncoder passwordEncoder;\n\n  public UserSDJpaService(UserRepository userRepository,\n      UserMapper userMapper,\n      PasswordEncoder passwordEncoder) {\n    this.userRepository = userRepository;\n    this.userMapper = userMapper;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }\n\n  private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }\n\n  private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }\n\n  private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }\n}","location":{"start":31,"insert":31,"offset":" ","indent":0,"comment":{"start":27,"end":30}},"item_type":"class","length":37},{"id":"58ce6e64-7a7c-0497-2b4c-6cf1256673dc","ancestors":["5cf9bad7-54ab-ecac-7f4d-c664f9b8fa0f"],"type":"function","description":"creates a new user by generating an unique ID, encrypting their password, and saving it to the repository.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the user's information to be created, which is then processed through three methods: `generateUniqueUserId`, `encryptUserPassword`, and `createUserInRepository`.\n\n* `generateUniqueUserId`: generates a unique user ID for the created user.\n* `encryptUserPassword`: encrypts the user password before storing it in the repository.\n* `createUserInRepository`: creates a new user object in the repository, leveraging the encrypted password.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a new user entity created in the repository with a unique ID and encrypted password.\n\n1. `generateUniqueUserId(request)`: This method generates a unique user ID for the new user based on the provided request parameters.\n2. `encryptUserPassword(request)`: This method encrypts the user password using a secure encryption algorithm to protect the user's privacy and security.\n3. `createUserInRepository(request)`: This method creates a new user in the repository, which is likely an SQL database or another data storage system. The method takes the request parameters as input and inserts the user data into the repository.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n}\n","description":"\nFor this example, let's assume the following input for `request`:\n"},"name":"createUser","code":"@Override public UserDto createUser(UserDto request) {\n    generateUniqueUserId(request);\n    encryptUserPassword(request);\n    return createUserInRepository(request);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"5abb662d-3826-869a-9448-e0f5ef73a918","ancestors":["5cf9bad7-54ab-ecac-7f4d-c664f9b8fa0f"],"type":"function","description":"maps a `UserDto` object to a `User` object, saves it to a repository, and maps the saved `User` back to a `UserDto` object for return.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the details of the user to be saved in the repository.\n\n* `var user = userMapper.userDtoToUser(request)`: The `user` variable is assigned the result of mapping the `request` object to a `User` entity using the `userMapper`.\n* `var savedUser = userRepository.save(user)`: The `savedUser` variable is assigned the result of saving the `user` entity in the repository.\n* `log.trace(\"saved user with id[{}] to repository\", savedUser.getId())`: A trace message is logged indicating that the `user` entity with its `id` property set to the value of `savedUser.getId()` was saved to the repository.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a transformed `UserDto` object representing the saved user in the repository.\n\n* `var user = userMapper.userDtoToUser(request)`: This line converts the `UserDto` object into a `User` object using the `userMapper`.\n* `var savedUser = userRepository.save(user)`: This line saves the converted `User` object to the repository, creating a new entity in the database.\n* `log.trace(\"saved user with id[{}] to repository\", savedUser.getId())`: This line logs an informational message indicating that the user has been saved to the repository with its ID.","complex_type":true},"usage":{"language":"java","code":"//Example input\nUserDto user = new UserDto();\nuser.setName(\"Prathab\");\nuser.setEmail(\"prathab@example.com\");\nuser.setPassword(\"password123\");\n\n//Calling the method\ncreateUserInRepository(user);\n","description":"\nThis example creates a new UserDto object and sets its name, email, and password to \"Prathab\", \"prathab@example.com\", and \"password123\" respectively. The createUserInRepository() method is then called with this object as input, which will then be saved to the repository using the userMapper and userRepository objects."},"name":"createUserInRepository","code":"private UserDto createUserInRepository(UserDto request) {\n    var user = userMapper.userDtoToUser(request);\n    var savedUser = userRepository.save(user);\n    log.trace(\"saved user with id[{}] to repository\", savedUser.getId());\n    return userMapper.userToUserDto(savedUser);\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"b76db538-9da2-d49f-8a40-7fa011828988","ancestors":["5cf9bad7-54ab-ecac-7f4d-c664f9b8fa0f"],"type":"function","description":"encrypts a user's password by encoding it using a password encoder, replacing the original password with an encrypted version.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object containing the user's password to be encrypted.\n\n* `request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));`: The original password is encrypted using a password encoder.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    UserDto request = new UserDto();\n    request.setPassword(\"password123\");\n    encryptUserPassword(request);\n}\n","description":""},"name":"encryptUserPassword","code":"private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"37373ad5-ed5c-f7b3-074a-2afeffeea3a8","ancestors":["5cf9bad7-54ab-ecac-7f4d-c664f9b8fa0f"],"type":"function","description":"generates a unique user ID for a given `UserDto` object using the `UUID.randomUUID()` method and assigns it to the `UserDto` object's `userId` field.","params":[{"name":"request","type_name":"UserDto","description":"UserDto object that contains the user's details, and it is used to generate a unique user ID for the user.\n\n* `request`: A `UserDto` object containing attributes relevant to generating a unique user ID.","complex_type":true}],"usage":{"language":"java","code":"UserDto request = new UserDto();\nrequest.setUsername(\"Prathab\");\ngenerateUniqueUserId(request);\nSystem.out.println(request.getUserId());\n","description":""},"name":"generateUniqueUserId","code":"private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3}]}}}