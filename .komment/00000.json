[
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "CORS mappings for a Spring Web MVC application, allowing incoming requests from any origin and specifying allowed HTTP methods and headers, while enabling credentials for authenticated requests. The `CorsConfig` class creates a configuration object that enables CORS functionality for the entire application by adding CORS mappings to a registry using the `addCorsMappings()` method.",
        "items": [
          {
            "id": "06690fa2-b73f-84ae-e04c-d4655c388d5c",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CorsConfig",
            "code": "@Configuration\npublic class CorsConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n\n  /**\n   * defines CORS mappings for a Spring Web MVC application, allowing incoming requests\n   * from any origin, specifying allowed HTTP methods and headers, and enabling credentials\n   * for authenticated requests.\n   * \n   * @returns a configuration object that enables CORS functionality for the entire application.\n   * \n   * \t- `registry`: The CorsRegistry object that is being modified.\n   * \t- `addCorsMappings()`: A method that adds CORS mappings to the registry.\n   * \t- `allowedOrigins()`: An array of allowed origins, which are the domains from\n   * which the API can be accessed.\n   * \t- `allowedMethods()`: An array of allowed HTTP methods, which determine what\n   * actions can be performed on the API.\n   * \t- `allowedHeaders()`: An array of allowed headers, which specify which headers\n   * can be used in CORS requests.\n   * \t- `exposedHeaders()`: An array of exposed headers, which are the headers that the\n   * API will expose to clients.\n   * \t- `allowCredentials()`: A boolean value indicating whether credentials (e.g.,\n   * authentication tokens) should be allowed in CORS requests.\n   */\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 62
          },
          {
            "id": "9024495e-9332-d4b7-d149-f23099068791",
            "ancestors": [
              "06690fa2-b73f-84ae-e04c-d4655c388d5c"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a configuration for CORS mappings, allowing requests from any origin and specifying allowed methods, headers, and credentials.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a collection of CORS mappings for a server.\n* `addMapping`: This method adds a new CORS mapping to the registry. The method takes a string argument representing the URL pattern that the mapping applies to.\n* `allowedOrigins`: This is an array of strings representing the origins (i.e., domains) that are allowed to make requests to the server.\n* `allowedMethods`: This is an array of strings representing the HTTP methods (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n* `allowedHeaders`: This is an array of strings representing the headers that are allowed to be sent with the requests made to the server.\n* `exposedHeaders`: This is an array of strings representing the headers that the server will expose to clients in their responses.\n* `allowCredentials`: This method indicates whether the server will include authentication information (i.e., credentials) in the responses it sends to clients.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n",
              "description": "\nIn this example, the method corsConfigurer is used to add a mapping for any URL pattern. It specifies that requests from any origin are allowed and that all HTTP methods are allowed with the mapped URL pattern. Additionally, it sets \"token\" and \"userId\" as exposed headers in the responses."
            },
            "name": "corsConfigurer",
            "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 35
          },
          {
            "id": "118221b3-eb17-2497-b44b-8b415ed1f6a6",
            "ancestors": [
              "06690fa2-b73f-84ae-e04c-d4655c388d5c",
              "9024495e-9332-d4b7-d149-f23099068791"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing incoming requests from any origin and specifying which methods and headers are allowed, as well as enabling credentials for authenticated access.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that is being modified by adding mappings to allow cross-origin resource sharing (CORS) for specific origins, methods, headers, and credentials.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a registry of CORS (Cross-Origin Resource Sharing) mappings.\n* `addMapping`: This method adds a new mapping to the registry for the specified URL pattern (\"/**\").\n* `allowedOrigins`: An array of origins that are allowed to make requests to the protected resource.\n* `allowedMethods`: An array of HTTP methods (such as GET, POST, PUT, DELETE) that are allowed to be used with the protected resource.\n* `allowedHeaders`: An array of headers that are allowed to be included in responses from the protected resource.\n* `exposedHeaders`: An array of headers that are exposed to clients making requests to the protected resource.\n* `allowCredentials`: A boolean value indicating whether credentials (such as cookies, authentication headers) should be allowed or required for requests to the protected resource.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n            .allowedOrigins(new String[] {\"*\"})\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n}\n",
              "description": "\nThe above code defines a CORS mapping for all incoming requests with any allowed origin, method, and header. The exposed headers are token and userId. The allowCredentials property is set to true indicating that credentials are allowed in the request."
            },
            "name": "addCorsMappings",
            "code": "@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 6
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": ".komment/service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "A CORS configuration for a Spring Boot application using the `@Bean` annotation. It sets up CORS mappings for any URL pattern, allows origins from any of the specified URLs, and specifies allowed methods, headers, and credentials. The `addCorsMappings()` method is used to configure the registry with these settings.",
        "items": []
      }
    }
  },
  {
    "name": "Amenity.java",
    "path": ".komment/service/src/main/java/com/myhome/domain/Amenity.java",
    "content": {
      "structured": {
        "description": "An entity called \"Amenity\" with properties for amenity ID, name, description, price, community, and community house, along with a many-to-one relationship with the BookingItems entity set. The code also defines a few high-level packages, including `@Entity`, `@AllArgsConstructor`, `@NoArgsConstructor`, `@Getter`, `@Setter`, `@With`, and `@NamedEntityGraphs`. Additionally, it includes annotations for columns, relationships, and methods.",
        "items": []
      }
    }
  },
  {
    "name": "User.java",
    "path": ".komment/service/src/main/java/com/myhome/domain/User.java",
    "content": {
      "structured": {
        "description": "An `User` class that represents a valid user in a service, with fields for user ID, email, name, encrypted password, and various relationships with other entities through many-to-many and one-to-many associations. The code also includes annotations for data serialization, JPA mapping, and named entity graphs.",
        "items": []
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": ".komment/service/src/main/java/com/myhome/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface called `CommunityService` that provides various methods for managing communities in a Spring Boot application. The interface includes methods for creating new communities, listing all communities, retrieving community details by ID, finding community houses and admins, adding admins and houses to communities, removing houses from communities, and deleting communities. These methods include `createCommunity`, `listAll`, `getCommunityDetailsById`, `findCommunityHousesById`, `findCommunityAdminsById`, `addAdminsToCommunity`, `addHousesToCommunity`, `removeHouseFromCommunityByHouseId`, and `deleteCommunity`.",
        "items": []
      }
    }
  },
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that generates metadata about a pageable and its corresponding page. The class contains four components: current page number, page size, total pages, and total elements. These components are used to create a `PageInfo` object, which can be used to represent the current state of a paginated data set.",
        "items": [
          {
            "id": "224fff7a-e975-f291-fa47-7e81833d325b",
            "ancestors": [],
            "type": "function",
            "description": "from the file is a data structure that provides metadata about a pageable and its corresponding page, including page number, size, total pages, and total elements. The class offers a convenient way to access and manipulate pageable data by providing an easy-to-use API for working with pages and their associated information.",
            "name": "PageInfo",
            "code": "@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  /**\n   * generates a `PageInfo` object containing metadata about a pageable and its\n   * corresponding page. The object includes page number, size, total pages, and total\n   * elements.\n   * \n   * @param pageable pageable interface, which provides methods for manipulating the\n   * current page of data being processed.\n   * \n   * \t- The `getPageNumber()` method returns the page number associated with the current\n   * page being processed.\n   * \t- The `getPageSize()` method returns the size of a single page in terms of the\n   * number of elements it can contain.\n   * \t- The `getTotalPages()` method returns the total number of pages available for processing.\n   * \t- The `getTotalElements()` method returns the total number of elements that can\n   * be processed across all pages.\n   * \n   * @param page current page being processed, providing the total number of elements\n   * on that page.\n   * \n   * \t- `pageNumber`: The page number that the input is associated with.\n   * \t- `pageSize`: The number of elements in each page of the input.\n   * \t- `totalPages`: The total number of pages in the input.\n   * \t- `totalElements`: The total number of elements in the input.\n   * \n   * @returns a `PageInfo` object containing information about the page of data.\n   * \n   * \t- The page number is represented by the first element of the PageInfo object\n   * (pageable.getPageNumber()). This indicates the current page being displayed to the\n   * user.\n   * \t- The size of a page is described by the second component of the PageInfo object\n   * (pageable.getPageSize()). It represents how many items may be shown on a single page.\n   * \t- The total number of pages is represented by the third element of the PageInfo\n   * object (page.getTotalPages()). This indicates how many web pages are available in\n   * total.\n   * \t- The overall amount of items is described by the fourth element of the PageInfo\n   * object (page.getTotalElements()). It represents the sum of all objects in the\n   * entire collection.\n   */\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 10,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 57
          },
          {
            "id": "073f596b-93c0-b395-8e42-a3c7e2ee4108",
            "ancestors": [
              "224fff7a-e975-f291-fa47-7e81833d325b"
            ],
            "type": "function",
            "description": "generates a `PageInfo` object containing information about the number of pages and elements in a specified range.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pageable object containing information about the current page of data to be processed, which is used to calculate the page number, size, and total pages and elements.\n\n* The page number (0-based index) returned by the `getPageNumber()` method is included in the first component of the output `PageInfo`.\n* The total number of pages that can be produced by calling `getPageSize()` on `pageable` is included in the second component of the output `PageInfo`.\n* The total number of elements that can be processed by `pageable` is returned by the `getTotalElements()` method and incorporated into the third component of the output `PageInfo`.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page of data being processed, providing the total number of elements on that page.\n\n* `pageNumber`: The number of the page being accessed.\n* `pageSize`: The number of elements in each page.\n* `totalPages`: The total number of pages in the result set.\n* `totalElements`: The total number of elements in the result set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing page number, size, total pages, and total elements.\n\n* `pageNumber`: The page number that the pageable object represents.\n* `pageSize`: The number of elements that can be displayed on each page.\n* `totalPages`: The total number of pages in the result set.\n* `totalElements`: The total number of elements in the result set.",
              "complex_type": true
            },
            "name": "of",
            "code": "public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 23,
                "end": 61
              }
            },
            "item_type": "method",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "UserControllerIntegrationTest.java",
    "path": "integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java",
    "content": {
      "structured": {
        "description": "An integration test for a user controller in a Spring Boot application. The test creates a new user using the registration path, and then verifies that the response entity has a status code of HTTP 201 Created, indicating successful registration. Additionally, it checks that the response body matches the input data, and that the returned user ID refers to a user stored in the database.",
        "items": [
          {
            "id": "d05871af-5329-8fac-6f40-20bd83eac006",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "UserControllerIntegrationTest",
            "code": "@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "ba9cd04c-45fb-52b2-9947-c1e242b3a4a8",
            "ancestors": [
              "d05871af-5329-8fac-6f40-20bd83eac006"
            ],
            "type": "function",
            "description": "tests the creation of a new user via REST API. It verifies that the response status code is 'CREATED', and the created user's name, email, and password match the input values. Additionally, it checks if the returned user ID refers to a user stored in the database and ensures that the corresponding values in the database match the input values.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n",
              "description": "\nThe test method above makes a post request to the registration endpoint, then asserts that the response entity contains the correct status code and body values. Additionally, it checks that the user ID returned in the response body refers to an existing user in the database, and that the corresponding name and email values in the database match those provided in the test."
            },
            "name": "shouldSignUpSuccessful",
            "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 31
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that uses the BCrypt PasswordEncoder to encrypt passwords. It also includes configuration properties scanning and a main method to start the application.",
        "items": [
          {
            "id": "d397ffe2-18c9-0da2-a24b-9ba371103a97",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "MyHomeServiceApplication",
            "code": "@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          },
          {
            "id": "0ab2dab9-66f5-a981-1243-7c9448ea9cbd",
            "ancestors": [
              "d397ffe2-18c9-0da2-a24b-9ba371103a97"
            ],
            "type": "function",
            "description": "runs the `MyHomeServiceApplication` class using the `SpringApplication.run()` method, launching the application with the provided command-line arguments.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the application when it is launched.\n\n* `args`: an array of strings representing command-line arguments passed to the application when it is launched.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n  SpringApplication.run(MyHomeServiceApplication.class, args);\n}\n",
              "description": "\nHere is what each part of the code does:\n1. `SpringApplication`: This class represents a Spring Boot application and provides methods for starting the application. The `run` method is used to start the application with the provided configuration class and arguments (in this case, `MyHomeServiceApplication`).\n2. `MyHomeServiceApplication`: This is the main configuration class of the Spring Boot application. It contains all the necessary configuration settings, including any beans that are required by the application. In this example, the `getPasswordEncoder` method is called to create a new instance of `BCryptPasswordEncoder`.\n3. `args`: This is an array of strings that contain the command-line arguments passed to the main method. The `main` method uses these arguments to configure the application and start it. In this example, there are no command-line arguments, so the `args` parameter is an empty array (`String[]`).\n\nThe example code can be run by executing the `main` method with an empty array of command-line arguments."
            },
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 3
          },
          {
            "id": "2b230d3a-d726-89b4-ce4c-0c88adbbbd5d",
            "ancestors": [
              "d397ffe2-18c9-0da2-a24b-9ba371103a97"
            ],
            "type": "function",
            "description": "returns a `BCryptPasswordEncoder`, which is a widely-used password hashing algorithm that provides a high level of security against brute force attacks.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a `BCryptPasswordEncoder` instance, which is used to encrypt passwords securely using the bcrypt hashing algorithm.\n\n* The `BCryptPasswordEncoder` object is an implementation of the `PasswordEncoder` interface in Java.\n* It uses the bcrypt hashing algorithm to encrypt passwords, which provides a good balance between security and computational efficiency.\n* The encryption process involves iteratively hashing the password with a series of salt values, making it resistant to brute-force attacks.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n",
              "description": "\nThis code creates a new password encoder instance and returns it. The returned password encoder is then registered as a bean in the Spring application context, making it available for dependency injection. The method can be used to provide a PasswordEncoder implementation to any other component that needs one, such as a user service or a security configuration class."
            },
            "name": "getPasswordEncoder",
            "code": "@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "An email template configuration class named EmailTemplateConfig. The class includes a bean for a resource bundle message source and another for a Spring Template Engine instance. The template engine is configured with a custom template resolver that uses the Thymeleaf library to resolve templates. The message source is used to provide localized messages to the template engine.",
        "items": [
          {
            "id": "ca24cd65-9628-ebbf-b144-25aa6fc6aa0b",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "EmailTemplateConfig",
            "code": "@Configuration\n@RequiredArgsConstructor\npublic class EmailTemplateConfig {\n\n  private final EmailTemplateProperties templateProperties;\n  private final EmailTemplateLocalizationProperties localizationProperties;\n\n  @Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n\n  @Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n\n  private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }\n\n}",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 40
          },
          {
            "id": "a526909f-2a6f-02a5-034c-77be6c773733",
            "ancestors": [
              "ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"
            ],
            "type": "function",
            "description": "creates a new `ResourceBundleMessageSource` instance, sets its basename and default locale, and configures its cache seconds setting.",
            "params": [],
            "returns": {
              "type_name": "ResourceBundleMessageSource",
              "description": "a `ResourceBundleMessageSource` instance configured to handle email localization.\n\n* `ResourceBundleMessageSource`: This is the class that is created and returned by the function. It provides a message source for email localization.\n* `setBasename(localizationProperties.getPath())`: This sets the base name of the resource bundle file to be used for email localization.\n* `setDefaultLocale(Locale.ENGLISH)`: This sets the default locale for the message source, which is English in this case.\n* `setDefaultEncoding(localizationProperties.getEncoding())`: This sets the default encoding of the message source to the value specified in the `localizationProperties` object.\n* `setCacheSeconds(localizationProperties.getCacheSeconds())`: This sets the cache seconds for the message source, which determines how long the messages will be cached before being re-fetched from the resource bundle file.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n",
              "description": "\nThe code above creates a new instance of the ResourceBundleMessageSource class and sets its basename, default locale, default encoding, and cache seconds to the values specified in localizationProperties. Then it returns this new instance so that it can be used as a Spring bean. This is an example of how emailMessageSource would be used, but it is not a unit test or an explanation of the code."
            },
            "name": "emailMessageSource",
            "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "de9c0856-b701-f3ad-754b-142392aa33ab",
            "ancestors": [
              "ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"
            ],
            "type": "function",
            "description": "creates a new `SpringTemplateEngine` instance and sets its template resolver and message source to a `ThymeleafTemplateResolver` and an `EmailMessageSource`, respectively.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for sending email templates in Thymeleaf, which is used to configure the template engine.\n\n* ResourceBundleMessageSource: A message source that provides messages in a resource bundle format.\n* EmailMessageSource: A message source that provides email-related messages.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance configured with Thymeleaf templates and an email message source.\n\n* `SpringTemplateEngine`: This is the base class for all Spring-based template engines, providing common functionality and APIs for handling templates.\n* `templateResolver`: This is an instance of `ThymeleafTemplateResolver`, which provides a way to resolve Thymeleaf templates from a variety of sources, including files, directories, and even other templates.\n* `emailMessageSource`: This is an instance of `ResourceBundleMessageSource`, which provides a way to access message resources in a project.\n\nThe `thymeleafTemplateEngine` function creates a new instance of `SpringTemplateEngine`, sets the `templateResolver` to a `ThymeleafTemplateResolver`, and then sets the `messageSource` to an `EmailMessageSource`. This allows for the use of Thymeleaf templates in combination with email-related message resources.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    return new SpringTemplateEngine();\n}\n",
              "description": ""
            },
            "name": "thymeleafTemplateEngine",
            "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "53f6e6b9-fef0-12ae-8c49-cdb13d042d15",
            "ancestors": [
              "ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"
            ],
            "type": "function",
            "description": "creates a `ITemplateResolver` instance that sets up Thymeleaf template resolution parameters based on environment variables.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` object configured to resolve Thymeleaf templates based on their file path and properties.\n\n* `loader`: The ClassLoader used to resolve templates.\n* `prefix`: The prefix for the template resolution.\n* `suffix`: The suffix for the template resolution.\n* `templateMode`: The mode for the template resolution.\n* `characterEncoding`: The character encoding used for the template resolution.\n* `cacheable`: A boolean indicating whether the resolved templates should be cached or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n  @Autowired\n  private ITemplateResolver thymeleafTemplateResolver;\n\n  public void myMethod() {\n    String templatePath = \"my-template\";\n    ClassLoaderTemplateResolver resolver = (ClassLoaderTemplateResolver) thymeleafTemplateResolver();\n    resolver.setPrefix(templatePath);\n    // do something with the resolver\n  }\n}\n",
              "description": "\nThis example autowires a Spring bean of type `ITemplateResolver` that is created by the method `thymeleafTemplateResolver`. The `thymeleafTemplateResolver` method creates and configures an instance of `ClassLoaderTemplateResolver`, which is then set as the prefix for the template path. Finally, the resolver is used in a method to perform some action with it."
            },
            "name": "thymeleafTemplateResolver",
            "code": "private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `FileUploadConfig` that configures file upload settings for a Spring Boot application. The class sets the maximum file size limit in kilobytes using the `@Value` annotation and creates a `MultipartConfigElement` bean to handle multipart form data. The `multipartConfigElement()` method returns a `MultipartConfigFactory` instance with the configured maximum file size limit, which is then used to create a `MultipartConfig` instance.",
        "items": [
          {
            "id": "8c40ff15-89ba-1cbc-4c4d-19d468aa8463",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "FileUploadConfig",
            "code": "@Configuration\npublic class FileUploadConfig {\n\n  @Value(\"${files.maxSizeKBytes}\")\n  private int maxSizeKBytes;\n\n  @Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "27570b36-4e77-d091-9242-8a57d025e440",
            "ancestors": [
              "8c40ff15-89ba-1cbc-4c4d-19d468aa8463"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` object, allowing for configuration of maximum file and request sizes in kilobytes.",
            "params": [],
            "returns": {
              "type_name": "MultipartConfig",
              "description": "a `MultipartConfig` object configured with maximum file and request sizes in kilobytes.\n\n* The MultipartConfigFactory object created is set to have a maximum file size of `maxSizeKBytes` kilobytes.\n* The maximum request size for multipart form data is also set to `maxSizeKBytes` kilobytes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n}\n",
              "description": ""
            },
            "name": "multipartConfigElement",
            "code": "@Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "A class called EmailTemplateLocalizationProperties, which is annotated with various Spring Boot annotations. The class has three fields: path, encoding, and cacheSeconds. The class is used to store email template localization settings.",
        "items": [
          {
            "id": "955f6bb4-8b4d-819d-8441-a95a4455e159",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot component for configuring email location settings, including path, encoding, and cache seconds.\nFields:\n\t- path (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file. \n\t- encoding (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding used for email templates. \n\t- cacheSeconds (int): in the EmailTemplateLocalizationProperties class represents the number of seconds that email templates are cached before being re-fetched from their location. \n\n",
            "name": "EmailTemplateLocalizationProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.location\")\npublic class EmailTemplateLocalizationProperties {\n  private String path;\n  private String encoding;\n  private int cacheSeconds;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An `EmailTemplateProperties` class that contains properties for configuring email templates in a Spring Boot application. The class has fields for storing the path to the template file, the template format, the encoding used, and whether or not to cache the template. These properties are annotated with various Spring Boot annotations to configure the behavior of the class.",
        "items": [
          {
            "id": "4b10081f-f985-7bb4-2847-783ef9a36785",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of properties for configuring email template settings, including path, format, encoding, mode, and cache status.\nFields:\n\t- path (String): in the EmailTemplateProperties class represents a string value specifying the location of an email template file. \n\t- format (String): in the EmailTemplateProperties class represents a string value that defines the email template file format. \n\t- encoding (String): in the EmailTemplateProperties class represents a string value that specifies the character encoding used for email templates. \n\t- mode (String): represents a string indicating the template rendering mode for email templates in Spring Boot applications. \n\t- cache (boolean): in EmailTemplateProperties represents a boolean value indicating whether email templates should be cached for later use. \n\n",
            "name": "EmailTemplateProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.template\")\npublic class EmailTemplateProperties {\n  private String path;\n  private String format;\n  private String encoding;\n  private String mode;\n  private boolean cache;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "A `MailProperties` class that represents configuration properties for email sending. The class has fields for host, username, password, port, protocol, debug, and devMode, which can be used to configure various aspects of email sending. The class also uses Spring Boot's `@ConfigurationProperties` annotation to enable automatic property processing.",
        "items": [
          {
            "id": "ecd0a23b-3dcd-2a91-b343-a96a128d2a69",
            "ancestors": [],
            "type": "function",
            "description": "in Java provides properties for configuring email settings such as host, username, password, port, protocol, and debug mode.\nFields:\n\t- host (String): in the MailProperties class represents a string value specifying the mail server hostname or IP address. \n\t- username (String): in MailProperties is a string variable used to store the email address of the recipient in Spring Boot configuration. \n\t- password (String): in the MailProperties class is used to store a string value representing a password for mail configuration purposes. \n\t- port (int): in the MailProperties class represents an integer value indicating the mail server's port number. \n\t- protocol (String): in the MailProperties class represents a string value defining the email protocol to use, such as \"smtp\" or \"imap\". \n\t- debug (boolean): in MailProperties is a boolean indicator of whether debugging mode is enabled for mail-related configurations. \n\t- devMode (boolean): in MailProperties represents a boolean flag indicating whether development mode is enabled for the mail configuration. \n\n",
            "name": "MailProperties",
            "code": "@Data\n@ConfigurationProperties(prefix = \"spring.mail\")\npublic class MailProperties {\n  private String host;\n  private String username;\n  private String password;\n  private int port;\n  private String protocol;\n  private boolean debug;\n  private boolean devMode;\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enumeration of mail template names, each with a corresponding filename. The enumeration is used to retrieve the appropriate template file for sending emails based on specific events such as password reset, password changed, account created or confirmed.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "An AmenityController class that implements the AmenitiesApi interface. The controller handles various amenity-related requests such as getting details of a specific amenity, listing all amenities for a given community, adding a new amenity to a community, deleting an existing amenity, and updating an amenity's details. The code uses Spring WebFlux and Lombok frameworks and includes annotations for validation, mapping, and RESTful endpoints.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "AmenityController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 59
          },
          {
            "id": "33ec2ec8-0876-99a9-e740-0b83f3aa9876",
            "ancestors": [
              "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"
            ],
            "type": "function",
            "description": "retrieves amenity details for a given amenity ID using the `amenitySDJpaService`. It maps the retrieved data to an `AmenityDetailsResponse` object and returns it as a `ResponseEntity` with an HTTP status of `OK` or `NOT_FOUND` if the amenity is not found.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "identifier of an amenity that is being retrieved.\n\n* The `@PathVariable` annotation indicates that the `amenityId` parameter is passed through the HTTP request path.\n* The `amenitySDJpaService` is a JPA service that provides access to the amenity data in the database.\n* The `getAmenityDetails` method returns an Optional<GetAmenityDetailsResponse> object, which represents the possibility of obtaining a response or not.\n* If the response is present, it is mapped through the `amenityApiMapper` function to create a GetAmenityDetailsResponse object.\n* The `map(ResponseEntity::ok)` method is used to convert the Optional<GetAmenityDetailsResponse> object to a ResponseEntity object with a status code of OK (200).\n* If the response is not present, an error message is returned in the ResponseEntity object with a status code of NOT_FOUND (404).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object containing an `AmenityDetailsResponse` object representing the details of the requested amenity.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response with a status code and body. The status code indicates whether the request was successful or not, while the body contains the actual response data.\n* `status`: This is a field in the `ResponseEntity` class that holds the status code of the response. In this case, it can be either `HttpStatus.OK` or `HttpStatus.NOT_FOUND`.\n* `body`: This is a field in the `ResponseEntity` class that holds the response data. In this case, it contains an instance of `GetAmenityDetailsResponse`, which represents the details of an amenity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testGetAmenityDetails() {\n    // set up mock services and mappers\n    AmenitySDJpaService amenitySDJpaService = Mockito.mock(AmenitySDJpaService.class);\n    AmenityApiMapper amenityApiMapper = Mockito.mock(AmenityApiMapper.class);\n    \n    // set up test data\n    String amenityId = \"some-amenity-id\";\n    AmenityDto amenityDto = new AmenityDto();\n    amenityDto.setName(\"name\");\n    amenityDto.setDescription(\"description\");\n    amenityDto.setCommunityId(\"community-id\");\n    \n    // mock behavior of services and mappers\n    when(amenitySDJpaService.getAmenityDetails(amenityId)).thenReturn(Optional.of(amenityDto));\n    when(amenityApiMapper.amenityToAmenityDetailsResponse(amenityDto))\n            .thenReturn(new GetAmenityDetailsResponse().name(\"name\").description(\"description\"));\n    \n    // call the method and check results\n    ResponseEntity<GetAmenityDetailsResponse> response =\n                amenityController.getAmenityDetails(amenityId);\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertTrue(response.hasBody());\n    assertEquals(\"name\", response.getBody().getName());\n    assertEquals(\"description\", response.getBody().getDescription());\n}\n",
              "description": "\nThis test uses the `Mockito` library to mock the services and mappers, set up test data, and check the results of calling the method getAmenityDetails. The test uses the `when()` method from Mockito to specify the behavior of the mocked service and mapper, and the `thenReturn()` method to return an optional value when the method is called."
            },
            "name": "getAmenityDetails",
            "code": "@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "d2348cb2-5c54-d98b-8041-e69cd84d0686",
            "ancestors": [
              "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"
            ],
            "type": "function",
            "description": "receives a community ID as a path variable and returns a set of amenity details responses, which are generated by mapping the list of amenities to the response set using the `amenityApiMapper`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community whose amenities are being listed.\n\n* `communityId`: A String variable representing the ID of a community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a set of `GetAmenityDetailsResponse` objects containing the details of all amenities for a given community.\n\n* `ResponseEntity`: This is the generic type of the output, which represents an HTTP response entity.\n* `ok`: This is the status code of the response, indicating that the request was successful.\n* `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse` objects, which contain the details of each amenity returned by the API.\n* `amenities`: This is the list of `Amenity` objects, which are the entities being queried and returned by the API.\n* `amenitySDJpaService`: This is a dependency injection service that provides the `listAllAmenities()` method, which retrieves the amenities from the database.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void main() {\n    AmenityController amenityController = new AmenityController();\n    String communityId = \"1\";\n    Set<GetAmenityDetailsResponse> response = amenityController.listAllAmenities(communityId);\n}\n",
              "description": "\nThis is an example of how listAllAmenities would be used in the main method of a Java program. The communityId variable is set to 1, and then the method listAllAmenities is called using the communityId as input. The response variable returns all the amenity details for that community."
            },
            "name": "listAllAmenities",
            "code": "@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "fd43ba24-26b8-bb83-2c49-7b8cab7aedb4",
            "ancestors": [
              "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"
            ],
            "type": "function",
            "description": "allows for the addition of amenities to a community through the creation and storage of new amenities in the database using the `amenitySDJpaService`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the amenities will be added.\n\n* `communityId`: A string representing the ID of a community. It is the primary key of the `Community` table in the database.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to the community.\n\n* `communityId`: A String representing the ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of Amenity objects containing the amenities that will be added to the community. Each amenity object has properties such as name, description, and image.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddAmenityResponse",
              "description": "a `ResponseEntity` object representing a successful addition of amenities to a community, with the `statusCode` set to `201`.\n\n* The `ResponseEntity` object represents a response entity that contains an `AddAmenityResponse` object inside it.\n* The `AddAmenityResponse` object is a class that contains the list of amenities added to the community.\n* The `amenities` field of the `AddAmenityResponse` object is a list of `Amenity` objects, representing the amenities added to the community.\n* The `map` method of the `ResponseEntity` object maps the `AddAmenityResponse` object to a `ResponseEntity` object with an HTTP status code of `OK`.\n* The `orElse` method of the `ResponseEntity` object returns a `ResponseEntity` object with an HTTP status code of `NOT_FOUND` if the amenities could not be added to the community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testAddAmenityToCommunity() {\n  String communityId = \"123456\";\n  AddAmenityRequest request = new AddAmenityRequest(Arrays.asList(\"Wifi\", \"Gym\"));\n  ResponseEntity<AddAmenityResponse> response = \n      this.controller.addAmenityToCommunity(communityId, request);\n  \n  // Test that the method returns a successful response with the correct status code\n  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n  assertThat(response.getBody().getAmenities())\n      .hasSize(2)\n      .contains(\"Wifi\", \"Gym\");\n}\n",
              "description": "\nThis test ensures that the addAmenityToCommunity method returns a successful response with the correct status code and a list of amenities containing the provided values."
            },
            "name": "addAmenityToCommunity",
            "code": "@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "649a2e4f-5457-a2be-e248-cdd40b36baea",
            "ancestors": [
              "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"
            ],
            "type": "function",
            "description": "deletes an amenity from the database using `amenitySDJpaService`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT` status code. If unsuccessful, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND` status code.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity to be deleted.\n\n* `amenitySDJpaService`: This is an instance of a class that represents a JPA service for managing amenities.\n* `deleteAmenity()`: This is a method of the `amenitySDJpaService` class that deletes an amenity from the database.\n* `amenityId`: This is a string input parameter passed to the `deleteAmenity()` method, representing the ID of the amenity to be deleted.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: indicates that the amenity was successfully deleted.\n* `HttpStatus.NOT_FOUND`: indicates that the amenity could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenityController amenityController;\n\npublic void deleteAmenity() {\n  String amenityId = \"amenityId\";\n  ResponseEntity<Void> response = amenityController.deleteAmenity(amenityId);\n  if (response.getStatusCode().equals(HttpStatus.NO_CONTENT)) {\n    System.out.println(\"Amenity deleted successfully\");\n  } else {\n    System.err.println(\"Failed to delete the amenity\");\n  }\n}\n",
              "description": "\nThe above example shows how the `deleteAmenity` method would be used by first autowiring the `AmenityController` and then using the `deleteAmenity` method with the `amenityId` variable as an argument. The response of the method is then checked for whether it was successful or not, and a message is printed accordingly."
            },
            "name": "deleteAmenity",
            "code": "@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "22c65d1c-31f4-f6ae-1b45-274b0895adb4",
            "ancestors": [
              "cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"
            ],
            "type": "function",
            "description": "updates an amenity in the system based on the ID provided in the request body, using the `amenitySDJpaService`. If the update is successful, a `NO_CONTENT` status code is returned. Otherwise, a `NOT_FOUND` status code is returned.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity being updated.\n\n* `@PathVariable String amenityId`: represents the ID of an amenity to be updated.\n* `@Valid @RequestBody UpdateAmenityRequest request`: the request body contains the update details for the amenity.\n* `amenityApiMapper.updateAmenityRequestToAmenityDto(request)`: maps the request body to an `AmenityDto` object.\n* `amenityDto.setAmenityId(amenityId)`: sets the ID of the amenity to be updated in the `AmenityDto` object.\n* `boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto)`: updates the amenity in the database using the `amenitySDJpaService`.\n* `return ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: returns a response entity with a status code of `NO_CONTENT` if the update was successful.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must be valid according to the schema defined in the Java classes and JSON Schema files.\n* `@RequestBody`: Represents the input request body as a single entity, which can be a document or an object.\n* `UpdateAmenityRequest`: The class that represents the request body, which contains attributes for updating an amenity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and the amenity was updated without any issues.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found with the provided `amenityId`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n",
              "description": "\nThe example above shows how the method updateAmenity would be used, specifically by setting the path variable 'amenityId' to a specific string value and passing an UpdateAmenityRequest object as the request body parameter. The method would then use the amenityApiMapper class to map the UpdateAmenityRequest object to an AmenityDto object before calling the updateAmenity method of the AmenitySDJpaService, which updates the specific amenity with the specified id in the database. \nThe example returns a ResponseEntity<Void> with HttpStatus.NO_CONTENT if the update was successful and HttpStatus.NOT_FOUND otherwise."
            },
            "name": "updateAmenity",
            "code": "@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AuthenticationController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"domain\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        AuthenticationData\n    }\n    edge [color=\"#26de81\"]\n    AuthenticationData -> AuthenticationController \n}\n",
        "items": [
          {
            "id": "31bcd5e2-936a-34bc-774a-0f2e02cc5edf",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring REST controller that implements the AuthenticationApi interface. It logs in a user using an authentication service and returns an HTTP response with the user's ID and JWT token.",
            "name": "AuthenticationController",
            "code": "@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  \n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 23,
            "docLength": null,
            "doc": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."
          },
          {
            "id": "c2c45cf2-7a0b-3293-fe4a-f4dd8077d8cc",
            "ancestors": [
              "31bcd5e2-936a-34bc-774a-0f2e02cc5edf"
            ],
            "type": "function",
            "description": "verifies a user's credentials and logs them into the system, returning a successful response with headers containing information about the user's authentication state.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request sent by the user to the server for authentication processing, containing the necessary credentials and other information required for successful login.\n\n* `@Valid`: The input is validated by the `@Validation` annotation.\n* `LoginRequest`: The class representing the request body for login.\n* `authenticationService`: A service used to perform authentication tasks.\n* `AuthenticationData`: An object containing data related to authentication.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing an `OK` status and headers generated based on the `AuthenticationData` result.\n\n* `ResponseEntity`: This is the class that represents the response entity, which contains information about the login request and its outcome.\n* `ok()`: This method returns a ResponseEntity with a status code of 200 (OK), indicating that the login request was successful.\n* `headers(createLoginHeaders(authenticationData))`: The `createLoginHeaders` method creates a new set of headers that contain information about the authentication data, such as the user's ID and email address. These headers are added to the response entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n",
              "description": ""
            },
            "name": "login",
            "code": "@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null,
            "doc": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."
          },
          {
            "id": "ffad96e0-fab4-d591-ab4a-4fdf6c91cadb",
            "ancestors": [
              "31bcd5e2-936a-34bc-774a-0f2e02cc5edf"
            ],
            "type": "function",
            "description": "creates HTTP headers with user ID and JWT token for authentication purposes based on the input `AuthenticationData`.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user's login details, providing the user ID and JWT token for authentication purposes.\n\n* `getUserId()` retrieves the user ID from the input data.\n* `getJwtToken()` retrieves the JWT token from the input data.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "a HTTP headers object containing the user ID and JWT token of the authenticated user.\n\n* `httpHeaders`: This is an instance of the `HttpHeaders` class, which represents a collection of HTTP headers.\n* `userId`: The value of this property is a string representing the user ID associated with the authentication data.\n* `token`: The value of this property is a string representing the JWT token issued to the user for authentication purposes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Example{\n    public static void main(String[] args) {\n        AuthenticationData authenticationData = new AuthenticationData();\n        HttpHeaders headers = createLoginHeaders(authenticationData);\n        System.out.println(\"User ID: \" + headers.getFirst(\"userId\"));\n        System.out.println(\"JWT Token: \" + headers.getFirst(\"token\"));\n    }\n}\n",
              "description": ""
            },
            "name": "createLoginHeaders",
            "code": "private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null,
            "doc": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A `BookingController` class that implements the `BookingsApi` interface. The controller handles delete booking request by calling the `deleteBooking()` method of the `BookingService` class, which is injected through dependency injection. The method returns a `ResponseEntity` object with a status code indicating whether the booking was successfully deleted or not.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9ed5ed66-42f6-98a0-934d-f3209f354f01",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "BookingController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class BookingController implements BookingsApi {\n\n  private final BookingService bookingSDJpaService;\n\n  @Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 18
          },
          {
            "id": "ef180a5e-776f-f19a-5e41-75931d014428",
            "ancestors": [
              "9ed5ed66-42f6-98a0-934d-f3209f354f01"
            ],
            "type": "function",
            "description": "deletes a booking based on its amenity ID and ID, returning a HTTP response code indicating the outcome of the operation.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of an amenity for which a booking is to be deleted.\n\n* `amenityId`: A String representing the ID of an amenity.\n\nThe function uses the `bookingSDJpaService.deleteBooking(amenityId, bookingId)` method to delete a booking. The method takes two path variables, `amenityId` and `bookingId`, as input. If the booking is successfully deleted, a `HttpStatus.NO_CONTENT` response is returned. Otherwise, a `HttpStatus.NOT_FOUND` response is returned.",
                "complex_type": true
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "ID of the booking to be deleted.\n\n* `amenityId`: The ID of the amenity associated with the booking to be deleted.\n* `bookingId`: The unique identifier of the booking to be deleted.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted.\n\n* `isBookingDeleted`: A boolean value indicating whether the booking was successfully deleted or not.\n* `HttpStatus`: The HTTP status code of the response entity, which is either `NO_CONTENT` or `NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class BookingControllerTest {\n  @Autowired\n  private MockMvc mockMvc;\n\n  @MockBean\n  private BookingService bookingSDJpaService;\n\n  @Test\n  public void testDeleteBooking() throws Exception {\n    String amenityId = \"123\";\n    String bookingId = \"456\";\n\n    // Mock the deleteBooking method to return true\n    when(bookingSDJpaService.deleteBooking(amenityId, bookingId)).thenReturn(true);\n\n    // Call the deleteBooking method with the given parameters\n    mockMvc.perform(delete(\"/api/bookings/{amenityId}/{bookingId}\", amenityId, bookingId))\n      .andExpect(status().isNoContent());\n  }\n}\n",
              "description": "\nIn this test class, we use Mockito to mock the BookingService class and override the deleteBooking method. We then pass in a value for the path variables and assert that the response has a status code of HttpStatus.NO_CONTENT."
            },
            "name": "deleteBooking",
            "code": "@Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "An API endpoint for managing communities in a web application. The API handles various operations such as listing all communities, listing community details, adding admins and houses to a community, removing admins and houses from a community, and deleting a community. The code uses Spring WebFlux as the web framework, and Spring Data JPA as the data access layer. It also utilizes various Spring packages for security, configuration, and validation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9984ba99-3ce6-47b3-e249-bca0c79f98ee",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityController",
            "code": "@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 152
          },
          {
            "id": "93b9434d-8336-e187-8745-96b518bc263d",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a request to create a new community, maps it to a `CreateCommunityRequestDto`, creates a new community using the mapped data, and returns the resulting `CreateCommunityResponse`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object passed from the client, containing the details of the community to be created.\n\nThe `@Valid` annotation on the `CreateCommunityRequest` parameter indicates that the request body must be validated against the specified schema.\n\nThe `log.trace()` statement logs a trace message indicating that the create community request has been received.\n\nThe `communityApiMapper.createCommunityRequestToCommunityDto(request)` method is used to map the request body to a `CommunityDto` object, which represents the community in a more structured format.\n\nThe `communityService.createCommunity(requestCommunityDto)` method creates a new community instance using the data provided in the `CommunityDto`.\n\nFinally, the `communityApiMapper.communityToCreateCommunityResponse(createdCommunity)` method maps the created community instance to a `CreateCommunityResponse` object, which represents the response to the create community request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the created community details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. In this case, the status code of the response is `HttpStatus.CREATED`, indicating that the community has been created successfully.\n* `body`: This property contains the actual response entity, which in this case is a `CreateCommunityResponse` object. This object contains information about the newly created community, such as its ID, name, and description.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityApiController communityApiController;\n\n...\n\nCreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"Example Community\");\nrequest.setDescription(\"Example Description\");\n\nCreateCommunityResponse response = communityApiController.createCommunity(request);\n\nassertEquals(HttpStatus.CREATED, response.getStatusCode());\n",
              "description": "\nThe request is created with the name and description of \"Example Community\" and \"Example Description\". The community is then created using the createCommunity method in the controller. \n\nNote that the status code returned by the createCommunity method should be equal to HttpStatus.CREATED. This means that a new community has been successfully created, which can be verified by checking the status code of the response object. The response object contains the details of the newly created community, such as its ID and name."
            },
            "name": "createCommunity",
            "code": "@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "d53ae619-a9b8-609d-c147-036537e00ec9",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a `Pageable` object as input, and retrieves all community details from the service. It then maps the community details to a REST API response format using an API mapper, before returning the response in HTTP OK status with the list of communities.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size for listing all communities, allowing for pagination of results.\n\n* `@PageableDefault(size = 200)`: This annotation sets the default page size to 200.\n* `Pageable pageable`: This is the input parameter for the function, which represents a pagination object that allows for retrieving a subset of community details based on various criteria such as page number, page size, sort order, and filter parameters.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetCommunityDetailsResponse",
              "description": "a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This is the class that represents the response to the API call. It has a list of `Community` objects as its attribute.\n* `communities`: This is a list of `Community` objects, which are the result of mapping the `communityService.listAll(pageable)` method output to the `GetCommunityDetailsResponseCommunitySet`.\n* `HttpStatus.OK`: This is the HTTP status code returned by the API, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// assuming Pageable object pageable has been instantiated earlier\nResponseEntity<GetCommunityDetailsResponse> response = communityApiController.listAllCommunities(pageable);\nif (response.getStatusCode() == HttpStatus.OK) {\n    // do something with the community details\n} else {\n    log.warn(\"Failed to retrieve community details: {}\", response.getBody().toString());\n}\n",
              "description": "\nExplanation:\nThe method `listAllCommunities` is a GET request that takes in a `Pageable` object called `pageable`. This object is used to specify the page number and page size of the results. The method returns a `ResponseEntity<GetCommunityDetailsResponse>` which has an HTTP status code and a body containing the community details.\n\nThe example retrieves the community details using the `listAllCommunities` method and checks if the HTTP status code is 200 (OK). If the response is not OK, a warning message is logged. The community details are then used to perform some actions on the page."
            },
            "name": "listAllCommunity",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 14
          },
          {
            "id": "15370c22-6600-3fa7-c64c-0aa429ad1318",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a community ID and retrieves the corresponding community details from the service, mapping the response to a `GetCommunityDetailsResponse` object and returning it as an `Ok` response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which details are to be retrieved.\n\n* `log.trace(\"Received request to get details about community with id[{}]\", communityId)`: This line logs a message indicating that a request has been received to retrieve details about a community with the specified `communityId`.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` parameter is passed in from the URL path and can be accessed as a string variable within the function.\n* `communityService.getCommunityDetailsById(communityId)`: This line calls the `getCommunityDetailsById` method of the `communityService` class, which retrieves the details of a community with the specified `communityId`.\n* `map(communityApiMapper::communityToRestApiResponseCommunity)`: This line applies the `communityApiMapper` function to the result of the previous line, which maps the community object to a `GetCommunityDetailsResponse` object.\n* `map(Arrays::asList)`: This line converts the mapped result to a list of communities.\n* `map(HashSet::new)`: This line creates a new `HashSet` instance to hold the lists of communities.\n* `map(communities -> new GetCommunityDetailsResponse().communities(communities))`: This line applies the `communities` variable to the `GetCommunityDetailsResponse` object, setting the `communities` field to the list of communities retrieved.\n* `map(ResponseEntity::ok) OrElseGet(() -> ResponseEntity.notFound().build())`: This line either returns a `ResponseEntity` with status code 200 (OK) or creates a new `ResponseEntity` with status code 404 (NOT FOUND) if an error occurs.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetCommunityDetailsResponse",
              "description": "a `ResponseEntity` object with a status of `ok` and a list of community details.\n\n* `ResponseEntity<GetCommunityDetailsResponse>` is a class that represents a response entity containing the details of a community.\n* `getCommunityDetailsById(communityId)` is a method that returns a `Optional<GetCommunityDetailsResponse>` object, which contains the details of the community with the provided `communityId`, if it exists.\n* `map(Function<? super T, ? extends U> mapper)` is a method that takes a function `mapper` and applies it to the `Optional` object returned by `getCommunityDetailsById`. The resulting `U` object is then wrapped in a `ResponseEntity` object.\n* `map(Consumer<T> consumer)` is another method that takes a consumers `consumer` and applies it to the `Optional` object returned by `getCommunityDetailsById`. The resulting `U` object is then wrapped in a `ResponseEntity` object.\n* `orElseGet(() -> ResponseEntity.notFound().build())` is a method that returns an optional `ResponseEntity` object if the `Optional` object returned by `getCommunityDetailsById` is empty, otherwise it returns a `ResponseEntity` object with a status code of 404 (Not Found).\n\nOverall, the `listCommunityDetails` function returns a response entity containing the details of the community with the provided `communityId`, or a response entity with a status code of 404 if the community does not exist.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityService communityService;\n\n// Example usage\npublic void example() {\n  String communityId = \"12345\";\n  ResponseEntity<GetCommunityDetailsResponse> responseEntity =\n      communityService.listCommunityDetails(communityId);\n  if (responseEntity.getStatusCode().equals(HttpStatus.OK)) {\n    GetCommunityDetailsResponse response = responseEntity.getBody();\n    Community community = response.getCommunities().iterator().next();\n    log.info(\"The name of the first community is: {}\", community.getName());\n  } else {\n    log.error(\"Failed to retrieve details for community with id[{}]\", communityId);\n  }\n}\n",
              "description": "\nIn this example, the method listCommunityDetails() takes in a String argument representing a community ID and returns a ResponseEntity<GetCommunityDetailsResponse> object. The body of the ResponseEntity object contains a GetCommunityDetailsResponse object, which has a List<Community> called communities. In order to get the first community from the response entity, we can call iterator() on the list of communities. We then retrieve the first community by calling next() and store it in the variable community. We log the name of this community by using its getName() method.\nPlease note that this example is only intended for illustration purposes. This code should be unit tested and validated to ensure that it works correctly. It should not be used directly."
            },
            "name": "listCommunityDetails",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "cdd88647-5b57-978b-e547-c66d4394466a",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a community ID and page number, retrieves the list of admins for that community from the database using the `findCommunityAdminsById` method, maps the results to a `RestApiResponseCommunityAdminSet`, and returns a `ResponseEntity` with the list of admins.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which the list of admins is being requested.\n\n* `communityId`: This is the primary key for the community table. It is a String representing the ID of the community.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "paging information for the list of community admins, including the page number and size, which are used to retrieve a subset of the admins from the database.\n\n* `@PageableDefault(size = 200)` - Specifies the default page size for the list of community admins, which is set to 200 in this example.\n* `Pageable pageable` - Represents a pagination object that can be used to page the results of the list operation. It has various properties such as `size`, `pageNumber`, and `sort`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a `ListCommunityAdminsResponse` object with the listed admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the type of the output, which represents an entity that contains the list of community admins in a response.\n* `ListCommunityAdminsResponse`: This is the inner class of the `ResponseEntity`, which contains the list of community admins in a response.\n* `admins`: This is a field of the `ListCommunityAdminsResponse` class, which represents the list of community admins. It is a non-nullable reference to a list of `CommunityAdmin` objects.\n* `ok`: This is a field of the `ResponseEntity` class, which indicates whether the response is successful or not. If the response is successful, this field will be set to `true`, otherwise it will be set to `false`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListCommunityAdminsResponse> response = communityApiController.listCommunityAdmins(\n    \"community_id\", PageableDefault.ofSize(200));\n",
              "description": "\n1. The first parameter is the id of the community whose admins we want to list.\n2. The second parameter is the paging parameters for the method, which includes the number of items per page and the current page number.\n3. The method returns a response entity that wraps the list of admins in the ListCommunityAdminsResponse object.\n4. If the community with the given id does not exist, then the response will contain no admins and a 204 status code indicating \"no content\" (HTTP Status 204).\n5. If there is an error during the execution of this method, then the response will contain an empty list of admins and a non-2xx HTTP status code indicating failure.\n6. The paging parameters are used to paginate the result set of this query. For example, if we have 100 admins in our community and we want to retrieve them in 5 page chunks with 20 items per page, then we can use the following request:\n"
            },
            "name": "listCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "40e03388-b40e-ee8f-8e47-1e9c9ce0802d",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a community ID and page number, queries the community service for all houses associated with that community, maps them to a HashSet, and then transforms them into a REST API response using the `communityApiMapper`. The final response is an `Ok` status code.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community for which the user wants to list all houses.\n\n* `String communityId`: This is the unique identifier for the community whose houses will be listed.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` parameter is passed through the URL path and can be accessed as a String value within the function.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page parameters for the list of houses, such as the number of houses to display per page and the current page number.\n\n* `size`: The page size, which is 200 in this case.\n* `sort`: The sorting direction and field for the community houses list, which is not specified here.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object of type `GetHouseDetailsResponse` containing a list of community houses.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the type of the output returned by the function. It represents an entity that contains a response to the list community houses request.\n* `GetHouseDetailsResponse`: This is a class that defines the properties and attributes of the response. It has a field called `houses` that is a set of `CommunityHouse` objects, representing the list of houses for the specified community.\n* `CommunityHouse`: This is a class that defines the properties and attributes of each house in the list. It has fields for the house ID, name, and other relevant details.\n* `Pageable`: This is an interface that provides methods for navigating through a page of results. In this case, it is used to define the page size and other parameters for pagination.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n    @PathVariable String communityId,\n    @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n@Service\npublic class CommunityService {\n    @Autowired private CommunityRepository communityRepository;\n\n    public Optional<Community> findCommunityHousesById(String communityId, Pageable pageable) {\n        return communityRepository.findAllByHouseId(communityId, pageable);\n    }\n}\n",
              "description": "\nThe above code is an example of how the service method listCommunityHouses would be used in a controller class with the appropriate annotation and parameters:\n"
            },
            "name": "listCommunityHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "868c8320-60ef-f3b2-f141-a351208a6de1",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "adds admins to a community based on a request received from the client. It first checks if the community exists, and then adds the requested admins to the community's admin list using the `communityService`. If successful, it returns a `ResponseEntity` with a `HttpStatus.CREATED` code and the updated admin set.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the admins are being added.\n\n* `communityId`: A string representing the ID of the community to which admins are being added.\n* `@PathVariable`: An annotation indicating that the `communityId` is passed as a path variable from the URL.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the admins to be added to the community, which is passed into the communityService method for adding admins to the community.\n\n* `@Valid`: This annotation indicates that the `AddCommunityAdminRequest` object must be valid according to its schema definition.\n* `@PathVariable String communityId`: This variable represents the ID of the community for which admins are being added.\n* `@RequestBody AddCommunityAdminRequest request`: This variable contains the `AddCommunityAdminRequest` object passed from the client as a JSON body in the HTTP request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityAdminResponse",
              "description": "a `ResponseEntity` with a `HttpStatus.CREATED` code and an `AddCommunityAdminResponse` object containing the set of admins for the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web request. The `status` attribute of this class indicates the HTTP status code of the response, while the `body` attribute contains the actual response data.\n* `HttpStatus`: This is an enum that represents the HTTP status code of the response. In this case, it can be either `CREATED` or `NOT_FOUND`.\n* `AddCommunityAdminResponse`: This is a custom class that represents the response to the `addAdminsToCommunity` method. It has an `admins` field that contains a set of user IDs, representing the admins added to the community.\n* `Set<String>`: This is a set data structure that contains the user IDs of the admins added to the community. Each element in the set is a `String` representing a user ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AddCommunityAdminRequest request = new AddCommunityAdminRequest();\nrequest.setAdmins(List.of(\"1234\", \"5678\"));\nResponseEntity<AddCommunityAdminResponse> response = communityApiController.addCommunityAdmins(\n    \"community-id\", request);\n",
              "description": "\nHere, we create an AddCommunityAdminRequest object and set its admins field to a list of user IDs. We then use the addCommunityAdmins method to add those users as administrators to a community with ID \"community-id\". The response from this method is stored in the response variable. \nIt's important to note that, even though we create an object and set its fields to specific values, it's not guaranteed that our code will always work correctly. For instance, if there are invalid characters or spaces in any of the strings passed as user IDs, this could lead to errors when the service tries to process the request. Therefore, it's crucial to test our code thoroughly before releasing it to production."
            },
            "name": "addCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "c77b9b74-f502-6b8d-d844-f23f3d67bb51",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a request to add houses to a community, extracts the house IDs and names from the request body, adds the houses to the community using the community service, and returns the added houses in a response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the houses are being added.\n\n* `communityId`: A string representing the ID of the community to which houses will be added.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddCommunityHouseRequest",
                "description": "AddCommunityHouseRequest object containing the house names to be added to the community.\n\n* `@Valid`: Indicates that the request body must be valid according to the constraints defined in the Java classes or annotations.\n* `@PathVariable`: Specifies that the `communityId` parameter is passed as a path variable from the URL.\n* `@RequestBody`: Indicates that the entire `AddCommunityHouseRequest` object should be deserialized and used as the request body.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityHouseResponse",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a `AddCommunityHouseResponse` object containing the newly added houses.\n\n* `AddCommunityHouseResponse`: This class represents the response to the API request. It has a single field, `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: This is an enumeration that indicates the status code of the response. In this case, it can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This class represents the overall response object, which contains the status code and body (in this case, the `AddCommunityHouseResponse`).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityApiController communityApiController;\n\n// ...\n\nAddCommunityHouseRequest request = new AddCommunityHouseRequest();\nrequest.setHouses(new HashSet<>() {{\n    add(new CommunityHouseName(\"house1\"));\n    add(new CommunityHouseName(\"house2\"));\n}});\n\nResponseEntity<AddCommunityHouseResponse> response = communityApiController.addCommunityHouses(\"community_id\", request);\n",
              "description": "\nIn this example, the method is called with a \"communityId\" of type String, and an instance of AddCommunityHouseRequest as its second argument. The method returns an object of ResponseEntity of type AddCommunityHouseResponse. The body of the response entity contains a Set of Strings representing house IDs that were successfully added to the community. If there are no houses in the request or no communities exist with the provided ID, the status code returned will be BAD_REQUEST and the body of the response entity will be empty."
            },
            "name": "addCommunityHouses",
            "code": "@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }",
            "location": {
              "start": 149,
              "insert": 149,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 17
          },
          {
            "id": "8d7a42eb-52b5-5aa0-ba41-f311cd624657",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "receives a request to delete a house from a community and performs the necessary actions to remove it, including checking the existence of the community and the house, and returning a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the house belongs, which is used to retrieve the details of the community and remove the house from it.\n\n* `communityId`: A string representing the unique identifier for a community.\n* `houseId`: A string representing the unique identifier for a house within a community.",
                "complex_type": true
              },
              {
                "name": "houseId",
                "type_name": "String",
                "description": "12-digit unique identifier of the house to be deleted within the specified community.\n\n* `communityId`: The ID of the community that the house belongs to.\n* `houseId`: The ID of the house to be removed from the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a `ResponseEntity` object representing a successful removal of the house from the specified community.\n\n* `ResponseEntity<Void>`: The type of the output is a response entity with a Void value.\n* `<Void>`: The value of the ResponseEntity is Void, indicating that no content was returned.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line explains that if the `communityOptional` Optional is empty, the output will be a ResponseEntity with a Not Found status code (404).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n",
              "description": "\nHere is an explanation of the code:\n"
            },
            "name": "removeCommunityHouse",
            "code": "@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 167,
              "insert": 167,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 15
          },
          {
            "id": "cd9bc1e0-500d-a496-cc40-bb3c06f90803",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "removes an admin from a community based on their ID, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the admin is to be removed.\n\n* `communityId`: This parameter represents the unique identifier for a community in the system. It is an immutable string value.",
                "complex_type": true
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin to be removed from the community.\n\n* `communityId`: A string representing the ID of the community to remove the admin from.\n* `adminId`: A string representing the ID of the admin to be removed from the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the admin was successfully removed or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and resulted in no content being sent to the client. It is a common status code for delete operations, as there is no content to return.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested admin could not be found in the community. This can happen if the admin ID is invalid or if the admin does not exist in the community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void testRemoveAdminFromCommunity() {\n  // Arrange\n  String communityId = \"community-1\";\n  String adminId = \"admin-1\";\n\n  // Act\n  ResponseEntity<Void> response = removeAdminFromCommunity(communityId, adminId);\n\n  // Assert\n  assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n}\n",
              "description": ""
            },
            "name": "removeAdminFromCommunity",
            "code": "@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 183,
              "insert": 183,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "9bbad6f5-9a1f-bc92-1547-2037cf0f7e88",
            "ancestors": [
              "9984ba99-3ce6-47b3-e249-bca0c79f98ee"
            ],
            "type": "function",
            "description": "deletes a community identified by its ID. It uses the `communityService` to delete the community and returns an HTTP response based on whether the deletion was successful or not.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to be deleted.\n\n* `communityId`: This is the unique identifier for a community within the application's database.\n* `log.trace(\"Received delete community request\")`: This line logs a message to the application's log system indicating that a delete community request has been received.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* HttpStatus: The status code of the response entity, which indicates whether the request was successful (NO_CONTENT) or not found (NOT_FOUND).\n* Void: The type of the response entity, indicating that it does not contain any data.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class CommunityControllerTest {\n  @Test\n  void deleteCommunity() {\n    // Arrange\n    CommunityService communityService = new CommunityService();\n    String id = \"1234567890\";\n    communityService.deleteCommunity(id);\n\n    // Act\n    boolean isDeleted = communityService.getCommunityDetailsById(id).isEmpty();\n\n    // Assert\n    assertTrue(isDeleted);\n  }\n}\n",
              "description": ""
            },
            "name": "deleteCommunity",
            "code": "@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 197,
              "insert": 197,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "A `HouseController` class that implements the `HousesApi` interface. It provides methods for listing all houses, getting details of a specific house, and adding or deleting members of a house. The controller uses dependency injection to inject `HouseService`, `HouseMemberMapper`, and `HouseApiMapper` instances.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "a1e7cd2a-3497-b391-9248-37998703a215",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "HouseController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class HouseController implements HousesApi {\n  private final HouseMemberMapper houseMemberMapper;\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 81
          },
          {
            "id": "b133b7f2-f03d-9f99-2c41-599ae9cd3643",
            "ancestors": [
              "a1e7cd2a-3497-b391-9248-37998703a215"
            ],
            "type": "function",
            "description": "receives a pageable parameter and returns a list of houses along with their corresponding response in GetHouseDetailsResponse format.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "paging information for the list of houses, including the page number, size, and total count, which are used to retrieve the desired portion of the house list from the database or API.\n\n* `@PageableDefault(size = 200)`: This annotation indicates that the `pageable` parameter should be deserialized with a default value of `200`.\n* `Pageable`: This is an interface in Java that represents a pageable view of a collection of objects. It provides methods for navigating through the collection, such as `getNumberOfElements()` and `getTotalPages()`.\n* `size`: This property represents the number of elements to be displayed on each page.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a response entity with a list of houses.\n\n* `setHouses`: A set of `GetHouseDetailsResponseCommunityHouseSet` objects, which represent the list of houses retrieved from the database.\n* `HttpStatus.OK`: The HTTP status code of the response, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<GetHouseDetailsResponse> listAllHouses(Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n}\n",
              "description": ""
            },
            "name": "listAllHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "18202c10-0c10-adb1-f048-6ec73d7be77f",
            "ancestors": [
              "a1e7cd2a-3497-b391-9248-37998703a215"
            ],
            "type": "function",
            "description": "receives a `houseId` parameter and makes a call to the `houseService` to retrieve house details. It then maps the result to a `GetHouseDetailsResponse` object and returns it as an `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which details are requested, and is used to retrieve the relevant details from the `houseService`.\n\n* `log.trace(\"Received request to get details of a house with id[{}],\"` - This line logs a trace message indicating that a request has been received to retrieve details of a particular house with its ID.\n* `houseService.getHouseDetailsById(houseId)` - This line calls the `getHouseDetailsById` method of the `houseService` class, passing in the `houseId` as a parameter. This method retrieves the details of a specific house based on its ID.\n* `map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)` - This line applies a mapping using the `houseApiMapper` object, which converts the community house returned by the `getHouseDetailsById` method into a `GetHouseDetailsResponse` object.\n* `map(Collections::singleton)` - This line applies a mapping to singularize the response, meaning that only one house will be included in the response.\n* `map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))` - This line applies another mapping, this time creating a new `GetHouseDetailsResponse` object and setting its `houses` field to the `communityHouse` object returned by the previous mapping.\n* `map(ResponseEntity::ok) .orElse(ResponseEntity.notFound().build());` - This line applies a mapping that either returns an `OK` response entity or creates a `Not Found` response entity if the house with the provided ID cannot be found.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetHouseDetailsResponse",
              "description": "a `ResponseEntity` object with a status code of `ok` and a list of house details in the body.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring WebFlux. It represents an HTTP response with a status code and a body.\n* `ok`: This is a subclass of `ResponseEntity` that indicates a successful response with a 200 status code.\n* `houses`: This is a list of `CommunityHouse` objects, which represent the details of the houses returned by the function. Each house object has attributes such as `id`, `name`, `address`, and `capacity`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String houseId = \"house123\";\nResponseEntity<GetHouseDetailsResponse> responseEntity = getHouseDetails(houseId);\nif (responseEntity.getStatusCode() == HttpStatus.OK) {\n    GetHouseDetailsResponse response = responseEntity.getBody();\n    List<CommunityHouse> houses = response.getHouses();\n    for (CommunityHouse house : houses) {\n        System.out.println(house);\n    }\n} else {\n    System.out.println(\"Failed to get details of house\");\n}\n",
              "description": ""
            },
            "name": "getHouseDetails",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "6f364dab-c102-e4b4-fb43-125665bfbda6",
            "ancestors": [
              "a1e7cd2a-3497-b391-9248-37998703a215"
            ],
            "type": "function",
            "description": "retrieves all members of a house with a given ID and returns them as a list of `HouseMember` objects in a `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which the members are to be listed.\n\n* `houseId`: This is the unique identifier for the house to which members will be listed. It could be an integer or a String.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the page number and the number of elements per page, that allows for pagination of the house members list.\n\n* `size`: The page size, which specifies the number of members to be returned in each page.\n* `@PageableDefault(size = 200)`: This annotation sets the default page size to 200 when no other page size is provided.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityListHouseMembersResponse",
              "description": "a `ResponseEntity` object containing a list of `HouseMember` objects in a JSON format.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring Web. It represents an immutable HTTP response message.\n* `ok`: This is a boolean value indicating whether the response was successful (true) or not (false).\n* `ListHouseMembersResponse`: This is a custom response class that contains a list of `HouseMember` objects.\n* `members`: This is a list of `HouseMember` objects, which are the actual members of the house being listed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\n\npublic class HouseControllerExample {\n  public static void main(String[] args) {\n    String houseId = \"some-house-id\"; // Replace with a valid house ID\n    Pageable pageable = new PageableDefault(200); // Set the size of the page to be returned\n    \n    HouseController houseController = new HouseController();\n    ResponseEntity<ListHouseMembersResponse> response =\n      houseController.listAllMembersOfHouse(houseId, pageable);\n    \n    List<HouseMember> members = response.getBody().getMembers();\n  }\n}\n",
              "description": ""
            },
            "name": "listAllMembersOfHouse",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 79,
              "insert": 79,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "d64fbd6f-64d7-659b-e841-025cb810efe5",
            "ancestors": [
              "a1e7cd2a-3497-b391-9248-37998703a215"
            ],
            "type": "function",
            "description": "adds new members to a house based on a request received as a DTO object, and returns the updated list of members in a REST API response format.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house to which the members will be added.\n\n* `houseId`: A string representing the unique identifier for a house.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object containing the member details to be added to the specified house, which is used to perform the actual addition of members to the house in the function.\n\n* `houseId`: The ID of the house to which members will be added.\n* `request.getMembers()`: A set of `HouseMemberDTO` objects representing the new members to be added to the house.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object containing the updated member list for the specified house.\n\n* `AddHouseMemberResponse`: This class represents the response to the API request to add members to a house. It contains a list of `HouseMember` objects, which are converted from the `Set<HouseMember>` returned by the `addHouseMembers` function.\n* `Members`: This attribute is a list of `HouseMember` objects, representing the added members to the house.\n* `size`: This attribute represents the number of members added to the house.\n\nThe output of the `addHouseMembers` function can be destructured as follows:\n\n* If the `savedHouseMembers` set is empty and the `request.getMembers()` set is not empty, the response will have a status code of `NOT_FOUND`.\n* Otherwise, the response will have a status code of `CREATED` and contain a list of `HouseMember` objects in the `Members` attribute.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n    // TODO: implement method body\n}\n",
              "description": ""
            },
            "name": "addHouseMembers",
            "code": "@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 18
          },
          {
            "id": "22876b22-d79b-dd96-ba45-ad77aadecf9f",
            "ancestors": [
              "a1e7cd2a-3497-b391-9248-37998703a215"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the provided house ID and member ID, returning a HTTP response indicating the result of the operation.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house for which a member is being deleted.\n\n* `houseId`: A string representing the unique identifier for a house. It could be a UUID or any other distinct identifier assigned to the house.",
                "complex_type": true
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.\n\n* `houseId`: A string representing the unique identifier for a house.\n* `memberId`: A string representing the unique identifier for a member within a house.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP `NO_CONTENT` status code if the member was successfully deleted, otherwise a `NOT_FOUND` status code.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the member was successfully deleted from the house.\n* `HttpStatus.NOT_FOUND`: This indicates that the member could not be found in the house, likely because it does not exist or has been deleted by someone else.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\", \n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}\n",
              "description": ""
            },
            "name": "deleteHouseMember",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "A REST controller that provides endpoints for managing house member documents. The controller uses Spring WebFlux and Lombok to handle HTTP requests and generate boilerplate code, respectively. The controller has several methods: getHouseMemberDocument, uploadHouseMemberDocument, updateHouseMemberDocument, and deleteHouseMemberDocument. These methods handle requests for retrieving, adding, updating, and deleting house member documents, respectively.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0c076d70-9e88-9da5-024d-6550990cf9fd",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "HouseMemberDocumentController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 66
          },
          {
            "id": "1ba1040f-9f1b-d1bd-be40-e4bcb31c16cc",
            "ancestors": [
              "0c076d70-9e88-9da5-024d-6550990cf9fd"
            ],
            "type": "function",
            "description": "retrieves a House Member Document based on the provided member ID and returns it as a byte array in the response entity, along with appropriate headers to set the content type and filename.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member whose house member document is being requested.\n\n* `log`: This is an instance of `org.slf4j.Logger`, which is used for logging purposes.\n* `houseMemberDocumentService`: This is a service that provides access to the house member document data.\n* `findHouseMemberDocument`: This is a method of the `houseMemberDocumentService` that retrieves a specific house member document based on its ID.\n* `memberId`: This is the input parameter passed to the `findHouseMemberDocument` method, which represents the ID of the house member for whom the document is being retrieved.\n* `document`: This is an instance of the `HouseMemberDocument` class, which contains information about the house member document, including its content and filename.\n* `content`: This is a field of the `document` object that represents the actual content of the document, which is returned in the response entity.\n* `headers`: This is an instance of `HttpHeaders`, which contains metadata about the response entity, such as its cache control and content type.\n* `ContentDisposition`: This is an instance of `ContentDisposition`, which contains information about how the response entity should be handled by the client, including its filename and whether it should be displayed inline or not.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity containing the requested house member document as a byte array.\n\n* The `HttpHeaders` object represents the HTTP headers for the response, which include cache control and content type information.\n* The `byte[]` variable represents the document content, which is a JPEG image in this case.\n* The `ContentDisposition` object represents the content disposition of the response, which includes the filename of the document.\n* The `ResponseEntity` object is a class that represents the HTTP response, which contains the status code and headers of the response. In this case, the status code is `OK`, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "getHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "e16a4104-49dd-b489-2942-bb8c49f84776",
            "ancestors": [
              "0c076d70-9e88-9da5-024d-6550990cf9fd"
            ],
            "type": "function",
            "description": "receives a request to add a member document, creates a new house member document using the received file, and returns a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the member whose document is being uploaded.\n\n* `memberId`: A string parameter representing the unique identifier of a member in the house.",
                "complex_type": true
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file that contains the document of a house member to be uploaded.\n\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: This parameter represents a file upload sent by the client as part of the HTTP request. The type `MultipartFile` indicates that it is a file uploaded through the multipart/form-data content type.\n* `log.trace(\"Received request to add house member documents\")` - This line logs a trace message indicating that the function has received a request to upload a house member document.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a status code of NO_CONTENT or NOT_FOUND, depending on whether the document was successfully uploaded or not.\n\n* `ResponseEntity`: This is an entity representing a response message, which can have a status code and a body. The status code indicates the result of the operation, while the body contains additional information, such as the uploaded document.\n* `HttpStatus`: This is an enum representing the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `build()`: This is a method that creates a new `ResponseEntity` object based on the input parameters. It returns a new entity with the specified status code and body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "uploadHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "53bd3f15-0f02-0aa2-bc40-41fd8c76ae36",
            "ancestors": [
              "0c076d70-9e88-9da5-024d-6550990cf9fd"
            ],
            "type": "function",
            "description": "updates an existing house member document with the provided `memberId` and `memberDocument`. If successful, it returns a `ResponseEntity` with status code `NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with status code `NOT_FOUND`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the house member whose document is being updated.\n\n* `memberId`: This is a string parameter that represents the unique identifier for a house member.\n* `@PathVariable`: This annotation indicates that the value of `memberId` is passed from the URL path.",
                "complex_type": true
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "MultipartFile containing the updated house member document to be processed by the `houseMemberDocumentService`.\n\n* `memberId`: The unique identifier for a house member.\n* `memberDocument`: A MultipartFile containing the updated house member document.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a status of NO_CONTENT or NOT_FOUND, depending on whether the update was successful or not.\n\n* `map`: This method maps the updated house member document to a `ResponseEntity` object with a status code of `HttpStatus.NO_CONTENT`.\n* `orElseGet`: This method provides an alternative way to return a `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND` if the `map` method returns `Optional.empty()`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "updateHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "81cbb6c3-ad0c-e5ae-1a4e-ae7acf0d4106",
            "ancestors": [
              "0c076d70-9e88-9da5-024d-6550990cf9fd"
            ],
            "type": "function",
            "description": "deletes a house member document based on the provided `memberId`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`. If unsuccessful, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is to be deleted.\n\n* `memberId`: This is the unique identifier for a member in the house.\n* `houseMemberDocumentService`: This is an instance of a service class that provides methods for managing house member documents.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `HttpStatus.NO_CONTENT` or `HttpStatus.NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* HttpStatus.NO_CONTENT: This status code indicates that the requested resource has been successfully deleted and no content was returned in the response.\n* HttpStatus.NOT_FOUND: This status code indicates that the specified member ID could not be found, and the document deletion operation failed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void testDeleteHouseMemberDocument() {\n    String memberId = \"member123\";\n    ResponseEntity<Void> response = houseMemberDocumentController.deleteHouseMemberDocument(memberId);\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n  }\n",
              "description": "\nHere's a quick breakdown of what this test does:\n\n1. The test creates a String variable `memberId` with the value \"member123\".\n2. The test calls the method deleteHouseMemberDocument() on the controller with the value of `memberId`.\n3. The test asserts that the status code of the response returned is HttpStatus.NO_CONTENT."
            },
            "name": "deleteHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "A REST controller for managing payments in a housing community. It provides endpoints for scheduling payments, listing payment details, and listing all member payments. It also provides an endpoint for listing all admin scheduled payments. The code uses several packages including Lombok, Spring Data JPA, Spring Web Flux, and Schedule Payment API Response Mapper.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6f1e4eef-ba01-e299-9344-f1e6c538cdde",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "PaymentController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 94
          },
          {
            "id": "defbd125-fc85-d387-4142-8e92d7abd671",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "receives a request to schedule a payment for a member of a community, checks if the user is an admin of the community house, and schedules the payment or returns a 404 status code if the user is not an admin.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "SchedulePaymentRequest object that contains information necessary to schedule a payment.\n\n* `request.getMemberId()`: The ID of the house member for whom payment is to be scheduled.\n* `request.getAdminId()`: The ID of the community admin who is authorizing the payment.\n\nIn summary, the function receives a `SchedulePaymentRequest` object as input, which contains information about the member and admin involved in scheduling the payment.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment information.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request. The `status` field indicates the HTTP status code of the response, while the `body` field contains the actual response data.\n* `HttpStatus`: This is the HTTP status code associated with the response, indicating whether the request was successful (e.g., 200 OK) or not (e.g., 404 Not Found).\n* `SchedulePaymentResponse`: This class represents the response to the `schedulePayment` function, which contains information about the scheduled payment.\n* `paymentResponse`: This is a field within the `SchedulePaymentResponse` class that contains the actual payment response data.\n\nThe various attributes of the `paymentResponse` object are as follows:\n\n* `status`: This indicates the status of the payment (e.g., scheduled, failed, etc.).\n* `id`: This is a unique identifier for the payment.\n* `amount`: This is the amount of the payment.\n* `dueDate`: This is the date on which the payment is due.\n* `paidDate`: This is the date on which the payment was made (if applicable).\n* `adminId`: This is the ID of the community admin who scheduled the payment.\n* `houseMemberId`: This is the ID of the house member for whom the payment was scheduled.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setMemberId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setAdminId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setCommunityId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setAmount(BigDecimal.valueOf(5));\nrequest.setDueDate(new Date());\n",
              "description": "\nIn the above example, we are creating a SchedulePaymentRequest object and setting the memberId, adminId, communityId, amount, and due date fields to some valid values. The method will then use these values to retrieve the relevant HouseMember, User, and Community objects from the database, perform checks on their validity, and proceed with scheduling the payment using the provided information.\n\nIt is important to note that the example above assumes that there are valid objects present in the database for the memberId, adminId, and communityId specified. If one or more of these values do not refer to a valid object, the method will throw an exception indicating such."
            },
            "name": "schedulePayment",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 25
          },
          {
            "id": "f888513d-af44-92b9-114f-f2038ab127ea",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "checks whether a specified User is an admin of a Community House by checking if the User's ID exists in the community House's list of admins.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "CommunityHouse object that is being checked for an admin role, and it provides the necessary context for the function to determine if the specified User is an admin of the community house.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, which likely has various attributes and methods related to managing a community house.\n* `getCommunity()`: This method returns a reference to the community associated with the `communityHouse` object.\n* `getAdmins()`: This method returns a list of User objects representing the admins of the community associated with the `communityHouse` object.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User for whom the method checks if they are an administrator of the CommunityHouse.\n\n* `CommunityHouse communityHouse`: This is an instance of the `CommunityHouse` class, which contains information about a community house.\n* `getAdmins()`: This method returns a list of `User` objects that represent the administrators of the community house.\n* `contains(admin)`: This method checks if the specified `User` object is present in the list of admins returned by `getAdmins()`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the specified user is an administrator of the community house.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class CommunityHouse {\n  private Community community;\n  // ... other fields\n}\n\npublic class Community {\n  private List<User> admins;\n  // ... other fields\n}\n\npublic class User {\n  private String userId;\n  // ... other fields\n}\n",
              "description": "\nGiven the above classes, here is an example usage of isUserAdminOfCommunityHouse:\n"
            },
            "name": "isUserAdminOfCommunityHouse",
            "code": "private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }",
            "location": {
              "start": 85,
              "insert": 85,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "82ed1850-124c-2b97-4747-bbedba3afb5f",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "retrieves payment details for a given ID and maps them to a `SchedulePaymentResponse`. It returns a `ResponseEntity` with the payment details or an error message if they do not exist.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "unique identifier for the payment for which details are requested.\n\nlog.trace(\"Received request to get details about a payment with id[{}]\", paymentId)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the payment details if the payment ID exists, or a `ResponseEntity.notFound()` object otherwise.\n\n* `ResponseEntity<SchedulePaymentResponse>`: This is the overall response object that contains the payment details as well as any additional information, such as error messages or HTTP status codes.\n* `paymentId`: The unique identifier for the payment being retrieved.\n* `paymentService`: An instance of the `PaymentService` class, which provides methods for interacting with the payment system.\n* `getPaymentDetails()`: A method that retrieves the payment details for the specified payment ID.\n* `map(Function<PaymentResponse, ResponseEntity<SchedulePaymentResponse>> mapper)`: This line applies a mapping function to the payment response object, which transforms it into a `ResponseEntity` object with an `ok` status code. The mapper function is defined as `schedulePaymentApiMapper::paymentToSchedulePaymentResponse`, which maps the payment response to a `SchedulePaymentResponse` object.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line provides an alternative value for the `ResponseEntity` object if the `getPaymentDetails()` method returns a `null` or an empty list. It creates a new `ResponseEntity` object with an `HTTP status code of 404 (Not Found)`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n}\n",
              "description": "\nIn this example, the listPaymentDetails method takes in a String paymentId and returns a ResponseEntity of type SchedulePaymentResponse. \nThe method first uses the paymentService to get details about the given paymentId using the getPaymentDetails method. The result is then mapped to an object of type Payment using schedulePaymentApiMapper::paymentToSchedulePaymentResponse. If this mapping operation results in a response of type ResponseEntity, it returns that response directly. If not, it maps the null value returned by the getPaymentDetails method to a ResponseEntity with status code NOT_FOUND."
            },
            "name": "listPaymentDetails",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "8033a785-eba2-e0b6-574a-cee10896fcde",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "retrieves the payments for a specific house member and maps them to a response entity.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the member for whom the payments are to be listed, and it is used to filter the payments returned by the function.\n\n* `log.trace()`: This line logs a message to the trace level indicating that a request has been received to list all payments for a specific member with the given `memberId`.\n* `paymentService.getHouseMember(memberId)`: This line retrieves a `PaymentService` object that represents the payment service used by the application. The method takes the `memberId` as an input and returns a `HouseMember` object representing the member for whom the payments are being listed.\n* `paymentService.getPaymentsByMember(memberId)`: This line retrieves a list of `Payment` objects that belong to the specified `memberId`. The method takes the `memberId` as an input and returns a list of `Payment` objects.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`: This line explains the mapping between the `Payment` object and the corresponding `RestApiResponse` object. The `schedulePaymentApiMapper` is an object that performs mappings between different objects, in this case, between `Payment` and `RestApiResponse`.\n* `new ListMemberPaymentsResponse().payments(memberPayments)`: This line creates a new instance of the `ListMemberPaymentsResponse` class and sets the `payments` field to the list of `Payment` objects returned by the previous mappings. The `payments` field is a list of `Payment` objects, each representing a payment made by or on behalf of the specified member.\n* `ResponseEntity.ok().build()`: This line creates a new instance of the `ResponseEntity` class with an `statusCode` of 200 (OK) and builds the response entity. The `ResponseEntity` class is a generic class that represents a response entity, which can be used to return responses from a web service.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of `Payment` objects.\n\n* `ResponseEntity<ListMemberPaymentsResponse>` is an entity that contains a list of member payments in JSON format.\n* `payments` is a list of `MemberPayment` objects, which represent the payments made by a house member.\n* `ListMemberPaymentsResponse` is a class that defines the structure of the response, including the list of member payments.\n* `orElseGet()` is a method that allows for the creation of a default response entity if the function fails to produce a valid response.\n* `map()` methods are used to transform the input data into the desired output format.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nSchedulePaymentApi schedulePaymentApi;\n\n// ...\n\nResponseEntity<ListMemberPaymentsResponse> response = schedulePaymentApi.listAllMemberPayments(\"memberId\");\n",
              "description": "\nThis is an example of how a method to list all the payments for a house member with the given id \"memberId\" would be used. It injects an instance of SchedulePaymentApi, which has been autowired into this controller class, and then calls the listAllMemberPayments method on it, passing in the string \"memberId\". The response entity returned by this method is then stored in the variable response.\n\nThis example assumes that the method has access to a SchedulePaymentApi instance through dependency injection. It also assumes that the \"memberId\" parameter represents a valid member id in the system. If not, it will throw an error and fail."
            },
            "name": "listAllMemberPayments",
            "code": "@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "ea53737a-b821-ebad-b146-1bdd7b579138",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "retrieves a list of payments scheduled by an admin based on their ID, checks if the admin is in the specified community, and returns a ResponseEntity with the list of payments or a NotFound response if the admin is not found in the community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community that the admin belongs to, which is used to filter the payments listed in the response.\n\n* `communityId`: This is the identifier for a community in the application. It could be an integer or a UUID.",
                "complex_type": true
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the administrator for whom the scheduled payments are being listed, and is used to filter the payments returned in the response.\n\n* `communityId`: The identifier of the community to which the admin belongs.\n* `adminId`: The identifier of the admin for whom scheduled payments are to be listed.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and size of the payment list that the user wants to view, allowing the function to return only the relevant payments for the given admin id.\n\n* `communityId`: A string representing the community ID.\n* `adminId`: A string representing the admin ID.\n* `isAdminInGivenCommunity`: A boolean indicating whether the given admin is in the specified community.\n\nThese properties are used to filter and retrieve payments scheduled by the admin with the given ID, as described in the function implementation.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPaymentsResponse",
              "description": "a `ListAdminPaymentsResponse` object containing the scheduled payments for the given admin and community.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin and community.\n* `pageInfo`: A `PageInfo` object containing information about the total number of payments, the number of payments in the current page, and the total number of pages.\n\nThe function first checks if the admin is present in the given community using the `isAdminInGivenCommunity` method. If the admin is present, it retrieves the scheduled payments for that admin using the `paymentService.getPaymentsByAdmin()` method. The payments are then mapped to an `AdminPaymentSet` using the `schedulePaymentApiMapper`, and the resulting set of `AdminPayment` objects is returned as the `payments` field of the response. Finally, the function returns a `ResponseEntity` object with the response body containing the `ListAdminPaymentsResponse`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = new PageRequest(0, 10); // PageRequest(page number, size)\nString communityId = \"some_community_id\";\nString adminId = \"admin_user_id\";\nListAdminPaymentsResponse response = schedulePaymentService.listAllAdminScheduledPayments(communityId, adminId, pageable);\nif (response.hasContent()) { // Check if there are any payments to return.\n    List<AdminPayment> adminPayments = response.getPayments(); // Get the list of AdminPayment objects from the response.\n    for (AdminPayment payment : adminPayments) {\n        System.out.println(\"Payment ID: \" + payment.getId()); // Print the payment ID.\n        System.out.println(\"House Member Name: \" + payment.getMember().getName()); // Print the name of the house member.\n    }\n} else {\n    System.out.println(\"No payments found.\"); // There are no payments to return, print a message indicating such.\n}\n",
              "description": "\nHere is an example on how method listAllAdminScheduledPayments could be tested:\n"
            },
            "name": "listAllAdminScheduledPayments",
            "code": "@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 22
          },
          {
            "id": "d8c42817-d02f-ee91-d24d-8585cfc67dcc",
            "ancestors": [
              "6f1e4eef-ba01-e299-9344-f1e6c538cdde"
            ],
            "type": "function",
            "description": "checks if a user is an admin in a given community by querying the community details and admins, then filtering the admins based on the user ID and returning a boolean value.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of a community for which the admin status is being checked.\n\n* `communityId`: This is an identifier for a community, which is a crucial attribute in determining the admin status.\n* `Community`: This class represents a community and contains attributes such as `id`, `name`, `description`, and `admins`.\n* `getAdmins()`: This method returns a list of admins for the given community.\n* `map()`: This method applies a transformation to the result of the original call, in this case, transforming the list of admins into a stream.\n* `orElseThrow()`: This method provides an alternative value if the result of the function is `null`.",
                "complex_type": true
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the user who is being checked for administration in the specified community.\n\n* `adminId`: A String representing the ID of an administrator in the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* The method returns a `Boolean` value indicating whether the specified `adminId` is an admin in the given `communityId`.\n* The return value is generated by combining three streams:\n\t+ The first stream is obtained from the `communityService` by calling `getCommunityDetailsByIdWithAdmins()` and passing the `communityId` as argument. This stream contains the details of the community, including a list of admins.\n\t+ The second stream is obtained from the list of admins in the previous stream by applying the `map()` method to filter out only the admins whose `UserId` matches the `adminId` passed as argument.\n\t+ The third stream is obtained by calling the `orElseThrow()` method on the result of the previous two streams, which throws a `RuntimeException` if the community with the given `communityId` does not exist.\n\nIn summary, the function returns `true` if the specified `adminId` is an admin in the given `communityId`, and `false` otherwise.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void example() {\n    final CommunityService communityService = new CommunityService();\n    final String communityId = \"12345\";\n    final String adminId = \"admin1\";\n    if (isAdminInGivenCommunity(communityId, adminId)) {\n        System.out.println(\"Admin is in the given community\");\n    } else {\n        System.out.println(\"Admin is not in the given community\");\n    }\n}\n",
              "description": ""
            },
            "name": "isAdminInGivenCommunity",
            "code": "private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A `UserController` class that implements the `UsersApi` interface. The controller handles various user-related operations such as signing up, listing all users, getting details of a specific user, resetting or forgetting passwords, and listing all housemates of a specific user. The code uses various packages including Spring Data, Spring Web, Lombok, Slf4j, and Apache Commons Lang.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "UserController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 96
          },
          {
            "id": "e7612635-8859-91bf-574d-02488f4d2ab6",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "receives a `CreateUserRequest` object, converts it into a `UserDto`, creates a new user in the system, and returns the created user as a `CreateUserResponse`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "user's sign-up request, which includes the user's information and other relevant details.\n\n* `@Valid`: This annotation indicates that the input `request` is validated by Spring Security's security context.\n* `CreateUserRequest`: This is the class that represents the request body for creating a new user. It has various attributes/properties, such as `username`, `email`, `password`, etc.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `CREATED` or `CONFLICT`, depending on whether the user was created successfully or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. The status code of the response is `HttpStatus.CREATED`, indicating that the user has been created successfully.\n* `body`: This is a reference to the `CreateUserResponse` object that contains information about the newly created user.\n* `map`: This method is used to map the `Optional<UserDto>` result of the `createUser()` method to a `CreateUserResponse` object. If the `Optional<UserDto>` is present, the `map` method returns a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the `CreateUserResponse`. Otherwise, the `map` method returns a `ResponseEntity` with a status code of `HttpStatus.CONFLICT`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.myhome.api.UsersApi;\nimport com.myhome.model.CreateUserRequest;\nimport com.myhome.model.CreateUserResponse;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\npublic class UsersExample implements UsersApi {\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(\n    CreateUserRequest request) {\n    \n    // Example input for only ('request', 'CreateUserRequest')\n    CreateUserRequest createUserRequest = new CreateUserRequest();\n    createUserRequest.setName(\"Joe\");\n    createUserRequest.setEmail(\"joe@example.com\");\n    createUserRequest.setPassword(\"password123\");\n    \n    return usersApi.signUp(createUserRequest)\n      .map((ResponseEntity<CreateUserResponse> responseEntity) -> {\n        // The responseEntity body contains the created user\n        CreateUserResponse user = responseEntity.getBody();\n        \n        // Do something with the created user\n        System.out.println(user);\n        \n        return ResponseEntity.status(HttpStatus.OK).body(responseEntity.getBody());\n      })\n      .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n}\n",
              "description": ""
            },
            "name": "signUp",
            "code": "@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }",
            "location": {
              "start": 60,
              "insert": 60,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "ba8888f5-4b15-f391-8445-c52067855ac5",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "receives a `Pageable` parameter and returns a `GetUserDetailsResponse` object containing a list of users fetched from the user service using the `listAll` method, and then maps the users to a REST API response format using the `userApiMapper`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for retrieving all users, allowing the listAllUsers method to retrieve a subset of users based on the current page number and page size.\n\n* `log.trace(\"Received request to list all users\")`: This line logs a message indicating that the method has received a request to list all users.\n\nThe `pageable` parameter is a `Pageable` object representing a page of user details to be retrieved. Its properties/attributes include:\n\n* `pageNumber`: The current page number being requested (int)\n* `pageSize`: The number of users per page (int)\n* `sort`: The field by which the users are sorted (string, e.g., \"username\")\n* `direction`: The direction of the sort (string, e.g., \"asc\" or \"desc\")",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetUserDetailsResponse",
              "description": "a list of `GetUserDetailsResponse` objects containing the details of all users.\n\n* `response`: This is the top-level object representing the response to the request. It contains a list of `User` objects, which are converted from the domain service's `Set<User>` return value using the `userApiMapper`.\n* `users`: This is a list of `User` objects, each containing attributes such as the user ID, username, email, and password.\n\nThe `listAllUsers` function returns a `ResponseEntity` object with an HTTP status code of OK (200) and the response body containing the list of users.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.myhome.controllers.*;\nimport com.myhome.controllers.dto.UserDto;\nimport com.myhome.controllers.dto.mapper.HouseMemberMapper;\nimport com.myhome.controllers.dto.mapper.UserApiMapper;\nimport org.springframework.http.ResponseEntity;\n\npublic class Example {\n    public static void main(String[] args) {\n        //Creating a new user API mapper\n        UserApiMapper userApiMapper = new UserApiMapper();\n        \n        //Creating a new pageable object with 10 elements per page and a page number of 2\n        Pageable pageable = new PageRequest(10, 2);\n        \n        //Retrieving the list of users from the user service using the pageable object as input\n        Set<User> userDetails = userApiMapper.userSetToRestApiResponseUserSet(userService.listAll(pageable));\n    }\n}\n",
              "description": ""
            },
            "name": "listAllUsers",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "328545c6-1807-32b0-064d-04114f985050",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "receives a user ID and queries the user service to retrieve the user's details. It maps the response to a `GetUserDetailsResponse` object and returns it as a `ResponseEntity`.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "unique identifier of the user whose details are requested.\n\n* `log.trace()`: This line logs a message with the format `{}\"Received request to get details of user with Id[{}\"]`, where `userId` is the variable passed as an argument.\n* `userService.getUserDetails(userId)`: This line calls the `getUserDetails` method of the `userService` class, passing in `userId` as a parameter. This method retrieves the details of the user with the specified ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `OK` and a body containing the details of the user.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents the response to the request. The status code of the response is set to `HttpStatus.OK` by default, indicating that the request was successful.\n* `body`: This property contains the actual response body, which in this case is a `GetUserDetailsResponseUser` object.\n* `map`: This method is used to map the `userDtoToGetUserDetailsResponse` function to the `ResponseEntity` instance. This function takes the `UserDTO` object as input and returns the corresponding `GetUserDetailsResponseUser` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "getUserDetails",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "41367849-892b-0489-1345-b36e3a0fa204",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "processes password reset requests by parsing the action type and executing the appropriate reset or request operation, returning an `ok` response if successful, or a `badRequest` response otherwise.",
            "params": [
              {
                "name": "action",
                "type_name": "String",
                "description": "password action to be performed, which can be either \"FORGOT\" or \"RESET\".\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `action` parameter is validated to ensure it meets certain criteria.\n* `String`: The `action` parameter is a string representing the password action type.\n* `PasswordActionType parsedAction = PasswordActionType.valueOf(action)`: This line of code parses the `action` parameter into its corresponding `PasswordActionType`.\n* `parsedAction == PasswordActionType.FORGOT`: If the parsed `action` value is equal to `PasswordActionType.FORGOT`, then the method execution continues to the next line.\n* `parsedAction == PasswordActionType.RESET`: If the parsed `action` value is equal to `PasswordActionType.RESET`, then the method execution continues to the next line.\n\nIn summary, the `action` parameter is a string that represents the password action type and is used to determine the appropriate response to return.",
                "complex_type": true
              },
              {
                "name": "forgotPasswordRequest",
                "type_name": "ForgotPasswordRequest",
                "description": "Forgot Password Request object that contains information required to reset the user's password.\n\n* `action`: A string parameter indicating the password action to be performed (either `FORGOT` or `RESET`).\n* `forgotPasswordRequest`: An object containing details about the password reset request, including the user's email address and a unique token.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an `ok` status code indicating successful execution of the function.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It contains information about the status code, body, and headers of the response.\n* `ok`: This is a boolean property of the `ResponseEntity` object, indicating whether the response is successful (true) or not (false).\n* `build`: This is a method of the `ResponseEntity` class that returns a new instance of the response with the specified status code, body, and headers.\n\nThe function itself takes two parameters: `action` and `@Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest`. The `action` parameter is a string that represents the type of password action being performed (either `FORGOT` or `RESET`). The `forgotPasswordRequest` parameter is an instance of the `ForgotPasswordRequest` class, which contains information about the user and the password reset request.\n\nThe function then uses the `parsedAction` variable to determine the appropriate action to take based on the value of `action`. If `parsedAction` is equal to `PasswordActionType.FORGOT`, the function calls the `userService.requestResetPassword()` method to initiate the password reset process. Otherwise, if `parsedAction` is equal to `PasswordActionType.RESET`, the function calls the `userService.resetPassword()` method to complete the password reset process.\n\nFinally, the function returns a new instance of the `ResponseEntity` class with a status code of 200 (OK) and a body containing the response message.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class ForgotPasswordRequest {\n  private String email;\n  \n  public String getEmail() {\n    return this.email;\n  }\n  \n  public void setEmail(String email) {\n    this.email = email;\n  }\n}\n\n// Example usage of usersPasswordPost method\nusersPasswordPost(\"FORGOT\", new ForgotPasswordRequest().setEmail(\"example@email.com\"));\n",
              "description": "\nThe above example sets the action to FORGOT and passes a forgot password request with an email \"example@email.com\" to the usersPasswordPost method."
            },
            "name": "usersPasswordPost",
            "code": "@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "8d023e37-ebb2-17ac-ee46-18eb552ac298",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "receives a user ID and pageable parameter, then uses the `houseService` to list all house members for the specified user, maps the result to a `RestApiResponseHouseMemberSet`, and returns a `ResponseEntity` with the list of house members.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user for whom the list of all housemates is being requested.\n\n* `userId`: This represents the unique identifier for a user in the system. It is likely an instance of `Long`.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for the list of house members, allowing for efficient retrieval of a subset of the total number of house members belonging to the user.\n\n* `userId`: the user ID for whom the housemembers are being listed (String)\n* `pageable`: a Pageable object specifying the pagination parameters (Pageable)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListHouseMember",
              "description": "a `ResponseEntity` representing a list of house members for a given user.\n\n* `ResponseEntity<ListHouseMembersResponse>` represents an entity that contains a list of `HouseMemberSet` objects in a response format.\n* `ListHouseMembersResponse` is a class that contains a list of `HouseMember` objects, each representing a member of a house.\n* `map(houseService::listHouseMembersForHousesOfUserId)`: This method calls the `listHouseMembersForHousesOfUserId` method of the `houseService` class, which returns a list of `HouseMember` objects for all houses associated with the user ID passed in the request.\n* `map(HashSet::new)`: This method creates a new `HashSet` object to store the returned list of `HouseMember` objects.\n* `map(house MemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)`: This method converts each `HouseMember` object in the input list into a corresponding `HouseMemberSet` object, which is then added to the `HashSet`.\n* `map(ResponseEntity::ok)`: This method returns an `ResponseEntity` object with a status code of `200 OK`, indicating that the request was successful.\n* `orElse(ResponseEntity::notFound().build())`: This method provides an alternative return value in case the `listHouseMembersForHousesOfUserId` method fails, which is represented by a `ResponseEntity` object with a status code of `404 Not Found`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate UserController userController;\n\n...\nString userId = \"userId\";\nPageable pageable = Pageable.unpaged();\nList<HouseMembers> housemates = userController.listAllHousemates(userId, pageable);\n",
              "description": "\nThe method listAllHousemates is used to get the members of all houses that belong to a specific user. The input parameters are: 1) userId (String) - the Id of the user who owns the houses we want to know about. 2) Pageable pageable (Pageable) - how many records do we want per page and what is the current page number.\nThe method returns a List<HouseMembers> which contains all members of all houses that belong to the specified user."
            },
            "name": "listAllHousemates",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "10c9a3dc-82b8-f08e-8a43-e470d6042df6",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "verifies the email confirmation token for a given user ID and returns a response entity indicating whether the email was confirmed successfully or not.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user whose email is being confirmed.\n\n* `userService`: This is the service class that manages user-related operations in the application.\n* `emailConfirmToken`: A unique token generated for the user to confirm their email address.",
                "complex_type": true
              },
              {
                "name": "emailConfirmToken",
                "type_name": "String",
                "description": "16-digit token that was sent to the user's email address for confirmation of their email address.\n\n* `userId`: The unique identifier of the user whose email is being confirmed.\n* `emailConfirmToken`: A token provided by the system to confirm the user's email address.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an `ok` status and a built-in `Void` body.\n\n* `ResponseEntity.ok().build()`: This is a response entity that indicates a successful execution of the function. It has an `OK` status code and a `build()` method that returns the entity with the specified status code.\n* `ResponseEntity.badRequest().build()`: This is a response entity that indicates an error in the function execution. It has a `BAD_REQUEST` status code and a `build()` method that returns the entity with the specified status code.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = confirmEmail(USER_ID, EMAIL_CONFIRM_TOKEN);\nif (response.getStatusCode().is2xxSuccessful()) {\n    // Email was confirmed successfully\n} else {\n    // Email could not be confirmed\n}\n",
              "description": ""
            },
            "name": "confirmEmail",
            "code": "@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "677922ab-b6bd-c89b-a048-442130493e6c",
            "ancestors": [
              "fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"
            ],
            "type": "function",
            "description": "resends an email confirmation to a user if one was previously sent and failed, returning a `ResponseEntity` with a status of either `ok` or `badRequest` depending on the result of the resending operation.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "identifier of the user whose email confirmation is being resent.\n\n* `userService`: A service class that performs user-related operations, including resending email confirmations.\n* `resendEmailConfirm(userId)`: An operation called by the `resendConfirmEmailMail` function to resend an email confirmation to the specified `userId`. The method returns a boolean value indicating whether the resending was successful or not.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `ok` or `badRequest`, indicating whether the email confirmation resend was successful or not.\n\n* `ResponseEntity.ok()`: indicates that the email confirmation was resent successfully.\n* `ResponseEntity.badRequest()`: indicates that there was an error while resending the email confirmation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n",
              "description": ""
            },
            "name": "resendConfirmEmailMail",
            "code": "@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 136,
              "insert": 136,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "An object called AmenityDto with several attributes, including a unique identifier (id), an amenity ID, name, description, price, and community ID. The class uses Lombok packages for constructor injection, builder pattern, and data transfer object (DTO) principles.",
        "items": [
          {
            "id": "888ed5cb-7bdd-8ebe-7847-f7a0f885b186",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity with attributes for id, amenityId, name, description, price, and communityId.\nFields:\n\t- id (Long): in the AmenityDto class represents an unique identifier for each amenity. \n\t- amenityId (String): represents a unique identifier for an amenity. \n\t- name (String): in the AmenityDto class represents a string value representing the name of an amenity. \n\t- description (String): in the AmenityDto class represents a human-readable text description of an amenity. \n\t- price (BigDecimal): represents a decimal value representing the cost of an amenity. \n\t- communityId (String): in the AmenityDto class represents a unique identifier for the community where the amenity is located. \n\n",
            "name": "AmenityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@With\n@Data\npublic class AmenityDto {\n  private Long id;\n  private String amenityId;\n  private String name;\n  private String description;\n  private BigDecimal price;\n  private String communityId;\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) named \"CommunityDto\" that represents a community entity. The DTO has fields for id, communityId, name, district, and a set of UserDto objects representing the community administrators. The use of Lombok packages, such as @AllArgsConstructor and @NoArgsConstructor, indicate that these constructors are automatically generated based on the class's parameters. The @Data annotation indicates that the class is marked as data, which means it should be serialized or deserialized.",
        "items": [
          {
            "id": "03c4c4bd-261f-3399-354a-afd552d8e5cf",
            "ancestors": [],
            "type": "function",
            "description": "represents a community with an ID, community ID, name, district, and set of admins.\nFields:\n\t- id (Long): represents a unique identifier for each CommunityDto instance. \n\t- communityId (String): in the CommunityDto class represents a unique identifier for a community. \n\t- name (String): in the CommunityDto class represents a string value indicating the name of a community. \n\t- district (String): in the CommunityDto class represents a string value indicating the name of a geographic region or area where the community is located. \n\t- admins (Set<UserDto>): in the CommunityDto class contains a set of UserDtos representing the users who have administrative access to the community. \n\n",
            "name": "CommunityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class CommunityDto {\n  private Long id;\n  private String communityId;\n  private String name;\n  private String district;\n  private Set<UserDto> admins;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) named `CommunityHouseDto` that contains two properties: `houseId` and `name`. The `@AllArgsConstructor` and `@NoArgsConstructor` annotations indicate that these properties should be constructed using all available constructor arguments or none, respectively. Additionally, the `@Data` annotation indicates that the class is marked as data, which means it can be used to transfer data between classes.",
        "items": [
          {
            "id": "1176870f-7db2-32a5-a84c-4c33d16a41a3",
            "ancestors": [],
            "type": "function",
            "description": "has a String houseId and a String name field.\nFields:\n\t- houseId (String): represents a unique identifier for a community house in the context of the given Java class. \n\t- name (String): in the CommunityHouseDto class represents a string value that is used to identify a specific community house. \n\n",
            "name": "CommunityHouseDto",
            "code": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommunityHouseDto {\n  private String houseId;\n  private String name;\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A `PaymentDto` class for representing payment information. The class has several fields and methods that allow for the creation of a payment DTO. These include a payment ID, charge amount, payment type, description, recurring status, due date, administrator user, and member house member. The Builder, Getter, and Setter annotations are used to create a builder, getter, and setter methods for the class fields.",
        "items": [
          {
            "id": "30bc93f0-e936-cda8-834d-a1a3df39c000",
            "ancestors": [],
            "type": "function",
            "description": "is an immutable DTO object representing payment information, including payment ID, charge amount, payment type, description, recurrence status, and due date for a particular user or member in a house.\nFields:\n\t- paymentId (String): represents a unique identifier for a payment transaction within a system. \n\t- charge (BigDecimal): in the PaymentDto class represents a monetary value, likely used to represent a payment made by a user or member to a particular entity. \n\t- type (String): in the PaymentDto class represents a category or label for the payment, such as \"Rent\" or \"Utilities\". \n\t- description (String): in the PaymentDto class represents a human-readable string describing the payment's purpose or details. \n\t- recurring (boolean): in the PaymentDto class indicates whether the payment is a recurring one. \n\t- dueDate (String): represents the date on which payment is expected to be made. \n\t- admin (UserDto): in the PaymentDto class represents an user who manages payments. \n\t- member (HouseMemberDto): in PaymentDto represents a HouseMemberDto object containing information about a member of a household. \n\n",
            "name": "PaymentDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class PaymentDto {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private UserDto admin;\n  private HouseMemberDto member;\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A class `UserDto` that represents a user object in a DTO format. The class has fields for user ID, name, email, password, and encrypted password. It also has a field for the user's community IDs and a flag for whether the email is confirmed. The class uses Lombok, a dependency injection framework, to automatically generate getter and setter methods for each field.",
        "items": [
          {
            "id": "a7082103-1b9d-dd9e-4a49-db9288f8bd93",
            "ancestors": [],
            "type": "function",
            "description": "is an immutable DTO class for representing a user in a Java application, with fields for user ID, name, email, password, and community IDs, as well as a builder and getter/setter methods for convenient construction and accessor methods.\nFields:\n\t- id (Long): in UserDto represents a unique identifier for each user. \n\t- userId (String): represents a unique identifier for a user in the application. \n\t- name (String): in the UserDto class stores a user's name. \n\t- email (String): in the UserDto class is used to store an email address for identification purposes. \n\t- password (String): stores a string value representing a password for a user account. \n\t- encryptedPassword (String): in UserDto represents an encoded version of the user's password. \n\t- communityIds (Set<String>): in UserDto represents a set of strings indicating the user's membership in various communities. \n\t- emailConfirmed (boolean): in the UserDto class indicates whether an email address associated with the user has been confirmed through a verification process. \n\n",
            "name": "UserDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class UserDto {\n  private Long id;\n  private String userId;\n  private String name;\n  private String email;\n  private String password;\n  private String encryptedPassword;\n  private Set<String> communityIds;\n  private boolean emailConfirmed;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityMapper` using the `Mapper` annotation from the `org.mapstruct` package. The interface specifies a mapping between a `CommunityDto` object and a corresponding `Community` domain object. The `CommunityDto` object is passed to the `communityDtoToCommunity()` method, which returns the corresponding `Community` object.",
        "items": [
          {
            "id": "665ea29f-2315-5b84-4241-1d2752aae53f",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between a CommunityDto and a Community entity.",
            "name": "CommunityMapper",
            "code": "@Mapper\npublic interface CommunityMapper {\n\n  Community communityDtoToCommunity(CommunityDto communityDto);\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberMapper` through which various mappings between different data structures related to house members can be performed. The interface includes three methods: `houseMemberSetToRestApiResponseHouseMemberSet`, `houseMemberDtoSetToHouseMemberSet`, and `houseMemberSetToRestApiResponseAddHouse MemberSet`. These methods allow for the conversion of sets of `HouseMember` objects to/from sets of `HouseMemberDto` objects, as well as the addition of new `HouseMember` objects to an existing set. The code uses Mapstruct, a high-level package for mapping one data structure to another, to perform these mappings.",
        "items": [
          {
            "id": "b451a0e4-76ec-5db9-2449-faf746856501",
            "ancestors": [],
            "type": "function",
            "description": "defines three methods for mapping between HouseMember and HouseMemberDto entities and their corresponding REST API responses.",
            "name": "HouseMemberMapper",
            "code": "@Mapper\npublic interface HouseMemberMapper {\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n\n  Set<HouseMember> houseMemberDtoSetToHouseMemberSet(Set<HouseMemberDto> houseMemberDtoSet);\n\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseAddHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "An interface `PaymentMapper` that provides mapping between `PaymentDto` and `Payment` objects using the Mapstruct framework. The interface has two methods: `paymentDtoToPayment()` converts a `PaymentDto` object to a `Payment` object, and `paymentToPaymentDto()` converts a `Payment` object to a `PaymentDto` object. The mapping is defined using annotations, with the `@Mapping` annotation specifying the source and target fields for each method.",
        "items": [
          {
            "id": "d250f72b-e32a-e587-a640-a8c970508b4b",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for a Payment domain object.",
            "name": "PaymentMapper",
            "code": "@Mapper\npublic interface PaymentMapper {\n  Payment paymentDtoToPayment(PaymentDto paymentDto);\n\n  @Mapping(source = \"payment.dueDate\", target = \"dueDate\", dateFormat = \"yyyy-MM-dd\")\n  PaymentDto paymentToPaymentDto(Payment payment);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides a mapping between objects of type `UserDto` and `User`. The interface includes two methods: `userDtoToUser` that converts a `UserDto` object into a `User` object, and `userToUserDto` that converts a `User` object into a `UserDto` object.",
        "items": [
          {
            "id": "8418c917-d07f-479c-0746-f328f8ba3b15",
            "ancestors": [],
            "type": "function",
            "description": "maps between a DTO representation of a user and the underlying entity object in the domain model.",
            "name": "UserMapper",
            "code": "@Mapper\npublic interface UserMapper {\n  User userDtoToUser(UserDto userDto);\n\n  UserDto userToUserDto(User user);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "An ExceptionHandler class in Spring MVC framework for handling specific types of exceptions, including MaxUploadSizeExceededException and IOException. The class includes two exception handlers that return response entities with custom messages upon handling each type of exception. The response entities include a message property that provides a error message to the user.",
        "items": [
          {
            "id": "af0086fb-ab8f-c2b3-6741-de957f4cf91d",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "FileUploadExceptionAdvice",
            "code": "@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n\n  @ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 17
          },
          {
            "id": "b63aef7e-7304-c582-aa4b-2790fdedbf60",
            "ancestors": [
              "af0086fb-ab8f-c2b3-6741-de957f4cf91d"
            ],
            "type": "function",
            "description": "handles the `MaxUploadSizeExceededException` by returning a response entity with an error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException object that is passed to the function as an exception.\n\n* `class`: The class of the exception, which in this case is `MaxUploadSizeExceededException`.\n* `message`: A string attribute of the exception that contains a message indicating the file size exceeds the limit.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a response entity with a status code of PAYLOAD_TOO_LARGE and a body containing a message indicating that the file size exceeds the limit.\n\n* The status code of the response entity is `HttpStatus.PAYLOAD_TOO_LARGE`.\n* The body of the response entity contains a map with a single key-value pair, where the key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ControllerAdvice\npublic class FileUploadExceptionHandler {\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n}\n",
              "description": "\nIn this example, the method handleMaxSizeException is used to handle MaxUploadSizeExceededException. The method returns a response entity with an HTTP status of PAYLOAD_TOO_LARGE and a HashMap body containing a message that the file size exceeds the limit. This method would be called when a MaxUploadSizeExceededException occurs during file upload."
            },
            "name": "handleMaxSizeException",
            "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "a1407d69-88a4-a085-d04e-3d2e90ddfde9",
            "ancestors": [
              "af0086fb-ab8f-c2b3-6741-de957f4cf91d"
            ],
            "type": "function",
            "description": "is an exception handler for the `MaxUploadSizeExceededException` thrown by the service. It returns a response entity with a status code of `CONFLICT` and a message body containing an error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` that occurs when the uploaded file exceeds the maximum allowed size.\n\n* `MaxUploadSizeExceededException`: The class of the exception that was handled.\n* `exc`: The deserialized instance of the exception class, providing information about the specific error that occurred during document saving.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` object with a status code of `HttpStatus.CONFLICT` and a body containing a map with a single entry containing the message \"Something went wrong with document saving!\".\n\n* The status code of the response entity is `HttpStatus.CONFLICT`, indicating that something went wrong with the document saving process.\n* The body of the response entity contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing an error message related to the document saving process.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "try {\n  // Some code that throws IOException\n} catch (MaxUploadSizeExceededException | IOException exc) {\n  return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n}\n",
              "description": "\nIn this example, the method handleIOException would be called when an IOException is thrown during the execution of the try block. The method returns a ResponseEntity object with an HTTP status code 409 (Conflict) and a message indicating that something went wrong with document saving."
            },
            "name": "handleIOException",
            "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An exception class called AuthenticationException that extends the RuntimeException class. The class has a private constructor and a static error message field called ERROR_MESSAGE. The class also imports packages such as Lombok and Spring, which are used in its definition.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6275c5d7-e3ea-5ba8-ab40-c1826f97d61b",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of RuntimeException and has a default error message \"Credentials are incorrect or user does not exist\".\nFields:\n\t- ERROR_MESSAGE (String): is a string constant representing an error message related to authentication credentials being incorrect or a user not existing. \n\n",
            "name": "AuthenticationException",
            "code": "@Slf4j\n@ResponseStatus(value = HttpStatus.UNAUTHORIZED)\npublic class AuthenticationException extends RuntimeException {\n  private static final String ERROR_MESSAGE = \"Credentials are incorrect or user does not exists\";\n  public AuthenticationException() {\n    super(ERROR_MESSAGE);\n  }\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "An exception class called CredentialsIncorrectException that extends the base AuthenticationException class. The custom exception is created using the Lombok library and includes additional logging statements using the Slf4j library. The log statements provide information about the user ID for whom the credentials are incorrect.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "b77cc736-e6d4-ddb8-9741-38994a226715",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and provides a custom error message for incorrect credentials for a specific user ID.\n",
            "name": "CredentialsIncorrectException",
            "code": "@Slf4j\npublic class CredentialsIncorrectException extends AuthenticationException {\n  public CredentialsIncorrectException(String userId) {\n    super();\n    log.info(\"Credentials are incorrect for userId: \" + userId);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "A `UserNotFoundException` class that extends `AuthenticationException`. The exception is constructed with a user email parameter and logs an information message using Lombok's `@Slf4j` annotation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "94e986a2-fdc6-73a4-1148-a1ad7e1e2715",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and has a constructor with a parameter for a user email, logging an information message to the log when created.\n",
            "name": "UserNotFoundException",
            "code": "@Slf4j\npublic class UserNotFoundException extends AuthenticationException {\n  public UserNotFoundException(String userEmail) {\n    super();\n    log.info(\"User not found - email: \" + userEmail);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "an interface called AmenityApiMapper that acts as a mapping layer between domain models and RESTful API responses. The interface provides four methods for mapping data between different forms:\n\n* amenityToAmenityDetailsResponse: maps an amenity object to a GetAmenityDetailsResponse object.\n* amenitiesSetToAmenityDetailsResponseSet: maps a set of amenity objects to a Set of GetAmenityDetailsResponse objects.\n* amenityDtoToAmenity: maps an AmenityDto object to an amenity object.\n* amenityToAmenityDto: maps an amenity object to an AmenityDto object.\n\nThese methods use the Mapper interface from the org.mapstruct package, which provides a way to define and apply mappings between different data structures in a structured and modular fashion.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "1ec22516-a46d-8982-7746-efbf9dffa67c",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapper for converting between different representations of amenities, including from domain objects to DTOs and vice versa.",
            "name": "AmenityApiMapper",
            "code": "@Mapper\npublic interface AmenityApiMapper {\n\n  GetAmenityDetailsResponse amenityToAmenityDetailsResponse(Amenity amenity);\n\n  Set<GetAmenityDetailsResponse> amenitiesSetToAmenityDetailsResponseSet(Set<Amenity> amenity);\n\n  Amenity amenityDtoToAmenity(AmenityDto amenityDto);\n\n  AmenityDto amenityToAmenityDto(Amenity amenity);\n\n  AmenityDto updateAmenityRequestToAmenityDto(UpdateAmenityRequest request);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface for mapping data between different types in a REST API. The interface includes methods for mapping CommunityDto to and from Community, CreateCommunityRequest to and from CreateCommunityResponse, CommunitySet to and from ListCommunityAdminsResponseCommunityAdminSet, CommunityHouseName to and from CommunityHouse, and CommunityHouse to and from GetHouseDetailsResponseCommunityHouse. The interface utilizes the Mapstruct framework to perform these mappings.",
        "items": [
          {
            "id": "809ee9a8-a609-498a-8b44-9c394f5bff2c",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures related to communities in a web application, including CreateCommunityRequest, GetCommunityDetailsResponseCommunity, Set<GetCommunityDetailsResponseCommunity>, CreateCommunityResponse, ListCommunityAdminsResponseCommunityAdmin, and more.",
            "name": "CommunityApiMapper",
            "code": "@Mapper\npublic interface CommunityApiMapper {\n  CommunityDto createCommunityRequestToCommunityDto(CreateCommunityRequest request);\n\n  GetCommunityDetailsResponseCommunity communityToRestApiResponseCommunity(\n      Community community);\n\n  Set<GetCommunityDetailsResponseCommunity> communitySetToRestApiResponseCommunitySet(\n      Set<Community> communitySet);\n\n  CreateCommunityResponse communityToCreateCommunityResponse(Community community);\n\n  Set<ListCommunityAdminsResponseCommunityAdmin> communityAdminSetToRestApiResponseCommunityAdminSet(\n      Set<User> communityAdminSet);\n\n  @Mapping(source = \"userId\", target = \"adminId\")\n  ListCommunityAdminsResponseCommunityAdmin userAdminToResponseAdmin(User user);\n\n  Set<CommunityHouse> communityHouseNamesSetToCommunityHouseSet(\n      Set<CommunityHouseName> communityHouseNamesSet);\n\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 24
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that provides mappings between two data structures: `Set<CommunityHouse>` and `Set<GetHouseDetailsResponseCommunityHouse>`, and vice versa. The interface includes two methods: `communityHouseSetToRestApiResponseCommunityHouseSet()` and `communityHouseToRestApiResponseCommunityHouse()`. These methods map the source data structure to the target data structure, using the `MapStruct` package for mapping.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9f1b3ea6-5bc8-89a0-e347-c940319d2d53",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between CommunityHouse and GetHouseDetailsResponseCommunityHouse objects through two methods: communityHouseSetToRestApiResponseCommunityHouseSet and communityHouseToRestApiResponseCommunityHouse.",
            "name": "HouseApiMapper",
            "code": "@Mapper\npublic interface HouseApiMapper {\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n\n  GetHouseDetailsResponseCommunityHouse communityHouseToRestApiResponseCommunityHouse(\n      CommunityHouse communityHouse);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between different objects related to payments in an application. It maps between payment requests and their corresponding payment dto, enriches the payment request with additional details from the user and admin, and maps between the payment and other related objects such as members and communities. The code also provides methods for setting user fields, converting member id to member object, and mapping between the payment and its corresponding rest api response.",
        "items": [
          {
            "id": "c8993c9b-e54e-c78d-b54c-d910bf45542f",
            "ancestors": [],
            "type": "function",
            "description": "maps between Schedule Payment Requests and Responses, as well as between the user fields of the payment request and the enriched request member and admin.",
            "name": "SchedulePaymentApiMapper",
            "code": "@Mapper\npublic interface SchedulePaymentApiMapper {\n\n  @Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }\n\n  @Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n\n  @Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }\n\n  @Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }\n\n  @Mappings({\n      @Mapping(source = \"adminId\", target = \"admin\", qualifiedByName = \"adminIdToAdmin\"),\n      @Mapping(source = \"memberId\", target = \"member\", qualifiedByName = \"memberIdToMember\")\n  })\n  PaymentDto schedulePaymentRequestToPaymentDto(SchedulePaymentRequest schedulePaymentRequest);\n\n  PaymentDto enrichedSchedulePaymentRequestToPaymentDto(\n      EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest);\n\n  @AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n\n  Set<MemberPayment> memberPaymentSetToRestApiResponseMemberPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"memberId\", expression = \"java(payment.getMember().getMemberId())\")\n  MemberPayment paymentToMemberPayment(Payment payment);\n\n  Set<AdminPayment> adminPaymentSetToRestApiResponseAdminPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"adminId\", expression = \"java(payment.getAdmin().getUserId())\")\n  AdminPayment paymentToAdminPayment(Payment payment);\n\n  @Mappings({\n      @Mapping(source = \"admin\", target = \"adminId\", qualifiedByName = \"adminToAdminId\"),\n      @Mapping(source = \"member\", target = \"memberId\", qualifiedByName = \"memberToMemberId\")\n  })\n  SchedulePaymentResponse paymentToSchedulePaymentResponse(PaymentDto payment);\n\n  default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }\n\n  default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }\n\n  default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }\n}",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 103
          },
          {
            "id": "78a9b22b-6cce-1dad-774c-b68603b669ae",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "transforms a given `adminId` into a `UserDto` object containing the `userId` field with the same value as the input.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "identifier of an administrator for which the corresponding `UserDto` object is to be created.\n\n* `userId`: The `adminId` is used to build a `UserDto` instance with the specified user ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the specified `adminId`.\n\n* `userId`: A string representing the ID of the admin user. This is the primary key for the admin user in the system.\n* Built using the `UserDto.builder()` method: This indicates that the function creates a new instance of the `UserDto` class, with various attributes and properties pre-defined, and then customizes it according to the input parameter by adding the `userId` attribute.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto user = adminIdToAdminDto(\"adminId\"); //Inputs String 'adminId' for 'String adminId' \nSystem.out.println(user);\n// Output: UserDto(userId=adminId)\n",
              "description": ""
            },
            "name": "adminIdToAdminDto",
            "code": "@Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "0e0f6c49-4fa6-f48a-9447-798045b6befd",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "maps a `memberId` string parameter to a `HouseMemberDto` object with the same value for `memberId`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "10-digit unique identifier of a member in the `HouseMemberDto`.\n\n* `memberId`: This property represents the member ID of a house member, which is passed as a string parameter to the function.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the input `memberId`.\n\n* `memberId`: A string attribute that holds the member ID of the house member.\n* `HouseMemberDto`: The class used as the return type for the function, which represents a member of a house with an ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "HouseMemberDto houseMember = memberIdToMemberDto(\"memberId\");\n// houseMember now contains the values for the HouseMember object \n// with the specified id \"memberId\"\n",
              "description": ""
            },
            "name": "memberIdToMemberDto",
            "code": "@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "bf79a505-c7d9-9a8e-4f41-ab508ed0e03b",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "maps a `UserDto` object to its corresponding `userId`.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "user object containing information such as user ID, username, and other relevant details.\n\n* `UserId`: This field represents the user ID of the admin.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the `UserId` of the specified `UserDto`.\n\n* The `UserDto` object returned by the function contains an instance variable named `userId`, which is a string representing the ID of the user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto userDto = new UserDto();\nuserDto.setUserId(\"123456789\");\nString id = adminToAdminId(userDto);  // Output: \"123456789\"\n",
              "description": ""
            },
            "name": "adminToAdminId",
            "code": "@Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }",
            "location": {
              "start": 57,
              "insert": 57,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "57c2e6f6-e985-de8a-884f-b23c070f8538",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "maps a `HouseMemberDto` object to its corresponding member ID.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "HouseMember object that contains the member ID to be converted into a string.\n\n* `getMemberId()` returns the `memberId` attribute of the object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the member ID of the inputted HouseMemberDto object.\n\n* The returned value is a string representing the member ID of the input `HouseMemberDto` object.\n* The string is obtained by accessing the `memberId` field of the input object using the dot notation.\n* The `memberId` field is a non-nullable reference to a string in the input object, indicating that it must always be present and contain a valid member ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tHouseMemberDto member = new HouseMemberDto(\"member1\");\n\tString id = memberToMemberId(member);\n\tSystem.out.println(id); // prints \"member1\"\n}\n",
              "description": ""
            },
            "name": "memberToMemberId",
            "code": "@Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "36d22be0-4477-b2b4-2d40-38b4879640af",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "maps fields from an enriched `SchedulePaymentRequest` object to a `PaymentDto` instance using `@MappingTarget`. It also converts the user details of the payment request to admin and house member.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto object that will be populated with user details from the enriched schedule payment request.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of the `PaymentDto.PaymentDtoBuilder` class, which is used to build a `PaymentDto` object using the `@MappingTarget` annotation.\n* `EnrichedSchedulePaymentRequest`: This is the input parameter for the function, which contains user details that need to be mapped to admin and house member fields.\n* `getEnrichedRequestMember()`: This is a function that retrieves the enriched `member` field of the `EnrichedSchedulePaymentRequest`.\n* `getEnrichedRequestAdmin()`: This is a function that retrieves the enriched `admin` field of the `EnrichedSchedulePaymentRequest`.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "`PaymentDto` instance that has been enriched with additional fields from the original `SchedulePaymentRequest`.\n\n* `paymentDto`: The PaymentDto class is being passed as an argument to the method.\n* `PaymentDto.PaymentDtoBuilder`: The `PaymentDto` class is annotated with `@Builder`, which means that a `PaymentDtoBuilder` instance must be passed when calling this method.\n* `enrichedSchedulePaymentRequest`: This variable contains the deserialized input, which includes user details and other properties.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// given enrichedSchedulePaymentRequest is a valid EnrichedSchedulePaymentRequest instance\n// and paymentDtoBuilder is a valid PaymentDto.PaymentDtoBuilder instance\nEnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\npaymentDtoBuilder.setAdmin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\npaymentDtoBuilder.setMember(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n",
              "description": "\n\nNote that the method is not called explicitly, but rather by using Lombok's @MappingTarget annotation on the builder instance. The AfterMapping method is only invoked if it is annotated with @Builder or has a public no-arg constructor, according to the documentation for MapStruct and Lombok."
            },
            "name": "setUserFields",
            "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "df3a0ea6-f099-7fb8-3a4e-bb594e3b591f",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "takes a `SchedulePaymentRequest` object and enhances it with additional information from an admin and a member, such as community IDs, admin and member IDs, names, emails, encrypted passwords, and document filenames.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request to be enriched, providing its type, description, recurrence status, charge amount, due date, and other relevant details.\n\n* `getType`: The type of payment request (e.g., \"Rent\", \"Utilities\", etc.).\n* `getDescription`: A brief description of the payment request.\n* `isRecurring`: Indicates whether the payment request is recurring or not.\n* `getCharge`: The charge amount for the payment request.\n* `getDueDate`: The due date of the payment request.\n* `getAdminId`: The ID of the admin who created/edited the payment request.\n* `admin.getId()`: The ID of the admin who created/edited the payment request.\n* `admin.getName()`: The name of the admin who created/edited the payment request.\n* `admin.getEmail()`: The email address of the admin who created/edited the payment request.\n* `admin.getEncryptedPassword()`: The encrypted password of the admin who created/edited the payment request.\n* `communityIds`: A set of community IDs associated with the payment request.\n* `member.getMemberId()`: The ID of the member to whom the payment request is relevant.\n* `member.getId()`: The ID of the member to whom the payment request is relevant.\n* `member.getName()`: The name of the member to whom the payment request is relevant.\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"`: The house ID of the member to whom the payment request is relevant (or an empty string if no community house is associated).",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "user who is performing the action of enriching the schedule payment request, and provides the user's name, email, and encrypted password to the resulting enriched payment request.\n\n* `getCommunities()` returns a stream of `Community` objects, which represent the communities that the admin is part of.\n* `map(Collectors.toSet())` converts the stream of `Community` objects into a set of community IDs.\n* `admin.getId()` returns the ID of the admin user.\n* `admin.getName()` returns the name of the admin user.\n* `admin.getEmail()` returns the email address of the admin user.\n* `admin.getEncryptedPassword()` returns the encrypted password of the admin user.\n\nThe other input parameters, such as `request`, `member`, and their properties, are not explained in this response as they are not relevant to the explanation of `admin` properties.",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object that contains information about the member for whom the payment schedule is being created, including their member ID and community ID.\n\n* `member.getMemberId()` represents the unique identifier of the member in the system.\n* `member.getId()` is the ID of the member.\n* `member.getHouseMemberDocument()` is a document filename representing the House Member document associated with the member, if any.\n* `member.getName()` is the name of the member.\n* `member.getCommunityHouse()` represents the House where the member resides, if applicable. The `getHouseId()` property of this object returns the ID of the House.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object containing additional community and member information.\n\n* `type`: The type of payment request, which can be either \"one-time\" or \"recurring\".\n* `description`: A brief description of the payment request.\n* `isRecurring`: Indicates whether the payment request is recurring or not.\n* `charge`: The amount of the payment request.\n* `dueDate`: The due date of the payment request.\n* `adminId`: The ID of the admin who created the payment request.\n* `adminName`: The name of the admin who created the payment request.\n* `adminEmail`: The email address of the admin who created the payment request.\n* `encryptedPassword`: The encrypted password of the admin who created the payment request.\n* `communityIds`: A set of community IDs associated with the payment request.\n* `memberId`: The ID of the member for whom the payment request was made.\n* `houseMemberDocumentFilename`: The filename of the House Member document, if it exists.\n* `memberName`: The name of the member for whom the payment request was made.\n* `communityHouseId`: The ID of the community house associated with the payment request (only if `member.getCommunityHouse() != null`).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n  SchedulePaymentRequest request = new SchedulePaymentRequest();\n  User admin = new User();\n  HouseMember member = new HouseMember();\n  \n  EnrichedSchedulePaymentRequest enriched = enrichSchedulePaymentRequest(request, admin, member);\n}\n",
              "description": "\nIn this example, the request and admin parameters are not used for anything in the method call. However, they are used as inputs in the method to create a new EnrichedSchedulePaymentRequest object. The admin and member objects are also used as inputs in the method to provide information to the EnrichedSchedulePaymentRequest object.\n\nThe code should be as short as possible so that it is easy to reason through, and it should work correctly without any incorrect inputs or assumptions. Therefore, it would not include any unit test examples and would not explain the code in detail."
            },
            "name": "enrichSchedulePaymentRequest",
            "code": "default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "67f5354d-ff93-72a0-7848-4ceab1e43dfe",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "builds a `UserDto` object representing an administrator associated with a schedules payment request, including their user ID, entity ID, name, email, and encrypted password.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative user for whom the request is being enriched, providing their user ID, entity ID, name, email, and encrypted password.\n\n* `userId`: The user ID of the admin associated with the payment request.\n* `id`: The entity ID of the admin associated with the payment request.\n* `name`: The name of the admin associated with the payment request.\n* `email`: The email address of the admin associated with the payment request.\n* `encryptedPassword`: The encrypted password of the admin associated with the payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the administrator's details.\n\n1. `userId`: The ID of the admin user associated with the enriched schedule payment request.\n2. `id`: The ID of the enriched schedule payment request itself.\n3. `name`: The name of the admin user associated with the request.\n4. `email`: The email address of the admin user associated with the request.\n5. `encryptedPassword`: An encrypted password for the admin user associated with the request, which is not explicitly provided in the function signature.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Mapping(target = \"adminId\", expression = \"java(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest).getUserId())\")\n",
              "description": "\nThis would map the adminId attribute of the PaymentDto to the UserDto's userId. The getEnrichedRequestAdmin method is called and passed the EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest as an argument, and then returns a new UserDto built with the values obtained from that request.\n\nThe expression attribute of @Mapping is what would be executed to determine the value of adminId, which in this case is just calling getEnrichedRequestAdmin on the enrichedSchedulePaymentRequest object passed in as an argument and then getting the userId from the returned UserDto."
            },
            "name": "getEnrichedRequestAdmin",
            "code": "default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }",
            "location": {
              "start": 127,
              "insert": 127,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "a8991cd7-c433-4ea6-df43-4da3cf9cb1f6",
            "ancestors": [
              "c8993c9b-e54e-c78d-b54c-d910bf45542f"
            ],
            "type": "function",
            "description": "transforms an `EnrichedSchedulePaymentRequest` object into a new `HouseMemberDto` object, including member ID, name, and entity ID from the original request.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "house member whose details are to be enriched and returned as a `HouseMemberDto`.\n\n* `getMemberEntityId()` returns the entity ID of the member associated with the schedule payment request.\n* `getMemberId()` returns the ID of the member associated with the schedule payment request.\n* `getHouseMemberName()` returns the name of the house member associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the member's ID, name, and membership ID.\n\n* `id`: The ID of the house member entity.\n* `memberId`: The ID of the member in the enriched schedule payment request.\n* `name`: The name of the house member.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\nvoid test() {\n    EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\n    HouseMemberDto houseMemberDto = new HouseMemberDto();\n    houseMemberDto.setId(\"id\");\n    houseMemberDto.setHouseMemberName(\"name\");\n    \n    HouseMemberDto result = getEnrichedRequestMember(enrichedSchedulePaymentRequest);\n}\n",
              "description": "\nIn this example, we create a new instance of EnrichedSchedulePaymentRequest and pass it to the method getEnrichedRequestMember. The method then returns an instance of HouseMemberDto, which is then assigned to the variable result. However, since EnrichedSchedulePaymentRequest doesn't contain any member fields or methods that would affect the mapping, this test would pass as expected."
            },
            "name": "getEnrichedRequestMember",
            "code": "default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` that uses Mapstruct to automatically convert between different data structures representing users. The interface provides four methods: `createUserRequestToUserDto`, `userSetToRestApiResponseUserSet`, `userDtoToCreateUserResponse`, and `userDtoToGetUserDetailsResponse`. These methods map between the domain-level `User` class, the DTO-level `UserDto` class, and the REST API response classes `GetUserDetailsResponseUser` and `CreateUserResponse`.",
        "items": [
          {
            "id": "e6974f7b-bfec-40a7-5740-f75e4e2938d9",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mapping functions between business objects (UserDto and User) and REST API responses (GetUserDetailsResponseUser).",
            "name": "UserApiMapper",
            "code": "@Mapper\npublic interface UserApiMapper {\n\n  UserDto createUserRequestToUserDto(CreateUserRequest createUserRequest);\n\n  Set<GetUserDetailsResponseUser> userSetToRestApiResponseUserSet(\n      Set<User> userSet);\n\n  CreateUserResponse userDtoToCreateUserResponse(UserDto userDto);\n\n  GetUserDetailsResponseUser userDtoToGetUserDetailsResponse(UserDto userDto);\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  }
]