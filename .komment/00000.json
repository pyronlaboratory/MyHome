[
  {
    "name": "ApiGatewayServiceApplication.java",
    "path": "api-gateway-service/src/main/java/com/prathab/apigatewayservice/ApiGatewayServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables Eureka client and Zuul proxy functionality and serves as an API gateway for various services. The `ApiGatewayServiceApplication` class is annotated with `@SpringBootApplication`, `@EnableEurekaClient`, and `@EnableZuulProxy` to enable the required features. The `main()` method starts the application by running the `ApiGatewayServiceApplication`.",
        "diagram": "digraph G {\n    label=\"com.prathab.apigatewayservice.ApiGatewayServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "719b7840-b20f-d6be-7c41-84c726ae7dc5",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka client and Zuul proxy functionality, serving as an API gateway for various services. It starts a Spring Application by running the `ApiGatewayServiceApplication` class.",
            "name": "ApiGatewayServiceApplication",
            "code": "@SpringBootApplication\n@EnableEurekaClient\n@EnableZuulProxy\npublic class ApiGatewayServiceApplication {\n\n  /**\n   * starts a Spring Application by running the `ApiGatewayServiceApplication`.\n   * \n   * @param args command-line arguments passed to the `SpringApplication.run()` method\n   * when executing the application.\n   * \n   * \t- Length: 0 (an empty array)\n   * \t- Elements: null\n   * \n   * The `args` parameter is an array of strings that represent command-line arguments\n   * passed to the application when it was launched.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(ApiGatewayServiceApplication.class, args);\n  }\n}",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 21,
            "docLength": 4
          },
          {
            "id": "50bb2b78-2d22-60b7-6c42-35a029c08ba5",
            "ancestors": [
              "719b7840-b20f-d6be-7c41-84c726ae7dc5"
            ],
            "type": "function",
            "description": "runs a SpringApplication instance of the `ApiGatewayServiceApplication` class, using the specified `args`.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the `SpringApplication.run()` method when invoking the `ApiGatewayServiceApplication`.\n\n* `SpringApplication.run()` is called to launch the application with the specified `class`.\n* The `args` parameter is an array of strings passed to the application by the operating system.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(ApiGatewayServiceApplication.class, args);\n  }",
            "location": {
              "start": 45,
              "insert": 33,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 32,
                "end": 44
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthorizationFilter.java",
    "path": "api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/AuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "An authentication filter for Spring WebFlux applications that validate JSON Web Tokens (JWTs) in the HTTP Authorization header and returns a UsernamePasswordAuthenticationToken if validated successfully. The code uses dependencies from Spring Security, specifically the `UsernamePasswordAuthenticationToken` class and the `Jwts` package for parsing JWTs. The filter chain is applied to the request and response objects, and any exceptions are caught and handled appropriately.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.apigatewayservice.security.AuthorizationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "a9b7f6f4-212c-01b3-e345-bf3ad7de9366",
            "ancestors": [],
            "type": "function",
            "description": "from the file performs authentication on HTTP requests by retrieving the authorization header name and prefix from environment variables, checking if the header is present and starts with the prefix, and then setting the authentication object and forwarding the request to the next filter in the chain. It also creates a `UsernamePasswordAuthenticationToken` object representing the authenticated user based on the decoded JSON Web Token (JWT) from the authorization header.",
            "name": "AuthorizationFilter",
            "code": "public class AuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n\n  public AuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment) {\n    super(authenticationManager);\n    this.environment = environment;\n  }\n\n  /**\n   * filters HTTP requests based on authentication headers. It retrieves the authorization\n   * header name and prefix from environment variables, checks if the header is present\n   * and starts with the prefix, and then sets the authentication object and forwards\n   * the request to the next filter in the chain.\n   * \n   * @param request HTTP request that the filter is processing and is used as input to\n   * the filter's internal logic.\n   * \n   * \t- `authHeaderName`: The name of the header containing the authentication token.\n   * \t- `authHeaderPrefix`: The prefix of the authentication token in the header.\n   * \t- `request.getHeader()`: A method to retrieve a header field value from the\n   * `HttpServletRequest` object.\n   * \t- `authentication`: An object representing the authenticated user, obtained through\n   * the `getAuthentication()` method.\n   * \n   * @param response HTTP response object that will be modified or replaced by the\n   * filter chain.\n   * \n   * \t- `response`: The HttpServletResponse object represents the output stream for the\n   * HTTP request. It contains attributes such as the status code, headers, and body.\n   * \t- `FilterChain chain`: This is a pipeline of filters that can be used to handle\n   * requests in a specific order. Chain.doFilter(request, response) calls the next\n   * filter in the chain if the current filter does not handle the request successfully.\n   * \n   * @param chain 3-rd level of the filter chain, which is the nested structure of\n   * filters that are applied to an HTTP request in a particular order.\n   * \n   * 1/ `HttpServletRequest request`: The HTTP request object that is being processed.\n   * 2/ `HttpServletResponse response`: The HTTP response object that is being generated\n   * in response to the request.\n   * 3/ `FilterChain chain`: The filter chain that the current function is a part of,\n   * which contains a sequence of filter functions that are applied to the request and\n   * response objects.\n   * 4/ `IOException`, `ServletException`: These are the exception classes that can be\n   * thrown by the `doFilterInternal` function, typically due to errors in processing\n   * the request or response.\n   */\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  /**\n   * authenticates an HTTP request by parsing a JSON Web Token (JWT) header and creating\n   * a `UsernamePasswordAuthenticationToken` object containing the user ID and any\n   * additional claims.\n   * \n   * @param request HTTP request object passed to the function, which contains the\n   * authentication token in the `Authorization` header.\n   * \n   * \t- `getHeader`: This method returns an object representing the value of a header\n   * field in the HTTP request. In this case, it retrieves the value of the\n   * `authorization.token.header.name` property.\n   * \t- `null`: The return value of `authHeader` is null if no authorization token is\n   * present in the request.\n   * \t- `var token`: This line assigns the value of\n   * `authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"),\n   * \"\")` to a variable named `token`.\n   * \t- `Jwts.parser()`: This line initializes a `JwtsParser` object, which is used to\n   * parse the JSON Web Token (JWT) contained in the authorization header.\n   * \t- `parseClaimsJws()`: This method parses the JWT and returns the claims as a `ClaimsJwt`.\n   * \t- `getBody()`: This method returns the body of the JWT, which contains the subject\n   * of the token.\n   * \t- `getSubject()`: This line retrieves the subject of the token from the `ClaimsJwt`\n   * object.\n   * \t- `return new UsernamePasswordAuthenticationToken()`: This line creates a new\n   * instance of the `UsernamePasswordAuthenticationToken` class and sets its `userId`\n   * field to the value retrieved from the JWT. The `collections.emptyList()` method\n   * is called to set the `username` field to an empty list, indicating that no username\n   * is associated with this authentication token.\n   * \n   * The function does not destructure `request`, as it only needs to access a few of\n   * its properties (e.g., `getHeader`) to perform its intended functionality.\n   * \n   * @returns a `UsernamePasswordAuthenticationToken` object representing the authenticated\n   * user.\n   * \n   * \t- The `var authHeader` is the value of the `Authorization` header in the HTTP request.\n   * \t- The `var token` is the decoded JSON Web Token (JWT) from the `authHeader`.\n   * \t- The `var userId` is the subject of the JWT, which represents the user who made\n   * the request.\n   * \t- The `return new UsernamePasswordAuthenticationToken(userId, null,\n   * Collections.emptyList());` creates a new `UsernamePasswordAuthenticationToken`\n   * object with the `userId` as the subject and an empty list of credentials.\n   */\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }\n}",
            "location": {
              "start": 40,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 31,
                "end": 39
              }
            },
            "item_type": "class",
            "length": 129,
            "docLength": 8
          },
          {
            "id": "279c88e8-4b02-a1a1-ba41-f5f51bb8def1",
            "ancestors": [
              "a9b7f6f4-212c-01b3-e345-bf3ad7de9366"
            ],
            "type": "function",
            "description": "filters incoming requests based on authentication headers. It sets the SecurityContextHolder with the obtained authentication and then passes the request to the next filter in the chain.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being filtered.\n\n* `authHeaderName`: String property representing the name of the HTTP header that contains the authentication token.\n* `authHeaderPrefix`: String property representing the prefix of the authentication token in the HTTP header.\n* `request`: The original HTTP request object, which may be deserialized and accessed for various properties/attributes, such as:\n\t+ `getHeader()`: Returns the value of a specific HTTP header.\n\t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in the request.\n\t+ `getParameter()`: Returns the value of a specific HTTP parameter (e.g., query string or form data).\n\t+ `getRemoteAddr()`: Returns the client's IP address.\n\t+ `getUserAgent()`: Returns the user agent string sent with the request.\n\nNote that the `request` object is deserialized from the incoming HTTP request, and its properties/attributes may be accessed and used in the function to perform authentication-related tasks.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that is being filtered by the servlet.\n\n* `request`: The incoming HTTP request, passed as an argument to the filter.\n* `chain`: The chain of filters that the current filter belongs to, which is passed as an argument to the filter.\n* `IOException`, `ServletException`: Thrown if an I/O error or a Servlet exception occurs while executing the filter.\n* `SecurityContextHolder`: A class that provides a way to access and manage security context objects in a Java application.\n* `getAuthentication()`: A method that returns an authentication object based on the incoming HTTP request.\n\nThe `response` object has various properties/attributes, including:\n\n* `getHeader()`: Returns the value of a header field in the HTTP request or response.\n* `getMethod()`: Returns the HTTP method (GET, POST, PUT, DELETE, etc.) of the incoming request.\n* `getPathInfo()`: Returns the path info of the incoming request (the portion of the URL after the question mark).\n* `getPathTranslated()`: Returns the path translated (the original path without the server-side prefix).\n* `getQueryString()`: Returns the query string of the incoming request (the portion of the URL after the ampersand).\n* `getRemoteAddr()`: Returns the remote address of the client making the request.\n* `getScheme()`: Returns the scheme (http or https) of the incoming request.\n* `getServerName()`: Returns the server name and port number of the server hosting the current application.\n* `getServerPort()`: Returns the port number of the server hosting the current application.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the chain that will be executed after the current filter has performed its operations on the request and response.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `response`: The response object that will be sent to the client after processing through the filter chain.\n* `FilterChain`: The chain of filters that must be executed in sequence for this particular request.\n* `chain.doFilter()`: The method called when the filter chain is invoked, which passes the original request and response objects to the next filter in the chain for further processing.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n",
              "description": "\nThe method `doFilterInternal` is called by the Spring framework for each HTTP request that is processed by the application. It first retrieves two environment properties from the property source: `authorization.token.header.name` and `authorization.token.header.prefix`. These are used to retrieve the header value of the Authorization header in the HTTP request, which contains the JWT token.\n\nThe method then checks if the retrieved header is null or does not start with the expected prefix (`Bearer`), indicating that there is no authentication information present in the request. In this case, it simply calls the `doFilter` method of the `FilterChain` object, passing the original `request` and `response` objects to it, without any further processing.\n\nIf there is an authentication token present in the request, the method then retrieves it by removing the prefix from the header value using the `replace` method of the String class. It then decodes the JSON Web Token (JWT) using the `parser()` method of the Jwts class and extracts the subject (`userId`) of the token using the `getBody().getSubject()` method.\n\nThe method creates a new `UsernamePasswordAuthenticationToken` object with the `userId` as the principal and an empty list of credentials. It then sets this authentication token in the `SecurityContextHolder` object, which is used by Spring to store information about the authenticated user for the current request.\n\nFinally, it calls the `doFilter` method of the `FilterChain` object again, passing the original `request` and `response` objects to it, after setting the authentication token in the `SecurityContextHolder`. This allows any further filters or Spring controllers in the application to be aware of the current user's identity."
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }",
            "location": {
              "start": 89,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 88
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 38
          },
          {
            "id": "a9d7c879-1bc4-3684-5d4b-3b6a94d3c226",
            "ancestors": [
              "a9b7f6f4-212c-01b3-e345-bf3ad7de9366"
            ],
            "type": "function",
            "description": "retrieves an authentication token from a HTTP request header and parses it to extract the subject's username, which is then used to create an `UsernamePasswordAuthenticationToken`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object containing information about the incoming request, which is used to extract the authentication token from the request header.\n\n* `getHeader()` - Returns the value of a header field in the HTTP request message.\n* `getProperty()` - Returns the value of a property or configuration option.\n* `parseClaimsJws()` - Parses a JSON Web Signature (JWS) and extracts the claims from it.\n* `setSigningKey()` - Sets the signing key for JWT signing.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UsernamePasswordAuthenticationToken",
              "description": "a `UsernamePasswordAuthenticationToken` object containing the subject and credentials of the authenticated user.\n\n* The variable `authHeader` represents the authentication header present in the HTTP request.\n* The variable `token` is the token extracted from the authentication header using the `replace()` method and the `environment.getProperty(\"authorization.token.header.prefix\")` property.\n* The `Jwts.parser()` method is used to parse the token into a `ClaimsJws` object, which contains information about the user.\n* The `getBody()` method of the `ClaimsJws` object returns the subject of the token.\n* The variable `userId` represents the subject of the token.\n* The `null` value returned for the `username` and `authorities` properties indicates that no username or authorities are present in the token.\n\nOverall, the `getAuthentication` function extracts the authentication header from the HTTP request and parses it into a `ClaimsJws` object to retrieve the user's information.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\nif (authentication == null) {\n  chain.doFilter(request, response);\n} else {\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  chain.doFilter(request, response);\n}\n",
              "description": "\nThe method retrieves the value of the `Authorization` header in the HTTP request using the `HttpServletRequest.getHeader()` method. If no authentication token is present, the function returns null. Otherwise, it retrieves the subject (i.e., user ID) from the JSON Web Token (JWT) by parsing it with a JWT parser and returning a new instance of the `UsernamePasswordAuthenticationToken` class with its user ID set to the value retrieved from the JWT and its username set to an empty list.\n\nThe function then checks if the authentication is null, and if it is not, it sets the authentication in the security context using the `SecurityContextHolder.getContext().setAuthentication()` method before passing the request and response objects to the next filter in the chain using the `FilterChain.doFilter()` method. If the authentication is null, then the function only passes the request and response objects to the next filter in the chain using the same method.\n\nThe code above makes use of the `environment` object passed into the constructor of the class, which allows the class to read properties set up in a configuration file (e.g., application.properties) by calling the `getProperty()` method on the object. The function uses the `setSigningKey()` and `parseClaimsJws()` methods on the JWT parser to parse the JWT and retrieve its subject, which is then used to create a new instance of the `UsernamePasswordAuthenticationToken` class with the user ID set to the value retrieved from the JWT and an empty list of credentials."
            },
            "name": "getAuthentication",
            "code": "private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }",
            "location": {
              "start": 149,
              "insert": 106,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 105,
                "end": 148
              }
            },
            "item_type": "method",
            "length": 19,
            "docLength": 43
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A configuration class `WebSecurity` that enables web security in an Spring Boot application. It disables CSRF and frame options, authorizes requests based on specific URLs and HTTP methods, and uses a stateLESS session management policy. Additionally, an authorization filter is added to authenticate requests.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.apigatewayservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n",
        "items": [
          {
            "id": "7020a67b-882d-c781-6b4a-1207200c80a9",
            "ancestors": [],
            "type": "function",
            "description": "is configured to disable CSRF and frame options, authorize requests based on specific URLs and HTTP methods, and use a stateLESS session management policy. Additionally, an authorization filter is added to authenticate requests.",
            "name": "WebSecurity",
            "code": "@EnableWebSecurity\n@Configuration\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n\n  public WebSecurity(Environment environment) {\n    this.environment = environment;\n  }\n\n  /**\n   * disables CSRF and frame options, and authorizes requests to specific URLs based\n   * on the environment property values. It also sets session management policy to stateless.\n   * \n   * @param http HTTP security configuration for the application, which is being\n   * customized and modified within the function.\n   * \n   * \t- `csrf()` - Disables Cross-Site Request Forgery (CSRF) protection.\n   * \t- `headers()` - Disables Frame Options (FO) protection.\n   * \t- `authorizeRequests()` - Configures which requests are authorized based on the\n   * specified antMatchers.\n   * \t+ `.antMatchers(environment.getProperty(\"api.h2console.url.path\"))` - Allows any\n   * request to the H2 console URL path.\n   * \t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))`\n   * - Allows any POST request to the registration URL path.\n   * \t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))`\n   * - Allows any POST request to the login URL path.\n   * \t+ `.anyRequest()` - Allows any other request.\n   * \t+ `.authenticated()` - Requires authentication for all requests.\n   * \t- `addFilter(new AuthorizationFilter(authenticationManager(), environment))` -\n   * Adds an Authorization Filter that uses the provided Authentication Manager and Environment.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }\n}",
            "location": {
              "start": 32,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 49,
            "docLength": 5
          },
          {
            "id": "dcc1ca43-6060-4b93-7e47-e12fce6bad77",
            "ancestors": [
              "7020a67b-882d-c781-6b4a-1207200c80a9"
            ],
            "type": "function",
            "description": "disables CSRF and frame options, and authorizes requests based on URL paths. It also sets session management policy to stateless.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "HTTP security context and provides methods for configuring various features, such as disabling CSRF and frame options, authorizing requests based on URL paths, and setting session management policies.\n\n* `csrf()`: Disables CSRF (Cross-Site Request Forgery) protection.\n* `headers()`: Disables Frame Options (FEO) protection.\n* `authorizeRequests()`: Configures the authorizer to permit all requests to the specified URLs. The URLs are defined by setting `antMatchers` to the desired paths, using the `permitAll()` method.\n* `AuthenticationManager`: This is an instance of the `AuthenticationManager` interface, which provides methods for authenticating users.\n* `SessionCreationPolicy`: Sets the session creation policy to `STATELESS`, which means that sessions will not be created.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override protected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF and frame options\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n\n    // Permit all requests to the H2 console URL path\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n\n    // Permit any POST request to the registration and login URL paths\n    .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n\n    // Require authentication for all other requests\n    .anyRequest().authenticated()\n\n    // Add an Authorization Filter that uses the provided Authentication Manager and Environment\n    .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n}\n",
              "description": ""
            },
            "name": "configure",
            "code": "@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }",
            "location": {
              "start": 63,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 62
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 22
          }
        ]
      }
    }
  },
  {
    "name": "ApiGatewayServiceApplicationTests.java",
    "path": "api-gateway-service/src/test/java/com/prathab/apigatewayservice/ApiGatewayServiceApplicationTests.java",
    "content": {
      "structured": {
        "description": "A test class for testing an Apigateway Service application using Spring Boot. The test class contains a single method \"contextLoads\" that verifies the proper loading of the application context.",
        "diagram": "digraph G {\n    label=\"com.prathab.apigatewayservice.ApiGatewayServiceApplicationTests\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "ac6090e9-8e87-92b3-be4b-55d849ed7947",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot test class for testing the Apigateway Service application. The single test method \"contextLoads\" verifies that the application context is properly loaded.",
            "name": "ApiGatewayServiceApplicationTests",
            "code": "@SpringBootTest\nclass ApiGatewayServiceApplicationTests {\n\n  /**\n   * is called when a Spring application context is loaded, and it performs some\n   * initialization tasks.\n   */\n  @Test\n  void contextLoads() {\n  }\n}",
            "location": {
              "start": 27,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 5
          },
          {
            "id": "a8e87030-1d30-a2bd-5044-ff69306504bf",
            "ancestors": [
              "ac6090e9-8e87-92b3-be4b-55d849ed7947"
            ],
            "type": "function",
            "description": "likely loads application data, configurations, or other essential components needed for its proper operation.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "package com.prathab.apigatewayservice;\n\n@SpringBootTest\nclass ApiGatewayServiceApplicationTests {\n\n  @Test\n  void contextLoads() {\n    // Some tests to verify that the application context loads properly\n    assertThat(context).isNotNull();\n    assertThat(context.getBeans()).hasSizeGreaterThan(0);\n    assertThat(context.getBean(ApiGatewayServiceApplication.class)).isNotNull();\n  }\n}\n",
              "description": ""
            },
            "name": "contextLoads",
            "code": "@Test\n  void contextLoads() {\n  }",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityServiceApplication.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/CommunityServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables Eureka client functionality and starts the application upon command line invocation. The `CommunityServiceApplication` class is annotated with `@SpringBootApplication` and `@EnableEurekaClient`, indicating that it is a Spring Boot application that uses Eureka for service discovery. The `main` method is used to launch the application, passing in any command-line arguments as input to the application.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.CommunityServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "1fbd2e6c-b167-44b9-5146-2c79a9ad0fc5",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka client functionality and starts the application upon command line invocation. It uses the `SpringBootApplication` and `@EnableEurekaClient` annotations to enable Eureka client functionality. The `main()` method runs the application instance of `CommunityServiceApplication`.",
            "name": "CommunityServiceApplication",
            "code": "@SpringBootApplication\n@EnableEurekaClient\npublic class CommunityServiceApplication {\n\n  /**\n   * runs a Spring application instance of `CommunityServiceApplication`.\n   * \n   * @param args command-line arguments passed to the `SpringApplication.run()` method\n   * when the application is launched.\n   * \n   * \t- `args`: An array of strings containing command-line arguments passed to the application.\n   * \t- Length: The number of elements in the `args` array, which is equal to the number\n   * of command-line arguments passed to the application.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(CommunityServiceApplication.class, args);\n  }\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 18,
            "docLength": 4
          },
          {
            "id": "a1f675ce-f780-cab6-0746-4b2a17637937",
            "ancestors": [
              "1fbd2e6c-b167-44b9-5146-2c79a9ad0fc5"
            ],
            "type": "function",
            "description": "starts the Community Service Application by running the `SpringApplication.run()` method with the `CommunityServiceApplication.class` as the argument and the `args` array as additional arguments.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "1 or more command-line arguments passed to the `SpringApplication.run()` method when invoking the `main()` method.\n\n* `SpringApplication.run()` is called with the `CommunityServiceApplication.class` and `args` parameters.\n* The `args` parameter is an array of strings representing command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(CommunityServiceApplication.class, args);\n  }",
            "location": {
              "start": 41,
              "insert": 31,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 30,
                "end": 40
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "DataLoader.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/bootstrap/DataLoader.java",
    "content": {
      "structured": {
        "description": "A `DataLoader` class that acts as a Spring Boot command line runner. The class loads data into a `CommunityRepository` and a `CommunityAdminRepository`. It creates a new `Community` object with a unique ID, sets its name and district, saves it to the repository, and then persists an `admin` object to the repository and links it to the community. Finally, the class updates the community with the saved admin.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.bootstrap.DataLoader Pages: 1 -->\n<svg width=\"232pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 232.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.communityservice.bootstrap.DataLoader</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"224,-30 0,-30 0,0 224,0 224,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.bootstrap.</text>\n<text text-anchor=\"middle\" x=\"112\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DataLoader</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"173,-85 51,-85 51,-66 173,-66 173,-85\"/>\n<text text-anchor=\"middle\" x=\"112\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommandLineRunner</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M112,-55.65C112,-47.36 112,-37.78 112,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"108.5,-55.87 112,-65.87 115.5,-55.87 108.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.bootstrap.DataLoader\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "cb30dca4-a4b9-b2bc-6b48-3273e7c1b43e",
            "ancestors": [],
            "type": "function",
            "description": "loads data into a Community and CommunityAdmin repository by persistings a community and an admin to the repository, updating the community with the saved admin, and saving the admin to the repository.",
            "name": "DataLoader",
            "code": "@Component\npublic class DataLoader implements CommandLineRunner {\n  private final CommunityRepository communityRepository;\n  private final CommunityAdminRepository communityAdminRepository;\n\n  public DataLoader(\n      CommunityRepository communityRepository,\n      CommunityAdminRepository communityAdminRepository) {\n    this.communityRepository = communityRepository;\n    this.communityAdminRepository = communityAdminRepository;\n  }\n\n  /**\n   * loads data.\n   */\n  @Override public void run(String... args) throws Exception {\n    loadData();\n  }\n\n  /**\n   * persists a community and an admin to the repository, updates the community with\n   * the saved admin, and saves the admin to the repository.\n   */\n  private void loadData() {\n    // Persist community to repo\n    var communityName = \"MyHome default community\";\n    var communityDistrict = \"MyHome default community district\";\n    var communityId = \"default-community-id-for-testing\";\n    var community = new Community();\n    community.setName(communityName);\n    community.setDistrict(communityDistrict);\n    community.setCommunityId(communityId);\n    var savedCommunity = communityRepository.save(community);\n\n    // Persist admin to repo\n    var communityAdmin = new CommunityAdmin();\n    var adminId = UUID.randomUUID().toString();\n    communityAdmin.setAdminId(adminId);\n    communityAdmin.getCommunities().add(savedCommunity);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n\n    // Update community with the saved admin\n    savedCommunity.getAdmins().add(savedCommunityAdmin);\n    communityRepository.save(savedCommunity);\n  }\n}",
            "location": {
              "start": 34,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 33
              }
            },
            "item_type": "class",
            "length": 46,
            "docLength": 7
          },
          {
            "id": "6786239d-b9f7-d698-2645-eaff51f9090a",
            "ancestors": [
              "cb30dca4-a4b9-b2bc-6b48-3273e7c1b43e"
            ],
            "type": "function",
            "description": "loads data.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class DataLoader implements CommandLineRunner {\n    private final CommunityRepository communityRepository;\n    private final CommunityAdminRepository communityAdminRepository;\n\n    public DataLoader(CommunityRepository communityRepository, \n                        CommunityAdminRepository communityAdminRepository) {\n        this.communityRepository = communityRepository;\n        this.communityAdminRepository = communityAdminRepository;\n    }\n\n    @Override public void run(String... args) throws Exception {\n        loadData();\n    }\n\n    private void loadData() {\n        // Persist community to repo\n        var communityName = \"MyHome default community\";\n        var communityDistrict = \"MyHome default community district\";\n        var communityId = \"default-community-id-for-testing\";\n        var community = new Community();\n        community.setName(communityName);\n        community.setDistrict(communityDistrict);\n        community.setCommunityId(communityId);\n        var savedCommunity = communityRepository.save(community);\n\n        // Persist admin to repo\n        var communityAdmin = new CommunityAdmin();\n        var adminId = UUID.randomUUID().toString();\n        communityAdmin.setAdminId(adminId);\n        communityAdmin.getCommunities().add(savedCommunity);\n        var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n\n        // Update community with the saved admin\n        savedCommunity.getAdmins().add(savedCommunityAdmin);\n        communityRepository.save(savedCommunity);\n    }\n}\n",
              "description": "\nIn this example, the method `run` is being overridden to call the private method `loadData`. The purpose of this class is to load data into a Community and CommunityAdmin repository, so it uses the `communityRepository` and `communityAdminRepository` objects provided in its constructor. The method `loadData` persists a community to the repository and then persists an admin to the repository and links them to the community. Finally, the method updates the community with the saved admin."
            },
            "name": "run",
            "code": "@Override public void run(String... args) throws Exception {\n    loadData();\n  }",
            "location": {
              "start": 49,
              "insert": 46,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 45,
                "end": 48
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 3
          },
          {
            "id": "9e26edcf-904b-27bd-fa43-1367172b8e80",
            "ancestors": [
              "cb30dca4-a4b9-b2bc-6b48-3273e7c1b43e"
            ],
            "type": "function",
            "description": "persistently creates and links a new community and its admin to the repository, updates the community with the saved admin, and saves both entities to the database.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// Create a new DataLoader object\n\tvar dataLoader = new DataLoader(new CommunityRepository(), new CommunityAdminRepository());\n\t\n\t// Run the loadData method\n\tdataLoader.loadData();\n}\n",
              "description": "\nIn this example, we create an instance of `DataLoader` and then call its `loadData()` method to execute the code in the method. The method persists a community and an admin to the repository, updates the community with the saved admin, and saves the admin to the repository."
            },
            "name": "loadData",
            "code": "private void loadData() {\n    // Persist community to repo\n    var communityName = \"MyHome default community\";\n    var communityDistrict = \"MyHome default community district\";\n    var communityId = \"default-community-id-for-testing\";\n    var community = new Community();\n    community.setName(communityName);\n    community.setDistrict(communityDistrict);\n    community.setCommunityId(communityId);\n    var savedCommunity = communityRepository.save(community);\n\n    // Persist admin to repo\n    var communityAdmin = new CommunityAdmin();\n    var adminId = UUID.randomUUID().toString();\n    communityAdmin.setAdminId(adminId);\n    communityAdmin.getCommunities().add(savedCommunity);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n\n    // Update community with the saved admin\n    savedCommunity.getAdmins().add(savedCommunityAdmin);\n    communityRepository.save(savedCommunity);\n  }",
            "location": {
              "start": 57,
              "insert": 53,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 52,
                "end": 56
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing communities and admins in a microservices architecture using Spring Webflux and Jackson. The code handles various endpoints such as retrieving details of a community by ID, listing all admins of a community, adding admins to a community, and returning the updated admin set for the specified community.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.CommunityController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            CreateCommunityResponse\n            GetCommunityDetailsResponse\n            GetAdminDetailsResponse\n            AddCommunityAdminResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            AddCommunityAdminRequest\n            CreateCommunityRequest\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        CommunityController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    CommunityController -> GetAdminDetailsResponse \n    CommunityController -> AddCommunityAdminResponse \n    AddCommunityAdminRequest -> CommunityController \n    CommunityController -> CreateCommunityResponse \n    CreateCommunityRequest -> CommunityController \n    CommunityController -> GetCommunityDetailsResponse \n}\n",
        "items": [
          {
            "id": "d43665a6-9f66-f085-404b-9b5991b1068f",
            "ancestors": [],
            "type": "function",
            "description": "in Spring Boot handles various operations related to communities, including retrieving community details, listing all admins of a community, adding admins to a community, and deleting admins from a community. The controller uses the CommunityService class for fetching community details and adding/deleting admins from/to a community.",
            "name": "CommunityController",
            "code": "@RestController\n@Slf4j\npublic class CommunityController {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  public CommunityController(\n      CommunityService communityService,\n      CommunityApiMapper communityApiMapper) {\n    this.communityService = communityService;\n    this.communityApiMapper = communityApiMapper;\n  }\n\n  /**\n   * returns a string message indicating that it is working on something.\n   * \n   * @returns \"Working\".\n   * \n   * The output is a string with the value \"Working\".\n   * The string indicates that the function is currently working on something and has\n   * not yet completed its task.\n   * It does not provide any additional information about the status of the work being\n   * done.\n   */\n  @GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }\n\n  /**\n   * creates a new community using a `CreateCommunityRequest` object and returns the\n   * created community as a `CreateCommunityResponse`.\n   * \n   * @param request CreateCommunityRequest object passed from the client-side application\n   * to the server-side method for creating a new community.\n   * \n   * \t- `@Valid`: This annotation indicates that the request body must be validated\n   * using the Java Validation API.\n   * \t- `@RequestBody`: This annotation specifies that the request body should be used\n   * as the input for the function.\n   * \t- `CreateCommunityRequest`: This is the class that defines the structure of the\n   * request body. It contains properties such as `name`, `description`, and `tags`.\n   * \n   * @returns a `CreateCommunityResponse` object containing the newly created community\n   * details.\n   * \n   * \t- `ResponseEntity`: This is an instance of the `ResponseEntity` class, which\n   * represents a response object in Spring WebFlux. It contains the HTTP status code\n   * and the body of the response.\n   * \t- `HttpStatus`: This is an instance of the `HttpStatus` class, which represents\n   * the HTTP status code of the response. In this case, the status code is set to `HttpStatus.CREATED`.\n   * \t- `Body`: This is an instance of the `CreateCommunityResponse` class, which\n   * represents the response body of the request. It contains the details of the created\n   * community.\n   */\n  @PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  /**\n   * receives a request to list all communities and returns a set of `GetCommunityDetailsResponse`\n   * objects containing the details of each community.\n   * \n   * @returns a set of `GetCommunityDetailsResponse` objects containing details of all\n   * communities.\n   * \n   * \t- `Set<GetCommunityDetailsResponse>` represents a set of community details responses.\n   * \t- `communityService.listAll()` returns a list of community details objects.\n   * \t- `communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails)`\n   * maps the list of community details objects to a set of get community details responses.\n   * \t- `HttpStatus.OK` represents the status code of the response, indicating that the\n   * request was successful.\n   * \t- `ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse)` returns\n   * a response entity with the status code and the body containing the set of get\n   * community details responses.\n   */\n  @GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  /**\n   * receives a request to retrieve details about a community with a given ID and returns\n   * a response entity containing the community details in JSON or XML format, based\n   * on the media type produced.\n   * \n   * @param communityId unique identifier for a community and is used to retrieve the\n   * corresponding community details from the service.\n   * \n   * @returns a `ResponseEntity` object containing the community details as a `GetCommunityDetailsResponse`.\n   * \n   * \t- `ResponseEntity`: This is an object that represents a HTTP response entity with\n   * a status code and a body. The status code indicates whether the request was\n   * successful or not, and the body contains the actual data returned by the function.\n   * \t- `body`: This property contains the data returned by the function in the form\n   * of a `GetCommunityDetailsResponse` object. This object has attributes such as\n   * `communityId`, `name`, `description`, `imageUrl`, and `createdAt`. These attributes\n   * represent the details of the community with the specified ID.\n   * \t- `status`: This property contains the HTTP status code associated with the\n   * response entity. The value of this property is typically `HttpStatus.OK`, indicating\n   * that the request was successful and the data was returned correctly.\n   */\n  @GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }\n\n  /**\n   * retrieves a set of administrators for a given community ID through community service\n   * and returns it in the form of `GetAdminDetailsResponseSet`.\n   * \n   * @param communityId unique identifier of a community for which the list of admins\n   * is being requested.\n   * \n   * @returns a set of `GetAdminDetailsResponse` objects containing details of all\n   * admins in a given community.\n   * \n   * \t- `ResponseEntity`: This is the top-level object returned by the function, which\n   * represents a response entity with an HTTP status code and a body.\n   * \t- `HttpStatus.OK`: This is the HTTP status code associated with the response\n   * entity, indicating that the request was successful.\n   * \t- `body`: This is a set of `GetAdminDetailsResponse` objects, which are the actual\n   * responses returned by the function. Each object in the set contains information\n   * about an admin for a community, including their ID, username, email, and role.\n   * \t- `communityService.getCommunityDetailsById(communityId).getAdmins()`: This is\n   * the method call that retrieves the list of admins for a specific community ID. The\n   * method returns a list of `Admin` objects, which are then mapped to `GetAdminDetailsResponse`\n   * objects using the `communityApiMapper`.\n   */\n  @GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }\n\n  /**\n   * adds admins to a community based on a request body containing the admin IDs to\n   * add. The function returns a response entity with the updated set of admins for the\n   * community.\n   * \n   * @param communityId id of the community to which the admin will be added.\n   * \n   * @param request AddCommunityAdminRequest object containing the information about\n   * the new admin to be added to the community.\n   * \n   * \t- `@Valid`: This annotation indicates that the request body must be validated\n   * using a bean validation processor.\n   * \t- `@RequestBody`: This annotation specifies that the request body should be\n   * processed as a JSON or XML document.\n   * \t- `AddCommunityAdminRequest`: This is the class representing the request body,\n   * which contains attributes related to adding admins to a community.\n   * \n   * @returns a `ResponseEntity` object containing an `AddCommunityAdminResponse` object\n   * with the updated admin set for the specified community.\n   * \n   * \t- `response`: an instance of `AddCommunityAdminResponse`, which contains information\n   * about the added admins to the community.\n   * \t+ `admins`: a set of administrator IDs, representing the added admins to the community.\n   * \n   * The function returns a `ResponseEntity` with a status code of `HttpStatus.CREATED`\n   * and the `AddCommunityAdminResponse` object as its body.\n   */\n  @PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }\n}",
            "location": {
              "start": 44,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 40,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 212,
            "docLength": 3
          },
          {
            "id": "3a20f077-7f14-a38c-304e-4f70059f5198",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "returns the string \"Working\".",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "\"Working\".\n\n* \"Working\": This is the value returned by the function, indicating that it is currently working on something.\n* Type: The return type of the function is a String, which means it returns a textual representation of the status.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void testStatus() throws Exception {\n    mockMvc.perform(get(\"/communities/status\"))\n        .andExpect(status().isOk())\n        .andExpect(content().string(\"Working\"));\n  }\n",
              "description": "\nThe example code above will test the method status using mockMvc and check if the response is OK (200) and that it contains the string \"Working\".     This test would be located in a class that extends MockMvcTest."
            },
            "name": "status",
            "code": "@GetMapping(\"/communities/status\")\n  public String status() {\n    return \"Working\";\n  }",
            "location": {
              "start": 68,
              "insert": 57,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 56,
                "end": 67
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 11
          },
          {
            "id": "d4eeff1d-fb40-98a6-db4f-6daa7fe2430a",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "receives a JSON or XML request body containing a `CreateCommunityRequest`, maps it to a `CommunityDto`, creates a new community using the `CommunityDto`, and returns a `CreateCommunityResponse` in HTTP status code `CREATED`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object containing the data to create a new community, which is converted into a CommunityDto object by the communityApiMapper and then used to create the new community using the communityService.\n\n* `@Valid`: This annotation indicates that the input request must be validated using the Java validation framework.\n* `@RequestBody`: This annotation specifies that the input request should be sent as a body in the HTTP request, rather than as query parameters or headers.\n* `CreateCommunityRequest`: This is the class that defines the structure of the input request. It likely contains fields for various properties of the community to be created, such as its name, description, and category.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the created community details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents the result of the HTTP request. It has a status code and a body, which contains the actual response data.\n* `HttpStatus`: This is the HTTP status code of the response, which indicates the result of the request. In this case, it is set to `HttpStatus.CREATED`.\n* `Body`: This is the main content of the response, which contains the created community details in the form of a `CreateCommunityResponse` object.\n* `CreateCommunityResponse`: This is a custom object that represents the created community. It has various properties, such as `id`, `name`, `description`, and `createdAt`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My community\");\nrequest.setDescription(\"This is a description of my community.\");\nrequest.setImageUrl(\"https://example.com/my_community_image.jpg\");\nResponseEntity<CreateCommunityResponse> response = createCommunity(request);\n",
              "description": "\nIn this example, the following objects are created:\n\n* A `CreateCommunityRequest` object with the name and description of the community.\n* A `ResponseEntity<CreateCommunityResponse>` object that represents the response to the request.\n\nThe method is then called using the `createCommunity` method, passing in the `CreateCommunityRequest` object as a parameter. The function returns a `ResponseEntity<CreateCommunityResponse>`, which contains information about the community created. This information includes its ID and image URL."
            },
            "name": "createCommunity",
            "code": "@PostMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    var requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n    var createdCommunity = communityService.createCommunity(requestCommunityDto);\n    var createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }",
            "location": {
              "start": 99,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 72,
                "end": 98
              }
            },
            "item_type": "method",
            "length": 14,
            "docLength": 26
          },
          {
            "id": "d445e261-5787-6791-2042-6a2e48c273d7",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "receives a request to list all communities and returns a response entity containing a set of `GetCommunityDetailsResponse` objects representing the listed communities, mapped by the `communityService` and converted into a response entity using `communityApiMapper`.",
            "params": [],
            "returns": {
              "type_name": "SetGetCommunityDetailsResponse",
              "description": "a set of `GetCommunityDetailsResponse` objects containing information about all communities.\n\n* `ResponseEntity`: This is the top-level class that represents the response to the request. It has an `HttpStatus` field that indicates the status code of the response (in this case, 200 OK).\n* `body`: This is a field that contains the actual response body, which in this case is a `Set` of `GetCommunityDetailsResponse` objects.\n* `GetCommunityDetailsResponse`: This class represents the individual community details responses returned in the set. It has several fields, including `id`, `name`, `description`, `imageUrl`, and `createdAt`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class CommunityController {\n    private final CommunityService communityService;\n    public CommunityController(CommunityService communityService) {\n        this.communityService = communityService;\n    }\n    \n    @GetMapping(\"/communities\")\n    public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunities() {\n        log.trace(\"Received request to list all communities\");\n        var communityDetails = communityService.listAll();\n        var communityDetailsResponse =\n            communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n        return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n    }\n}\n",
              "description": "\nThis example shows how the listAllCommunities method would be used in a RestController class, which is responsible for handling incoming requests and returning appropriate responses to the client. The communityService variable is passed into the constructor of this class, and it is then injected into the method listAllCommunities. The communityService is then called upon to retrieve all communities using the listAll() method, and the resultant set of Community objects is mapped to a Set<GetCommunityDetailsResponse> object using the communityApiMapper. The response entity returned by this function contains an HttpStatus of OK, which indicates that the request was successful, and the body contains the actual data returned by the function, which is the set of GetCommunityDetailsResponse objects representing all communities."
            },
            "name": "listAllCommunity",
            "code": "@GetMapping(\n      path = \"/communities\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetCommunityDetailsResponse>> listAllCommunity() {\n    log.trace(\"Received request to list all community\");\n    var communityDetails = communityService.listAll();\n    var communityDetailsResponse =\n        communityApiMapper.communitySetToGetCommunityDetailsResponseSet(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }",
            "location": {
              "start": 131,
              "insert": 114,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 113,
                "end": 130
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 17
          },
          {
            "id": "c3c63cae-e6d1-7fa1-cd40-ef535530a0be",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "receives a community ID and returns a response entity containing the details of the community, as well as the API response generated by `communityApiMapper`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community for which details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the details of the requested community in JSON or XML format.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that contains both a status code and a body. In this case, the status code is `HttpStatus.OK`, indicating that the request was successful.\n* `body`: This is the body of the response entity, which contains the details of the community returned by the `communityService`. It is an instance of the `GetCommunityDetailsResponse` class, which defines the structure of the response data.\n* `getCommunityDetailsById`: This is a method of the `communityService` class that returns the details of a community with a given ID. The method takes a single parameter, `communityId`, which is passed as a path variable in the function call.\n* `communityApiMapper`: This is an instance of a class that defines a mapping between the structure of the community details and the format required by the API. In this case, it maps the community details to the `GetCommunityDetailsResponse` class.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired private CommunityService communityService;\n\n// ...\n\nResponseEntity<GetCommunityDetailsResponse> response = communityController.listCommunityDetails(\"communityId\");\nGetCommunityDetailsResponse communityDetails = response.getBody();\nassertEquals(HttpStatus.OK, response.getStatusCode());\n",
              "description": "\nExplanation:\n\n* The method listCommunityDetails is called with the path variable \"communityId\".\n* The method returns a ResponseEntity object which contains an instance of GetCommunityDetailsResponse as its body.\n* We extract the body from the ResponseEntity object and assert that it is not null.\n* We also assert that the HTTP status code associated with the response entity is HttpStatus.OK, indicating that the request was successful and the data was returned correctly."
            },
            "name": "listCommunityDetails",
            "code": "@GetMapping(\n      path = \"/communities/{communityId}\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n    var communityDetails = communityService.getCommunityDetailsById(communityId);\n    var communityDetailsResponse =\n        communityApiMapper.communityToGetCommunityDetailsResponse(communityDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(communityDetailsResponse);\n  }",
            "location": {
              "start": 164,
              "insert": 143,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 142,
                "end": 163
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 21
          },
          {
            "id": "bb368f4c-46ad-2d83-8540-055ba1b5ee4d",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "receives a community ID and returns a set of `GetAdminDetailsResponse` objects containing information about the admins of that community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community whose admins are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAdminDetailsResponse",
              "description": "a set of `GetAdminDetailsResponse` objects containing information about the admins of a specific community.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring WebFlux. It contains information about the status code, headers, and body of the response.\n* `status()`: This method returns the HTTP status code of the response, which is set to OK (200) in this case.\n* `body()`: This method returns the contents of the response body, which is a set of `GetAdminDetailsResponse` objects in this case.\n* `getCommunityDetailsById()`: This method retrieves the details of a community with the given ID. It returns a `Community` object containing the ID, name, and other properties of the community.\n* `getAdmins()`: This method retrieves the list of admins for a given community. It returns a list of `Admin` objects containing the admin's ID, username, email, and other properties.\n* `communityApiMapper`: This is an instance of the `CommunityApiMapper` class, which is responsible for mapping the community details to and from the API response format.\n* `GetAdminDetailsResponseSet`: This is a set of `GetAdminDetailsResponse` objects, each containing the details of a single admin.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testListCommunityAdmins() {\n    // Arrange\n    var communityId = \"123456789\";\n    var expectedResponse = new AddAdminDetailsResponse();\n    expectedResponse.setAdmins(Set.of(\"user1\", \"user2\"));\n    \n    // Act\n    var responseEntity = listCommunityAdmins(communityId);\n    \n    // Assert\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n}\n",
              "description": "\nThis test case is a simple unit test that tests the method listCommunityAdmins with a given input communityId and verifies that it returns the expected response entity with an HTTP status code of 200 and the actual body containing the expected response. This test case is written in JUnit and uses mockito to provide a fake implementation of communityService."
            },
            "name": "listCommunityAdmins",
            "code": "@GetMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<Set<GetAdminDetailsResponse>> listCommunityAdmins(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n    var adminDetails = communityService.getCommunityDetailsById(communityId).getAdmins();\n    var getAdminDetailsResponseSet =\n        communityApiMapper.communityAdminSetToGetAdminDetailsResponseSet(adminDetails);\n    return ResponseEntity.status(HttpStatus.OK).body(getAdminDetailsResponseSet);\n  }",
            "location": {
              "start": 199,
              "insert": 177,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 176,
                "end": 198
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 22
          },
          {
            "id": "84643840-07b7-e49a-204f-44a904b3f283",
            "ancestors": [
              "d43665a6-9f66-f085-404b-9b5991b1068f"
            ],
            "type": "function",
            "description": "adds admins to a community based on a request from the client, updates the community's admin set, and returns a response with the updated admin set.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which an admin will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the information of the admin to be added to the community.\n\n* `@Valid`: This annotation indicates that the `AddCommunityAdminRequest` object must be validated using a bean validation framework before it can be processed by the method.\n* `@RequestBody`: This annotation indicates that the `AddCommunityAdminRequest` object should be serialized into the request body of the HTTP message, rather than being passed as a query parameter or a form submission.\n* `AddCommunityAdminRequest`: This is the class that represents the request payload for adding admins to a community. It contains properties such as `admins`, which is a list of admin IDs to be added to the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityAdminResponse",
              "description": "a `ResponseEntity` object containing an `AddCommunityAdminResponse` object with the updated admin set for the specified community.\n\n* `ResponseEntity`: This is a class that represents a response entity, which is a composite object that contains both a status and a body. In this case, the status is set to `HttpStatus.CREATED`, indicating that the request was successful and the community was created with the added admins.\n* `body`: This is a reference to an instance of the `AddCommunityAdminResponse` class, which contains information about the added admins.\n* `AddCommunityAdminResponse`: This is a class that represents the response to the add admin request. It has several properties:\n\t+ `admins`: This is a set of admin IDs that were added to the community.\n\t+ `communityId`: This is the ID of the community that was updated with the added admins.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AddCommunityAdminRequest request = new AddCommunityAdminRequest();\nrequest.setAdmins(Set.of(\"adminId1\", \"adminId2\"));\nResponseEntity<AddCommunityAdminResponse> response = communityController.addCommunityAdmin(\"communityId\", request);\nSet<String> addedAdmins = response.getBody().getAdmins();\n// addedAdmins should be a set of strings containing \"adminId1\" and \"adminId2\"\n",
              "description": ""
            },
            "name": "addCommunityAdmin",
            "code": "@PostMapping(\n      path = \"/communities/{communityId}/admins\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmin(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    var community = communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    var response = new AddCommunityAdminResponse();\n    var adminsSet =\n        community.getAdmins().stream().map(CommunityAdmin::getAdminId).collect(Collectors.toSet());\n    response.setAdmins(adminsSet);\n    return ResponseEntity.status(HttpStatus.CREATED).body(response);\n  }",
            "location": {
              "start": 239,
              "insert": 212,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 211,
                "end": 238
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 27
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between various models and DTOs related to communities in a web application using MapStruct. The mapper interface provides methods for converting CommunityDto to CreateCommunityResponse, GetCommunityDetailsResponse, GetAdminDetailsResponse, and vice versa. These conversions involve mapping data between the Community domain model and DTO, as well as between different sets of DTOs.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.mapper.CommunityApiMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n        CommunityAdmin\n    }\n    subgraph cluster_1 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_2 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                GetAdminDetailsResponse\n                GetCommunityDetailsResponse\n                CreateCommunityResponse\n            }\n            subgraph cluster_4 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateCommunityRequest\n            }\n            subgraph cluster_5 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    CommunityApiMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    subgraph cluster_6 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    CommunityApiMapper -> CommunityDto \n    CommunityAdmin -> CommunityApiMapper \n    CreateCommunityRequest -> CommunityApiMapper \n    CommunityApiMapper -> CreateCommunityResponse \n    CommunityApiMapper -> GetCommunityDetailsResponse \n    Community -> CommunityApiMapper \n    CommunityDto -> CommunityApiMapper \n    CommunityApiMapper -> GetAdminDetailsResponse \n}\n",
        "items": [
          {
            "id": "6ff0f86f-3baf-0691-3a47-51011d3a4d22",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various models and DTOs related to communities in a web application.",
            "name": "CommunityApiMapper",
            "code": "@Mapper\npublic interface CommunityApiMapper {\n  CommunityDto createCommunityRequestToCommunityDto(CreateCommunityRequest request);\n\n  CreateCommunityResponse communityDtoToCreateCommunityResponse(CommunityDto communityDto);\n\n  Set<GetCommunityDetailsResponse> communityDtoSetToGetCommunityDetailsResponseSet(\n      Set<CommunityDto> communityDtoSet);\n\n  GetCommunityDetailsResponse communityDtoToGetCommunityDetailsResponse(\n      CommunityDto communityDtoSet);\n\n  GetCommunityDetailsResponse communityToGetCommunityDetailsResponse(Community community);\n\n  Set<GetCommunityDetailsResponse> communitySetToGetCommunityDetailsResponseSet(\n      Set<Community> communitySet);\n\n  CreateCommunityResponse communityToCreateCommunityResponse(Community community);\n\n  GetAdminDetailsResponse communityAdminToGetAdminDetailsResponse(CommunityAdmin communityAdmin);\n\n  Set<GetAdminDetailsResponse> communityAdminSetToGetAdminDetailsResponseSet(\n      Set<CommunityAdmin> communityAdminSet);\n}",
            "location": {
              "start": 33,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 32
              }
            },
            "item_type": "interface",
            "length": 24,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AddCommunityAdminRequest.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/request/AddCommunityAdminRequest.java",
    "content": {
      "structured": {
        "description": "A class called `AddCommunityAdminRequest` that holds a set of community administrators. The class has a setter and getter method for the `admins` field, which is initialized with an empty set upon construction. The `admins` field is validated using the `@NotEmpty` annotation to ensure it contains at least one element.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.request.AddCommunityAdminRequest\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            AddCommunityAdminResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                AddCommunityAdminRequest [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    CommunityController\n    AddCommunityAdminRequest -> CommunityController \n    AddCommunityAdminRequest -> AddCommunityAdminResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "dae91fff-b2c7-1d80-b141-697eda4eabaa",
            "ancestors": [],
            "type": "function",
            "description": "is used to hold a set of community administrators.\nFields:\n\t- admins (Set<String>): in the AddCommunityAdminRequest class holds a set of strings representing community administrators.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<String>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "AddCommunityAdminRequest",
                "description": "in the AddCommunityAdminRequest class holds a set of strings representing community administrators."
              }
            ],
            "name": "AddCommunityAdminRequest",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\npublic class AddCommunityAdminRequest {\n  @NotEmpty\n  private Set<String> admins = new HashSet<>();\n}",
            "location": {
              "start": 32,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CreateCommunityRequest.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/request/CreateCommunityRequest.java",
    "content": {
      "structured": {
        "description": "A class called `CreateCommunityRequest` that has two mandatory fields: `name` and `district`. These fields are validated using Lombok's `@NotBlank` annotation. The class also uses Lombok's `@AllArgsConstructor`, `@NoArgsConstructor`, `@Getter`, and `@Setter` annotations for construction and accessor methods.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.request.CreateCommunityRequest\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    subgraph cluster_1 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        CommunityController\n        subgraph cluster_2 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n            subgraph cluster_4 {\n                label=\"response\"\n                color=\"#33363A\"\n                CreateCommunityResponse\n            }\n            subgraph cluster_5 {\n                label=\"request\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    CreateCommunityRequest [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    CreateCommunityRequest -> CommunityApiMapper \n    CreateCommunityRequest -> CommunityController \n    CreateCommunityRequest -> CreateCommunityResponse [style=\"dashed\"]\n    CreateCommunityRequest -> CommunityDto [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "18c21897-62a7-12be-5f40-ff10b685c8b7",
            "ancestors": [],
            "type": "function",
            "description": "has two mandatory fields: name and district, which are validated using Lombok's @NotBlank annotation.\nFields:\n\t- name (String): in the CreateCommunityRequest class represents a required string value for identifying a community.\n\t- district (String): in the CreateCommunityRequest class is a non-empty string value that is mandated by Lombok's @NotBlank annotation.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateCommunityRequest",
                "description": "in the CreateCommunityRequest class represents a required string value for identifying a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateCommunityRequest",
                "description": "in the CreateCommunityRequest class is a non-empty string value that is mandated by Lombok's @NotBlank annotation."
              }
            ],
            "name": "CreateCommunityRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateCommunityRequest {\n  @NotBlank\n  private String name;\n  @NotBlank\n  private String district;\n}",
            "location": {
              "start": 34,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 33
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "AddCommunityAdminResponse.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/response/AddCommunityAdminResponse.java",
    "content": {
      "structured": {
        "description": "An object named AddCommunityAdminResponse that stores and retrieves a set of strings representing community administrators. The class uses Lombok annotations for construction and getting/setting fields.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.response.AddCommunityAdminResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                AddCommunityAdminResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            AddCommunityAdminRequest\n        }\n    }\n    CommunityController\n    CommunityController -> AddCommunityAdminResponse \n    AddCommunityAdminRequest -> AddCommunityAdminResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "c57a120f-b33a-ecac-ea41-d8a1e6360c69",
            "ancestors": [],
            "type": "function",
            "description": "represents a set of strings containing usernames of community administrators.\nFields:\n\t- admins (Set<String>): in the AddCommunityAdminResponse class represents a set of strings containing usernames of community administrators.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "AddCommunityAdminResponse",
                "description": "in the AddCommunityAdminResponse class represents a set of strings containing usernames of community administrators."
              }
            ],
            "name": "AddCommunityAdminResponse",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\npublic class AddCommunityAdminResponse {\n  private Set<String> admins;\n}",
            "location": {
              "start": 32,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "CreateCommunityResponse.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/response/CreateCommunityResponse.java",
    "content": {
      "structured": {
        "description": "A `CreateCommunityResponse` class with a single field, `communityId`, which represents a unique identifier for a community. The class is annotated with `@AllArgsConstructor`, `@NoArgsConstructor`, `@Getter`, and `@Setter`, indicating the use of Lombok's builders to simplify the construction of the class and its fields.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.response.CreateCommunityResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        CommunityController\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateCommunityRequest\n            }\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n            subgraph cluster_4 {\n                label=\"response\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    CreateCommunityResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    subgraph cluster_5 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    subgraph cluster_6 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    CreateCommunityRequest -> CreateCommunityResponse [style=\"dashed\"]\n    CommunityApiMapper -> CreateCommunityResponse \n    CommunityDto -> CreateCommunityResponse [style=\"dashed\"]\n    CommunityController -> CreateCommunityResponse \n    Community -> CreateCommunityResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "9c83f46b-7ab2-b8af-c54d-bf908db2e754",
            "ancestors": [],
            "type": "function",
            "description": "represents a response from creating a community with an assigned unique identifier known as \"communityId.\"\nFields:\n\t- communityId (String): in the CreateCommunityResponse class represents a unique identifier for a community.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateCommunityResponse",
                "description": "in the CreateCommunityResponse class represents a unique identifier for a community."
              }
            ],
            "name": "CreateCommunityResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateCommunityResponse {\n  private String communityId;\n}",
            "location": {
              "start": 30,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "GetAdminDetailsResponse.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/response/GetAdminDetailsResponse.java",
    "content": {
      "structured": {
        "description": "A class called `GetAdminDetailsResponse` with a single field `adminId` of type String. The class uses Lombok annotations for automated generation of constructors, getters, and setters.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.response.GetAdminDetailsResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        CommunityController\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    GetAdminDetailsResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    subgraph cluster_4 {\n        label=\"domain\"\n        color=\"#33363A\"\n        CommunityAdmin\n    }\n    CommunityAdmin -> GetAdminDetailsResponse [style=\"dashed\"]\n    CommunityController -> GetAdminDetailsResponse \n    CommunityApiMapper -> GetAdminDetailsResponse \n}\n",
        "items": [
          {
            "id": "df8a6edb-d276-23b8-514a-83147d414f07",
            "ancestors": [],
            "type": "function",
            "description": "represents a response with an administrator's unique identifier within a system or organization.\nFields:\n\t- adminId (String): in the GetAdminDetailsResponse class represents a unique identifier for an administrator within a system or organization.\n\n",
            "fields": [
              {
                "name": "adminId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "GetAdminDetailsResponse",
                "description": "in the GetAdminDetailsResponse class represents a unique identifier for an administrator within a system or organization."
              }
            ],
            "name": "GetAdminDetailsResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class GetAdminDetailsResponse {\n  private String adminId;\n}",
            "location": {
              "start": 30,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "GetCommunityDetailsResponse.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/controllers/models/response/GetCommunityDetailsResponse.java",
    "content": {
      "structured": {
        "description": "A class called `GetCommunityDetailsResponse` that represents the response of a `GetCommunityDetails` method. The class has four fields: `communityId`, `name`, `district`, each representing a unique identifier and name of a community, along with its district information.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.controllers.models.response.GetCommunityDetailsResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        CommunityController\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    GetCommunityDetailsResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n        }\n    }\n    subgraph cluster_4 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    subgraph cluster_5 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    CommunityController -> GetCommunityDetailsResponse \n    Community -> GetCommunityDetailsResponse [style=\"dashed\"]\n    CommunityApiMapper -> GetCommunityDetailsResponse \n    CommunityDto -> GetCommunityDetailsResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "b0c458c7-1b9b-e8b6-b649-e6ee41033cfb",
            "ancestors": [],
            "type": "function",
            "description": "has four fields representing a community ID, name, district, and is marked with annotations for AllArgsConstructor, NoArgsConstructor, Getter, and Setter.\nFields:\n\t- communityId (String): represents a unique identifier for a specific community.\n\t- name (String): in the `GetCommunityDetailsResponse` class represents a string value that contains the name of the community associated with the given community ID.\n\t- district (String): represents the name of the district where the community associated with the given community ID is located.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "GetCommunityDetailsResponse",
                "description": "represents a unique identifier for a specific community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "GetCommunityDetailsResponse",
                "description": "in the `GetCommunityDetailsResponse` class represents a string value that contains the name of the community associated with the given community ID."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "GetCommunityDetailsResponse",
                "description": "represents the name of the district where the community associated with the given community ID is located."
              }
            ],
            "name": "GetCommunityDetailsResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class GetCommunityDetailsResponse {\n  private String communityId;\n  private String name;\n  private String district;\n}",
            "location": {
              "start": 34,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 33
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base entity class `BaseEntity` that serves as a superclass for all JPA entities. The class has an `@Id` field `id` generated using the `GeneratedValue` annotation with strategy `IDENTITY`. This means that each instance of the class will have a unique, automatically-generated ID. Additionally, the class includes Lombok annotations for getting and setting the `id` field, as well as for excluding it from the constructor and having all fields initialized by the framework.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"584pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 584.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.prathab.communityservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"325,-54 110,-54 110,-24 325,-24 325,-54\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"217.5\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-78 361,-78 361,-48 576,-48 576,-78\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-50.24C343.64,-51.06 352.2,-51.89 360.64,-52.7\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"335.47,-46.76 325.18,-49.28 334.8,-53.73 335.47,-46.76\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1CommunityAdmin.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-30 361,-30 361,0 576,0 576,-30\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-27.76C343.64,-26.94 352.2,-26.11 360.64,-25.3\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"334.8,-24.27 325.18,-28.72 335.47,-31.24 334.8,-24.27\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-48.5 0,-48.5 0,-29.5 74,-29.5 74,-48.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.31,-39C92.36,-39 101.01,-39 109.91,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.12,-35.5 74.12,-39 84.12,-42.5 84.12,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.domain.BaseEntity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "48e9d7fb-9ddf-438d-3a4a-312d2b14f48c",
            "ancestors": [],
            "type": "function",
            "description": "serves as a base class for all JPA Entities, providing an automatically generated identity ID and implementing the necessary interfaces for serialization and persistence.\nFields:\n\t- id (Long): in the BaseEntity class is an automatically generated unique identifier for each entity instance.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "BaseEntity",
                "description": "in the BaseEntity class is an automatically generated unique identifier for each entity instance."
              }
            ],
            "name": "BaseEntity",
            "code": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "Community.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/domain/Community.java",
    "content": {
      "structured": {
        "description": "An entity called `Community` that represents a valid user in a service. The entity has fields for name, communityId, district, and a many-to-many relationship with another entity called `CommunityAdmin`. The `CommunityAdmin` entity is joined to the `Community` entity through a `@JoinTable`, and the relationship is defined using `@ManyToMany` annotation with `fetch=FetchType.EAGER`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"584pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 584.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.prathab.communityservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"325,-54 110,-54 110,-24 325,-24 325,-54\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"217.5\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-78 361,-78 361,-48 576,-48 576,-78\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-50.24C343.64,-51.06 352.2,-51.89 360.64,-52.7\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"335.47,-46.76 325.18,-49.28 334.8,-53.73 335.47,-46.76\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1CommunityAdmin.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-30 361,-30 361,0 576,0 576,-30\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-27.76C343.64,-26.94 352.2,-26.11 360.64,-25.3\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"334.8,-24.27 325.18,-28.72 335.47,-31.24 334.8,-24.27\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-48.5 0,-48.5 0,-29.5 74,-29.5 74,-48.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.31,-39C92.36,-39 101.01,-39 109.91,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.12,-35.5 74.12,-39 84.12,-42.5 84.12,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.domain.Community\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"services\"\n        color=\"#33363A\"\n        CommunityAdminService\n        CommunityService\n        subgraph cluster_1 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            CommunityAdminSDJpaService\n            CommunitySDJpaService\n        }\n    }\n    subgraph cluster_2 {\n        label=\"domain\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            Community [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_3 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityAdminDto\n        CommunityDto\n        subgraph cluster_4 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            CommunityMapper\n        }\n    }\n    subgraph cluster_5 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_6 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_7 {\n                label=\"response\"\n                color=\"#33363A\"\n                GetCommunityDetailsResponse\n                CreateCommunityResponse\n            }\n            subgraph cluster_8 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n        }\n    }\n    subgraph cluster_9 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        CommunityRepository\n    }\n    Community -> GetCommunityDetailsResponse [style=\"dashed\"]\n    CommunityAdminDto -> Community [style=\"dashed\"]\n    CommunityAdminSDJpaService -> Community \n    CommunityService -> Community \n    CommunityRepository -> Community \n    Community -> CommunityDto [style=\"dashed\"]\n    Community -> CreateCommunityResponse [style=\"dashed\"]\n    Community -> CommunityApiMapper \n    CommunityAdminService -> Community \n    Community -> CommunityMapper \n    CommunitySDJpaService -> Community \n    CommunityDto -> Community [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "a55c9301-6f9b-01a1-b44c-c311c3945d0e",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service and has a many-to-many relationship with CommunityAdmins.\nFields:\n\t- admins (Set<CommunityAdmin>): in the Community entity represents a many-to-many relationship between Community objects and CommunityAdmin objects, where each Community object can have multiple administrators and each administrator can manage multiple Communities.\n\t- name (String): in the Community class represents a string value that identifies the community.\n\t- communityId (String): in the Community class represents a unique identifier for a specific community.\n\t- district (String): in the Community entity represents a string value that identifies the administrative division where the community is located.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<CommunityAdmin>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "in the Community entity represents a many-to-many relationship between Community objects and CommunityAdmin objects, where each Community object can have multiple administrators and each administrator can manage multiple Communities."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "in the Community class represents a string value that identifies the community."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "in the Community class represents a unique identifier for a specific community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "in the Community entity represents a string value that identifies the administrative division where the community is located."
              }
            ],
            "name": "Community",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Setter\n@Entity\npublic class Community extends BaseEntity {\n  @ManyToMany(fetch = FetchType.EAGER)\n  /*@JoinTable(name = \"community_admins\",\n      joinColumns = @JoinColumn(name = \"community_id\"),\n      inverseJoinColumns = @JoinColumn(name = \"admin_id\"))*/\n  private Set<CommunityAdmin> admins = new HashSet<>();\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String communityId;\n  @Column(nullable = false)\n  private String district;\n}",
            "location": {
              "start": 33,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 18,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdmin.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/domain/CommunityAdmin.java",
    "content": {
      "structured": {
        "description": "An entity named `CommunityAdmin` that represents a set of communities managed by an admin. The entity has a unique ID for the admin and a many-to-many relationship with Communities, with the mappedBy attribute referring to the inverse side of the relationship. Additionally, it has a field for the adminId, which is a unique identifier for an administrator of one or more communities in the application.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"584pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 584.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.prathab.communityservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"325,-54 110,-54 110,-24 325,-24 325,-54\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"217.5\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-78 361,-78 361,-48 576,-48 576,-78\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-50.24C343.64,-51.06 352.2,-51.89 360.64,-52.7\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"335.47,-46.76 325.18,-49.28 334.8,-53.73 335.47,-46.76\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1CommunityAdmin.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"576,-30 361,-30 361,0 576,0 576,-30\"/>\n<text text-anchor=\"start\" x=\"369\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"468.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M335.14,-27.76C343.64,-26.94 352.2,-26.11 360.64,-25.3\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"334.8,-24.27 325.18,-28.72 335.47,-31.24 334.8,-24.27\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-48.5 0,-48.5 0,-29.5 74,-29.5 74,-48.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.31,-39C92.36,-39 101.01,-39 109.91,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.12,-35.5 74.12,-39 84.12,-42.5 84.12,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.domain.CommunityAdmin\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"response\"\n                color=\"#33363A\"\n                GetAdminDetailsResponse\n            }\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n        }\n    }\n    subgraph cluster_4 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityAdminDto\n        subgraph cluster_5 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            CommunityAdminMapper\n        }\n    }\n    subgraph cluster_6 {\n        label=\"domain\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityAdmin [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_7 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        CommunityAdminRepository\n    }\n    CommunityAdmin -> CommunityApiMapper \n    CommunityAdminDto -> CommunityAdmin [style=\"dashed\"]\n    CommunityAdminMapper -> CommunityAdmin \n    CommunityAdmin -> CommunityAdminMapper \n    CommunityAdmin -> CommunityAdminDto [style=\"dashed\"]\n    CommunityAdmin -> GetAdminDetailsResponse [style=\"dashed\"]\n    CommunityAdminRepository -> CommunityAdmin \n}\n",
        "items": [
          {
            "id": "e8cfad97-bee2-f497-6444-b0b4653e9d68",
            "ancestors": [],
            "type": "function",
            "description": "represents a set of communities managed by an administrator with a unique identifier for the admin.\nFields:\n\t- communities (Set<Community>): in the CommunityAdmin class represents a many-to-many relationship between the CommunityAdmin entity and the Community entity, with the mappedBy attribute referring to the inverse side of the relationship.\n\t- adminId (String): in the CommunityAdmin class represents an unique identifier for an administrator of one or more communities in the application.\n\n",
            "fields": [
              {
                "name": "communities",
                "type_name": "Set<Community>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "CommunityAdmin",
                "description": "in the CommunityAdmin class represents a many-to-many relationship between the CommunityAdmin entity and the Community entity, with the mappedBy attribute referring to the inverse side of the relationship."
              },
              {
                "name": "adminId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityAdmin",
                "description": "in the CommunityAdmin class represents an unique identifier for an administrator of one or more communities in the application."
              }
            ],
            "name": "CommunityAdmin",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CommunityAdmin extends BaseEntity {\n\n  @Column(nullable = false)\n  @ManyToMany(mappedBy = \"admins\")\n  private Set<Community> communities = new HashSet<>();\n  @Column(nullable = false)\n  private String adminId;\n}",
            "location": {
              "start": 39,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdminDto.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/dto/CommunityAdminDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) called `CommunityAdminDto` with a single field `adminId`, which represents a unique identifier for a community administrator. The field is annotated with `@Getter` and `@Setter`, indicating that getter and setter methods will be generated automatically by the Lombok tool. Additionally, the field is annotated with `@AllArgsConstructor` and `@NoArgsConstructor`, indicating that constructors will be generated automatically for this class.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.dto.CommunityAdminDto\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityAdminDto [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n        subgraph cluster_1 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            CommunityAdminMapper\n        }\n    }\n    subgraph cluster_2 {\n        label=\"services\"\n        color=\"#33363A\"\n        CommunityAdminService\n        subgraph cluster_3 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            CommunityAdminSDJpaService\n        }\n    }\n    subgraph cluster_4 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n        CommunityAdmin\n    }\n    CommunityAdminDto -> CommunityAdmin [style=\"dashed\"]\n    CommunityAdminDto -> CommunityAdminMapper \n    CommunityAdminDto -> Community [style=\"dashed\"]\n    CommunityAdminDto -> CommunityAdminSDJpaService \n    CommunityAdmin -> CommunityAdminDto [style=\"dashed\"]\n    CommunityAdminDto -> CommunityAdminService \n}\n",
        "items": [
          {
            "id": "130397e0-2d3f-eba5-f14c-c82952ad251a",
            "ancestors": [],
            "type": "function",
            "description": "has a single field called adminId for storing a unique identifier of an administrator for a community.\nFields:\n\t- adminId (String): in the CommunityAdminDto class represents a unique identifier for a community administrator.\n\n",
            "fields": [
              {
                "name": "adminId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityAdminDto",
                "description": "in the CommunityAdminDto class represents a unique identifier for a community administrator."
              }
            ],
            "name": "CommunityAdminDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CommunityAdminDto {\n  private String adminId;\n}",
            "location": {
              "start": 31,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityDto` class that represents a community with various attributes such as ID, community ID, name, district, and set of administrators. The class uses Lombok's `@AllArgsConstructor`, `@Getter`, `@NoArgsConstructor`, and `@Setter` annotations to provide a convenient way of constructing and accessing the class's fields without having to manually write getters and setters.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.dto.CommunityDto\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityDto [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n        subgraph cluster_1 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            CommunityMapper\n        }\n    }\n    subgraph cluster_2 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_3 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_4 {\n                label=\"request\"\n                color=\"#33363A\"\n                CreateCommunityRequest\n            }\n            subgraph cluster_5 {\n                label=\"response\"\n                color=\"#33363A\"\n                GetCommunityDetailsResponse\n                CreateCommunityResponse\n            }\n            subgraph cluster_6 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                CommunityApiMapper\n            }\n        }\n    }\n    subgraph cluster_7 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    subgraph cluster_8 {\n        label=\"services\"\n        color=\"#33363A\"\n        CommunityService\n        subgraph cluster_9 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            CommunitySDJpaService\n        }\n    }\n    CommunityDto -> Community [style=\"dashed\"]\n    CommunityApiMapper -> CommunityDto \n    CreateCommunityRequest -> CommunityDto [style=\"dashed\"]\n    CommunityDto -> GetCommunityDetailsResponse [style=\"dashed\"]\n    CommunityDto -> CommunityMapper \n    CommunityMapper -> CommunityDto \n    CommunityDto -> CreateCommunityResponse [style=\"dashed\"]\n    CommunityDto -> CommunitySDJpaService \n    CommunityDto -> CommunityService \n    CommunityDto -> CommunityApiMapper \n    Community -> CommunityDto [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "003f6866-2de3-f393-4a4d-9ed7766624b6",
            "ancestors": [],
            "type": "function",
            "description": "represents a community with an ID, community ID, name, district, and set of administrators.\nFields:\n\t- id (Long): represents a unique identifier for each community in the system.\n\t- communityId (String): represents an identifier for a specific community within the system.\n\t- name (String): in the CommunityDto class represents the name of a community.\n\t- district (String): represents a string value identifying the administrative division where the community is located.\n\t- admins (Set<CommunityAdminDto>): in the CommunityDto class represents a set of CommunityAdminDto objects, which contain information about the administrators of a community.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a unique identifier for each community in the system."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents an identifier for a specific community within the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents the name of a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a string value identifying the administrative division where the community is located."
              },
              {
                "name": "admins",
                "type_name": "Set<CommunityAdminDto>",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a set of CommunityAdminDto objects, which contain information about the administrators of a community."
              }
            ],
            "name": "CommunityDto",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Setter\npublic class CommunityDto {\n  private Long id;\n  private String communityId;\n  private String name;\n  private String district;\n  private Set<CommunityAdminDto> admins;\n}",
            "location": {
              "start": 38,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 37
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdminMapper.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/dto/mapper/CommunityAdminMapper.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityAdminMapper` that provides a mapping between `CommunityAdminDto` and `CommunityAdmin` objects through two methods: `communityAdminDtoToCommunityAdmin` and `communityAdminToCommunityAdminDto`. The interface utilizes the `Mapstruct` package for generating high-quality mappings.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.CommunityAdmin Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.CommunityAdmin</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.dto.mapper.CommunityAdminMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        CommunityAdmin\n    }\n    subgraph cluster_1 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityAdminDto\n        subgraph cluster_2 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                CommunityAdminMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    CommunityAdminMapper -> CommunityAdmin \n    CommunityAdmin -> CommunityAdminMapper \n    CommunityAdminDto -> CommunityAdminMapper \n}\n",
        "items": [
          {
            "id": "1a1c2cc8-cafd-a4bc-c046-43fe8c0a2a60",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between CommunityAdminDto and CommunityAdmin objects through two methods: communityAdminDtoToCommunityAdmin and communityAdminToCommunityAdminDto.",
            "name": "CommunityAdminMapper",
            "code": "@Mapper\npublic interface CommunityAdminMapper {\n  CommunityAdmin communityAdminDtoToCommunityAdmin(CommunityAdminDto communityAdminDto);\n\n  CommunityAdminDto communityAdminToCommunityAdminDto(CommunityAdmin communityAdmin);\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 6,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityMapper` that provides a mapping between `Community` and `CommunityDto` objects, as well as between sets of Communities and sets of CommunityDtos. The interface includes four methods: `communityToCommunityDto`, `communityDtoToCommunity`, `communitySetToCommunityDtoSet`, and `communityDtoSetToCommunitySet`. These methods allow for the conversion of objects and sets of objects between these two related data structures.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.Community Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.dto.mapper.CommunityMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n        subgraph cluster_1 {\n            label=\"mapper\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                CommunityMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_2 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    Community -> CommunityMapper \n    CommunityDto -> CommunityMapper \n    CommunityMapper -> CommunityDto \n}\n",
        "items": [
          {
            "id": "de81ab1a-9435-fc9f-7e42-14c9af37f93a",
            "ancestors": [],
            "type": "function",
            "description": "provides mappings between Community and CommunityDto objects, as well as between sets of Communities and sets of CommunityDtos.",
            "name": "CommunityMapper",
            "code": "@Mapper\npublic interface CommunityMapper {\n  CommunityDto communityToCommunityDto(Community community);\n\n  Community communityDtoToCommunity(CommunityDto communityDto);\n\n  Set<CommunityDto> communitySetToCommunityDtoSet(Set<Community> communitySet);\n\n  Set<Community> communityDtoSetToCommunitySet(Set<CommunityDto> communityDtoSet);\n}",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdminRepository.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/repositories/CommunityAdminRepository.java",
    "content": {
      "structured": {
        "description": "A Spring Data CrudRepository interface for storing and retrieving CommunityAdmin objects, with an additional findByAdminId method to retrieve a specific CommunityAdmin object by its admin ID. The interface extends the CrudRepository abstract class and adds the findByAdminId method to allow for more flexible querying of CommunityAdmin objects.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.CommunityAdmin Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.CommunityAdmin</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.repositories.CommunityAdminRepository\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        CommunityAdmin\n    }\n    subgraph cluster_1 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityAdminRepository [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    CommunityAdminRepository -> CommunityAdmin \n}\n",
        "items": [
          {
            "id": "737349f9-8432-fdab-8c46-e5d39c27dc92",
            "ancestors": [],
            "type": "function",
            "description": "defines a Spring Data CrudRepository for storing and retrieving CommunityAdmin objects, with an additional findByAdminId method to retrieve a specific CommunityAdmin object by its admin ID.",
            "name": "CommunityAdminRepository",
            "code": "@Repository\npublic interface CommunityAdminRepository extends CrudRepository<CommunityAdmin, Long> {\n  CommunityAdmin findByAdminId(String adminId);\n}",
            "location": {
              "start": 28,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 4,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityRepository.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/repositories/CommunityRepository.java",
    "content": {
      "structured": {
        "description": "A Spring Data Repository for managing Community objects in a database, with additional methods to find specific communities by communityId. The CommunityRepository interface extends the CrudRepository interface and provides two methods: findAll() to retrieve all Community objects, and findByCommunityId(String) to retrieve a specific Community object by its communityId.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.Community Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.repositories.CommunityRepository\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    subgraph cluster_1 {\n        label=\"repositories\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityRepository [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    CommunityRepository -> Community \n}\n",
        "items": [
          {
            "id": "54a7ef62-85e4-1a80-ee4c-92c665f87927",
            "ancestors": [],
            "type": "function",
            "description": "defines a Spring Data Repository for managing Community objects in a database with additional find specific community by communityId methods.",
            "name": "CommunityRepository",
            "code": "@Repository\npublic interface CommunityRepository extends CrudRepository<Community, Long> {\n\n  Community findByCommunityId(String communityId);\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdminService.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/services/CommunityAdminService.java",
    "content": {
      "structured": {
        "description": "an interface `CommunityAdminService` that allows for adding community administrators to a community through the `addCommunityAdmin` method. The interface imports packages `com.prathab.communityservice.domain` and `com.prathab.communityservice.dto`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.Community Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.services.CommunityAdminService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityAdminDto\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityAdminService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_2 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    CommunityAdminDto -> CommunityAdminService \n    CommunityAdminService -> Community \n}\n",
        "items": [
          {
            "id": "53949e39-185d-2699-104e-214c2fec88f7",
            "ancestors": [],
            "type": "function",
            "description": "allows for adding community administrators to a community through the addCommunityAdmin method.",
            "name": "CommunityAdminService",
            "code": "public interface CommunityAdminService {\n  Community addCommunityAdmin(String communityId, CommunityAdminDto communityAdminDto);\n}",
            "location": {
              "start": 26,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityService` that provides methods for creating and listing communities, retrieving community details, and adding administrators to communities. The interface includes four methods: `createCommunity`, `listAll`, `getCommunityDetailsById`, and `addAdminsToCommunity`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.Community Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.services.CommunityService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    subgraph cluster_1 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    subgraph cluster_2 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            CommunityService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    CommunityService -> Community \n    CommunityDto -> CommunityService \n}\n",
        "items": [
          {
            "id": "1f1d190a-5709-af88-9242-7d8314145ae0",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating and listing communities, retrieving community details, and adding administrators to communities.",
            "name": "CommunityService",
            "code": "public interface CommunityService {\n  Community createCommunity(CommunityDto communityDto);\n\n  Set<Community> listAll();\n\n  Community getCommunityDetailsById(String communityId);\n\n  Community addAdminsToCommunity(String communityId, Set<String> admins);\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 9,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAdminSDJpaService.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/services/springdatajpa/CommunityAdminSDJpaService.java",
    "content": {
      "structured": {
        "description": "A `CommunityAdminSDJpaService` class that implements `CommunityAdminService` interface. It provides a way to manage community admins in a Spring Data JPA environment through methods like `addCommunityAdmin()`. The class uses dependencies on `CommunityAdminRepository` and `CommunityAdminMapper` to interact with the database and map DTOs to entity objects, respectively.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.Community Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.services.springdatajpa.CommunityAdminSDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                CommunityAdminSDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_2 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityAdminDto\n    }\n    subgraph cluster_3 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    CommunityAdminDto -> CommunityAdminSDJpaService \n    CommunityAdminSDJpaService -> Community \n}\n",
        "items": [
          {
            "id": "53cb3c71-6f29-daa3-b043-97433eba264a",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the CommunityAdminService interface that provides methods for managing community admins in a Spring Data JPA environment. The class has fields for the CommunityAdminRepository and CommunityAdminMapper, which are used to interact with the database and map DTOs to entity objects, respectively. The addCommunityAdmin method is implemented to add a new community admin to the database, but it is incomplete and requires further development to complete its functionality.",
            "name": "CommunityAdminSDJpaService",
            "code": "public class CommunityAdminSDJpaService implements CommunityAdminService {\n  private final CommunityAdminRepository communityAdminRepository;\n  private final CommunityAdminMapper communityAdminMapper;\n\n  public CommunityAdminSDJpaService(\n      CommunityAdminRepository communityAdminRepository,\n      CommunityAdminMapper communityAdminMapper) {\n    this.communityAdminRepository = communityAdminRepository;\n    this.communityAdminMapper = communityAdminMapper;\n  }\n\n  /**\n   * adds a new CommunityAdmin to the database by first mapping the provided Dto object\n   * to a CommunityAdmin object, then saving it to the repository.\n   * \n   * @param communityId identifying identifier for the community being added an administrator.\n   * \n   * @param communityAdminDto CommunityAdmin data that will be saved in the database.\n   * \n   * \t- `communityId`: A string representing the ID of the community to which the admin\n   * is being added.\n   * \t- `communityAdminDto`: An object containing information about the community admin\n   * to be added, including their name and email address.\n   * \n   * @returns a saved CommunityAdmin instance.\n   * \n   * \t- `communityAdmin`: This is the newly created CommunityAdmin object, which has\n   * been saved to the database using the `save()` method.\n   * \t- `savedCommunityAdmin`: This is the ID of the newly created CommunityAdmin object\n   * in the database.\n   */\n  @Override\n  public Community addCommunityAdmin(String communityId, CommunityAdminDto communityAdminDto) {\n    var communityAdmin = communityAdminMapper.communityAdminDtoToCommunityAdmin(communityAdminDto);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n    // TODO complete this\n    return null;\n  }\n}",
            "location": {
              "start": 33,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 39,
            "docLength": 8
          },
          {
            "id": "f88e2d83-8101-fdb3-f14a-cada6e1c09ca",
            "ancestors": [
              "53cb3c71-6f29-daa3-b043-97433eba264a"
            ],
            "type": "function",
            "description": "adds a new CommunityAdmin entity to the database, mapping the provided CommunityAdminDto object using the `communityAdminMapper`. The saved CommunityAdmin entity is returned.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the new admin belongs.",
                "complex_type": false
              },
              {
                "name": "communityAdminDto",
                "type_name": "CommunityAdminDto",
                "description": "CommunityAdmin object to be saved, containing the necessary details for saving it to the database.\n\n* `communityId`: The ID of the community to which the new admin will be added.\n* `communityAdminDto`: The DTO object containing information about the new admin user, including their username, email, and role.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "null",
              "description": "a `null` value.\n\n* `communityAdmin`: This is the saved CommunityAdmin object, which contains information about the community administrator, such as their name and email address.\n* `savedCommunityAdmin`: This is the ID of the newly created CommunityAdmin object in the database.\n* `null`: This is the return value of the function, indicating that no other output is available.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic Community addCommunityAdmin(String communityId, CommunityAdminDto communityAdminDto) {\n    var communityAdmin = communityAdminMapper.communityAdminDtoToCommunityAdmin(communityAdminDto);\n    return communityAdminRepository.save(communityAdmin);\n}\n",
              "description": ""
            },
            "name": "addCommunityAdmin",
            "code": "@Override\n  public Community addCommunityAdmin(String communityId, CommunityAdminDto communityAdminDto) {\n    var communityAdmin = communityAdminMapper.communityAdminDtoToCommunityAdmin(communityAdminDto);\n    var savedCommunityAdmin = communityAdminRepository.save(communityAdmin);\n    // TODO complete this\n    return null;\n  }",
            "location": {
              "start": 64,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 43,
                "end": 63
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 20
          }
        ]
      }
    }
  },
  {
    "name": "CommunitySDJpaService.java",
    "path": "community-service/src/main/java/com/prathab/communityservice/services/springdatajpa/CommunitySDJpaService.java",
    "content": {
      "structured": {
        "description": "A CommunityService class that provides methods for managing communities in a repository. The methods include creating new communities, listing all communities, retrieving community details by ID, adding admins to a community, and generating a unique identifier for a community. The code uses Java packages such as JPA (Java Persistence API) and Log4j for logging. The CommunityService class provides a simple and consistent interface for managing communities in the repository, making it easier to work with the data.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.communityservice.domain.CommunityAdmin Pages: 1 -->\n<svg width=\"223pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 223.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.communityservice.domain.CommunityAdmin</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"215,-30 0,-30 0,0 215,0 215,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAdmin</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1prathab_1_1communityservice_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"215,-96 0,-96 0,-66 215,-66 215,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.communityservice.domain.</text>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-55.54C107.5,-46.96 107.5,-37.61 107.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-55.8 107.5,-65.8 111,-55.8 104,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-151 70.5,-151 70.5,-132 144.5,-132 144.5,-151\"/>\n<text text-anchor=\"middle\" x=\"107.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M107.5,-121.65C107.5,-113.36 107.5,-103.78 107.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"104,-121.87 107.5,-131.87 111,-121.87 104,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.services.springdatajpa.CommunitySDJpaService\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"domain\"\n        color=\"#33363A\"\n        Community\n    }\n    subgraph cluster_1 {\n        label=\"services\"\n        color=\"#33363A\"\n        subgraph cluster_2 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                CommunitySDJpaService [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    subgraph cluster_3 {\n        label=\"dto\"\n        color=\"#33363A\"\n        CommunityDto\n    }\n    CommunitySDJpaService -> Community \n    CommunityDto -> CommunitySDJpaService \n}\n",
        "items": [
          {
            "id": "40c88198-b34d-3e9c-ca48-70248a789862",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the CommunityService interface in a Java-based application. It provides methods for creating and listing communities in a repository, as well as retrieving community details by ID and adding admins to a community. The class also generates a unique identifier for each created community using the `generateUniqueCommunityId()` method.",
            "name": "CommunitySDJpaService",
            "code": "@Service\n@Slf4j\npublic class CommunitySDJpaService implements CommunityService {\n  private final CommunityRepository communityRepository;\n  private final CommunityAdminRepository communityAdminRepository;\n  private final CommunityMapper communityMapper;\n\n  public CommunitySDJpaService(\n      CommunityRepository communityRepository,\n      CommunityAdminRepository communityAdminRepository,\n      CommunityMapper communityMapper) {\n    this.communityRepository = communityRepository;\n    this.communityAdminRepository = communityAdminRepository;\n    this.communityMapper = communityMapper;\n  }\n\n  /**\n   * creates a new Community instance using a unique ID generated by the function, maps\n   * the `CommunityDto` to a `Community` entity, saves it to the repository, and logs\n   * a trace message indicating the saved community ID.\n   * \n   * @param communityDto Community entity that is being created or updated, containing\n   * its attributes and relationships.\n   * \n   * \t- `communityDto.setCommunityId(generateUniqueCommunityId());`: This line generates\n   * a unique community ID for the newly created community.\n   * \t- `var community = communityMapper.communityDtoToCommunity(communityDto);`: This\n   * line converts the input `communityDto` into a `Community` object using the `communityMapper`.\n   * \t- `var savedCommunity = communityRepository.save(community);`: This line saves\n   * the converted `Community` object to the repository, creating a new entry in the\n   * database. The `savedCommunity` variable refers to the newly created community in\n   * the repository.\n   * \n   * The log statement `log.trace(\"saved community with id[{}] to repository\",\n   * savedCommunity.getId());` is used to track the creation and saving of the community\n   * in the repository.\n   * \n   * @returns a saved community object with a unique ID generated by the method.\n   * \n   * \t- `community`: A `Community` object that represents the created community. It has\n   * an `id` attribute that contains a unique identifier for the community.\n   * \t- `savedCommunity`: A `Community` object that represents the saved community in\n   * the repository. It also has an `id` attribute that contains a unique identifier\n   * for the community.\n   * \t- `log.trace`: A logging statement that provides additional information about the\n   * operation, including the unique ID of the created community.\n   */\n  @Override public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueCommunityId());\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n    var savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }\n\n  /**\n   * retrieves a set of `Community` objects from the database using the `findAll()`\n   * method of the `communityRepository`. The retrieved communities are then added to\n   * a new `HashSet<Community>`, which is returned as the function's output.\n   * \n   * @returns a set of all communities found in the repository.\n   * \n   * \t- `Set<Community>` represents a set of `Community` objects.\n   * \t- The set contains all the communities retrieved from the repository using the\n   * `findAll()` method.\n   * \t- Each element in the set is a `Community` object, which has properties such as\n   * name, description, and location.\n   */\n  @Override public Set<Community> listAll() {\n    var communityListSet = new HashSet<Community>();\n    communityRepository.findAll().forEach(communityListSet::add);\n    return communityListSet;\n  }\n\n  /**\n   * retrieves community details by its ID.\n   * \n   * @param communityId identifier of the community to retrieve details for.\n   * \n   * @returns a `Community` object representing the community with the specified `communityId`.\n   * \n   * \t- The Community object represents the details of a community with the specified\n   * ID.\n   * \t- It has a `findByCommunityId` method that returns the community details by ID.\n   * \t- The community details include information such as name, location, and description.\n   */\n  @Override public Community getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }\n\n  /**\n   * adds a set of admins to a community by creating new `CommunityAdmin` objects and\n   * associating them with the community through the `getCommunities()` method, then\n   * saves the updated community.\n   * \n   * @param communityId unique identifier of the community to which admins will be added.\n   * \n   * @param admins set of admin usernames to be added to the specified community.\n   * \n   * \t- `Set<String> admins`: A set of admin user IDs.\n   * \t- Each admin ID is a string value.\n   * \t- The set contains multiple admin IDs.\n   * \n   * @returns a saved Community object containing all the added admins.\n   * \n   * \t- The community object is saved in the repository after admins have been added\n   * to it using the `save()` method.\n   * \t- The `admins` parameter is a Set containing the IDs of the admins to be added\n   * to the community.\n   * \t- The `communityId` parameter represents the ID of the community whose admins are\n   * being added.\n   * \t- The `savedAdminSet` variable stores the new admin objects that have been created\n   * and saved in the database using the `save()` method.\n   * \t- The `community.getAdmins().addAll()` line adds all the saved admins to the\n   * community's admin list.\n   */\n  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {\n    var community = communityRepository.findByCommunityId(communityId);\n\n    var savedAdminSet = new HashSet<CommunityAdmin>();\n    admins.forEach(s -> {\n      var admin = new CommunityAdmin();\n      admin.setAdminId(s);\n      admin.getCommunities().add(community);\n      savedAdminSet.add(communityAdminRepository.save(admin));\n    });\n\n    community.getAdmins().addAll(savedAdminSet);\n    return communityRepository.save(community);\n  }\n\n  /**\n   * generates a unique, randomly-generated string for use as an identifier for a community.\n   * \n   * @returns a randomly generated unique string of characters, typically between 32\n   * and 128 characters in length.\n   */\n  private String generateUniqueCommunityId() {\n    return UUID.randomUUID().toString();\n  }\n}",
            "location": {
              "start": 37,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 31,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 141,
            "docLength": 5
          },
          {
            "id": "ee2aad5b-bb85-1085-f741-fb3f544cae4c",
            "ancestors": [
              "40c88198-b34d-3e9c-ca48-70248a789862"
            ],
            "type": "function",
            "description": "generates a unique community ID, maps the `CommunityDto` to a `Community` object using a mapper, saves the `Community` object to the repository, and logs a trace message for auditing purposes.",
            "params": [
              {
                "name": "communityDto",
                "type_name": "CommunityDto",
                "description": "Community entity that is being created or updated, containing its attributes and relationships with other entities.\n\n* `communityDto.setCommunityId(generateUniqueCommunityId());`: This line sets the `id` attribute of the `Community` object to a unique value generated by the `generateUniqueCommunityId()` method.\n* `var community = communityMapper.communityDtoToCommunity(communityDto);`: This line converts the input `CommunityDto` into a `Community` object using the `communityMapper` interface.\n* `var savedCommunity = communityRepository.save(community);`: This line saves the created `Community` object to the repository, which is implemented as a JPA entity manager. The `savedCommunity` variable contains the ID of the newly created community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Community",
              "description": "a saved community object in the repository.\n\n* `communityDto`: The input parameter passed from the caller, which represents the community details to be created.\n* `generateUniqueCommunityId()`: A method that generates a unique ID for the community.\n* `communityMapper.communityDtoToCommunity(communityDto)`: A method that maps the community DTO to a community object.\n* `communityRepository.save(community)`: A method that saves the created community object in the repository.\n* `log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId())`: A log statement that traces the save operation of the community object to the repository.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Create a new community with the given details\nvar communityDto = new CommunityDto();\ncommunityDto.setName(\"My New Community\");\ncommunityDto.setDescription(\"This is my new community\");\ncommunityDto.setLocation(\"In the sky\");\ncommunityDto.setAdminIds(Set.of(\"admin1\", \"admin2\"));\n\nvar createdCommunity = communityService.createCommunity(communityDto);\n",
              "description": "\nHere, a new Community object is created with the given details and then saved to the database using the createCommunity method of the Community Service class. The unique ID for the community is generated automatically by the generateUniqueCommunityId method, which uses UUID to generate a random string of characters between 32 and 128 characters in length.\n\nThe createdCommunity variable stores the saved Community object, which has an id attribute containing a unique identifier for the community. The log.trace statement in the createCommunity method provides additional information about the operation, including the unique ID of the created community."
            },
            "name": "createCommunity",
            "code": "@Override public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueCommunityId());\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n    var savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }",
            "location": {
              "start": 84,
              "insert": 53,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 52,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 31
          },
          {
            "id": "3372b2fb-1a48-159b-bb46-be51fa9c2db3",
            "ancestors": [
              "40c88198-b34d-3e9c-ca48-70248a789862"
            ],
            "type": "function",
            "description": "retrieves all community objects from the database and stores them in a set for further use.",
            "params": [],
            "returns": {
              "type_name": "HashSet",
              "description": "a set of all communities stored in the repository.\n\n* `Set<Community>` is the type of the variable `communityListSet`, indicating that it is a set of community objects.\n* The method `findAll()` from the `communityRepository` class is called to retrieve a list of community objects, which are then added to the `communityListSet`.\n* The returned set contains all the communities retrieved from the database.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Set<Community> allCommunities = communityService.listAll();\n",
              "description": "\nThis line calls the listAll() method and assigns its output to a set of type Community. The method retrieves all communities from the database using the findAll() method of the communityRepository, which is a repository that manages community objects in the application's persistence layer. The communities are then added to the new HashSet<Community> called allCommunities. \n\nIt is important to note that this line of code assumes that there is an instance of a CommunityService class named communityService, which provides access to the listAll() method through its interface. Additionally, it is assumed that there is also a repository called communityRepository, which manages community objects in the application's persistence layer."
            },
            "name": "listAll",
            "code": "@Override public Set<Community> listAll() {\n    var communityListSet = new HashSet<Community>();\n    communityRepository.findAll().forEach(communityListSet::add);\n    return communityListSet;\n  }",
            "location": {
              "start": 105,
              "insert": 92,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 91,
                "end": 104
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 13
          },
          {
            "id": "085bb5c9-1c32-5a83-1940-27ec7a615303",
            "ancestors": [
              "40c88198-b34d-3e9c-ca48-70248a789862"
            ],
            "type": "function",
            "description": "retrieves a community's details by its unique identifier from the community repository.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to retrieve details for.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Community",
              "description": "a `Community` object containing details of the community with the specified `communityId`.\n\n* The `communityRepository` method is used to retrieve the community details by the given `communityId`.\n* The `findByCommunityId` method returns a `Community` object that represents the community with the specified `communityId`.\n* The `Community` class has properties such as `id`, `name`, `description`, and `location`, among others.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired private CommunityService communityService;\n\nString id = \"some unique identifier\";\nCommunity community = communityService.getCommunityDetailsById(id);\n",
              "description": "\nThis would retrieve the community details based on its ID and save it as an instance of Community object in the variable community. The method getCommunityDetailsById is then called on the communityService instance with the given id of \"some unique identifier\" to retrieve the community details by its id."
            },
            "name": "getCommunityDetailsById",
            "code": "@Override public Community getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }",
            "location": {
              "start": 123,
              "insert": 111,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 110,
                "end": 122
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 12
          },
          {
            "id": "fa407605-c3d5-b082-e84a-d216fa525a52",
            "ancestors": [
              "40c88198-b34d-3e9c-ca48-70248a789862"
            ],
            "type": "function",
            "description": "adds a set of admins to a community by creating new `CommunityAdmin` objects and saving them to the database, then adding the admins to the community's admin list.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community to which the admins are being added.",
                "complex_type": false
              },
              {
                "name": "admins",
                "type_name": "Set<String>",
                "description": "Set of admins to add to the Community, and it is passed through a forEach loop to create new CommunityAdmin objects and save them to the database along with their associated Community.\n\n* `Set<String> admins`: A set containing the identifiers of the administrators to be added to the community.\n* `communityId`: The ID of the community to which the administrators will be added.\n* `communityRepository`: A repository responsible for storing and retrieving community objects.\n* `communityAdminRepository`: A repository responsible for storing and retrieving community administrator objects.\n* `save`: A method that saves the updated community object in the repository.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "",
              "description": "a saved Community object with added admins.\n\n* The community object is saved using the `save()` method, which indicates that the function modifies the existing community object instead of creating a new one.\n* The `savedAdminSet` variable contains a set of newly created CommunityAdmin objects, each of which has a unique `adminId` and belongs to the specified community. These objects are added to the community's admin list using the `addAll()` method.\n* The `community.getAdmins().addAll()` statement adds all the newly created admins to the community's admin list, effectively increasing the number of admins in the community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "communityService.addAdminsToCommunity(\"123\", new HashSet<>(Arrays.asList(\"admin1\", \"admin2\")));\n",
              "description": "\nIn this example, the method `addAdminsToCommunity` is called with two arguments. The first argument `\"123\"` represents the community ID and the second argument `new HashSet<>(Arrays.asList(\"admin1\", \"admin2\"))` represents a set of admin usernames that are to be added as admins to the community with the ID of \"123\".\n\nThe method first retrieves the community object associated with the provided community ID using `communityRepository.findByCommunityId`. Then, it creates a new set of `CommunityAdmin` objects for each admin username in the provided set and associates them with the retrieved community using the `getCommunities()` method. Finally, it saves the updated community object to the database using the `save()` method.\n\nNote that the above example is a simplified version of how the method would be used and may not include all the necessary error handling or exception handling."
            },
            "name": "addAdminsToCommunity",
            "code": "@Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {\n    var community = communityRepository.findByCommunityId(communityId);\n\n    var savedAdminSet = new HashSet<CommunityAdmin>();\n    admins.forEach(s -> {\n      var admin = new CommunityAdmin();\n      admin.setAdminId(s);\n      admin.getCommunities().add(community);\n      savedAdminSet.add(communityAdminRepository.save(admin));\n    });\n\n    community.getAdmins().addAll(savedAdminSet);\n    return communityRepository.save(community);\n  }",
            "location": {
              "start": 153,
              "insert": 127,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 126,
                "end": 152
              }
            },
            "item_type": "method",
            "length": 14,
            "docLength": 26
          },
          {
            "id": "047e9df3-0968-0db8-3747-4044911c8480",
            "ancestors": [
              "40c88198-b34d-3e9c-ca48-70248a789862"
            ],
            "type": "function",
            "description": "generates a unique identifier for a community using the `UUID` class and returns it as a string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a unique, randomly generated string of characters.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "private String generateUniqueCommunityId() {\n    return UUID.randomUUID().toString();\n}\n\npublic Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueCommunityId());\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n    var savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n}\n",
              "description": ""
            },
            "name": "generateUniqueCommunityId",
            "code": "private String generateUniqueCommunityId() {\n    return UUID.randomUUID().toString();\n  }",
            "location": {
              "start": 174,
              "insert": 168,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 167,
                "end": 173
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "CommunityServiceApplicationTests.java",
    "path": "community-service/src/test/java/com/prathab/communityservice/CommunityServiceApplicationTests.java",
    "content": {
      "structured": {
        "description": "A Spring Boot test class for testing Community Service application. The class uses @SpringBootTest annotation and has one test method void contextLoads() which tests loading of application context.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.CommunityServiceApplicationTests\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "f5aaddfe-890c-0f83-0742-0c68e7121d9d",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot test class for testing the Community Service application. It uses the `@SpringBootTest` annotation to indicate that it should be executed as part of the Spring Boot testing framework, and has a single test method marked with the `void contextLoads()` method signature, which tests the loading of the application context.",
            "name": "CommunityServiceApplicationTests",
            "code": "@SpringBootTest\nclass CommunityServiceApplicationTests {\n\n  /**\n   * is designed to perform some initialization tasks when the application context is\n   * initialized.\n   */\n  @Test\n  void contextLoads() {\n  }\n}",
            "location": {
              "start": 29,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 28
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 7
          },
          {
            "id": "507b4da9-b5e5-0cb9-5c4d-791a3cffa3a5",
            "ancestors": [
              "f5aaddfe-890c-0f83-0742-0c68e7121d9d"
            ],
            "type": "function",
            "description": "is designed to load the application's context, enabling it to access resources and perform necessary operations.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CommunityServiceApplicationTests {\n\n  @Test\n  void contextLoads() {\n    // Context is loaded, do some assertions here\n  }\n}\n",
              "description": ""
            },
            "name": "contextLoads",
            "code": "@Test\n  void contextLoads() {\n  }",
            "location": {
              "start": 36,
              "insert": 32,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 31,
                "end": 35
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapperTest.java",
    "path": "community-service/src/test/java/com/prathab/communityservice/dto/mapper/CommunityMapperTest.java",
    "content": {
      "structured": {
        "description": "A `CommunityMapper` class that maps between `Community` and `CommunityDto` objects. The mapper tests include verifying the IDs, names, districts, and community IDs of the converted objects. The mapper uses Spring Boot testing framework to perform these tests. The code demonstrates how to create a mapping between two classes using annotations and Spring Boot's built-in testing features.",
        "diagram": "digraph G {\n    label=\"com.prathab.communityservice.dto.mapper.CommunityMapperTest\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "957662c9-0bf5-d181-7048-0d62bb56bf31",
            "ancestors": [],
            "type": "function",
            "description": "is a unit test class for testing the CommunityMapper class. It provides methods for mapping a Community object to a CommunityDTO object and vice versa, preserving the original instance's attributes. The test class includes tests for verifying the IDs, names, districts, and community IDs of the converted objects.",
            "name": "CommunityMapperTest",
            "code": "@SpringBootTest\nclass CommunityMapperTest {\n  private final long id = 1L;\n  private final String communityId = \"12345678\";\n  private final String district = \"Test community district\";\n  private final String name = \"Test community name\";\n  private final long communityAdminId = 2L;\n\n  @Autowired\n  private CommunityMapper communityMapper;\n\n  /**\n   * maps a `Community` object to a corresponding `CommunityDTO` object, preserving the\n   * original instance's attributes.\n   */\n  @Test\n  void communityToCommunityDto() {\n    // given\n    var community = new Community();\n\n    community.setId(id);\n    community.setCommunityId(communityId);\n    community.setDistrict(district);\n    community.setName(name);\n\n    // when\n    var communityDto = communityMapper.communityToCommunityDto(community);\n\n    // then\n    assertEquals(communityDto.getId(), id);\n    assertEquals(communityDto.getName(), name);\n    assertEquals(communityDto.getDistrict(), district);\n    assertEquals(communityDto.getCommunityId(), communityId);\n  }\n\n  /**\n   * maps a `CommunityDto` object to a `Community` object, setting the corresponding\n   * fields with the values from the `CommunityDto`.\n   */\n  @Test\n  void communityDtoToCommunity() {\n    // given\n    var communityDto = new CommunityDto();\n    communityDto.setId(id);\n    communityDto.setName(name);\n    communityDto.setDistrict(district);\n    communityDto.setCommunityId(communityId);\n\n    // when\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n\n    // then\n    assertEquals(community.getId(), id);\n    assertEquals(community.getName(), name);\n    assertEquals(community.getDistrict(), district);\n    assertEquals(community.getCommunityId(), communityId);\n  }\n}",
            "location": {
              "start": 33,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 58,
            "docLength": 6
          },
          {
            "id": "90dce5d9-2364-488a-4e4b-fcb3b639371c",
            "ancestors": [
              "957662c9-0bf5-d181-7048-0d62bb56bf31"
            ],
            "type": "function",
            "description": "maps a `Community` object to a corresponding `CommunityDto` object, preserving the original values while providing an equivalent representation in DTO format.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void communityToCommunityDto() {\n    // given\n    var community = new Community();\n\n    community.setId(id);\n    community.setCommunityId(communityId);\n    community.setDistrict(district);\n    community.setName(name);\n\n    // when\n    var communityDto = communityMapper.communityToCommunityDto(community);\n\n    // then\n    assertEquals(communityDto.getId(), id);\n    assertEquals(communityDto.getName(), name);\n    assertEquals(communityDto.getDistrict(), district);\n    assertEquals(communityDto.getCommunityId(), communityId);\n  }\n",
              "description": ""
            },
            "name": "communityToCommunityDto",
            "code": "@Test\n  void communityToCommunityDto() {\n    // given\n    var community = new Community();\n\n    community.setId(id);\n    community.setCommunityId(communityId);\n    community.setDistrict(district);\n    community.setName(name);\n\n    // when\n    var communityDto = communityMapper.communityToCommunityDto(community);\n\n    // then\n    assertEquals(communityDto.getId(), id);\n    assertEquals(communityDto.getName(), name);\n    assertEquals(communityDto.getDistrict(), district);\n    assertEquals(communityDto.getCommunityId(), communityId);\n  }",
            "location": {
              "start": 48,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 43,
                "end": 47
              }
            },
            "item_type": "method",
            "length": 19,
            "docLength": 4
          },
          {
            "id": "e51eb4b8-53cc-cf9a-3143-1304764fbcd1",
            "ancestors": [
              "957662c9-0bf5-d181-7048-0d62bb56bf31"
            ],
            "type": "function",
            "description": "converts a `CommunityDto` object into a `Community` object, mapping the properties from the DTO to the domain entity.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void communityDtoToCommunity() {\n    // given\n    var communityDto = new CommunityDto();\n    communityDto.setId(id);\n    communityDto.setName(name);\n    communityDto.setDistrict(district);\n    communityDto.setCommunityId(communityId);\n\n    // when\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n\n    // then\n    assertEquals(community.getId(), id);\n    assertEquals(community.getName(), name);\n    assertEquals(community.getDistrict(), district);\n    assertEquals(community.getCommunityId(), communityId);\n  }\n",
              "description": "\nThe example code should be short and easy to understand, with the purpose of illustrating how method communityDtoToCommunity would be used correctly. The example code should work as intended without any errors or exceptions. It is not necessary to explain the code in detail, but it should be clear why each line is there and how it contributes to the overall functionality of the program."
            },
            "name": "communityDtoToCommunity",
            "code": "@Test\n  void communityDtoToCommunity() {\n    // given\n    var communityDto = new CommunityDto();\n    communityDto.setId(id);\n    communityDto.setName(name);\n    communityDto.setDistrict(district);\n    communityDto.setCommunityId(communityId);\n\n    // when\n    var community = communityMapper.communityDtoToCommunity(communityDto);\n\n    // then\n    assertEquals(community.getId(), id);\n    assertEquals(community.getName(), name);\n    assertEquals(community.getDistrict(), district);\n    assertEquals(community.getCommunityId(), communityId);\n  }",
            "location": {
              "start": 72,
              "insert": 68,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 67,
                "end": 71
              }
            },
            "item_type": "method",
            "length": 18,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "DiscoveryServiceApplication.java",
    "path": "discovery-service/src/main/java/com/prathab/discoveryservice/DiscoveryServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables Eureka server functionality and provides the main entry point for the application. The `DiscoveryServiceApplication` class is annotated with `@SpringBootApplication` and `@EnableEurekaServer`, indicating that it is a Spring Boot application with Eureka server enablement. The `main()` method is used to launch the application, passing in any command-line arguments to the `SpringApplication.run()` method.",
        "diagram": "digraph G {\n    label=\"com.prathab.discoveryservice.DiscoveryServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "e085739a-2c4c-d28f-494b-3c6ce4f2740c",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka server functionality and provides the main entry point for the application. It launches a SpringApplication, which runs the DiscoveryServiceApplication, passing any command-line arguments as inputs to the `SpringApplication.run()` method.",
            "name": "DiscoveryServiceApplication",
            "code": "@SpringBootApplication\n@EnableEurekaServer\npublic class DiscoveryServiceApplication {\n\n  /**\n   * launches a SpringApplication, which runs the `DiscoveryServiceApplication`.\n   * \n   * @param args 0 or more command-line arguments passed to the `SpringApplication.run()`\n   * method when running the `DiscoveryServiceApplication`.\n   * \n   * \t- The input argument array is passed as `String[] args`.\n   * \t- It has no explicit type declaration or initialization in the function signature.\n   * \t- `SpringApplication.run()` method is called with the `DiscoveryServiceApplication.class`\n   * as the first argument, and the `args` array as the second argument.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(DiscoveryServiceApplication.class, args);\n  }\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 19,
            "docLength": 4
          },
          {
            "id": "b4d77f49-352e-618c-5447-781adbedded7",
            "ancestors": [
              "e085739a-2c4c-d28f-494b-3c6ce4f2740c"
            ],
            "type": "function",
            "description": "runs a Spring Application and starts the Discovery Service Application.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the application when it is started.\n\n* It is an array of strings representing command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(DiscoveryServiceApplication.class, args);\n  }",
            "location": {
              "start": 42,
              "insert": 31,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 30,
                "end": 41
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "DiscoveryServiceApplicationTests.java",
    "path": "discovery-service/src/test/java/com/prathab/discoveryservice/DiscoveryServiceApplicationTests.java",
    "content": {
      "structured": {
        "description": "A Spring Boot test class for testing the Discovery Service Application. The @SpringBootTest annotation indicates that the class should be run using Spring Boot's testing framework. The single test method, contextLoads(), is used to verify that the application's context is properly loaded.",
        "diagram": "digraph G {\n    label=\"com.prathab.discoveryservice.DiscoveryServiceApplicationTests\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "ee42ea23-b9eb-7199-5645-913b9926fd9e",
            "ancestors": [],
            "type": "function",
            "description": "is designed to test the context load of the Discovery Service Application using Spring Boot's testing framework. The single test method, contextLoads(), verifies that the application's context is properly loaded.",
            "name": "DiscoveryServiceApplicationTests",
            "code": "@SpringBootTest\nclass DiscoveryServiceApplicationTests {\n\n  /**\n   * is designed to execute certain actions when the Java application's context is initialized.\n   */\n  @Test\n  void contextLoads() {\n  }\n}",
            "location": {
              "start": 28,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 6
          },
          {
            "id": "ecae5266-cee6-b892-e144-beffb2c4ca22",
            "ancestors": [
              "ee42ea23-b9eb-7199-5645-913b9926fd9e"
            ],
            "type": "function",
            "description": "is likely responsible for initializing and setting up various components and services required by the application to run smoothly.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "package com.prathab.discoveryservice;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass DiscoveryServiceApplicationTests {\n\n  @Test\n  void contextLoads() {\n    // this method is used to verify that the application's context is properly loaded\n    assertTrue(true);\n  }\n}\n",
              "description": ""
            },
            "name": "contextLoads",
            "code": "@Test\n  void contextLoads() {\n  }",
            "location": {
              "start": 34,
              "insert": 31,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 30,
                "end": 33
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "HomeServiceApplication.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/HomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables Eureka client functionality and launches the application using SpringApplication.main(). The application uses the SpringBootApplication annotation and the EnableEurekaClient annotation to enable Eureka client functionality.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.HomeServiceApplication\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "bda75469-dd1d-f9be-d84e-25180d611262",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka client functionality and launches the application using SpringApplication.main(). It does not contain any command-line arguments.",
            "name": "HomeServiceApplication",
            "code": "@SpringBootApplication\n@EnableEurekaClient\npublic class HomeServiceApplication {\n\n  /**\n   * runs a Spring Application, specifically the `HomeServiceApplication`, passing the\n   * command-line arguments `args`.\n   * \n   * @param args command-line arguments passed to the `SpringApplication.run()` method\n   * when invoking the `HomeServiceApplication`.\n   * \n   * \t- Length: The length of the `args` array is 0, indicating that no command-line\n   * arguments were provided.\n   */\n  public static void main(String[] args) {\n    SpringApplication.run(HomeServiceApplication.class, args);\n  }\n}",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 18,
            "docLength": 4
          },
          {
            "id": "c718a21d-cdac-95ac-3645-0a91cadf9c98",
            "ancestors": [
              "bda75469-dd1d-f9be-d84e-25180d611262"
            ],
            "type": "function",
            "description": "runs a SpringApplication, which starts the HomeServiceApplication and its dependencies.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the `SpringApplication.run()` method when executing the application.\n\n* `args`: an array of strings representing command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(HomeServiceApplication.class, args);\n  }",
            "location": {
              "start": 41,
              "insert": 31,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 30,
                "end": 40
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "DataLoader.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/bootstrap/DataLoader.java",
    "content": {
      "structured": {
        "description": "A `DataLoader` class that implements Spring Boot's `CommandLineRunner` interface. It takes a `HouseRepository` as a constructor parameter and saves a new `House` object with default values to the repository for testing purposes. The `run()` method creates a new `House` instance, sets its properties, and saves it to the repository using the `houseRepository.save()` method.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.homeservice.bootstrap.DataLoader Pages: 1 -->\n<svg width=\"205pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 205.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.homeservice.bootstrap.DataLoader</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"197,-30 0,-30 0,0 197,0 197,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.bootstrap.</text>\n<text text-anchor=\"middle\" x=\"98.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DataLoader</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"159.5,-85 37.5,-85 37.5,-66 159.5,-66 159.5,-85\"/>\n<text text-anchor=\"middle\" x=\"98.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommandLineRunner</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M98.5,-55.65C98.5,-47.36 98.5,-37.78 98.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95,-55.87 98.5,-65.87 102,-55.87 95,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.bootstrap.DataLoader\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "38ff8cb7-98d4-f7a5-fd47-ea420c9b2649",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot component that implements the CommandLineRunner interface. It accepts a HouseRepository as a parameter in its constructor and uses it to save a new House object with default values for the house name, house ID, and community ID.",
            "name": "DataLoader",
            "code": "@Component\npublic class DataLoader implements CommandLineRunner {\n  private final HouseRepository houseRepository;\n\n  public DataLoader(HouseRepository houseRepository) {\n    this.houseRepository = houseRepository;\n  }\n\n  /**\n   * saves a new `House` object to the repository with a default house name, id, and\n   * community id for testing purposes.\n   */\n  @Override public void run(String... args) throws Exception {\n    var houseName = \"MyHome default house\";\n    var houseId = \"default-house-id-for-testing\";\n    var communityId = \"default-community-id-for-testing\";\n\n    var house = new House();\n    house.setHouseId(houseId);\n    house.setCommunityId(communityId);\n    house.setName(houseName);\n    houseRepository.save(house);\n  }\n}",
            "location": {
              "start": 30,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 24,
            "docLength": 6
          },
          {
            "id": "9aab1b8e-b279-9cbd-ad4c-2f27d226820a",
            "ancestors": [
              "38ff8cb7-98d4-f7a5-fd47-ea420c9b2649"
            ],
            "type": "function",
            "description": "saves a new `House` object with given name, ID and community ID to the repository.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Override public void run(String... args) throws Exception {\n    var houseName = \"MyHome default house\";\n    var houseId = \"default-house-id-for-testing\";\n    var communityId = \"default-community-id-for-testing\";\n\n    var house = new House();\n    house.setHouseId(houseId);\n    house.setCommunityId(communityId);\n    house.setName(houseName);\n    houseRepository.save(house);\n  }\n",
              "description": ""
            },
            "name": "run",
            "code": "@Override public void run(String... args) throws Exception {\n    var houseName = \"MyHome default house\";\n    var houseId = \"default-house-id-for-testing\";\n    var communityId = \"default-community-id-for-testing\";\n\n    var house = new House();\n    house.setHouseId(houseId);\n    house.setCommunityId(communityId);\n    house.setName(houseName);\n    houseRepository.save(house);\n  }",
            "location": {
              "start": 42,
              "insert": 38,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 37,
                "end": 41
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "A `HouseController` class that implements a RESTful web service for handling house-related requests. The controller contains methods for listing all houses and providing detailed information about individual houses. The `listAllHouses()` method receives a `ListAllHouseRequestBody` object from the client, validates it, and then uses the `houseService` to retrieve all houses. The retrieved houses are then converted into a response set using the `houseApiMapper`, and the function returns a `ResponseEntity` with the list of houses in the response body.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.HouseController\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            ListAllHouseResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            ListAllHouseRequestBody\n        }\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        HouseController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    HouseController -> ListAllHouseResponse \n    ListAllHouseRequestBody -> HouseController \n}\n",
        "items": [
          {
            "id": "36b08600-d8e3-fe9b-794b-f17160a2971f",
            "ancestors": [],
            "type": "function",
            "description": "in the provided file is a RESTful API controller that handles requests related to houses. The class has several methods, including `listAllHouses`, which retrieves all houses from the database and returns them in a response body. The `listAllHouses` method takes in a `ListAllHouseRequestBody` object as input, validates it, and then uses the `houseService` to retrieve all houses. The retrieved houses are then converted into a response set using the `houseApiMapper`, and the function returns a `ResponseEntity` with the list of houses in the response body.",
            "name": "HouseController",
            "code": "@RestController\n@Slf4j\npublic class HouseController {\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  public HouseController(HouseService houseService,\n      HouseApiMapper houseApiMapper) {\n    this.houseService = houseService;\n    this.houseApiMapper = houseApiMapper;\n  }\n\n  /**\n   * returns the string \"Working\".\n   * \n   * @returns the string \"Working\".\n   */\n  @GetMapping(\"/houses/status\")\n  public String status() {\n    return \"Working\";\n  }\n\n  /**\n   * receives a `ListAllHouseRequestBody` object from the client, validates it, and\n   * then uses the `houseService` to retrieve all houses. The retrieved houses are then\n   * converted into a response set using the `houseApiMapper`. Finally, the function\n   * returns a `ResponseEntity` with the list of houses in the response body.\n   * \n   * @param request ListAllHouseRequestBody object passed in from the client, which\n   * contains the necessary data to retrieve all houses from the database.\n   * \n   * \t- `@RequestBody`: The request body is expected to be in the JSON or XML format.\n   * \t- `@Valid`: The input must be validated using a bean validation configuration.\n   * \t- `ListAllHouseRequestBody`: This class represents the request body, which contains\n   * properties for the list of houses.\n   * \t- `houseService`: A service interface that provides methods for retrieving houses.\n   * \t- `houseApiMapper`: An API mapper interface that maps the list of houses to a\n   * response format.\n   * \n   * The function returns a response entity with the list of houses in the response\n   * body, along with any additional information or metadata as needed.\n   * \n   * @returns a `ListAllHouseResponse` object containing a list of house details.\n   * \n   * \t- `ResponseEntity`: This is the type of the returned object, which represents an\n   * HTTP response entity with a status code and a body.\n   * \t- `HttpStatus.OK`: This is the status code associated with the response, indicating\n   * that the request was successful.\n   * \t- `body`: This is the contents of the response body, which is a `ListAllHouseResponse`\n   * object.\n   * \t- `ListAllHouseResponse`: This is the type of the response body, which represents\n   * the list of houses returned in response to the request. It has several attributes:\n   * \t+ `setHouseDetails()`: This is a set of house details, which is a collection of\n   * `HouseDetailResponse` objects.\n   * \t+ `getHouseDetails()`: This is an accessor method that returns the set of house\n   * details.\n   * \n   * The `listAllHouses` function takes in a `ListAllHouseRequestBody` object as input\n   * and returns a `ListAllHouseResponse` object as output. The input object contains\n   * the request parameters, such as the media type and the path for the API call. The\n   * output object contains the list of houses returned in response to the request.\n   */\n  @GetMapping(\n      path = \"/houses\",\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<ListAllHouseResponse> listAllHouses(@RequestBody @Valid\n      ListAllHouseRequestBody request) {\n    var houseSet = houseService.findAllHouses();\n    var houseDetailResponseSet = houseApiMapper.houseSetToHouseDetailResponseSet(houseSet);\n    var listAllHouseResponse = new ListAllHouseResponse();\n    listAllHouseResponse.setHouseDetails(houseDetailResponseSet);\n    return ResponseEntity.status(HttpStatus.OK).body(listAllHouseResponse);\n  }\n}",
            "location": {
              "start": 39,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 31,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 76,
            "docLength": 7
          },
          {
            "id": "5a7a52bf-9483-0fad-8048-d25fc4f9deaf",
            "ancestors": [
              "36b08600-d8e3-fe9b-794b-f17160a2971f"
            ],
            "type": "function",
            "description": "returns a string indicating that it is working.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "\"Working\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@GetMapping(\"/houses/status\")\n  public String status() {\n    return \"Working\";\n  }\n}\n",
              "description": "\nThis method uses the @GetMapping annotation to specify that it handles GET requests at /houses/status and returns a string. When called, this method simply returns the string \"Working\". This response indicates that the HouseController is active and functioning correctly."
            },
            "name": "status",
            "code": "@GetMapping(\"/houses/status\")\n  public String status() {\n    return \"Working\";\n  }",
            "location": {
              "start": 56,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 5
          },
          {
            "id": "646a72f1-29e2-778f-a243-cd60e7210514",
            "ancestors": [
              "36b08600-d8e3-fe9b-794b-f17160a2971f"
            ],
            "type": "function",
            "description": "receives a list of houses from the service and maps it to a response set containing house details using an API mapper. It then returns a ResponseEntity with OK status and the mapped response set as body.",
            "params": [
              {
                "name": "request",
                "type_name": "ListAllHouseRequestBody",
                "description": "ListAllHouseRequestBody object that contains the required parameters for retrieving a list of houses, including the page number, page size, and sort criteria.\n\n* `@RequestBody`: Indicates that the request body is required and should be serialized and sent as the request entity.\n* `@Valid`: An annotation indicating that the request body must validate against a provided Java class (i.e., `ListAllHouseRequestBody`).\n* `request`: The request body, which contains properties such as `houseId`, `houseName`, `address`, etc.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAllHouseResponse",
              "description": "a `ListAllHouseResponse` object containing the details of all houses found.\n\n* `ResponseEntity`: This is the base class for all response entities in Spring WebFlux. It contains the HTTP status code and the body of the response.\n* `body`: This is a reference to the actual response object that will be sent back to the client. In this case, it's a `ListAllHouseResponse` object.\n* `HttpStatus.OK`: This is the HTTP status code associated with the response. It indicates that the request was successful and the server has successfully processed the request.\n* `listAllHouseResponse`: This is the main response object returned by the function. It contains a list of `HouseDetailResponse` objects, which are explained below:\n\nIn summary, the `listAllHouses` function returns a response object with an HTTP status code of 200 (OK) and a body containing a list of `HouseDetailResponse` objects, which represent the details of each house in the system.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testListAllHouses() {\n    var request = new ListAllHouseRequestBody();\n    var response = houseController.listAllHouses(request);\n}\n",
              "description": "\nThis test is using the `listAllHouses` method from the previous example, but with a mocked implementation of the `houseService` and `houseApiMapper`. It is then checking that the output of the function is not null and has the correct status code."
            },
            "name": "listAllHouses",
            "code": "@GetMapping(\n      path = \"/houses\",\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<ListAllHouseResponse> listAllHouses(@RequestBody @Valid\n      ListAllHouseRequestBody request) {\n    var houseSet = houseService.findAllHouses();\n    var houseDetailResponseSet = houseApiMapper.houseSetToHouseDetailResponseSet(houseSet);\n    var listAllHouseResponse = new ListAllHouseResponse();\n    listAllHouseResponse.setHouseDetails(houseDetailResponseSet);\n    return ResponseEntity.status(HttpStatus.OK).body(listAllHouseResponse);\n  }",
            "location": {
              "start": 101,
              "insert": 61,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 60,
                "end": 100
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 40
          }
        ]
      }
    }
  },
  {
    "name": "HouseDto.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/dto/HouseDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) named HouseDto that includes a community ID field. The class uses Lombok library and follows the principles of Dependency Injection, which allows for easy injection of dependencies during runtime. The Getter and Setter methods are used to provide accessors for the fields, while the AllArgsConstructor and NoArgsConstructor annotations are used to specify how the class should be constructed.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.dto.HouseDto\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"dto\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                HouseDto [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n        subgraph cluster_2 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                HouseApiMapper\n            }\n        }\n    }\n    subgraph cluster_4 {\n        label=\"services\"\n        color=\"#33363A\"\n        HouseService\n        subgraph cluster_5 {\n            label=\"springdatajpa\"\n            color=\"#33363A\"\n            HouseSDJpaService\n        }\n    }\n    subgraph cluster_6 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    HouseApiMapper -> HouseDto \n    HouseDto -> HouseService \n    HouseDto -> House [style=\"dashed\"]\n    House -> HouseDto [style=\"dashed\"]\n    HouseDto -> HouseApiMapper \n    HouseDto -> HouseSDJpaService \n}\n",
        "items": [
          {
            "id": "8db5592b-9365-54a4-0646-071cf42aa5a9",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for housing-related information, including a unique identifier for a specific community or neighborhood associated with the house or property.\nFields:\n\t- communityId (String): in the HouseDto class represents a unique identifier for a specific community or neighborhood associated with the house or property.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseDto",
                "description": "in the HouseDto class represents a unique identifier for a specific community or neighborhood associated with the house or property."
              }
            ],
            "name": "HouseDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class HouseDto {\n  private String communityId;\n}",
            "location": {
              "start": 31,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/models/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that provides mappings between `House` entities and their corresponding DTOs (`HouseDto`), as well as between `HouseDto` and `House` objects, for various methods such as `houseToHouseDto`, `houseDtoToHouse`, `houseToHouseDetailResponse`, `houseSetToHouseDetailResponseSet`, and `houseDetailResponseToHouse`. The code also includes a `Mapper` implementation that maps between these entities.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.models.mapper.HouseApiMapper\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    HouseApiMapper [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n            subgraph cluster_3 {\n                label=\"response\"\n                color=\"#33363A\"\n                HouseDetailResponse\n            }\n        }\n        subgraph cluster_4 {\n            label=\"dto\"\n            color=\"#33363A\"\n            HouseDto\n        }\n    }\n    subgraph cluster_5 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    HouseDetailResponse -> HouseApiMapper \n    HouseDto -> HouseApiMapper \n    HouseApiMapper -> HouseDetailResponse \n    HouseApiMapper -> HouseDto \n    House -> HouseApiMapper \n}\n",
        "items": [
          {
            "id": "072e23cd-75a7-d683-7a4c-a538498113dd",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mappings between House entities and their corresponding DTOs, as well as between HouseDto and House objects for various methods such as houseToHouseDto, houseDtoToHouse, and houseToHouseDetailResponse.",
            "name": "HouseApiMapper",
            "code": "@Mapper\npublic interface HouseApiMapper {\n  HouseDto houseToHouseDto(House house);\n\n  House houseDtoToHouse(HouseDto houseDto);\n\n  HouseDetailResponse houseToHouseDetailResponse(House house);\n\n  Set<HouseDetailResponse> houseSetToHouseDetailResponseSet(Set<House> houseSet);\n\n  House houseDetailResponseToHouse(HouseDetailResponse houseDetailResponse);\n\n  Set<House> houseDetailResponseSetToHouseSet(Set<HouseDetailResponse> houseDetailResponseSet);\n}",
            "location": {
              "start": 30,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 14,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "ListAllHouseRequestBody.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/models/request/ListAllHouseRequestBody.java",
    "content": {
      "structured": {
        "description": "A class `ListAllHouseRequestBody` for request body in GET method. The class has one field `communityId` which is not blank and must be provided.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.models.request.ListAllHouseRequestBody\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"response\"\n            color=\"#33363A\"\n            ListAllHouseResponse\n        }\n        subgraph cluster_2 {\n            label=\"request\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                ListAllHouseRequestBody [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    HouseController\n    ListAllHouseRequestBody -> ListAllHouseResponse [style=\"dashed\"]\n    ListAllHouseRequestBody -> HouseController \n}\n",
        "items": [
          {
            "id": "071d0f40-7d7e-6ab5-904b-03ef1cbfdc05",
            "ancestors": [],
            "type": "function",
            "description": "is a Java class with a single field, communityId, which is annotated as non-blank and required in the constructor.\nFields:\n\t- communityId (String): in the ListAllHouseRequestBody class is a non-empty string used to identify a specific community.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ListAllHouseRequestBody",
                "description": "in the ListAllHouseRequestBody class is a non-empty string used to identify a specific community."
              }
            ],
            "name": "ListAllHouseRequestBody",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\npublic class ListAllHouseRequestBody {\n  @NotBlank\n  private String communityId;\n}",
            "location": {
              "start": 29,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 28
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/models/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that represents a response for housing details with community Id, house Id, and name attributes. The class uses Lombok library for automatic generation of getters and setters, and also includes constructors to initialize the object.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.models.response.HouseDetailResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"models\"\n            color=\"#33363A\"\n            subgraph cluster_2 {\n                label=\"response\"\n                color=\"#33363A\"\n                subgraph cluster_main {\n                    // style=filled;\n                    color=\"#00000000\"; \n                    HouseDetailResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                    label = \"\"\n                }\n            }\n            subgraph cluster_3 {\n                label=\"mapper\"\n                color=\"#33363A\"\n                HouseApiMapper\n            }\n        }\n    }\n    subgraph cluster_4 {\n        label=\"domain\"\n        color=\"#33363A\"\n        House\n    }\n    HouseApiMapper -> HouseDetailResponse \n    HouseDetailResponse -> HouseApiMapper \n    HouseDetailResponse -> House [style=\"dashed\"]\n    House -> HouseDetailResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "86c9e6d4-ef78-d284-9543-a209bc84b457",
            "ancestors": [],
            "type": "function",
            "description": "represents a response for housing details with community Id, house Id, and name attributes.\nFields:\n\t- communityId (String): represents a unique identifier for a specific community or neighborhood associated with the house.\n\t- houseId (String): represents an identifier for a specific house within a community.\n\t- name (String): represents the name of a house.\n\n",
            "fields": [
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "represents a unique identifier for a specific community or neighborhood associated with the house."
              },
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "represents an identifier for a specific house within a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "represents the name of a house."
              }
            ],
            "name": "HouseDetailResponse",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\npublic class HouseDetailResponse {\n  private String communityId;\n  private String houseId;\n  private String name;\n}",
            "location": {
              "start": 33,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "ListAllHouseResponse.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/controllers/models/response/ListAllHouseResponse.java",
    "content": {
      "structured": {
        "description": "A class `ListAllHouseResponse` with a single field `houseDetails` of type `Set<HouseDetailResponse>`. The class follows the `@AllArgsConstructor` and `@NoArgsConstructor` annotations, indicating that either all or none of the fields should be automatically generated by the compiler. The class also uses the `@Getter` and `@Setter` annotations to enable getter and setter methods for the field. The `HouseDetailResponse` class is not explicitly defined in the code snippet provided, but it is presumably a separate class that contains details about individual houses.",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.controllers.models.response.ListAllHouseResponse\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"models\"\n        color=\"#33363A\"\n        subgraph cluster_1 {\n            label=\"request\"\n            color=\"#33363A\"\n            ListAllHouseRequestBody\n        }\n        subgraph cluster_2 {\n            label=\"response\"\n            color=\"#33363A\"\n            subgraph cluster_main {\n                // style=filled;\n                color=\"#00000000\"; \n                ListAllHouseResponse [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n                label = \"\"\n            }\n        }\n    }\n    HouseController\n    HouseController -> ListAllHouseResponse \n    ListAllHouseRequestBody -> ListAllHouseResponse [style=\"dashed\"]\n}\n",
        "items": [
          {
            "id": "6b5a794d-d98c-5990-d04a-9ef9d06e0cfa",
            "ancestors": [],
            "type": "function",
            "description": "is a Java class that contains a set of HouseDetailResponses as its only field or member variable, following the AllArgsConstructor and NoArgsConstructor annotations.\nFields:\n\t- houseDetails (Set<HouseDetailResponse>): of the ListAllHouseResponse class stores a set of HouseDetailResponse objects containing various details about houses.\n\n",
            "fields": [
              {
                "name": "houseDetails",
                "type_name": "Set<HouseDetailResponse>",
                "value": null,
                "constant": false,
                "class_name": "ListAllHouseResponse",
                "description": "of the ListAllHouseResponse class stores a set of HouseDetailResponse objects containing various details about houses."
              }
            ],
            "name": "ListAllHouseResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class ListAllHouseResponse {\n  private Set<HouseDetailResponse> houseDetails;\n}",
            "location": {
              "start": 33,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 8
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "house-service/src/main/java/com/prathab/homeservice/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base class for all JPA entities, providing an @Id field generated by Identity strategy and implementing Serializable interface. It also includes Lombok annotations for getting and setting the id value, as well as mapping superclass functionality.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.homeservice.domain.BaseEntity Pages: 1 -->\n<svg width=\"195pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 195.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.prathab.homeservice.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"187,-96 0,-96 0,-66 187,-66 187,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.domain.</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1prathab_1_1homeservice_1_1domain_1_1House.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"187,-30 0,-30 0,0 187,0 187,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.homeservice.domain.</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M93.5,-55.54C93.5,-46.96 93.5,-37.61 93.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"90,-55.8 93.5,-65.8 97,-55.8 90,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-151 56.5,-151 56.5,-132 130.5,-132 130.5,-151\"/>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M93.5,-121.65C93.5,-113.36 93.5,-103.78 93.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"90,-121.87 93.5,-131.87 97,-121.87 90,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    label=\"com.prathab.homeservice.domain.BaseEntity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n",
        "items": [
          {
            "id": "0c4c86b8-3997-27a5-7841-a5c1d42f385c",
            "ancestors": [],
            "type": "function",
            "description": "provides a common base class for all JPA Entities to inherit from, with an automatically generated ID field using the Identity strategy.\nFields:\n\t- id (Long): in the BaseEntity class represents a unique identifier for each instance of the class, generated automatically by the JPA framework using the IDENTITY strategy.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "BaseEntity",
                "description": "in the BaseEntity class represents a unique identifier for each instance of the class, generated automatically by the JPA framework using the IDENTITY strategy."
              }
            ],
            "name": "BaseEntity",
            "code": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 3
          }
        ]
      }
    }
  }
]