{"name":"HouseMemberDocumentTest.java","path":"service/src/test/java/com/myhome/controllers/HouseMemberDocumentTest.java","content":{"structured":{"description":"A class `HouseMemberDocumentController` that handles HTTP requests related to house member documents. The controller uses a `HouseMemberDocumentService` to perform business logic related to creating, uploading, updating, deleting, and retrieving house member documents. The controller handles various HTTP methods such as GET, POST, PUT, DELETE, and OPTIONS, and returns appropriate responses based on the method and parameters passed.","items":[{"id":"0b0cb208-8fa6-d198-9e4f-2339abc701a6","ancestors":[],"type":"function","description":"TODO","name":"HouseMemberDocumentTest","code":"class HouseMemberDocumentTest {\n\n  private static final String MEMBER_ID = \"test-member-id\";\n\n  private static final MockMultipartFile MULTIPART_FILE =\n      new MockMultipartFile(\"memberDocument\", new byte[0]);\n  private static final HouseMemberDocument MEMBER_DOCUMENT =\n      new HouseMemberDocument(MULTIPART_FILE.getName(), new byte[0]);\n\n  @Mock\n  private HouseMemberDocumentService houseMemberDocumentService;\n\n  @InjectMocks\n  private HouseMemberDocumentController houseMemberDocumentController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void shouldGetDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(MEMBER_DOCUMENT.getDocumentContent(), responseEntity.getBody());\n    assertEquals(MediaType.IMAGE_JPEG, responseEntity.getHeaders().getContentType());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPutDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldDeleteDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(false);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n}","location":{"start":36,"insert":36,"offset":" ","indent":0},"item_type":"class","length":126},{"id":"e9ad70a1-ab93-8296-4940-147f4542a100","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"initializes Mockito annotations for the current object, enabling mocking of dependencies.","params":[],"usage":{"language":"java","code":"import org.junit.jupiter.api.BeforeEach;\nimport org.mockito.MockitoAnnotations;\n\nclass MyTest {\n  private MyService myService;\n  \n  @BeforeEach\n  void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n}\n","description":"\nThis code uses the `@BeforeEach` annotation, which is a JUnit Jupiter hook that runs before each test method. `initMocks` is used to initialize and mock all fields that are annotated with `@Mock`. In this example, it initializes and mocks `myService`, which is an instance of the `MyService` class.\n\nNote that this code does not actually create any unit tests. It only shows how to use `initMocks` in a JUnit Jupiter test. To create actual unit tests with Mockito, you will need to write additional code that calls methods on the mock objects and asserts their behavior."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"5c157f13-a8ec-5882-084e-2d159577e57c","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"tests the House Member Document Controller's ability to retrieve a house member document successfully. It does this by providing an ID and verifying that the correct document is returned with the correct content type and status code.","params":[],"usage":{"language":"java","code":"@Test\nvoid getHouseMemberDocument() {\n    // given\n    var memberId = 1L;\n    HouseMemberDocument document = new HouseMemberDocument(null, null);\n    given(houseMemberDocumentService.findHouseMemberDocument(memberId)).willReturn(Optional.of(document));\n    \n    // when\n    ResponseEntity<byte[]> responseEntity = houseMemberDocumentController.getHouseMemberDocument(memberId);\n    \n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n}\n","description":"\nThis example tests the happy path of retrieving a document from the database and verifying that it is returned in the correct format. The test uses mocking to simulate the behavior of the service and ensures that the controller method returns an HTTP status code of 200 (OK) with no content body, as expected."},"name":"shouldGetDocumentSuccess","code":"@Test\n  void shouldGetDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(MEMBER_DOCUMENT.getDocumentContent(), responseEntity.getBody());\n    assertEquals(MediaType.IMAGE_JPEG, responseEntity.getHeaders().getContentType());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"8ad8ec48-13ff-a5b2-a746-44778239448e","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"verifies that the `getHouseMemberDocument` method returns a `HttpStatus.NOT_FOUND` response when the document for a given member cannot be found in the service.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nThis code will test that the given method returns a null value and should return an empty optional object. In this case, the status code of the response entity would be HttpStatus.NOT_FOUND which is what we expect.\nThe code is short and to the point, it clearly explains how we want the method to behave. It also makes sure that the houseMemberDocumentService is called with a given argument."},"name":"shouldGetDocumentFailure","code":"@Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"b92975b9-6f1d-f2b2-d94d-3dcfa71c2a53","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"tests the `uploadHouseMemberDocument` method by verifying that it returns a `NO_CONTENT` status code and calls the underlying `createHouseMemberDocument` method with the provided file and member ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n","description":"\nThis code is using the `given` method to mock a service that would be called in this method, and then it uses the `willReturn` method to specify what value should be returned from that mocked method when it is called. Finally, it asserts that the response entity has the correct status code. Additionally, the verify method is used to ensure that the method was actually called on the service."},"name":"shouldPostDocumentSuccess","code":"@Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"884305a1-cd46-13b3-ba4e-e29df4fbb918","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"tests the scenario where the house member document service returns an empty optional when creating a new document, and the `uploadHouseMemberDocument` controller method returns a `HttpStatus.NOT_FOUND` response along with the verification of the service method call.","params":[],"usage":{"language":"java","code":"@Test\npublic void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity = houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n}\n","description":"\nThe method shouldPostDocumentFailureNotFound is testing the failure scenario of uploading a document. It does this by mocking a multipart file and setting the expected response status to NOT_FOUND. The method then calls the houseMemberDocumentController with the same arguments as provided in the test, verifies that the returned status code is NOT_FOUND, and checks that the service was called correctly.\n\nNote: In this example, the method \"uploadHouseMemberDocument\" is assumed to return a ResponseEntity<byte[]>. However, if it were not an optional value, then the following line would be used instead:\n"},"name":"shouldPostDocumentFailureNotFound","code":"@Test\n  void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"8d3bc394-4e7b-0897-0349-0cbd98402024","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"tests the updateHouseMemberDocument method's functionality by calling it with a valid multipart file and member ID, verifying the HTTP status code and invoking the underlying House Member Document Service method to update the document.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n","description":"\nThe given() and willReturn() functions are from the mocking library Mockito, which is used to create a stub for the service in order to test the controller. The assertEquals() function is from the JUnit assertion library. The verify() function also comes from Mockito, which checks that the service method was called with the expected parameters.\n\nThe given() and willReturn() functions are used to set up the mock service before the test. In this case, the updateHouseMemberDocument() function is called on the stubbed service, passing a MultipartFile and an int as arguments. The willReturn() function then sets the expected response of the function call, in this case returning an Optional containing a HouseMemberDocument object.\n\nThe controller method under test is invoked with the same arguments as given(), and the assertEquals() function checks that it returned the correct HttpStatus code. Finally, the verify() function checks that the service method was called as expected with the arguments given()."},"name":"shouldPutDocumentSuccess","code":"@Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":110,"insert":110,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"e9a95c56-30f2-43bd-ca48-5755fefa999e","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"verifies that when the `houseMemberDocumentController.updateHouseMemberDocument()` method is called with a non-existent member ID, it returns a `HttpStatus.NOT_FOUND` response and calls the `houseMemberDocumentService.updateHouseMemberDocument()` method with the given file and member ID.","params":[],"usage":{"language":"java","code":"public void testUpdateHouseMemberDocument() {\n    // Given\n    HouseMemberDocumentController houseMemberDocumentController = new HouseMemberDocumentController(houseMemberDocumentService);\n    HouseMemberDocumentService houseMemberDocumentService = mock(HouseMemberDocumentService.class);\n    Long memberId = 1L;\n    MultipartFile multipartFile = MockMultipartFileBuilder.aMockMultipartFile().withName(\"test.txt\").build();\n    // When\n    Optional<HouseMemberDocument> houseMemberDocumentOptional = houseMemberDocumentService.updateHouseMemberDocument(memberId, multipartFile);\n    // Then\n    assertEquals(houseMemberDocumentOptional, Optional.empty());\n}\n","description":"\nIn this example, the test creates a mock instance of HouseMemberDocumentService and sets up a mocked method to return an empty optional when the updateHouseMemberDocument() method is called with the given memberId and multipartFile. The assert statement then checks that the actual result from the method is equal to an empty optional.\nThis example would test the updateHouseMemberDocument() method in the HouseMemberDocumentController class, specifically for the case where no document is found after updating the HouseMemberDocumentService.\nNote that the mockMultipartFile() method is used to create a mock instance of MultipartFile with the given name \"test.txt\", which will be used as the multipart file for testing purposes."},"name":"shouldPutDocumentFailureNotFound","code":"@Test\n  void shouldPutDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":123,"insert":123,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"3b352db2-167b-e9b2-874f-1c420eb99357","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"tests whether deleting a house member document returns a successful response with a HTTP status code of `NO_CONTENT`.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nIn this example, the deleteHouseMemberDocument method is being tested to ensure that it returns true when the MEMBER_ID parameter is passed into it. Additionally, a response entity with a HttpStatus of NO_CONTENT is being asserted, indicating that no content was returned in the response. Finally, the verify method is used to ensure that the deleteHouseMemberDocument method on the houseMemberDocumentService instance is called with the MEMBER_ID parameter passed into it."},"name":"shouldDeleteDocumentSuccess","code":"@Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"fb231b7d-587b-48b7-f346-57876c708abe","ancestors":["0b0cb208-8fa6-d198-9e4f-2339abc701a6"],"type":"function","description":"verifies that deleting a house member document fails when the document is not found.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldDeleteDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(false);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nThis example is testing that when a house member document cannot be found and the service returns false, the controller should return a status code of HttpStatus.NOT_FOUND. The test also verifies that the deleteHouseMemberDocument method was called on the service with the MEMBER_ID as input."},"name":"shouldDeleteDocumentFailureNotFound","code":"@Test\n  void shouldDeleteDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(false);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2},"item_type":"method","length":12}]}}}