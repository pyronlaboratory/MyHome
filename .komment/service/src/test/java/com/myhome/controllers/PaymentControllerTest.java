{"name":"PaymentControllerTest.java","path":"service/src/test/java/com/myhome/controllers/PaymentControllerTest.java","content":{"structured":{"description":"","items":[{"id":"1b23cd14-1d3e-44d3-9610-81ce692f46b2","ancestors":[],"type":"function","name":"init","location":{"offset":" ","indent":2,"insert":102,"start":102},"returns":false,"params":[],"code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","skip":false,"length":4,"comment":{"description":"initializes mock object annotations for the class, enabling the use of Mockito library to create and verify mock objects.","params":[],"returns":null}},{"id":"a5a87bcf-05a2-4427-9367-a67e06d82f13","ancestors":[],"type":"function","name":"createTestPaymentDto","location":{"offset":" ","indent":2,"insert":107,"start":107},"returns":"PaymentDto","params":[],"code":"private PaymentDto createTestPaymentDto() {\n    UserDto userDto = UserDto.builder()\n        .userId(TEST_ADMIN_ID)\n        .communityIds(new HashSet<>(Collections.singletonList(TEST_COMMUNITY_ID)))\n        .id(Long.valueOf(TEST_ADMIN_ID))\n        .encryptedPassword(TEST_ADMIN_PASSWORD)\n        .name(TEST_ADMIN_NAME)\n        .email(TEST_ADMIN_EMAIL)\n        .build();\n    HouseMemberDto houseMemberDto = new HouseMemberDto()\n        .memberId(TEST_MEMBER_ID)\n        .name(TEST_MEMBER_NAME)\n        .id(Long.valueOf(TEST_MEMBER_ID));\n\n    return PaymentDto.builder()\n        .paymentId(TEST_ID)\n        .type(TEST_TYPE)\n        .description(TEST_DESCRIPTION)\n        .charge(TEST_CHARGE)\n        .dueDate(TEST_DUE_DATE)\n        .recurring(TEST_RECURRING)\n        .admin(userDto)\n        .member(houseMemberDto)\n        .build();\n  }","skip":false,"length":25,"comment":{"description":"creates a test payment DTO with user and member details, payment information, and other attributes.","params":[],"returns":{"type":"PaymentDto","description":"a `PaymentDto` object with mock data for an administrator and member."}}},{"id":"491e914d-bf40-43da-a522-2ea9b67ac97d","ancestors":[],"type":"function","name":"createTestCommunityDto","location":{"offset":" ","indent":2,"insert":133,"start":133},"returns":"CommunityDto","params":[],"code":"private CommunityDto createTestCommunityDto() {\n    CommunityDto communityDto = new CommunityDto();\n    communityDto.setName(TEST_COMMUNITY_NAME);\n    communityDto.setDistrict(TEST_COMMUNITY_DISTRICT);\n    communityDto.setCommunityId(TEST_COMMUNITY_ID);\n    return communityDto;\n  }","skip":false,"length":7,"comment":{"description":"creates a new instance of `CommunityDto` with specified name, district, and community ID for testing purposes.","params":[],"returns":{"type":"CommunityDto","description":"a `CommunityDto` object with predetermined values for name, district, and community ID."}}},{"id":"7e3dbaea-3d53-429a-827f-bc49761eed0e","ancestors":[],"type":"function","name":"getMockCommunity","location":{"offset":" ","indent":2,"insert":141,"start":141},"returns":"Community","params":[{"name":"admins","type":"Set<User>"}],"code":"private Community getMockCommunity(Set<User> admins) {\n    Community community =\n        new Community(admins, new HashSet<>(), TEST_COMMUNITY_NAME, TEST_COMMUNITY_ID,\n            TEST_COMMUNITY_DISTRICT, new HashSet<>());\n    User admin = new User(COMMUNITY_ADMIN_NAME, TEST_ADMIN_ID, COMMUNITY_ADMIN_EMAIL, false,\n        COMMUNITY_ADMIN_PASSWORD, new HashSet<>(), new HashSet<>());\n    community.getAdmins().add(admin);\n    admin.getCommunities().add(community);\n\n    CommunityHouse communityHouse = getMockCommunityHouse();\n    communityHouse.setCommunity(community);\n    community.getHouses().add(communityHouse);\n\n    return community;\n  }","skip":false,"length":15,"comment":{"description":"creates a new mock Community instance with given admins, house and other fields set to default values, and then returns it.","params":[{"name":"admins","type":"Set<User>","description":"set of users who will be administrators of the generated Community, and is used to pass on the list of admins to the Community constructor for initialization."}],"returns":{"type":"Community","description":"a mock Community object containing admin users and a House object."}}},{"id":"464cb361-4fe4-414b-9820-c4772b796fc1","ancestors":[],"type":"function","name":"getMockCommunityHouse","location":{"offset":" ","indent":2,"insert":157,"start":157},"returns":"CommunityHouse","params":[],"code":"private CommunityHouse getMockCommunityHouse() {\n    CommunityHouse communityHouse = new CommunityHouse();\n    communityHouse.setName(COMMUNITY_HOUSE_NAME);\n    communityHouse.setHouseId(COMMUNITY_HOUSE_ID);\n    communityHouse.setHouseMembers(new HashSet<>());\n\n    return communityHouse;\n  }","skip":false,"length":8,"comment":{"description":"creates a new `CommunityHouse` instance with default values for name, ID, and members.","params":[],"returns":{"type":"CommunityHouse","description":"a mock instance of the `CommunityHouse` class."}}},{"id":"fcf9444b-0fd6-4daf-ac3b-5fc3dfaee6e3","ancestors":[],"type":"function","name":"getMockPayment","location":{"offset":" ","indent":2,"insert":166,"start":166},"returns":"Payment","params":[],"code":"private Payment getMockPayment() {\n    User admin =\n        new User(TEST_ADMIN_NAME, TEST_ADMIN_ID, TEST_ADMIN_EMAIL, false, TEST_ADMIN_PASSWORD,\n            new HashSet<>(), new HashSet<>());\n    Community community = getMockCommunity(new HashSet<>());\n    community.getAdmins().add(admin);\n    admin.getCommunities().add(community);\n    return new Payment(TEST_ID, TEST_CHARGE, TEST_TYPE, TEST_DESCRIPTION, TEST_RECURRING,\n        LocalDate.parse(TEST_DUE_DATE, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")), admin,\n        new HouseMember(TEST_MEMBER_ID, new HouseMemberDocument(), TEST_MEMBER_NAME,\n            new CommunityHouse()));\n  }","skip":false,"length":12,"comment":{"description":"generates a mock payment object containing test data for various fields such as ID, charge amount, type, description, recurring status, and due date. The function also includes an admin user and a community in the payment object.","params":[],"returns":{"type":"Payment","description":"a mock Payment object containing fake data."}}},{"id":"e437602d-51ab-4b63-8a71-52ac07de3d09","ancestors":[],"type":"function","name":"shouldSchedulePaymentSuccessful","location":{"offset":" ","indent":2,"insert":179,"start":179},"returns":false,"params":[],"code":"@Test\n  void shouldSchedulePaymentSuccessful() {\n    // given\n    com.myhome.model.SchedulePaymentRequest request =\n        new com.myhome.model.SchedulePaymentRequest()\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n\n    EnrichedSchedulePaymentRequest enrichedRequest =\n        new EnrichedSchedulePaymentRequest(TEST_TYPE, TEST_DESCRIPTION, TEST_RECURRING, TEST_CHARGE,\n            TEST_DUE_DATE, TEST_ADMIN_ID, 1L, TEST_ADMIN_NAME, TEST_ADMIN_EMAIL,\n            TEST_ADMIN_PASSWORD, new HashSet<>(Collections.singletonList(TEST_COMMUNITY_ID)),\n            TEST_MEMBER_ID,\n            2L, \"\", TEST_MEMBER_NAME, COMMUNITY_HOUSE_ID);\n    PaymentDto paymentDto = createTestPaymentDto();\n    com.myhome.model.SchedulePaymentResponse response =\n        new com.myhome.model.SchedulePaymentResponse()\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n\n    Community community = getMockCommunity(new HashSet<>());\n\n    HouseMember member = new HouseMember(TEST_MEMBER_ID, null, TEST_MEMBER_NAME,\n        community.getHouses().iterator().next());\n\n    community.getHouses().iterator().next().getHouseMembers().add(member);\n\n    User admin = community.getAdmins().iterator().next();\n\n    given(paymentApiMapper.enrichSchedulePaymentRequest(request, admin, member))\n        .willReturn(enrichedRequest);\n    given(paymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(enrichedRequest))\n        .willReturn(paymentDto);\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n    given(paymentApiMapper.paymentToSchedulePaymentResponse(paymentDto))\n        .willReturn(response);\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.of(member));\n    given(communityService.findCommunityAdminById(TEST_ADMIN_ID))\n        .willReturn(Optional.of(community.getAdmins().iterator().next()));\n\n    //when\n    ResponseEntity<com.myhome.model.SchedulePaymentResponse> responseEntity =\n        paymentController.schedulePayment(request);\n\n    //then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(paymentApiMapper).enrichSchedulePaymentRequest(request, admin, member);\n    verify(paymentApiMapper).enrichedSchedulePaymentRequestToPaymentDto(enrichedRequest);\n    verify(paymentService).schedulePayment(paymentDto);\n    verify(paymentApiMapper).paymentToSchedulePaymentResponse(paymentDto);\n    verify(paymentService).getHouseMember(TEST_MEMBER_ID);\n  }","skip":false,"length":66,"comment":{"description":"tests the scenario where a Schedule Payment request is successfully processed by the payment API. It verifies that the response returned by the API is correct and that all the necessary method calls to the Payment Service and Payment API have been made.","params":[],"returns":null}},{"id":"6045503a-b8ed-4a6f-b543-e1aa05a84aa1","ancestors":[],"type":"function","name":"shouldNotScheduleIfMemberDoesNotExist","location":{"offset":" ","indent":2,"insert":246,"start":246},"returns":false,"params":[],"code":"@Test\n  void shouldNotScheduleIfMemberDoesNotExist() {\n    // given\n    com.myhome.model.SchedulePaymentRequest request =\n        new com.myhome.model.SchedulePaymentRequest()\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n    PaymentDto paymentDto = createTestPaymentDto();\n    String expectedExceptionMessage = \"House member with given id not exists: \" + TEST_MEMBER_ID;\n\n    given(paymentApiMapper.schedulePaymentRequestToPaymentDto(request))\n        .willReturn(paymentDto);\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    final RuntimeException runtimeException =\n        assertThrows(RuntimeException.class, () -> paymentController.schedulePayment(request));\n    // then\n    final String exceptionMessage = runtimeException.getMessage();\n    assertEquals(expectedExceptionMessage, exceptionMessage);\n    verifyNoInteractions(paymentApiMapper);\n  }","skip":false,"length":30,"comment":{"description":"verifies that an exception is thrown when a payment request is attempted to be scheduled for a member who does not exist in the system.","params":[],"returns":null}},{"id":"722e8f53-0c46-48f6-9973-ffd5e9b9c9f2","ancestors":[],"type":"function","name":"shouldNotScheduleIfAdminDoesntExist","location":{"offset":" ","indent":2,"insert":277,"start":277},"returns":false,"params":[],"code":"@Test\n  void shouldNotScheduleIfAdminDoesntExist() {\n    // given\n    com.myhome.model.SchedulePaymentRequest request =\n        new com.myhome.model.SchedulePaymentRequest()\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n    PaymentDto paymentDto = createTestPaymentDto();\n    String expectedExceptionMessage = \"Admin with given id not exists: \" + TEST_ADMIN_ID;\n    com.myhome.model.SchedulePaymentResponse response =\n        new com.myhome.model.SchedulePaymentResponse()\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n\n    HouseMember member = new HouseMember(TEST_MEMBER_ID, null, TEST_MEMBER_NAME, null);\n\n    given(paymentApiMapper.schedulePaymentRequestToPaymentDto(request))\n        .willReturn(paymentDto);\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n    given(paymentApiMapper.paymentToSchedulePaymentResponse(paymentDto))\n        .willReturn(response);\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.of(member));\n    given(communityService.findCommunityAdminById(TEST_ADMIN_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    final RuntimeException runtimeException =\n        assertThrows(RuntimeException.class, () -> paymentController.schedulePayment(request));\n    // then\n    final String exceptionMessage = runtimeException.getMessage();\n    assertEquals(expectedExceptionMessage, exceptionMessage);\n    verifyNoInteractions(paymentApiMapper);\n  }","skip":false,"length":46,"comment":{"description":"tests whether a payment controller throws a `RuntimeException` when scheduling a payment request for an admin who does not exist.","params":[],"returns":null}},{"id":"b4a3b48b-addd-47b9-b10b-7c5733009117","ancestors":[],"type":"function","name":"shouldNotScheduleIfAdminIsNotInCommunity","location":{"offset":" ","indent":2,"insert":324,"start":324},"returns":false,"params":[],"code":"@Test\n  void shouldNotScheduleIfAdminIsNotInCommunity() {\n    // given\n    com.myhome.model.SchedulePaymentRequest request =\n        new com.myhome.model.SchedulePaymentRequest()\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n    PaymentDto paymentDto = createTestPaymentDto();\n    com.myhome.model.SchedulePaymentResponse response =\n        new com.myhome.model.SchedulePaymentResponse()\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n\n    Community community = getMockCommunity(new HashSet<>());\n    Set<User> admins = community.getAdmins();\n    User admin = admins.iterator().next();\n    admins.remove(admin);\n\n    CommunityHouse communityHouse = community.getHouses().iterator().next();\n\n    HouseMember member = new HouseMember(TEST_MEMBER_ID, null, TEST_MEMBER_NAME, communityHouse);\n\n    given(paymentApiMapper.schedulePaymentRequestToPaymentDto(request))\n        .willReturn(paymentDto);\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n    given(paymentApiMapper.paymentToSchedulePaymentResponse(paymentDto))\n        .willReturn(response);\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.of(member));\n    given(communityService.findCommunityAdminById(TEST_ADMIN_ID))\n        .willReturn(Optional.of(admin));\n\n    //when\n    ResponseEntity<com.myhome.model.SchedulePaymentResponse> responseEntity =\n        paymentController.schedulePayment(request);\n\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(paymentService).getHouseMember(TEST_MEMBER_ID);\n    verifyNoInteractions(paymentApiMapper);\n    verify(communityService).findCommunityAdminById(TEST_ADMIN_ID);\n  }","skip":false,"length":55,"comment":{"description":"tests whether the payment controller will schedule a payment request if the admin associated with the member is not a part of the community.","params":[],"returns":null}},{"id":"87652371-13dc-4e5a-aa62-bb3b8b20fc06","ancestors":[],"type":"function","name":"shouldGetPaymentDetailsSuccess","location":{"offset":" ","indent":2,"insert":380,"start":380},"returns":false,"params":[],"code":"@Test\n  void shouldGetPaymentDetailsSuccess() {\n    // given\n    PaymentDto paymentDto = createTestPaymentDto();\n\n    com.myhome.model.SchedulePaymentResponse expectedResponse =\n        new com.myhome.model.SchedulePaymentResponse()\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n    given(paymentService.getPaymentDetails(TEST_ID))\n        .willReturn(Optional.of(paymentDto));\n    given(paymentApiMapper.paymentToSchedulePaymentResponse(paymentDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<com.myhome.model.SchedulePaymentResponse> responseEntity =\n        paymentController.listPaymentDetails(TEST_ID);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(paymentService).getPaymentDetails(TEST_ID);\n    verify(paymentApiMapper).paymentToSchedulePaymentResponse(paymentDto);\n  }","skip":false,"length":30,"comment":{"description":"tests the `listPaymentDetails` method of a payment controller by verifying that it returns a response with the expected payment details when given a valid ID.","params":[],"returns":null}},{"id":"7740b3f6-9cfe-4443-af02-a248408c3366","ancestors":[],"type":"function","name":"shouldListNoPaymentDetailsSuccess","location":{"offset":" ","indent":2,"insert":411,"start":411},"returns":false,"params":[],"code":"@Test\n  void shouldListNoPaymentDetailsSuccess() {\n    //given\n    given(paymentService.getPaymentDetails(TEST_ID))\n        .willReturn(Optional.empty());\n\n    //when\n    ResponseEntity<com.myhome.model.SchedulePaymentResponse> responseEntity =\n        paymentController.listPaymentDetails(TEST_ID);\n\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(paymentService).getPaymentDetails(TEST_ID);\n    verifyNoInteractions(paymentApiMapper);\n  }","skip":false,"length":16,"comment":{"description":"verifies that the `listPaymentDetails` method returns a `HttpStatus.NOT_FOUND` status code and an empty response body when there are no payment details for the given ID.","params":[],"returns":null}},{"id":"7b958e19-a8cd-467f-b1bb-9b79ef243df4","ancestors":[],"type":"function","name":"shouldGetNoMemberPaymentsSuccess","location":{"offset":" ","indent":2,"insert":428,"start":428},"returns":false,"params":[],"code":"@Test\n  void shouldGetNoMemberPaymentsSuccess() {\n    //given\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.empty());\n\n    //when\n    ResponseEntity<ListMemberPaymentsResponse> responseEntity =\n        paymentController.listAllMemberPayments(TEST_MEMBER_ID);\n\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verifyNoInteractions(paymentApiMapper);\n  }","skip":false,"length":15,"comment":{"description":"verifies that when a member ID is provided, the listAll Member Payments endpoint returns a ResponseEntity with a status code of NOT_FOUND and an empty body.","params":[],"returns":null}},{"id":"3ab7a053-40a3-454e-8479-eeea35fe616d","ancestors":[],"type":"function","name":"shouldGetMemberPaymentsSuccess","location":{"offset":" ","indent":2,"insert":444,"start":444},"returns":false,"params":[],"code":"@Test\n  void shouldGetMemberPaymentsSuccess() {\n    // given\n    PaymentDto paymentDto = createTestPaymentDto();\n\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n\n    HouseMember member = new HouseMember(TEST_MEMBER_ID, null, TEST_MEMBER_NAME, null);\n    given(paymentService.getHouseMember(TEST_MEMBER_ID))\n        .willReturn(Optional.of(member));\n\n    Set<Payment> payments = new HashSet<>();\n    Payment mockPayment = getMockPayment();\n    payments.add(mockPayment);\n\n    given(paymentService.getPaymentsByMember(TEST_MEMBER_ID))\n        .willReturn(payments);\n\n    Set<MemberPayment> paymentResponses = new HashSet<>();\n    paymentResponses.add(\n        new MemberPayment()\n            .memberId(TEST_MEMBER_ID)\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE));\n\n    ListMemberPaymentsResponse expectedResponse =\n        new ListMemberPaymentsResponse().payments(paymentResponses);\n\n    given(paymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet(payments))\n        .willReturn(paymentResponses);\n\n    // when\n    ResponseEntity<ListMemberPaymentsResponse> responseEntity =\n        paymentController.listAllMemberPayments(TEST_MEMBER_ID);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(responseEntity.getBody(), expectedResponse);\n    verify(paymentService).getPaymentsByMember(TEST_MEMBER_ID);\n    verify(paymentApiMapper).memberPaymentSetToRestApiResponseMemberPaymentSet(payments);\n  }","skip":false,"length":43,"comment":{"description":"tests the `listAllMemberPayments` method of a payment controller by providing a member ID and verifying that the correct payments are retrieved from the database and returned in the expected format.","params":[],"returns":null}},{"id":"1a63dc40-ecbb-4be3-8c10-b935c1bd0dca","ancestors":[],"type":"function","name":"shouldGetAdminPaymentsSuccess","location":{"offset":" ","indent":2,"insert":488,"start":488},"returns":false,"params":[],"code":"@Test\n  void shouldGetAdminPaymentsSuccess() {\n    // given\n    com.myhome.model.SchedulePaymentRequest request =\n        new com.myhome.model.SchedulePaymentRequest()\n            .type(TEST_TYPE)\n            .description(TEST_DESCRIPTION)\n            .recurring(TEST_RECURRING)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n            .adminId(TEST_ADMIN_ID)\n            .memberId(TEST_MEMBER_ID);\n    PaymentDto paymentDto = createTestPaymentDto();\n\n    given(paymentService.schedulePayment(paymentDto))\n        .willReturn(paymentDto);\n\n    List<Payment> payments = new ArrayList<>();\n    Payment mockPayment = getMockPayment();\n    payments.add(mockPayment);\n\n    Set<String> adminIds = new HashSet<>();\n    adminIds.add(TEST_ADMIN_ID);\n\n    Set<User> admins = new HashSet<>();\n\n    Community community = getMockCommunity(admins);\n\n    CommunityDto communityDto = createTestCommunityDto();\n\n    given(communityService.createCommunity(communityDto))\n        .willReturn(community);\n    given(communityService.getCommunityDetailsByIdWithAdmins(TEST_ID))\n        .willReturn(Optional.of(community));\n    given(paymentService.getPaymentsByAdmin(TEST_ADMIN_ID, TEST_PAGEABLE))\n        .willReturn(new PageImpl<>(payments));\n    given(communityService.addAdminsToCommunity(TEST_ID, adminIds))\n        .willReturn(Optional.of(community));\n\n    Set<AdminPayment> responsePayments = new HashSet<>();\n    responsePayments.add(\n        new AdminPayment().adminId(TEST_ADMIN_ID)\n            .paymentId(TEST_ID)\n            .charge(TEST_CHARGE)\n            .dueDate(TEST_DUE_DATE)\n    );\n\n    ListAdminPaymentsResponse expectedResponse =\n        new ListAdminPaymentsResponse()\n            .payments(responsePayments)\n            .pageInfo(PageInfo.of(TEST_PAGEABLE, new PageImpl<>(payments)));\n\n    given(paymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(new HashSet<>(payments)))\n        .willReturn(responsePayments);\n\n    //when\n    ResponseEntity<ListAdminPaymentsResponse> responseEntity =\n        paymentController.listAllAdminScheduledPayments(TEST_ID, TEST_ADMIN_ID,\n            TEST_PAGEABLE);\n\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(communityService).getCommunityDetailsByIdWithAdmins(TEST_ID);\n    verify(paymentService).getPaymentsByAdmin(TEST_ADMIN_ID, TEST_PAGEABLE);\n    verify(paymentApiMapper).adminPaymentSetToRestApiResponseAdminPaymentSet(\n        new HashSet<>(payments));\n  }","skip":false,"length":68,"comment":{"description":"tests the `ListAllAdminScheduledPayments` controller's ability to retrieve all scheduled payments for a given admin and community, by querying the payment and community services and mapping the results to a rest API response.","params":[],"returns":null}},{"id":"7f82926e-340d-4bbe-b979-048da269ee97","ancestors":[],"type":"function","name":"shouldReturnNotFoundWhenAdminIsNotInCommunity","location":{"offset":" ","indent":2,"insert":557,"start":557},"returns":false,"params":[],"code":"@Test\n  void shouldReturnNotFoundWhenAdminIsNotInCommunity() {\n    //given\n    final String notAdminFromCommunity = \"2\";\n    Community community = getMockCommunity(new HashSet<>());\n    given(communityService.getCommunityDetailsByIdWithAdmins(TEST_ID))\n        .willReturn(Optional.of(community));\n\n    //when\n    ResponseEntity<ListAdminPaymentsResponse> responseEntity =\n        paymentController.listAllAdminScheduledPayments(TEST_ID, notAdminFromCommunity,\n            TEST_PAGEABLE);\n\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityService).getCommunityDetailsByIdWithAdmins(TEST_ID);\n    verifyNoInteractions(paymentService);\n  }","skip":false,"length":19,"comment":{"description":"tests that when an admin is not found in a community, the `listAllAdminScheduledPayments` method returns a `HttpStatus.NOT_FOUND` response with an empty body.","params":[],"returns":null}},{"id":"65438039-1fc5-4ee9-a576-44dbccec6025","ancestors":[],"type":"function","name":"shouldThrowExceptionWhenCommunityNotExists","location":{"offset":" ","indent":2,"insert":577,"start":577},"returns":false,"params":[],"code":"@Test\n  void shouldThrowExceptionWhenCommunityNotExists() {\n    //given\n    String expectedExceptionMessage = \"Community with given id not exists: \" + TEST_ID;\n\n    given(communityService.getCommunityDetailsByIdWithAdmins(TEST_ID))\n        .willReturn(Optional.empty());\n\n    //when\n    final RuntimeException runtimeException = assertThrows(\n        RuntimeException.class,\n        () -> paymentController.listAllAdminScheduledPayments(TEST_ID, TEST_ADMIN_ID,\n            TEST_PAGEABLE)\n    );\n\n    //then\n    assertEquals(expectedExceptionMessage, runtimeException.getMessage());\n    verify(communityService).getCommunityDetailsByIdWithAdmins(TEST_ID);\n    verifyNoInteractions(paymentService);\n    verifyNoInteractions(paymentApiMapper);\n  }","skip":false,"length":21,"comment":{"description":"verifies that a `RuntimeException` is thrown when the community with the given ID does not exist. It also verifies that the community service method `getCommunityDetailsByIdWithAdmins` is called with the correct ID and that there are no interactions with the payment service or payment API mapper.","params":[],"returns":null}}]}}}