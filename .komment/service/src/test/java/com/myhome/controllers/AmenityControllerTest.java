{"name":"AmenityControllerTest.java","path":"service/src/test/java/com/myhome/controllers/AmenityControllerTest.java","content":{"structured":{"description":"A controller class for managing amenities in a community. The code includes several methods:\n\n* `addAmenityToCommunity`: adds an amenity to a community\n* `getAmenityDetails`: retrieves details of an amenity by its ID\n* `deleteAmenity`: deletes an amenity from the community\n* `updateAmenity`: updates an amenity in the community\n\nThe code uses dependency injection and mocking frameworks (Mockito and JMock) to simplify testing and make the code more robust.","items":[{"id":"3e1f228b-b1e7-ccb7-204c-556881922660","ancestors":[],"type":"function","description":"TODO","name":"AmenityControllerTest","code":"class AmenityControllerTest {\n\n  private static final String TEST_AMENITY_NAME = \"test-amenity-name\";\n  private static final BigDecimal TEST_AMENITY_PRICE = BigDecimal.valueOf(1);\n  private final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n  private final String TEST_COMMUNITY_ID = \"1\";\n\n  @Mock\n  private AmenityService amenitySDJpaService;\n  @Mock\n  private AmenityApiMapper amenityApiMapper;\n\n  @InjectMocks\n  private AmenityController amenityController;\n\n  @Test\n  void shouldAddAmenityToCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto =\n        new AmenityDto().id(1L)\n            .amenityId(\"amenityId\")\n            .name(\"name\")\n            .description(\"description\")\n            .price(BigDecimal.ONE)\n            .communityId(\"\");\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.of(singletonList(amenityDto)));\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n  }\n\n  @Test\n  void shouldNotAddAmenityWhenCommunityNotExists() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto = new AmenityDto();\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n  }\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void getAmenityDetails() {\n    // given\n    Amenity testAmenity = getTestAmenity();\n    GetAmenityDetailsResponse expectedResponseBody = new GetAmenityDetailsResponse()\n        .amenityId(testAmenity.getAmenityId())\n        .description(testAmenity.getDescription());\n\n    given(amenitySDJpaService.getAmenityDetails(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(amenityApiMapper.amenityToAmenityDetailsResponse(testAmenity))\n        .willReturn(expectedResponseBody);\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertEquals(expectedResponseBody, response.getBody());\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n    verify(amenityApiMapper).amenityToAmenityDetailsResponse(testAmenity);\n  }\n\n  @Test\n  void getAmenityDetailsNotExists() {\n    // given\n    given(amenitySDJpaService.getAmenityDetails(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n    verify(amenityApiMapper, never()).amenityToAmenityDetailsResponse(any());\n  }\n\n  @Test\n  void deleteAmenity() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }\n\n  @Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }\n\n  @Test\n  void shouldUpdateAmenitySuccessfully() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenityIfAmenityNotExists() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }\n\n  private Amenity getTestAmenity() {\n    return new Amenity()\n        .withAmenityId(TEST_AMENITY_ID)\n        .withDescription(TEST_AMENITY_DESCRIPTION);\n  }\n\n  private AmenityDto getTestAmenityDto() {\n    return new AmenityDto()\n        .id(1L)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }\n\n  private UpdateAmenityRequest getUpdateAmenityRequest() {\n    return new UpdateAmenityRequest()\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(1L)\n        .communityId(TEST_COMMUNITY_ID);\n  }\n}","location":{"start":46,"insert":46,"offset":" ","indent":0},"item_type":"class","length":200},{"id":"f052389b-6e00-bbae-964b-e34cdf535345","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests the AddAmenityController's ability to add an amenity to a community. It provides a given amenity Dto, creates it in the database using the amenitySDJpaService, and then verifies that the response status code is OK.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldAddAmenityToCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto =\n        new AmenityDto().id(1L)\n            .amenityId(\"amenityId\")\n            .name(\"name\")\n            .description(\"description\")\n            .price(BigDecimal.ONE)\n            .communityId(\"\");\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.of(singletonList(amenityDto)));\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n  }\n","description":"\n The example code should be as short as possible, and it should work correctly. It does not need to explain its implementation."},"name":"shouldAddAmenityToCommunity","code":"@Test\n  void shouldAddAmenityToCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto =\n        new AmenityDto().id(1L)\n            .amenityId(\"amenityId\")\n            .name(\"name\")\n            .description(\"description\")\n            .price(BigDecimal.ONE)\n            .communityId(\"\");\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.of(singletonList(amenityDto)));\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2},"item_type":"method","length":23},{"id":"ba43612a-7129-268f-bb45-03b42c7365eb","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests whether adding an amenity to a non-existent community returns a `HttpStatus.NOT_FOUND` response.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotAddAmenityWhenCommunityNotExists() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto = new AmenityDto();\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n  }\n","description":"\nIn this example, the method shouldNotAddAmenityWhenCommunityNotExists is testing a specific scenario where adding an amenity to a community fails when the community ID does not exist in the database. The test sets up a given condition by using JMockit's given() method to mock the behavior of the createAmenities method from the AmenitySDJpaService class and returning an empty optional instead. Then, it calls the addAmenityToCommunity method with the communityId that does not exist in the database, and asserts that the response status code is HttpStatus.NOT_FOUND.\n\nIt's important to note that this example only tests one specific scenario and does not cover other scenarios such as invalid requests or other possible exceptions. It's also worth mentioning that JMockit is a mocking library, it allows you to change the behavior of any method during test time, it's an alternative to using Mockito for example."},"name":"shouldNotAddAmenityWhenCommunityNotExists","code":"@Test\n  void shouldNotAddAmenityWhenCommunityNotExists() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto amenityDto = new AmenityDto();\n    final HashSet<AmenityDto> amenities = new HashSet<>(singletonList(amenityDto));\n    final AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n    given(amenitySDJpaService.createAmenities(amenities, communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final ResponseEntity<AddAmenityResponse> response =\n        amenityController.addAmenityToCommunity(communityId, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n  }","location":{"start":86,"insert":86,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"63338be3-0a04-bf95-0d4a-5c93518de165","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"initializes Mockito mocking for the class, enabling the use of Mockito annotations to mock dependencies and behaviors of objects under test.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nThis example shows the use of MockitoAnnotations to initialize the mock objects in the test class. The `init()` method is called before each test is executed, and it ensures that all the mocked objects are properly initialized. This allows us to start our unit tests with a clean slate every time we run a test."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"2d17ec16-6150-6ea2-144a-f608e8ae5969","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"retrieves an amenity's details from the database and API, given its ID. It verifies the retrieved response matches expected fields and HTTP status code.","params":[],"usage":{"language":"java","code":"@Test\nvoid getAmenityDetails() {\n    // given\n    Amenity testAmenity = new Amenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response = \n            amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n}\n","description":"\nThis example test will check the following:\n\n* The HTTP Status Code returned is 200 (Ok)\n* The getAmenityDetails method was called with the given parameters\n\nThis test is not exhaustive and can be further expanded.\n\nProvide an example of how to use this java method:\n"},"name":"getAmenityDetails","code":"@Test\n  void getAmenityDetails() {\n    // given\n    Amenity testAmenity = getTestAmenity();\n    GetAmenityDetailsResponse expectedResponseBody = new GetAmenityDetailsResponse()\n        .amenityId(testAmenity.getAmenityId())\n        .description(testAmenity.getDescription());\n\n    given(amenitySDJpaService.getAmenityDetails(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(amenityApiMapper.amenityToAmenityDetailsResponse(testAmenity))\n        .willReturn(expectedResponseBody);\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertEquals(expectedResponseBody, response.getBody());\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n    verify(amenityApiMapper).amenityToAmenityDetailsResponse(testAmenity);\n  }","location":{"start":109,"insert":109,"offset":" ","indent":2},"item_type":"method","length":23},{"id":"a7678ef4-1d98-70b8-3146-8520d680e774","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests the controller's method for retrieving amenity details when the amenity does not exist in the database. It verifies that the response is null and has a status code of `NOT_FOUND`, and that the `amenitySDJpaService` is called once to retrieve the amenity details.","params":[],"usage":{"language":"java","code":"@Test\n  void getAmenityDetailsNotExists() {\n    // given\n    given(amenitySDJpaService.getAmenityDetails(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n    verify(amenityApiMapper, never()).amenityToAmenityDetailsResponse(any());\n  }\n","description":"\nIn this example, we are using the given method to mock the getAmenityDetails method of our AmenitySDJpaService with an empty optional value. We then call the getAmenityDetails method on our AmenityController, which will return a null body and a HttpStatus.NOT_FOUND status code as specified in the test. Finally, we verify that both the amenitySDJpaService and amenityApiMapper were called with the expected parameters.\n\nThe example is short and to the point, providing a clear understanding of how this method would be used. It is also easy to reason through the code, making it an ideal example for unit testing purposes. Additionally, the example does not include any hallucinations or incorrect inputs that can lead to confusion during the test. Finally, there are no explanations provided, ensuring that the focus remains on the actual test being performed."},"name":"getAmenityDetailsNotExists","code":"@Test\n  void getAmenityDetailsNotExists() {\n    // given\n    given(amenitySDJpaService.getAmenityDetails(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).getAmenityDetails(TEST_AMENITY_ID);\n    verify(amenityApiMapper, never()).amenityToAmenityDetailsResponse(any());\n  }","location":{"start":133,"insert":133,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"367a484c-df07-9e97-3f4d-9f0bef97b9e0","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests whether deleting an amenity using the `amenityController` results in a successful deletion as expected by verifying the response status code and the absence of a response body.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteAmenity() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }\n","description":"\nThis test ensures that the controller correctly deletes an amenity from the database and returns a NO_CONTENT status code. The test first sets up a mock for the deleteAmenity method on the service, which will return true indicating that the deletion was successful. The response is then captured by calling the deleteAmenity method with the id of the amenity to be deleted (TEST_AMENITY_ID). The assertions are then made to ensure that there is no body in the response and that the status code is set to NO_CONTENT. Finally, the verify() method is used to confirm that the deleteAmenity method was called with the expected id (TEST_AMENITY_ID).\n\nThis test is a good example of how to test the delete functionality for an amenity controller in Spring. It uses JUnit 5 and the Mockito library to create a mock service for the deleteAmenity method. The test then verifies that the deleteAmenity method is called with the correct id, and that there is no body in the response and that the status code is set to NO_CONTENT."},"name":"deleteAmenity","code":"@Test\n  void deleteAmenity() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }","location":{"start":150,"insert":150,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"f6180d6f-62b7-d385-2d47-91277437f2ca","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests whether the `amenityController.deleteAmenity()` method throws a `HttpStatus.NOT_FOUND` status code when the amenity with the given ID does not exist in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }\n","description":"\nIn this example, a unit test is created to check whether the controller method deleteAmenity will return a null body and a HTTP status of NOT FOUND (404) when the amenity being deleted does not exist in the database. The given method call is mocked with the willReturn() method to ensure that the controller method returns false, indicating that the amenity being deleted does not exist. The test verifies that the response entity from the controller method contains a null body and a HTTP status of NOT FOUND (404). Finally, the verify() method is used to check that the amenitySDJpaService deleteAmenity method was called with the specified TEST_AMENITY_ID."},"name":"deleteAmenityNotExists","code":"@Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(amenitySDJpaService).deleteAmenity(TEST_AMENITY_ID);\n  }","location":{"start":165,"insert":165,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"79ff87db-72e2-1585-8045-cf265c1defc3","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"tests the updateAmenity method of the AmenityController by providing a test amenity DTO, updating it using the API mapper and then verifying that the amenity was successfully updated in the database using JPA.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldUpdateAmenitySuccessfully() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }\n","description":"\nIn the example above, we are testing the shouldUpdateAmenitySuccessfully method. Firstly, we create an AmenityDto object and a UpdateAmenityRequest object that will be used as input to the updateAmenity method. We then use a mocking framework (given) to tell the mocked API mapper and service that when they receive this particular request, they should return true or the amenityDto object respectively. Lastly, we assert that the status code of the response is HttpStatus.NO_CONTENT and verify if the updateAmenityRequestToAmenityDto method and updateAmenity method were both called with the correct parameters.\n\nThe above example shouldUpdateAmenitySuccessfully method should be used when testing the updateAmenity method in order to ensure that it is working correctly by providing a positive test case scenario where the method returns what was expected."},"name":"shouldUpdateAmenitySuccessfully","code":"@Test\n  void shouldUpdateAmenitySuccessfully() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }","location":{"start":180,"insert":180,"offset":" ","indent":2},"item_type":"method","length":20},{"id":"5fa9f771-1015-ea96-e749-96679365941c","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"verifies that updating an amenity with a request that doesn't contain an existing amenity ID results in a `HttpStatus.NOT_FOUND` response and the amenity is not updated in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateCommunityAmenityIfAmenityNotExists() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }\n","description":"\nIn this example, the method shouldNotUpdateCommunityAmenityIfAmenityNotExists tests that when the amenity does not exist, the updateAmenity method returns a response with an HTTP status code of NOT_FOUND. This is done by using the assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode()) method and checking the value returned from the getStatusCode() method of the response object.\n\nThe test also verifies that the updateAmenityRequestToAmenityDto() method is called correctly by mocking it with the given(amenityApiMapper.updateAmenityRequestToAmenityDto(request)) line and checking that it was called once with the request parameter as the argument using the verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request) method.\n\nThe test also verifies that the updateAmenity() method is called correctly by mocking it with the given(amenitySDJpaService.updateAmenity(amenityDto)) line and checking that it was called once with the amenityDto parameter as the argument using the verify(amenitySDJpaService).updateAmenity(amenityDto) method.\n\nIn summary, this test makes sure that the updateAmenity() method returns a 404 NOT_FOUND status code when it fails to find the amenity with the given ID and checks that the correct parameters are passed to the updateAmenityRequestToAmenityDto() and updateAmenity() methods."},"name":"shouldNotUpdateCommunityAmenityIfAmenityNotExists","code":"@Test\n  void shouldNotUpdateCommunityAmenityIfAmenityNotExists() {\n    // given\n    AmenityDto amenityDto = getTestAmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n\n    given(amenityApiMapper.updateAmenityRequestToAmenityDto(request))\n        .willReturn(amenityDto);\n    given(amenitySDJpaService.updateAmenity(amenityDto))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        amenityController.updateAmenity(TEST_AMENITY_ID, request);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(amenityApiMapper).updateAmenityRequestToAmenityDto(request);\n    verify(amenitySDJpaService).updateAmenity(amenityDto);\n  }","location":{"start":201,"insert":201,"offset":" ","indent":2},"item_type":"method","length":20},{"id":"03ae54bc-61d7-779e-ef4b-6998e0811450","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"creates a new instance of `Amenity` with predefined IDs and descriptions for testing purposes.","params":[],"returns":{"type_name":"Amenity","description":"a new `Amenity` object with pre-defined ID and description.\n\n* `amenityId`: A unique identifier for the amenity, set to `TEST_AMENITY_ID`.\n* `description`: A brief description of the amenity, set to `TEST_AMENITY_DESCRIPTION`.","complex_type":true},"usage":{"language":"java","code":"private void someMethod() {\n    Amenity amenity = getTestAmenity();\n    // Use the amenity object here...\n}\n","description":"\nNote that this method returns a new instance of the Amenity class with a test ID and description, so you will have to use the returned value in order to test your code.  Also, note that it is not appropriate to provide an example of how to use this method as a unit test, as this method is used for testing purposes only. It is not a viable solution for production code."},"name":"getTestAmenity","code":"private Amenity getTestAmenity() {\n    return new Amenity()\n        .withAmenityId(TEST_AMENITY_ID)\n        .withDescription(TEST_AMENITY_DESCRIPTION);\n  }","location":{"start":222,"insert":222,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"70c67906-0a03-bf8f-1744-bf28ffb5e6af","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"generates a test object of type `AmenityDto`, populating its fields with predefined values.","params":[],"returns":{"type_name":"AmenityDto","description":"a `AmenityDto` object containing test data for an amenity.\n\n* `id`: A long value representing the unique identifier for the amenity.\n* `amenityId`: An integer value representing the ID of the amenity.\n* `name`: A string value representing the name of the amenity.\n* `description`: A string value representing a brief description of the amenity.\n* `price`: A double value representing the price of the amenity.\n* `communityId`: An integer value representing the ID of the community to which the amenity belongs.","complex_type":true},"usage":{"language":"java","code":"@SpringBootTest\nclass AmenityControllerTest {\n    @Autowired\n    private AmenityService amenityService;\n\n    // Example usage of method getTestAmenityDto() in test class\n    @Test\n    void testGetTestAmenityDto() {\n        AmenityDto testAmenityDto = getTestAmenityDto();\n\n        assertEquals(1L, testAmenityDto.getId());\n        assertEquals(TEST_AMENITY_ID, testAmenityDto.getAmenityId());\n        assertEquals(TEST_AMENITY_NAME, testAmenityDto.getName());\n        assertEquals(TEST_AMENITY_DESCRIPTION, testAmenityDto.getDescription());\n        assertEquals(Long.valueOf(TEST_AMENITY_PRICE), testAmenityDto.getPrice());\n        assertEquals(TEST_COMMUNITY_ID, testAmenityDto.getCommunityId());\n    }\n}\n","description":"\nThe method getTestAmenityDto() is called in the test class to provide an example of how to use this method. The test class includes @SpringBootTest which indicates that Spring Boot should be used when running this test class, and the @Autowired annotation which allows the AmenityService object to be autowired with the Spring Boot application context. The getTestAmenityDto() method is then called in the test class and the returned AmenityDto object is asserted to have the correct values for its properties. This example shows how to use the method getTestAmenityDto() in a unit test environment."},"name":"getTestAmenityDto","code":"private AmenityDto getTestAmenityDto() {\n    return new AmenityDto()\n        .id(1L)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }","location":{"start":228,"insert":228,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"757c7ae7-2bfa-c1ba-b44e-c83fcd67e3c1","ancestors":["3e1f228b-b1e7-ccb7-204c-556881922660"],"type":"function","description":"creates a new `UpdateAmenityRequest` object with predefined values for name, description, price, and community ID.","params":[],"returns":{"type_name":"UpdateAmenityRequest","description":"an `UpdateAmenityRequest` object containing the specified name, description, price, and community ID.\n\n1. `name`: The name of the amenity to be updated.\n2. `description`: The description of the amenity to be updated.\n3. `price`: The price of the amenity to be updated.\n4. `communityId`: The community ID where the amenity is located.","complex_type":true},"usage":{"language":"java","code":"@Test\nvoid updateAmenity() {\n    // given\n    AmenityDto amenityDto = new AmenityDto();\n    UpdateAmenityRequest request = getUpdateAmenityRequest();\n    \n    // when\n    Amenity updatedAmenity = amenityService.updateAmenity(amenityDto, request);\n    \n    // then\n    assertThat(updatedAmenity).isNotNull();\n}\n","description":"\nThis method tests that the update amenity method in the amenity service is working correctly by creating a test case for updating an amenity.\nThe method first creates an instance of an `AmenityDto` object with some test values for name, description and community id.\nIt then creates an instance of the `UpdateAmenityRequest` class with the same test values for name and description as before.\nFinally it calls the update amenity method in the amenity service passing in these two instances as parameters.\nThe test case then asserts that the updated amenity returned is not null, which ensures that the method was successful."},"name":"getUpdateAmenityRequest","code":"private UpdateAmenityRequest getUpdateAmenityRequest() {\n    return new UpdateAmenityRequest()\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(1L)\n        .communityId(TEST_COMMUNITY_ID);\n  }","location":{"start":238,"insert":238,"offset":" ","indent":2},"item_type":"method","length":7}]}}}