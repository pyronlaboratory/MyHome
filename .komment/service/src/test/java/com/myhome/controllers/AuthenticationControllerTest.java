{"name":"AuthenticationControllerTest.java","path":"service/src/test/java/com/myhome/controllers/AuthenticationControllerTest.java","content":{"structured":{"description":"An `AuthenticationController` class that tests the `AuthenticationService` class through various unit tests. The controller handles login requests and returns a response entity with an HTTP status code and headers containing the user ID and JWT token. The tests include one successful login attempt where the authentication service is mocked to return the correct data, and the response entity is checked for its status code and headers.","items":[{"id":"aec0ba56-b2dc-1298-ab42-9303c6f50ca8","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationControllerTest","code":"public class AuthenticationControllerTest {\n\n  private static final String TEST_ID = \"1\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n  private static final String TOKEN = \"token\";\n\n  @Mock\n  private AuthenticationService authenticationService;\n  @InjectMocks\n  private AuthenticationController authenticationController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }\n\n  private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0},"item_type":"class","length":46},{"id":"f97b85d3-bc4c-bbbd-d44a-4e9a9cbddfdf","ancestors":["aec0ba56-b2dc-1298-ab42-9303c6f50ca8"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nIn this example, the init() method is annotated with @BeforeEach which indicates that it should run before each test in the class. The method itself initializes the mocks for the tests by calling the MockitoAnnotations.initMocks(this) method. This method is responsible for setting up the mock objects and injecting them into the tested methods. By doing this, we can ensure that our mocks are properly set up before each test execution."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":31,"insert":31,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"c493cc0a-cc39-0ba2-4c42-86378e997b2a","ancestors":["aec0ba56-b2dc-1298-ab42-9303c6f50ca8"],"type":"function","description":"verifies that logging in with a valid user ID and JWT token returns a successful response with the correct headers and invokes the `login` method of the `authenticationService`.","params":[],"usage":{"language":"java","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = new LoginRequest().email(\"email@mail.com\").password(\"password\");\n    AuthenticationData authenticationData = new AuthenticationData(TOKEN, \"1\");\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n","description":""},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2},"item_type":"method","length":20},{"id":"8971f77d-18ab-518d-4d4e-0810f32d3f49","ancestors":["aec0ba56-b2dc-1298-ab42-9303c6f50ca8"],"type":"function","description":"creates a new `LoginRequest` object with predefined email and password values for testing purposes.","params":[],"returns":{"type_name":"LoginRequest","description":"a `LoginRequest` object with pre-defined email and password values.\n\n* The function returns a `LoginRequest` object, which is an instance of the class `com.example.LoginRequest`.\n* The object has two attributes: `email`, which is set to `TEST_EMAIL`, and `password`, which is set to `TEST_PASSWORD`. These attributes represent the email address and password, respectively, that are used for login authentication.\n* The `email` attribute is a string value, while the `password` attribute is a string value that is encrypted using an unspecified encryption method.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    LoginRequest loginRequest = getDefaultLoginRequest();\n  }\n}\n","description":"\nIn the above example, we are creating a new instance of LoginRequest using the getDefaultLoginRequest() method. This method returns a LoginRequest object with the email and password fields set to TEST_EMAIL and TEST_PASSWORD respectively."},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"14433761-1f0e-6889-a84b-6f45051979b1","ancestors":["aec0ba56-b2dc-1298-ab42-9303c6f50ca8"],"type":"function","description":"returns an `AuthenticationData` object with a token and test ID.","params":[],"returns":{"type_name":"AuthenticationData","description":"an `AuthenticationData` object containing the token `TOKEN` and test ID `TEST_ID`.\n\n* `TOKEN`: This is an instance of `Token`, which represents a token for authentication purposes.\n* `TEST_ID`: This is an integer value that identifies this token as a test ID.","complex_type":true},"usage":{"language":"java","code":"private AuthenticationController authenticationController = new AuthenticationController();\nprivate AuthenticationService authenticationService = mock(AuthenticationService.class);\n\n@Test\npublic void testGetDefaultAuthenticationData() {\n    // Arrange\n    final String TOKEN = \"token\";\n    final String TEST_ID = \"1\";\n    \n    given(authenticationService.login(any())).willReturn(new AuthenticationData(TOKEN, TEST_ID));\n\n    // Act\n    AuthenticationData authenticationData = authenticationController.getDefaultAuthenticationData();\n\n    // Assert\n    assertEquals(authenticationData.getUserId(), TEST_ID);\n    assertEquals(authenticationData.getJwtToken(), TOKEN);\n}\n","description":""},"name":"getDefaultAuthenticationData","code":"private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2},"item_type":"method","length":3}]}}}