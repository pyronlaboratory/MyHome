{"name":"UserControllerTest.java","path":"service/src/test/java/com/myhome/controllers/UserControllerTest.java","content":{"structured":{"description":"","items":[{"id":"49f4f7cd-55d6-49ed-b4b0-9c9221b0f674","ancestors":[],"type":"function","name":"init","location":{"offset":" ","indent":2,"insert":80,"start":80},"returns":false,"params":[],"code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","skip":false,"length":4,"comment":{"description":"initializes mocks using MockitoAnnotations.","params":[],"returns":null}},{"id":"9f54c7a9-6292-4d4c-bd72-6ec6dab3773c","ancestors":[],"type":"function","name":"shouldSignUpSuccessful","location":{"offset":" ","indent":2,"insert":85,"start":85},"returns":false,"params":[],"code":"@Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }","skip":false,"length":34,"comment":{"description":"verifies that signing up a user through the `signUp` endpoint returns a `HttpStatus.CREATED` response and the created user's details match those provided in the request.","params":[],"returns":null}},{"id":"474b3d73-b06e-4727-af7c-8dbaad798536","ancestors":[],"type":"function","name":"shouldListUsersSuccess","location":{"offset":" ","indent":2,"insert":120,"start":120},"returns":false,"params":[],"code":"@Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }","skip":false,"length":36,"comment":{"description":"tests the `listAllUsers` method of the `UserController` class, which retrieves a list of users from the user service and maps them to the REST API response format. The function verifies that the status code of the response is `HttpStatus.OK` and that the response body matches the expected response.","params":[],"returns":null}},{"id":"f7c2c757-569f-482b-b0f8-12756df1bca9","ancestors":[],"type":"function","name":"shouldGetUserDetailsSuccessWithNoResults","location":{"offset":" ","indent":2,"insert":157,"start":157},"returns":false,"params":[],"code":"@Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }","skip":false,"length":16,"comment":{"description":"tests the getUserDetails method of the UserController class, given a userId and returns an empty Optional as response when the user is not found in the database.","params":[],"returns":null}},{"id":"5295d99e-b3f5-4b36-b83c-1792d2c9956e","ancestors":[],"type":"function","name":"shouldGetUserDetailsSuccessWithResults","location":{"offset":" ","indent":2,"insert":174,"start":174},"returns":false,"params":[],"code":"@Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }","skip":false,"length":27,"comment":{"description":"tests the user controller's ability to retrieve a user's details successfully, including their ID, name, email, and community IDs, using the `getUserDetails` method and mapper.","params":[],"returns":null}},{"id":"708afa1c-aa56-4a29-aa6e-e8a275eb4fa5","ancestors":[],"type":"function","name":"userForgotPasswordRequestResetSuccess","location":{"offset":" ","indent":2,"insert":202,"start":202},"returns":false,"params":[],"code":"@Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","skip":false,"length":13,"comment":{"description":"tests that a successful request to reset a user's password using the `usersPasswordPost()` method results in a `HttpStatus.OK` response and triggers the `requestResetPassword()` method of the `userService`.","params":[],"returns":null}},{"id":"dc41b078-a864-45c3-872a-13d0b507da2b","ancestors":[],"type":"function","name":"userForgotPasswordRequestResetFailure","location":{"offset":" ","indent":2,"insert":216,"start":216},"returns":false,"params":[],"code":"@Test\n  void userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","skip":false,"length":13,"comment":{"description":"tests that a request to reset a password fails when the user is not found in the database. It verifies that the response status code is `HttpStatus.OK` and that the `userService.requestResetPassword()` method is called once, but the `userService.resetPassword()` method is never called.","params":[],"returns":null}},{"id":"d0982405-070f-4b13-ab5b-ed8d254d91e3","ancestors":[],"type":"function","name":"userForgotPasswordResetSuccess","location":{"offset":" ","indent":2,"insert":230,"start":230},"returns":false,"params":[],"code":"@Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","skip":false,"length":14,"comment":{"description":"tests whether resetting a user's password via the `usersPasswordPost` endpoint returns a successful response with a status code of `HttpStatus.OK` and verifies that the `resetPassword` method of the `UserService` is not called unnecessarily.","params":[],"returns":null}},{"id":"2d313cbd-a466-479a-8d72-461287aacd00","ancestors":[],"type":"function","name":"userForgotPasswordResetFailure","location":{"offset":" ","indent":2,"insert":245,"start":245},"returns":false,"params":[],"code":"@Test\n  void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(false);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","skip":false,"length":14,"comment":{"description":"tests that the user controller's `usersPasswordPost` method fails to reset the user's password when the `userService.resetPassword` method returns false.","params":[],"returns":null}},{"id":"57a1b992-a472-4f2a-a519-36f55049b3e4","ancestors":[],"type":"function","name":"getForgotPasswordRequest","location":{"offset":" ","indent":2,"insert":260,"start":260},"returns":"ForgotPasswordRequest","params":[],"code":"private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }","skip":false,"length":7,"comment":{"description":"creates a new `ForgotPasswordRequest` object with predefined email, new password, and token values for testing purposes.","params":[],"returns":{"type":"ForgotPasswordRequest","description":"a `ForgotPasswordRequest` object containing the email, new password, and token for the forgotten password."}}},{"id":"ec8efae6-1e7d-41e5-80b4-696c6c56cd92","ancestors":[],"type":"function","name":"shouldListAllHousematesSuccessWithNoResults","location":{"offset":" ","indent":2,"insert":268,"start":268},"returns":false,"params":[],"code":"void shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","skip":false,"length":22,"comment":{"description":"tests the listAllHousemates method of the `UserController` class, given a specific user ID and page request parameters, it verifies that the method returns an empty response with a HTTP status code of NOT_FOUND and no house members in the body.","params":[],"returns":null}},{"id":"77c66544-01df-43e7-ad09-a5153b2c3c91","ancestors":[],"type":"function","name":"shouldListAllHousematesSuccessWithResults","location":{"offset":" ","indent":2,"insert":291,"start":291},"returns":false,"params":[],"code":"@Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n        new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n        new com.myhome.model.HouseMember()\n            .memberId(TEST_ID)\n            .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n        new HashSet<>(houseMemberList)))\n        .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n        .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","skip":false,"length":40,"comment":{"description":"tests the `listAllHousemates` method of the `UserController`. It provides a test double for the `HouseService`, `HouseMemberMapper`, and `UserService` classes, and asserts that the method returns a list of house members in the expected format.","params":[],"returns":null}}]}}}