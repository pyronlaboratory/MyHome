{"name":"BookingControllerTest.java","path":"service/src/test/java/com/myhome/controllers/BookingControllerTest.java","content":{"structured":{"description":"A unit test for BookingController, which is responsible for deleting bookings from a database. The test cases verify that the controller correctly handles the existence of the booking to be deleted and returns the expected status code in response. BookingService is injected as a mock dependency to enable the tests to run independently of any external dependencies.","items":[{"id":"8fa407e7-ba5e-1ca8-464f-43a30c926bb1","ancestors":[],"type":"function","description":"TODO","name":"BookingControllerTest","code":"public class BookingControllerTest {\n\n  private final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n\n  @Mock\n  private BookingService bookingSDJpaService;\n\n  @InjectMocks\n  private BookingController bookingController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n\n  @Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n}","location":{"start":17,"insert":17,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"91bd03e9-fbb5-798a-f849-9b9f8769a701","ancestors":["8fa407e7-ba5e-1ca8-464f-43a30c926bb1"],"type":"function","description":"initializes mock objects using MockitoAnnotations, allowing for more efficient and reliable unit testing.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n}\n","description":"\nThe above example shows how the init method can be used in a JUnit Test class. The init method is an annotated method that initializes mock objects for use with the test class."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":28,"insert":28,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"82769ed5-3047-c389-8e49-9df90eaf1abf","ancestors":["8fa407e7-ba5e-1ca8-464f-43a30c926bb1"],"type":"function","description":"deletes a booking from the database using the given ammenity ID and booking ID. It returns a ResponseEntity with a null body and a status code of NO_CONTENT, and verifies that the booking was deleted successfully.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response = bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n","description":"\nThis example demonstrates how to use the deleteBooking method by providing a mock input (TEST_AMENITY_ID and TEST_BOOKING_ID) that will return true when passed to the deleteBooking method. The ResponseEntity returned is then checked for nullity and for status code HttpStatus.NO_CONTENT. Finally, the method's call on the bookingSDJpaService mock object is verified."},"name":"deleteBooking","code":"@Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }","location":{"start":33,"insert":33,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"242a43f3-7922-ad8a-7142-dddef650b806","ancestors":["8fa407e7-ba5e-1ca8-464f-43a30c926bb1"],"type":"function","description":"tests whether a booking with the given ammenity ID and booking ID does not exist when deleted. It utilizes the `given` method to return false when asked if the booking was deleted, and then verifies that the response is null and the status code is 404 after calling the `deleteBooking` function on the controller.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n","description":"\nThe above example checks if the booking exists and deletes it. If no booking is found, a NOT_FOUND HttpStatus code is returned."},"name":"deleteBookingNotExists","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }","location":{"start":49,"insert":49,"offset":" ","indent":2},"item_type":"method","length":15}]}}}