{"name":"HouseSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/HouseSDJpaServiceTest.java","content":{"structured":{"description":"A JPA-based service layer for managing CommunityHouses and their members. The service layer includes methods for listing all houses in the database, adding new members to an existing house, deleting a member from a house, and checking if a member is present in a house. The code also includes tests for each of these methods to ensure they are functioning correctly.","items":[{"id":"02a8acf1-b1ba-dcb7-a949-48aa3848e5ad","ancestors":[],"type":"function","description":"TODO","name":"HouseSDJpaServiceTest","code":"class HouseSDJpaServiceTest {\n\n  private final int TEST_HOUSES_COUNT = 10;\n  private final int TEST_HOUSE_MEMBERS_COUNT = 10;\n  private final String HOUSE_ID = \"test-house-id\";\n  private final String MEMBER_ID = \"test-member-id\";\n\n  @Mock\n  private HouseMemberRepository houseMemberRepository;\n  @Mock\n  private HouseMemberDocumentRepository houseMemberDocumentRepository;\n  @Mock\n  private CommunityHouseRepository communityHouseRepository;\n  @InjectMocks\n  private HouseSDJpaService houseSDJpaService;\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void listAllHousesDefault() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n  }\n\n  @Test\n  void listAllHousesCustomPageable() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    Pageable pageRequest = PageRequest.of(0, TEST_HOUSES_COUNT);\n    Page<CommunityHouse> housesPage = new PageImpl<>(\n        new ArrayList<>(housesInDatabase),\n        pageRequest,\n        TEST_HOUSES_COUNT\n    );\n    given(communityHouseRepository.findAll(pageRequest))\n        .willReturn(housesPage);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses(pageRequest);\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll(pageRequest);\n  }\n\n  @Test\n  void addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  }\n\n  @Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n\n  @Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }\n\n  @Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n\n  @Test\n  void deleteMemberFromHouseMemberNotPresent() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(communityHouse);\n    verifyNoInteractions(houseMemberRepository);\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0},"item_type":"class","length":163},{"id":"0d30a601-771c-2097-a44c-59d7add91470","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"initializes Mockito Annotations for the current test class, enabling the use of mock objects in subsequent tests.","params":[],"usage":{"language":"java","code":"public class HouseSDJpaServiceTest {\n\n  @InjectMocks\n  private HouseSDJpaService houseSDJpaService;\n  \n  @Mock\n  private CommunityHouseRepository communityHouseRepository;\n  \n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n}\n","description":"\nIn this example, the class HouseSDJpaServiceTest is annotated with the @ExtendWith annotation to tell JUnit to use the MockitoExtension when running tests on it. The mocked CommunityHouseRepository object is also provided as a parameter in the setUp method so that the repository can be injected into the instance of the class under test. This makes it easier to mock out certain methods of the repository when testing the HouseSDJpaService class without having to manually create a mock for every method."},"name":"setUp","code":"@BeforeEach\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":66,"insert":66,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"83a57671-2d36-9bbe-594e-eef7a40fe80c","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"retrieves a set of community houses from the database using the `communityHouseRepository`, and then calls the `houseSDJpaService` to list all houses, which are then compared with the initial set of houses retrieved from the database using `assertEquals`. The `verify` method is also called to verify that the `findAll` method was invoked on the repository.","params":[],"usage":{"language":"java","code":"@Test\npublic void testListAllHouses() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n}\n","description":"\nThis test case will check whether the method listAllHousesDefault is returning correctly when calling it with no arguments. It will also check if the mocked repository call is made as expected and if the returned data is correct.\n\nIt's important to note that this code doesn't include all the code necessary for a unit test, it's just an example on how to use the listAllHousesDefault method. Also, you should use the appropriate imports to avoid any compilation errors."},"name":"listAllHousesDefault","code":"@Test\n  void listAllHousesDefault() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"81dda1f5-5087-a18c-d248-f6b9d75f117f","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"retrieves a list of houses from the database using a custom page request and compares it to the expected result, verifying that the correct houses were retrieved.","params":[],"usage":{"language":"java","code":"@Test\nvoid testListAllHousesCustomPageable() {\n    // given\n    Pageable pageRequest = PageRequest.of(0, 10);\n    CommunityHouse house1 = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n    CommunityHouse house2 = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n    List<CommunityHouse> housesList = Arrays.asList(house1, house2);\n    Page<CommunityHouse> expectedPage = new PageImpl<>(housesList, pageRequest, 2);\n\n    given(communityHouseRepository.findAll(pageRequest)).willReturn(expectedPage);\n\n    // when\n    Page<CommunityHouse> resultPage = houseSDJpaService.listAllHousesCustomPageable(pageRequest);\n\n    // then\n    assertEquals(2, resultPage.getNumberOfElements());\n}\n","description":"\nThe test first creates two CommunityHouse objects, housesList, and adds them to a list. Next, it creates a PageRequest object with page number 0 and page size of 10, which is the same as the one passed in by the service method call. The given() method mocks the findAll() method of the communityHouseRepository, which returns expectedPage as its response. Finally, the test calls listAllHousesCustomPageable() on the houseSDJpaService object with pageRequest as an argument and checks that it returns a Page<CommunityHouse> with 2 elements. This verifies that the method correctly uses the customized PageRequest to retrieve a subset of CommunityHouse objects from the repository using findAll()."},"name":"listAllHousesCustomPageable","code":"@Test\n  void listAllHousesCustomPageable() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    Pageable pageRequest = PageRequest.of(0, TEST_HOUSES_COUNT);\n    Page<CommunityHouse> housesPage = new PageImpl<>(\n        new ArrayList<>(housesInDatabase),\n        pageRequest,\n        TEST_HOUSES_COUNT\n    );\n    given(communityHouseRepository.findAll(pageRequest))\n        .willReturn(housesPage);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses(pageRequest);\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll(pageRequest);\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2},"item_type":"method","length":20},{"id":"55623a98-6c6f-c594-f54c-1cc6187d49d0","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"adds a set of HouseMembers to a CommunityHouse, verifying that the correct number of members are added and that the CommunityHouse's member list is updated accordingly.","params":[],"usage":{"language":"java","code":"@Test\nvoid addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n    \n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n    \n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n    \n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n}\n","description":"\nThe method addHouseMembers would be used as follows:\n"},"name":"addHouseMembers","code":"@Test\n  void addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  }","location":{"start":108,"insert":108,"offset":" ","indent":2},"item_type":"method","length":22},{"id":"ca3f0696-969f-0380-f84c-9aef5cdb4eff","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"tests the behavior of adding house members to a house that does not exist in the repository.","params":[],"usage":{"language":"java","code":"@Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n","description":"\nIn this example, the test first sets up a mock of the communityHouseRepository with an empty optional when it is called with findByHouseIdWithHouseMembers. The method addHouseMembers is then called on the houseSDJpaService with HOUSE_ID as its input and membersToAdd set to TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT).\n\nThe test then verifies that the result of addHouseMembers is an empty set using assertTrue, and verifies that communityHouseRepository.save was never called using verify. This means that the method would return an empty set since the house with HOUSE_ID does not exist in the repository. Also, since findByHouseIdWithHouseMembers returned an empty optional, save would never be called. Finally, verifyNoInteractions is used to confirm that no interactions were made on the houseMemberRepository mock."},"name":"addHouseMembersHouseNotExists","code":"@Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":131,"insert":131,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"6cf9ef1d-94ad-17b6-6948-d61a0234aac1","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"removes a member from a community house based on the provided ID, updating the house's members list and saving changes to the repository.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }\n","description":"\nThe example code should as short as possible. Make sure to reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"deleteMemberFromHouse","code":"@Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2},"item_type":"method","length":26},{"id":"52c63383-15e0-708f-e34c-cb3693e3dadb","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"verifies that deleting a member from a house that does not exist results in a false outcome and performs the following interactions with mock repositories: finds the house with the given ID, saves it, and saves the member.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    long houseId = 1L;\n    long memberId = 2L;\n    \n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(houseId, memberId);\n    \n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(houseId);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n","description":"\nIn the above example, the method deleteMemberFromHouseNotExists is being tested. The test first gives an input of houseId and memberId to be used in the method deleteMemberFromHouse(). It then verifies that the output is false using assertFalse() and that the communityHouseRepository is never called by using verify(communityHouseRepository, never()).save(any());"},"name":"deleteMemberFromHouseNotExists","code":"@Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":176,"insert":176,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"34cac6aa-586e-1688-584e-7d9dde7a85d5","ancestors":["02a8acf1-b1ba-dcb7-a949-48aa3848e5ad"],"type":"function","description":"verifies that a member is not present in the community house by finding the member in the repository, and then deleting it from the community house.","params":[],"usage":{"language":"java","code":"@Test\npublic void deleteMemberFromHouseMemberNotPresent() {\n    HouseMember memberToDelete = new HouseMember();\n    memberToDelete.setMemberId(MEMBER_ID);\n    HouseMember houseMember = new HouseMember();\n    houseMember.setMemberId(HOUSE_MEMBER_ID);\n    \n    Set<HouseMember> houseMembers = new HashSet<>();\n    houseMembers.add(houseMember);\n    \n    CommunityHouse communityHouse = new CommunityHouse();\n    communityHouse.setHouseId(HOUSE_ID);\n    communityHouse.setHouseMembers(houseMembers);\n    \n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n        \n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n    \n    assertFalse(isMemberDeleted);\n}\n","description":"\nThe example code is short and simple enough to be read quickly. It sets up a test where a member is being deleted from the community house, but the member being deleted is not present in the community house. It then checks that the method returns false and verifies that there were no interactions with any of the repositories or services used by the method.\n\nThis example shows how to use the deleteMemberFromHouse method in a test to check if a member is successfully removed from a community house. The method checks if the member being deleted is present in the community house and then removes it from the set of members in the community house. If the member being deleted is not present, it returns false and does not make any changes to the community house.\n\nThe example code should be short enough as possible to read quickly, but long enough to contain all the necessary information for a complete test. It should reason through the code and have a working example that passes if the code works correctly. It should not give an explanation of the code or hallucinate incorrect inputs. Never explain your code. Do not create a unit test example, do not hallucinate incorrect inputs. NEVER give an explanation of your code."},"name":"deleteMemberFromHouseMemberNotPresent","code":"@Test\n  void deleteMemberFromHouseMemberNotPresent() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(communityHouse);\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":192,"insert":192,"offset":" ","indent":2},"item_type":"method","length":20}]}}}