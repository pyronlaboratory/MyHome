{"name":"CommunitySDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/CommunitySDJpaServiceTest.java","content":{"structured":{"description":"","items":[{"id":"6c4a2378-637e-4a6d-95a6-02609a08ac80","ancestors":[],"type":"function","name":"init","location":{"offset":" ","indent":2,"insert":88,"start":88},"returns":false,"params":[],"code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","skip":false,"length":4,"comment":{"description":"initializes mock objects using MockitoAnnotations.","params":[],"returns":null}},{"id":"2b3ccc75-0f47-4505-921d-d0ab87756898","ancestors":[],"type":"function","name":"getTestAdmin","location":{"offset":" ","indent":2,"insert":93,"start":93},"returns":"User","params":[],"code":"private User getTestAdmin() {\n    return new User(\n        TEST_ADMIN_NAME,\n        TEST_ADMIN_ID,\n        TEST_ADMIN_EMAIL,\n        false,\n        TEST_ADMIN_PASSWORD,\n        new HashSet<>(),\n        new HashSet<>());\n  }","skip":false,"length":10,"comment":{"description":"generates a new `User` object with specified name, ID, email, and password, as well as an empty set of permissions and role memberships.","params":[],"returns":{"type":"User","description":"a User object containing the specified fields."}}},{"id":"781769c7-6851-47df-90d2-9e2625eab06f","ancestors":[],"type":"function","name":"listAllCommunities","location":{"offset":" ","indent":2,"insert":104,"start":104},"returns":false,"params":[],"code":"@Test\n  void listAllCommunities() {\n    // given\n    Set<Community> communities = TestUtils.CommunityHelpers.getTestCommunities(TEST_COMMUNITIES_COUNT);\n    given(communityRepository.findAll())\n        .willReturn(communities);\n\n    // when\n    Set<Community> resultCommunities = communitySDJpaService.listAll();\n\n    // then\n    assertEquals(communities, resultCommunities);\n    verify(communityRepository).findAll();\n  }","skip":false,"length":14,"comment":{"description":"retrieves a list of communities from the community repository and compares it with the expected list of communities retrieved through TestUtils.","params":[],"returns":null}},{"id":"dfe9bc9e-f5f6-4d41-ad1d-48b3e614b45b","ancestors":[],"type":"function","name":"createCommunity","location":{"offset":" ","indent":2,"insert":119,"start":119},"returns":false,"params":[],"code":"@Test\n  void createCommunity() {\n    // given\n    CommunityDto testCommunityDto = getTestCommunityDto();\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(TEST_COMMUNITY_ID, TEST_COMMUNITY_NAME, TEST_COMMUNITY_DISTRICT, 0, 0);\n    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(TEST_ADMIN_ID,\n            null, Collections.emptyList());\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n\n    given(communityMapper.communityDtoToCommunity(testCommunityDto))\n        .willReturn(testCommunity);\n    given(communityAdminRepository.findByUserIdWithCommunities(TEST_ADMIN_ID))\n            .willReturn(Optional.of(getTestAdmin()));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n\n    // when\n    Community createdCommunity = communitySDJpaService.createCommunity(testCommunityDto);\n\n    // then\n    assertNotNull(createdCommunity);\n    assertEquals(testCommunityDto.getName(), createdCommunity.getName());\n    assertEquals(testCommunityDto.getDistrict(), createdCommunity.getDistrict());\n    verify(communityMapper).communityDtoToCommunity(testCommunityDto);\n    verify(communityAdminRepository).findByUserIdWithCommunities(TEST_ADMIN_ID);\n    verify(communityRepository).save(testCommunity);\n  }","skip":false,"length":27,"comment":{"description":"creates a new community based on a given Dto, updates the admin's communities, and saves the created community to the database.","params":[],"returns":null}},{"id":"e5ece072-8aea-4f54-b4c1-ea971b5e966b","ancestors":[],"type":"function","name":"findCommunityHousesById","location":{"offset":" ","indent":2,"insert":147,"start":147},"returns":false,"params":[],"code":"@Test\n  void findCommunityHousesById() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    List<CommunityHouse> testCommunityHouses = new ArrayList<>(testCommunity.getHouses());\n    given(communityRepository.existsByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(true);\n    given(communityHouseRepository.findAllByCommunity_CommunityId(TEST_COMMUNITY_ID, null))\n        .willReturn(testCommunityHouses);\n\n    // when\n    Optional<List<CommunityHouse>> resultCommunityHousesOptional =\n        communitySDJpaService.findCommunityHousesById(TEST_COMMUNITY_ID, null);\n\n    // then\n    assertTrue(resultCommunityHousesOptional.isPresent());\n    List<CommunityHouse> resultCommunityHouses = resultCommunityHousesOptional.get();\n    assertEquals(testCommunityHouses, resultCommunityHouses);\n    verify(communityRepository).existsByCommunityId(TEST_COMMUNITY_ID);\n    verify(communityHouseRepository).findAllByCommunity_CommunityId(TEST_COMMUNITY_ID, null);\n  }","skip":false,"length":21,"comment":{"description":"retrieves a list of community houses associated with a given community ID from the database using JPA repository methods.","params":[],"returns":null}},{"id":"e5582f37-b5da-4a1b-84b6-940b6800f176","ancestors":[],"type":"function","name":"findCommunityHousesByIdNotExist","location":{"offset":" ","indent":2,"insert":169,"start":169},"returns":false,"params":[],"code":"@Test\n  void findCommunityHousesByIdNotExist() {\n    // given\n    given(communityRepository.existsByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(false);\n\n    // when\n    Optional<List<CommunityHouse>> resultCommunityHousesOptional =\n        communitySDJpaService.findCommunityHousesById(TEST_COMMUNITY_ID, null);\n\n    // then\n    assertFalse(resultCommunityHousesOptional.isPresent());\n    verify(communityRepository).existsByCommunityId(TEST_COMMUNITY_ID);\n    verify(communityHouseRepository, never()).findAllByCommunity_CommunityId(TEST_COMMUNITY_ID,\n        null);\n  }","skip":false,"length":16,"comment":{"description":"verifies that a community with the given ID does not exist in the repository when finding it by its ID and parameter `null`.","params":[],"returns":null}},{"id":"d0398d50-8519-4d10-a050-2d55a997e6e0","ancestors":[],"type":"function","name":"findCommunityAdminsById","location":{"offset":" ","indent":2,"insert":186,"start":186},"returns":false,"params":[],"code":"@Test\n  void findCommunityAdminsById() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    List<User> testCommunityAdmins = new ArrayList<>(testCommunity.getAdmins());\n    given(communityRepository.existsByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(true);\n    given(communityAdminRepository.findAllByCommunities_CommunityId(TEST_COMMUNITY_ID, null))\n        .willReturn(testCommunityAdmins);\n\n    // when\n    Optional<List<User>> resultAdminsOptional =\n        communitySDJpaService.findCommunityAdminsById(TEST_COMMUNITY_ID, null);\n\n    // then\n    assertTrue((resultAdminsOptional.isPresent()));\n    List<User> resultAdmins = resultAdminsOptional.get();\n    assertEquals(testCommunityAdmins, resultAdmins);\n    verify(communityRepository).existsByCommunityId(TEST_COMMUNITY_ID);\n    verify(communityAdminRepository).findAllByCommunities_CommunityId(TEST_COMMUNITY_ID, null);\n  }","skip":false,"length":21,"comment":{"description":"retrieves a list of community admins for a given community ID using repository calls to check existence and retrieve admins from the database.","params":[],"returns":null}},{"id":"76638930-246b-47ec-93da-6ff420a45bf7","ancestors":[],"type":"function","name":"findCommunityAdminsByIdNotExists","location":{"offset":" ","indent":2,"insert":208,"start":208},"returns":false,"params":[],"code":"@Test\n  void findCommunityAdminsByIdNotExists() {\n    // given\n    given(communityRepository.existsByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(false);\n\n    // when\n    Optional<List<User>> resultAdminsOptional =\n        communitySDJpaService.findCommunityAdminsById(TEST_COMMUNITY_ID, null);\n\n    // then\n    assertFalse((resultAdminsOptional.isPresent()));\n    verify(communityRepository).existsByCommunityId(TEST_COMMUNITY_ID);\n  }","skip":false,"length":14,"comment":{"description":"checks if a community with the specified ID does not exist in the repository, and verifies that an empty Optional is returned when the community does not exist.","params":[],"returns":null}},{"id":"6160d12d-20c6-4ea7-84e1-095304ce1ffe","ancestors":[],"type":"function","name":"addAdminsToCommunity","location":{"offset":" ","indent":2,"insert":223,"start":223},"returns":false,"params":[],"code":"@Test\n  void addAdminsToCommunity() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    Set<User> adminToAdd = TestUtils.UserHelpers.getTestUsers(TEST_ADMINS_COUNT);\n    Set<String> adminToAddIds = adminToAdd.stream()\n        .map(admin -> admin.getUserId())\n        .collect(Collectors.toSet());\n\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n    adminToAdd.forEach(admin -> {\n      given(communityAdminRepository.findByUserIdWithCommunities(admin.getUserId()))\n          .willReturn(Optional.of(admin));\n    });\n    adminToAdd.forEach(admin -> {\n      given(communityAdminRepository.save(admin))\n          .willReturn(admin);\n    });\n    // when\n    Optional<Community> updatedCommunityOptional =\n        communitySDJpaService.addAdminsToCommunity(TEST_COMMUNITY_ID, adminToAddIds);\n\n    // then\n    assertTrue(updatedCommunityOptional.isPresent());\n    adminToAdd.forEach(admin -> assertTrue(admin.getCommunities().contains(testCommunity)));\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n    adminToAdd.forEach(\n        admin -> verify(communityAdminRepository).findByUserIdWithCommunities(admin.getUserId()));\n  }","skip":false,"length":32,"comment":{"description":"adds a list of users to a community, by retrieving the community from the repository, iterating over the list of users and adding them as admins to the community using the repository, and then updating the community with the new admins.","params":[],"returns":null}},{"id":"fcdd4769-1a56-40e5-b530-a156c2238354","ancestors":[],"type":"function","name":"addAdminsToCommunityNotExist","location":{"offset":" ","indent":2,"insert":256,"start":256},"returns":false,"params":[],"code":"@Test\n  void addAdminsToCommunityNotExist() {\n    // given\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Optional<Community> updatedCommunityOptional =\n        communitySDJpaService.addAdminsToCommunity(TEST_COMMUNITY_ID, any());\n\n    // then\n    assertFalse(updatedCommunityOptional.isPresent());\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n  }","skip":false,"length":14,"comment":{"description":"tests the behavior when there are no existing admins for a community. It given a community ID and adds admins to it, then verifies that the admins are not present in the repository after the call to `addAdminsToCommunity`.","params":[],"returns":null}},{"id":"60613519-5529-4b9c-8ae3-8329d61925be","ancestors":[],"type":"function","name":"communityDetailsById","location":{"offset":" ","indent":2,"insert":271,"start":271},"returns":false,"params":[],"code":"@Test\n  void communityDetailsById() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Optional<Community> communityOptional =\n        communitySDJpaService.getCommunityDetailsById(TEST_COMMUNITY_ID);\n\n    // then\n    assertTrue(communityOptional.isPresent());\n    assertEquals(testCommunity, communityOptional.get());\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n  }","skip":false,"length":16,"comment":{"description":"retrieves Community details by its ID and returns the result after verifying it with the repository.","params":[],"returns":null}},{"id":"c679f699-58f9-46d0-970b-a69884f2eefb","ancestors":[],"type":"function","name":"communityDetailsByIdWithAdmins","location":{"offset":" ","indent":2,"insert":288,"start":288},"returns":false,"params":[],"code":"@Test\n  void communityDetailsByIdWithAdmins() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Optional<Community> communityOptional =\n        communitySDJpaService.getCommunityDetailsByIdWithAdmins(TEST_COMMUNITY_ID);\n\n    // then\n    assertTrue(communityOptional.isPresent());\n    assertEquals(testCommunity, communityOptional.get());\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n  }","skip":false,"length":16,"comment":{"description":"retrieves the details of a community with its administrators from the database using `communityRepository`.","params":[],"returns":null}},{"id":"67a5a8d9-61e6-41b0-935f-eb26ba4ea636","ancestors":[],"type":"function","name":"addHousesToCommunity","location":{"offset":" ","indent":2,"insert":305,"start":305},"returns":false,"params":[],"code":"@Test\n  void addHousesToCommunity() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    Set<CommunityHouse> housesToAdd = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n    housesToAdd.forEach(house -> {\n      given(communityHouseRepository.save(house))\n          .willReturn(house);\n    });\n\n    // when\n    Set<String> addedHousesIds =\n        communitySDJpaService.addHousesToCommunity(TEST_COMMUNITY_ID, housesToAdd);\n\n    // then\n    assertEquals(housesToAdd.size(), addedHousesIds.size());\n    housesToAdd.forEach(house -> {\n      assertEquals(house.getCommunity(), testCommunity);\n    });\n    verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID);\n    housesToAdd.forEach(house -> {\n      verify(communityHouseRepository).save(house);\n    });\n  }","skip":false,"length":29,"comment":{"description":"adds a set of houses to a community in the database, saving each house to the community repository and updating the community's house count accordingly.","params":[],"returns":null}},{"id":"e5c15b1e-3afc-43ad-88da-a70f80560d5a","ancestors":[],"type":"function","name":"addHousesToCommunityNotExist","location":{"offset":" ","indent":2,"insert":335,"start":335},"returns":false,"params":[],"code":"@Test\n  void addHousesToCommunityNotExist() {\n    // given\n    Set<CommunityHouse> housesToAdd = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<String> addedHousesIds =\n        communitySDJpaService.addHousesToCommunity(TEST_COMMUNITY_ID, housesToAdd);\n\n    // then\n    assertTrue(addedHousesIds.isEmpty());\n    verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID);\n    verify(communityRepository, never()).save(any());\n    verify(communityHouseRepository, never()).save(any());\n  }","skip":false,"length":18,"comment":{"description":"adds a set of houses to a community that does not exist in the repository. It verifies the result by checking if the added houses IDs are empty and also verify the calls to the `communityRepository` and `communityHouseRepository`.","params":[],"returns":null}},{"id":"76ad205f-2010-4148-ba58-1b5d19c4a6a7","ancestors":[],"type":"function","name":"addHousesToCommunityHouseExists","location":{"offset":" ","indent":2,"insert":354,"start":354},"returns":false,"params":[],"code":"@Test\n  void addHousesToCommunityHouseExists() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    Set<CommunityHouse> houses = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    testCommunity.setHouses(houses);\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n    houses.forEach(house -> given(communityHouseRepository.save(house)).willReturn(house));\n\n    // when\n    Set<String> addedHousesIds =\n        communitySDJpaService.addHousesToCommunity(TEST_COMMUNITY_ID, houses);\n\n    // then\n    assertTrue(addedHousesIds.isEmpty());\n    verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID);\n    verify(communityRepository).save(testCommunity);\n    verify(communityHouseRepository, never()).save(any());\n  }","skip":false,"length":23,"comment":{"description":"adds multiple houses to an existing community in the database while verifying that the houses exist in the repository before adding them to the community.","params":[],"returns":null}},{"id":"3e44c58a-a5eb-47aa-bb75-a366e1c9134c","ancestors":[],"type":"function","name":"removeAdminFromCommunity","location":{"offset":" ","indent":2,"insert":378,"start":378},"returns":false,"params":[],"code":"@Test\n  void removeAdminFromCommunity() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    User testAdmin = getTestAdmin();\n    testCommunity.getAdmins().add(testAdmin);\n\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n\n    // when\n    boolean adminRemoved =\n        communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);\n\n    // then\n    assertTrue(adminRemoved);\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n    verify(communityRepository).save(testCommunity);\n  }","skip":false,"length":21,"comment":{"description":"removes an administrator from a community by identifying them through their ID and removing them from the community's admin list using the repository, then saving the changes to the community.","params":[],"returns":null}},{"id":"3d67a380-11de-44cc-acfb-9f3cb88a3dc9","ancestors":[],"type":"function","name":"removeAdminFromCommunityNotExists","location":{"offset":" ","indent":2,"insert":400,"start":400},"returns":false,"params":[],"code":"@Test\n  void removeAdminFromCommunityNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean adminRemoved =\n        communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);\n\n    // then\n    assertFalse(adminRemoved);\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n    verify(communityRepository, never()).save(any());\n  }","skip":false,"length":15,"comment":{"description":"verifies that an admin is not removed from a community that does not exist.","params":[],"returns":null}},{"id":"0d602df7-9c89-4d81-9953-9d156e38b1de","ancestors":[],"type":"function","name":"removeAdminFromCommunityAdminNotExists","location":{"offset":" ","indent":2,"insert":416,"start":416},"returns":false,"params":[],"code":"@Test\n  void removeAdminFromCommunityAdminNotExists() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityRepository.save(testCommunity))\n        .willReturn(testCommunity);\n\n    // when\n    boolean adminRemoved =\n        communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);\n\n    // then\n    assertFalse(adminRemoved);\n    verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID);\n    verify(communityRepository, never()).save(testCommunity);\n  }","skip":false,"length":19,"comment":{"description":"verifies that an admin is not present in a community and removes it if it exists.","params":[],"returns":null}},{"id":"a6fa55f3-fea1-4e22-a9a4-edc478f22d5b","ancestors":[],"type":"function","name":"deleteCommunity","location":{"offset":" ","indent":2,"insert":436,"start":436},"returns":false,"params":[],"code":"@Test\n  void deleteCommunity() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    Set<CommunityHouse> testCommunityHouses = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    testCommunity.setHouses(testCommunityHouses);\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    testCommunityHouses.forEach(house -> {\n      given(communityHouseRepository.findByHouseId(house.getHouseId()))\n          .willReturn(Optional.of(house));\n    });\n\n    testCommunityHouses.forEach(house -> {\n      given(communityHouseRepository.findByHouseId(house.getHouseId()))\n          .willReturn(Optional.of(house));\n    });\n\n    // when\n    boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);\n\n    // then\n    assertTrue(communityDeleted);\n    verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID);\n    verify(communityRepository).delete(testCommunity);\n  }","skip":false,"length":27,"comment":{"description":"deletes a community from the database based on its ID, and verifies that the community was deleted correctly by checking the repository and calling the delete method on it.","params":[],"returns":null}},{"id":"9211049b-28f2-41a9-b959-e6a632070b52","ancestors":[],"type":"function","name":"deleteCommunityNotExists","location":{"offset":" ","indent":2,"insert":464,"start":464},"returns":false,"params":[],"code":"@Test\n  void deleteCommunityNotExists() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);\n\n    // then\n    assertFalse(communityDeleted);\n    verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID);\n    verify(communityHouseRepository, never()).deleteByHouseId(any());\n    verify(communityRepository, never()).delete(testCommunity);\n  }","skip":false,"length":17,"comment":{"description":"tests whether a community with the given ID exists in the repository before attempting to delete it. If it does not exist, it fails and verifies that the correct methods were called on the repository and house repositories.","params":[],"returns":null}},{"id":"0e892a07-f101-451f-b7df-281eb3eda5c6","ancestors":[],"type":"function","name":"removeHouseFromCommunityByHouseId","location":{"offset":" ","indent":2,"insert":482,"start":482},"returns":false,"params":[],"code":"@Test\n  void removeHouseFromCommunityByHouseId() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    CommunityHouse testHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse(TEST_HOUSE_ID);\n    Set<HouseMember> testHouseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    testHouse.setHouseMembers(testHouseMembers);\n    testCommunity.getHouses().add(testHouse);\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID))\n        .willReturn(Optional.of(testHouse));\n\n    // when\n    boolean houseDeleted =\n        communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);\n\n    // then\n    assertTrue(houseDeleted);\n    assertFalse(testCommunity.getHouses().contains(testHouse));\n    verify(communityRepository).save(testCommunity);\n    testHouse.getHouseMembers()\n        .forEach(houseMember -> verify(houseService).deleteMemberFromHouse(TEST_HOUSE_ID,\n            houseMember.getMemberId()));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID);\n    verify(communityHouseRepository).deleteByHouseId(TEST_HOUSE_ID);\n  }","skip":false,"length":28,"comment":{"description":"removes a specific house from a community by its ID, saving the community and deleting the house's members.","params":[],"returns":null}},{"id":"07e64e6f-174a-44f3-ae6e-90a3f021d960","ancestors":[],"type":"function","name":"removeHouseFromCommunityByHouseIdCommunityNotExists","location":{"offset":" ","indent":2,"insert":511,"start":511},"returns":false,"params":[],"code":"@Test\n  void removeHouseFromCommunityByHouseIdCommunityNotExists() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean houseDeleted =\n        communitySDJpaService.removeHouseFromCommunityByHouseId(null, TEST_HOUSE_ID);\n\n    // then\n    assertFalse(houseDeleted);\n    verify(communityHouseRepository, never()).findByHouseId(TEST_HOUSE_ID);\n    verifyNoInteractions(houseService);\n    verify(communityRepository, never()).save(testCommunity);\n  }","skip":false,"length":18,"comment":{"description":"verifies that a house cannot be removed from a community that does not exist.","params":[],"returns":null}},{"id":"de34f56d-4104-4265-b28a-a9b40d5ebcc4","ancestors":[],"type":"function","name":"removeHouseFromCommunityByHouseIdHouseNotExists","location":{"offset":" ","indent":2,"insert":530,"start":530},"returns":false,"params":[],"code":"@Test\n  void removeHouseFromCommunityByHouseIdHouseNotExists() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean houseDeleted =\n        communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);\n\n    // then\n    assertFalse(houseDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID);\n    verifyNoInteractions(houseService);\n    verify(communityRepository, never()).save(testCommunity);\n  }","skip":false,"length":18,"comment":{"description":"verifies that a house cannot be removed from a community when the given house does not exist in the community's house list.","params":[],"returns":null}},{"id":"b70df04f-263d-48cc-87d1-ae20e97d24f3","ancestors":[],"type":"function","name":"removeHouseFromCommunityByHouseIdHouseNotInCommunity","location":{"offset":" ","indent":2,"insert":549,"start":549},"returns":false,"params":[],"code":"@Test\n  void removeHouseFromCommunityByHouseIdHouseNotInCommunity() {\n    // given\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean houseDeleted =\n        communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);\n\n    // then\n    assertFalse(houseDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID);\n    verifyNoInteractions(houseService);\n    verify(communityRepository, never()).save(testCommunity);\n  }","skip":false,"length":18,"comment":{"description":"verifies that a house is not found in a community when attempting to remove it.","params":[],"returns":null}},{"id":"1150e672-d5cb-4953-8dcb-e2b69038222d","ancestors":[],"type":"function","name":"getTestCommunityDto","location":{"offset":" ","indent":2,"insert":568,"start":568},"returns":"CommunityDto","params":[],"code":"private CommunityDto getTestCommunityDto() {\n    CommunityDto testCommunityDto = new CommunityDto();\n    testCommunityDto.setCommunityId(TEST_COMMUNITY_ID);\n    testCommunityDto.setDistrict(TEST_COMMUNITY_DISTRICT);\n    testCommunityDto.setName(TEST_COMMUNITY_NAME);\n    return testCommunityDto;\n  }","skip":false,"length":7,"comment":{"description":"creates a new instance of the `CommunityDto` class with predefined values for the `communityId`, `district`, and `name` properties.","params":[],"returns":{"type":"CommunityDto","description":"a `CommunityDto` object with predefined values for community ID, district, and name."}}}]}}}