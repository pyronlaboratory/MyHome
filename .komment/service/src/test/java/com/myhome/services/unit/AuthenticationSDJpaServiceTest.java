{"name":"AuthenticationSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/AuthenticationSDJpaServiceTest.java","content":{"structured":{"description":"An `AuthenticationSDJpaService` class that handles user authentication using Spring Data JPA and JSON Web Tokens (JWT). The service takes a login request as input, validates the credentials, and generates a JWT token if the credentials are valid. The code also includes tests for various scenarios, such as successful login, user not found, and invalid credentials.","items":[{"id":"cdc4d1ab-afa0-b2af-9741-8b2eb2acac11","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationSDJpaServiceTest","code":"public class AuthenticationSDJpaServiceTest {\n\n  private final String USER_ID = \"test-user-id\";\n  private final String USERNAME = \"test-user-name\";\n  private final String USER_EMAIL = \"test-user-email\";\n  private final String USER_PASSWORD = \"test-user-password\";\n  private final String REQUEST_PASSWORD = \"test-request-password\";\n  private final Duration TOKEN_LIFETIME = Duration.ofDays(1);\n  private final String SECRET = \"secret\";\n\n  @Mock\n  private final UserSDJpaService userSDJpaService = mock(UserSDJpaService.class);\n  @Mock\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder = mock(AppJwtEncoderDecoder.class);\n  @Mock\n  private final PasswordEncoder passwordEncoder = mock(PasswordEncoder.class);\n  private final AuthenticationSDJpaService authenticationSDJpaService =\n      new AuthenticationSDJpaService(TOKEN_LIFETIME, SECRET, userSDJpaService, appJwtEncoderDecoder,\n          passwordEncoder);\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n\n  @Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  @Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }\n\n  private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }\n\n  private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0},"item_type":"class","length":95},{"id":"cfe7d4fb-be8e-5090-594f-e072ec2766e5","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"tests the `login` method of a service by providing a valid user and password, and verifying that the correct JWT token is generated and returned.","params":[],"usage":{"language":"java","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n","description":""},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"09a5a1b8-478f-7b87-3943-e8f80f0ce7fb","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"tests whether a `UserNotFoundException` is thrown when an email address that does not correspond to any user is provided for login authentication.","params":[],"usage":{"language":"java","code":"// given\nLoginRequest request = getDefaultLoginRequest();\ngiven(userSDJpaService.findUserByEmail(request.getEmail()))\n    .willReturn(Optional.empty());\n\n// when and then\nassertThrows(UserNotFoundException.class,\n    () -> authenticationSDJpaService.login(request));\n","description":"\nThis is a unit test for the method loginUserNotFound(). It tests that the UserNotFoundException is thrown correctly when the userSDJpaService.findUserByEmail() returns an empty Optional."},"name":"loginUserNotFound","code":"@Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"b23bf8eb-7920-7e89-0146-52a272449513","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"tests the login functionality by providing invalid credentials and asserting that an exception is thrown.","params":[],"usage":{"language":"java","code":"@Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n","description":""},"name":"loginCredentialsAreIncorrect","code":"@Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"0ac759a3-30ea-329d-564a-23c6ea8e532d","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"creates a new `LoginRequest` instance with the default email address `USER_EMAIL` and password `REQUEST_PASSWORD`.","params":[],"returns":{"type_name":"LoginRequest","description":"a `LoginRequest` object containing the email address of the user and the password for login.\n\n* `email`: The email address of the user to be used for login.\n* `password`: The password associated with the user's account.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n}\n","description":"\nThe code should return an instance of the AuthenticationData class that contains information about the user's authentication."},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }","location":{"start":100,"insert":100,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"a9112518-fb45-3c82-9a4a-1ffc9a53c313","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"generates a default user DTO with user ID, name, email, encrypted password, and community IDs.","params":[],"returns":{"type_name":"UserDto","description":"a `UserDto` object with pre-populated fields for USER_ID, USERNAME, USER_EMAIL, and USER_PASSWORD.\n\n* `userId`: An integer value representing the user's ID.\n* `name`: A string value representing the user's name.\n* `email`: A string value representing the user's email address.\n* `encryptedPassword`: A password value encrypted using a specific algorithm.\n* `communityIds`: A set of integers representing the user's community IDs.","complex_type":true},"usage":{"language":"java","code":"UserDto user = authenticationSDJpaService.getDefaultUserDtoRequest();\n","description":"\nIn this example, the method is called and assigned to a variable called \"user\", which then can be used to perform further actions such as displaying its values or using it in another method."},"name":"getDefaultUserDtoRequest","code":"private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"1a45d767-716d-c489-714e-8145d8d2bcad","ancestors":["cdc4d1ab-afa0-b2af-9741-8b2eb2acac11"],"type":"function","description":"generates a JWT token with a specified expiration time based on the current date and time, and user ID.","params":[{"name":"userDto","type_name":"UserDto","description":"user information that is used to generate the JWT token's expiration time.\n\n* `userId`: A long value representing the user ID associated with the token.\n* `expirationTime`: A `LocalDateTime` object indicating when the token will expire. The difference between this time and the current time is equal to `TOKEN_LIFETIME`.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"an AppJwt token with a generated user ID and expiration time.\n\n* `userId`: This is the user ID of the user for whom the JWT token is being generated.\n* `expiration`: This is the expiration time of the JWT token in ISO format (e.g., \"2023-03-14T13:45:00Z\"). The token will be valid until this date and time.","complex_type":true},"usage":{"language":"java","code":"UserDto user = UserDto.builder().userId(\"user-id\").build();\nAppJwt appJwt = getDefaultJwtToken(user);\n","description":""},"name":"getDefaultJwtToken","code":"private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":7}]}}}