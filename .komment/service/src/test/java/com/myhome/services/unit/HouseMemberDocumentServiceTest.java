{"name":"HouseMemberDocumentServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/HouseMemberDocumentServiceTest.java","content":{"structured":{"description":"","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.HouseMemberDocument Pages: 1 -->\n<svg width=\"206pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 206.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.HouseMemberDocument</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"198,-30 0,-30 0,0 198,0 198,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"99\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"188.5,-85 9.5,-85 9.5,-66 188.5,-66 188.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-55.65C99,-47.36 99,-37.78 99,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-55.87 99,-65.87 102.5,-55.87 95.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"136,-140 62,-140 62,-121 136,-121 136,-140\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-110.66C99,-101.93 99,-91.99 99,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-110.75 99,-120.75 102.5,-110.75 95.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a3f37282-65b0-47fa-903e-30a08cb97787","ancestors":[],"type":"function","name":"init","location":{"offset":" ","indent":2,"insert":66,"start":66},"returns":false,"params":[],"code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n    ReflectionTestUtils.setField(houseMemberDocumentService, \"compressionBorderSizeKBytes\",\n        COMPRESSION_BORDER_SIZE_KB);\n    ReflectionTestUtils.setField(houseMemberDocumentService, \"maxFileSizeKBytes\", MAX_FILE_SIZE_KB);\n    ReflectionTestUtils.setField(houseMemberDocumentService, \"compressedImageQuality\",\n        COMPRESSED_IMAGE_QUALITY);\n  }","skip":false,"length":9,"comment":{"description":"initializes fields for House Member Document Service using MockitoAnnotations and ReflectionTestUtils, setting values for compression border size, maximum file size, and compressed image quality.","params":[],"returns":null}},{"id":"277ce18c-bc63-4a2e-9f57-8adbf75cbed5","ancestors":[],"type":"function","name":"findMemberDocumentSuccess","location":{"offset":" ","indent":2,"insert":76,"start":76},"returns":false,"params":[],"code":"@Test\n  void findMemberDocumentSuccess() {\n    // given\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertTrue(houseMemberDocument.isPresent());\n    assertEquals(MEMBER_DOCUMENT, houseMemberDocument.get());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n  }","skip":false,"length":15,"comment":{"description":"verifies that a HouseMemberDocument can be retrieved for a given member ID by querying the repository and asserting the document's contents match those expected.","params":[],"returns":null}},{"id":"341d1d12-e5a3-4191-be4d-5cc2a6e4058d","ancestors":[],"type":"function","name":"findMemberDocumentNoDocumentPresent","location":{"offset":" ","indent":2,"insert":92,"start":92},"returns":false,"params":[],"code":"@Test\n  void findMemberDocumentNoDocumentPresent() {\n    // given\n    HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null);\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n  }","skip":false,"length":14,"comment":{"description":"verifies that no House Member Document is present for a given member ID, by asserting that the `Optional` returned by the `houseMemberDocumentService.findHouseMemberDocument` is empty and verifying the call to `houseMemberRepository.findByMemberId`.","params":[],"returns":null}},{"id":"a49906ca-700a-4f69-a77c-c48cb7efb2b7","ancestors":[],"type":"function","name":"findMemberDocumentMemberNotExists","location":{"offset":" ","indent":2,"insert":107,"start":107},"returns":false,"params":[],"code":"@Test\n  void findMemberDocumentMemberNotExists() {\n    // given\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n  }","skip":false,"length":13,"comment":{"description":"verifies that a HouseMemberDocument does not exist for a given member ID by calling the `houseMemberRepository.findByMemberId` method and checking if it returns an empty Optional, and then calling the `houseMemberDocumentService.findHouseMemberDocument` method to check if the Optional is present.","params":[],"returns":null}},{"id":"bff991ac-c4c0-4b27-acfc-99cf18343346","ancestors":[],"type":"function","name":"deleteMemberDocumentSuccess","location":{"offset":" ","indent":2,"insert":121,"start":121},"returns":false,"params":[],"code":"@Test\n  void deleteMemberDocumentSuccess() {\n    // given\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    // when\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertTrue(isDocumentDeleted);\n    assertNull(testMember.getHouseMemberDocument());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberRepository).save(testMember);\n  }","skip":false,"length":15,"comment":{"description":"verifies that a House Member's document is successfully deleted by the service when the member ID is passed as a parameter.","params":[],"returns":null}},{"id":"b17d755a-ebe9-4358-8112-92ee9a5807fc","ancestors":[],"type":"function","name":"deleteMemberDocumentNoDocumentPresent","location":{"offset":" ","indent":2,"insert":137,"start":137},"returns":false,"params":[],"code":"@Test\n  void deleteMemberDocumentNoDocumentPresent() {\n    // given\n    HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null);\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    // when\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertFalse(isDocumentDeleted);\n    assertNull(testMember.getHouseMemberDocument());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberRepository, never()).save(testMember);\n  }","skip":false,"length":15,"comment":{"description":"verifies that a house member document is deleted when no document exists for the specified member ID.","params":[],"returns":null}},{"id":"10437410-2ff5-4b96-a511-f82eadc8417d","ancestors":[],"type":"function","name":"deleteMemberDocumentMemberNotExists","location":{"offset":" ","indent":2,"insert":153,"start":153},"returns":false,"params":[],"code":"@Test\n  void deleteMemberDocumentMemberNotExists() {\n    // given\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);\n\n    // then\n    assertFalse(isDocumentDeleted);\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberRepository, never()).save(any());\n  }","skip":false,"length":13,"comment":{"description":"deletes a house member document that does not exist in the repository.","params":[],"returns":null}},{"id":"136eb0e0-1c15-4a60-a1f5-2400d60e6044","ancestors":[],"type":"function","name":"updateHouseMemberDocumentSuccess","location":{"offset":" ","indent":2,"insert":167,"start":167},"returns":false,"params":[],"code":"@Test\n  void updateHouseMemberDocumentSuccess() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(10, 10);\n    MockMultipartFile newDocumentFile = new MockMultipartFile(\"new-test-file-name\", imageBytes);\n    HouseMemberDocument savedDocument =\n        new HouseMemberDocument(String.format(\"member_%s_document.jpg\", MEMBER_ID), imageBytes);\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    given(houseMemberDocumentRepository.save(savedDocument))\n        .willReturn(savedDocument);\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.updateHouseMemberDocument(newDocumentFile, MEMBER_ID);\n\n    // then\n    assertTrue(houseMemberDocument.isPresent());\n    assertEquals(testMember.getHouseMemberDocument(), houseMemberDocument.get());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository).save(savedDocument);\n    verify(houseMemberRepository).save(testMember);\n  }","skip":false,"length":24,"comment":{"description":"updates an existing member's document in the database by saving a new file and replacing the old one. It verifies that the updated document is present in the repository and matches the expected value.","params":[],"returns":null}},{"id":"0f525083-e5a0-4915-a4c1-cc7258c61503","ancestors":[],"type":"function","name":"updateHouseMemberDocumentMemberNotExists","location":{"offset":" ","indent":2,"insert":192,"start":192},"returns":false,"params":[],"code":"@Test\n  void updateHouseMemberDocumentMemberNotExists() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(10, 10);\n    MockMultipartFile newDocumentFile = new MockMultipartFile(\"new-test-file-name\", imageBytes);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.updateHouseMemberDocument(newDocumentFile, MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository, never()).save(any());\n    verify(houseMemberRepository, never()).save(any());\n  }","skip":false,"length":19,"comment":{"description":"tests the update method of HouseMemberDocumentService by attempting to update a document for a member who does not exist in the database.","params":[],"returns":null}},{"id":"6300c05b-dddd-4f61-9403-acfbd0e00554","ancestors":[],"type":"function","name":"updateHouseMemberDocumentTooLargeFile","location":{"offset":" ","indent":2,"insert":212,"start":212},"returns":false,"params":[],"code":"@Test\n  void updateHouseMemberDocumentTooLargeFile() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(1000, 1000);\n    MockMultipartFile tooLargeDocumentFile =\n        new MockMultipartFile(\"new-test-file-name\", imageBytes);\n    HouseMemberDocument savedDocument =\n        new HouseMemberDocument(String.format(\"member_%s_document.jpg\", MEMBER_ID), imageBytes);\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    given(houseMemberDocumentRepository.save(savedDocument))\n        .willReturn(savedDocument);\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.updateHouseMemberDocument(tooLargeDocumentFile, MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    assertEquals(testMember.getHouseMemberDocument(), MEMBER_DOCUMENT);\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository, never()).save(any());\n    verify(houseMemberRepository, never()).save(any());\n  }","skip":false,"length":25,"comment":{"description":"updates a House Member Document with an image file that is too large for storage, throwing an IOException if encountered. It retrieves the existing House Member document and compares it to the updated document after save.","params":[],"returns":null}},{"id":"66682456-d129-4402-bc25-9fdd6693d5c4","ancestors":[],"type":"function","name":"createHouseMemberDocumentSuccess","location":{"offset":" ","indent":2,"insert":238,"start":238},"returns":false,"params":[],"code":"@Test\n  void createHouseMemberDocumentSuccess() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(10, 10);\n    HouseMemberDocument savedDocument =\n        new HouseMemberDocument(String.format(\"member_%s_document.jpg\", MEMBER_ID), imageBytes);\n    MockMultipartFile newDocumentFile = new MockMultipartFile(\"new-test-file-name\", imageBytes);\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    given(houseMemberDocumentRepository.save(savedDocument))\n        .willReturn(savedDocument);\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.createHouseMemberDocument(newDocumentFile, MEMBER_ID);\n\n    // then\n    assertTrue(houseMemberDocument.isPresent());\n    assertNotEquals(testMember.getHouseMemberDocument().getDocumentFilename(),\n        MEMBER_DOCUMENT.getDocumentFilename());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository).save(savedDocument);\n    verify(houseMemberRepository).save(testMember);\n  }","skip":false,"length":25,"comment":{"description":"creates a new HouseMemberDocument for a given member ID, using a mock file and repository mockups to test the functionality of the `houseMemberDocumentService`. It verifies that the created document has a different filename than the existing document for the same member, and saves both the new document and the original member data in the repository.","params":[],"returns":null}},{"id":"27797d3b-73a3-412a-92c6-c5924fc82fd5","ancestors":[],"type":"function","name":"createHouseMemberDocumentMemberNotExists","location":{"offset":" ","indent":2,"insert":264,"start":264},"returns":false,"params":[],"code":"@Test\n  void createHouseMemberDocumentMemberNotExists() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(10, 10);\n    MockMultipartFile newDocumentFile = new MockMultipartFile(\"new-test-file-name\", imageBytes);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.createHouseMemberDocument(newDocumentFile, MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository, never()).save(any());\n    verify(houseMemberRepository, never()).save(any());\n  }","skip":false,"length":18,"comment":{"description":"tests the creation of a new House Member Document when the member does not exist in the repository.","params":[],"returns":null}},{"id":"edc267a5-193a-43ae-9bc9-99ea00eeabfc","ancestors":[],"type":"function","name":"createHouseMemberDocumentTooLargeFile","location":{"offset":" ","indent":2,"insert":283,"start":283},"returns":false,"params":[],"code":"@Test\n  void createHouseMemberDocumentTooLargeFile() throws IOException {\n    // given\n    byte[] imageBytes = TestUtils.General.getImageAsByteArray(1000, 1000);\n    MockMultipartFile tooLargeDocumentFile =\n        new MockMultipartFile(\"new-test-file-name\", imageBytes);\n    HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null);\n\n    given(houseMemberRepository.findByMemberId(MEMBER_ID))\n        .willReturn(Optional.of(testMember));\n    // when\n    Optional<HouseMemberDocument> houseMemberDocument =\n        houseMemberDocumentService.createHouseMemberDocument(tooLargeDocumentFile, MEMBER_ID);\n\n    // then\n    assertFalse(houseMemberDocument.isPresent());\n    assertEquals(testMember.getHouseMemberDocument(), MEMBER_DOCUMENT);\n    verify(houseMemberRepository).findByMemberId(MEMBER_ID);\n    verify(houseMemberDocumentRepository, never()).save(any());\n    verify(houseMemberRepository, never()).save(any());\n  }","skip":false,"length":21,"comment":{"description":"tests the creation of a House Member Document with an image file that is too large for storage. It verifies that the method returns an Optional empty value and the member's original document is unchanged.","params":[],"returns":null}}]}}}