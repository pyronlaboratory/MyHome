{"name":"BookingSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/BookingSDJpaServiceTest.java","content":{"structured":{"description":"A class `BookingSDJpaServiceTest` for testing the `BookingSDJpaService` class. It provides mock objects and test methods for testing the service's deleteBooking method. The test methods verify that the correct amenity booking item is found, deleted, and updated when the booking is deleted.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.AmenityBookingItem Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.AmenityBookingItem</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-30 5.5,-30 5.5,0 173.5,0 173.5,-30\"/>\n<text text-anchor=\"start\" x=\"13.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"216d45b1-76ac-519a-2441-be3e925de222","ancestors":[],"type":"function","description":"TODO","name":"BookingSDJpaServiceTest","code":"public class BookingSDJpaServiceTest {\n\n  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n  private static final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private static final String TEST_AMENITY_ID_2 = \"test-amenity-id-2\";\n  private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n\n  @Mock\n  private AmenityBookingItemRepository bookingItemRepository;\n\n  @InjectMocks\n  private BookingSDJpaService bookingSDJpaService;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }\n\n  @Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n\n  @Test\n  void deleteBookingAmenityNotExists() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION));\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId());\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n\n  private AmenityBookingItem getTestBookingItem() {\n    return new AmenityBookingItem()\n        .withAmenityBookingItemId(TEST_BOOKING_ID);\n  }\n}","location":{"start":22,"insert":22,"offset":" ","indent":0},"item_type":"class","length":76},{"id":"75949878-b92e-c398-854f-b21655a90a08","ancestors":["216d45b1-76ac-519a-2441-be3e925de222"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nIn this example, the `init` method is called before each test case. The method initializes and prepares the mock objects for testing using the `MockitoAnnotations`."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"f95a010c-01f0-feb9-104f-7e2b167cb2ec","ancestors":["216d45b1-76ac-519a-2441-be3e925de222"],"type":"function","description":"deletes a booking item from the repository given its amenity booking item ID.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }\n","description":"\nThis code creates a mock BookingItemRepository and a test BookingSDJpaService. It then tests the deleteBooking method by asserting that bookingDeleted is true, and verifying the repository was called to find the booking item with the given id and delete it."},"name":"deleteBookingItem","code":"@Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2},"item_type":"method","length":18},{"id":"df6da6c3-5b05-f3bf-dc45-d514241ce07a","ancestors":["216d45b1-76ac-519a-2441-be3e925de222"],"type":"function","description":"verifies that a booking with the given amenity ID and booking ID does not exist in the repository before deleting it using the `bookingSDJpaService`.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n","description":""},"name":"deleteBookingNotExists","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"486d6067-4c09-3197-b846-f0ce4acd26f9","ancestors":["216d45b1-76ac-519a-2441-be3e925de222"],"type":"function","description":"tests whether deleting a booking with an amenity ID that does not exist in the database throws an exception and the correct amenity is not updated.","params":[],"usage":{"language":"java","code":"// Given a booking with the ID \"test-booking-id\" exists in the bookingItemRepository, and its amenity id is \"test-amenity-id\".\nAmenityBookingItem testBookingItem = getTestBookingItem();\ngiven(bookingItemRepository.findByAmenityBookingItemId(\"test-booking-id\")).willReturn(Optional.of(testBookingItem));\ntestBookingItem.setAmenity(TestUtils.AmenityHelpers.getTestAmenity(\"test-amenity-id\", \"test-amenity-description\"));\n\n// When the deleteBooking method is called with an amenity ID that does not match the booking's amenity ID\nboolean bookingDeleted = bookingSDJpaService.deleteBooking(\"test-amenity-id-2\", \"test-booking-id\");\n\n// Then, the method returns false and does not attempt to delete the booking item from the repository\nassertFalse(bookingDeleted);\nassertNotEquals(\"test-amenity-id\", testBookingItem.getAmenity().getAmenityId());\nverify(bookingItemRepository).findByAmenityBookingItemId(\"test-booking-id\");\nverify(bookingItemRepository, never()).delete(any());\n","description":"\nIn this example, we first set up a scenario where a booking with the ID \"test-booking-id\" exists in the bookingItemRepository and its amenity id is \"test-amenity-id\". We then call the deleteBooking method with an amenity ID that does not match the booking's amenity ID.\n\nThe test asserts that the method returns false and does not attempt to delete the booking item from the repository, which verifies that the method behaves correctly in this scenario. The test also checks that the booking's amenity id has not been updated, which further confirms that the method behaves correctly in this scenario."},"name":"deleteBookingAmenityNotExists","code":"@Test\n  void deleteBookingAmenityNotExists() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION));\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId());\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":18},{"id":"8d7bc82e-e1af-50bd-004d-218d9a249c81","ancestors":["216d45b1-76ac-519a-2441-be3e925de222"],"type":"function","description":"generates a new instance of `AmenityBookingItem`. It sets the `amenityBookingItemId` field to a predefined value (`TEST_BOOKING_ID`).","params":[],"returns":{"type_name":"AmenityBookingItem","description":"a `AmenityBookingItem` object with a unique identifier.\n\n* `AmenityBookingItemId`: This is an identifier for the booking item, which is set to `TEST_BOOKING_ID`.\n* Other attributes: The function does not return any other attributes or properties.","complex_type":true},"usage":{"language":"java","code":"import com.myhome.services.unit.BookingSDJpaService;\n\npublic class BookingExample {\n    public static void main(String[] args) {\n        // Create a new booking item\n        AmenityBookingItem testBookingItem = getTestBookingItem();\n        \n        // Use the booking item in some way, such as saving it to a database or making an API call.\n        System.out.println(testBookingItem.getAmenity().getAmenityId());\n    }\n}\n","description":""},"name":"getTestBookingItem","code":"private AmenityBookingItem getTestBookingItem() {\n    return new AmenityBookingItem()\n        .withAmenityBookingItemId(TEST_BOOKING_ID);\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2},"item_type":"method","length":4}]}}}