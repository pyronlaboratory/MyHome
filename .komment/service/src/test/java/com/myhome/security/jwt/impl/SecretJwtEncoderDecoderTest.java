{"name":"SecretJwtEncoderDecoderTest.java","path":"service/src/test/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoderTest.java","content":{"structured":{"description":"A test class for testing JWT encryption and decryption using the `SecretJwtEncoderDecoder` class. The tests cover various scenarios, including successful encryption and decryption, expired JWTs, and invalid secrets. The package used is `io.jsonwebtoken`, specifically the `Security` module.","items":[{"id":"4d2e386d-632c-9ea8-3b49-43c8ade3b682","ancestors":[],"type":"function","description":"TODO","name":"SecretJwtEncoderDecoderTest","code":"class SecretJwtEncoderDecoderTest {\n  private static final String TEST_USER_ID = \"test-user-id\";\n\n  private static final String EXPIRED_JWT = \"eyJhbGciOiJIUzUxMiJ9.\"\n      + \"eyJzdWIiOiJ0ZXN0LXVzZXItaWQiLCJleHAiOjE1OTYwOTg4MDF9.\"\n      + \"jnvLiLzobwW2XKz0iuNHZu3W_XO3FNDJoDySxQv_9oUsTPGPcy83_9ETMZRsUBLB9YzkZ0ZtSfP05g4RVKuFhg\";\n\n  private static final String INVALID_SECRET = \"secret\";\n  private static final String VALID_SECRET = \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\";\n\n  @Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }\n\n  @Test\n  void jwtEncodeFailWithException() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // when and then\n    Assertions.assertThrows(WeakKeyException.class,\n        () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n  }\n\n  @Test\n  void jwtDecodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt =\n        AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\n    String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\n\n    // when\n    AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n\n    // then\n    Assertions.assertNotNull(decodedJwt);\n    Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID);\n    Assertions.assertNotNull(decodedJwt.getExpiration());\n  }\n\n  @Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class,\n        () -> jwtEncoderDecoder.decode(EXPIRED_JWT, VALID_SECRET));\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0},"item_type":"class","length":64},{"id":"d20f99e3-60fe-009e-f841-0c981488635c","ancestors":["4d2e386d-632c-9ea8-3b49-43c8ade3b682"],"type":"function","description":"tests whether a JWT is successfully encoded using a secret key.","params":[],"usage":{"language":"java","code":"@Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }\n","description":""},"name":"jwtEncodeSuccess","code":"@Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"d8ef8bad-ad72-9992-3849-6116e2ff48d0","ancestors":["4d2e386d-632c-9ea8-3b49-43c8ade3b682"],"type":"function","description":"tests that an exception is thrown when a weak key is provided for encoding a JWT using the `SecretJwtEncoderDecoder`.","params":[],"usage":{"language":"java","code":"@Test\nvoid jwtEncodeFailWithException() {\n  // given\n  SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n  AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n  \n  // when and then\n  Assertions.assertThrows(WeakKeyException.class, () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n}\n","description":"\nThis test case first creates an instance of SecretJwtEncoderDecoder and creates an AppJwt object with the required fields. It then asserts that the encode method throws a WeakKeyException when given an invalid secret key."},"name":"jwtEncodeFailWithException","code":"@Test\n  void jwtEncodeFailWithException() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // when and then\n    Assertions.assertThrows(WeakKeyException.class,\n        () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n  }","location":{"start":52,"insert":52,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"0ed4dc79-4a09-0987-8845-bd08de46b6c4","ancestors":["4d2e386d-632c-9ea8-3b49-43c8ade3b682"],"type":"function","description":"tests the ability to successfully decode a JWT token using a secret key. It provides a test case for the `JwtEncoderDecoder` class, encoding and decoding a JWT token with a valid secret key.","params":[],"usage":{"language":"java","code":"SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\nAppJwt appJwt =\n    AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\nString encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\nAppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n","description":"\nThe example code uses the SecretJwtEncoderDecoder class to encode an AppJwt object into a JWT token with a secret key. It then decodes the token using the same secret key and verifies that it was successfully decoded."},"name":"jwtDecodeSuccess","code":"@Test\n  void jwtDecodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt =\n        AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\n    String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\n\n    // when\n    AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n\n    // then\n    Assertions.assertNotNull(decodedJwt);\n    Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID);\n    Assertions.assertNotNull(decodedJwt.getExpiration());\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"5bc333f3-72e8-1b89-2a48-d9aa94fcdc09","ancestors":["4d2e386d-632c-9ea8-3b49-43c8ade3b682"],"type":"function","description":"tests whether an expired JWT can be decoded using a SecretJwtEncoderDecoder.","params":[],"usage":{"language":"java","code":"import org.junit.jupiter.api.Test;\n\nclass SecretJwtEncoderDecoderTest {\n  @Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class, () -> jwtEncoderDecoder.decode(EXPIRED_JWT, VALID_SECRET));\n  }\n}\n","description":"\nThis test case checks that the decode method of SecretJwtEncoderDecoder class throws an ExpiredJwtException when the provided JWT token is expired and the secret key is valid."},"name":"jwtDecodeFailWithExpiredJwt","code":"@Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class,\n        () -> jwtEncoderDecoder.decode(EXPIRED_JWT, VALID_SECRET));\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2},"item_type":"method","length":9}]}}}