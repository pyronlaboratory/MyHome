{"name":"TestUtils.java","path":"service/src/test/java/helpers/TestUtils.java","content":{"structured":{"description":"Various types and classes used in a fictional application for managing a community of users, houses, and amenities. The classes include Community, House, Amenity, User, MailProperties, PaymentDto, Payment, and Helper classes for generating test data. These classes represent the core components of the application, such as communities, houses, amenities, users, mail properties, and payments. The helper classes provide functionality for generating test data, including communities, houses, amenities, users, and payment dto's.","items":[{"id":"50d0cae3-0b41-4ba7-3445-69f88413b851","ancestors":[],"type":"function","description":"TODO","name":"TestUtils","code":"public class TestUtils {\n\n  public static class General {\n\n    public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }\n\n    public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }\n  }\n\n  public static class CommunityHouseHelpers {\n\n    public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }\n\n    public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }\n  }\n\n  public static class HouseMemberHelpers {\n\n    public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n    public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }\n  }\n\n  public static class CommunityHelpers {\n\n    public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }\n\n    public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }\n\n    public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }\n  }\n\n  public static class AmenityHelpers {\n\n    public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }\n\n    public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n  }\n\n  public static class UserHelpers {\n\n    public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n  }\n\n  public static class MailPropertiesHelper {\n\n    public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }\n\n    public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }\n\n    public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }\n  }\n\n  public static class PaymentHelpers {\n\n    public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }\n    public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0},"item_type":"class","length":209},{"id":"5b6c4795-95dc-56a2-0749-26af57a4e4d8","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"General","code":"public static class General {\n\n    public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }\n\n    public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2},"item_type":"class","length":14},{"id":"3a33738f-92e7-ccbb-df4d-469e77153153","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","5b6c4795-95dc-56a2-0749-26af57a4e4d8"],"type":"function","description":"converts an image represented by a `BufferedImage` object into a byte array, which can be used for further processing or storage.","params":[{"name":"height","type_name":"int","description":"height of the resulting image in pixels.","complex_type":false},{"name":"width","type_name":"int","description":"width of the resulting image in pixels.","complex_type":false}],"returns":{"type_name":"byte","description":"a byte array containing an image represented as a JPEG file.","complex_type":false},"usage":{"language":"java","code":"// width and height are the dimensions of the desired image\nint width = 250;\nint height = 100;\n\ntry {\n    // Create a new BufferedImage with the specified width and height\n    BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n    try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n    }\n} catch (IOException e) {\n    // Handle exception\n}\n","description":"\nThe example above creates a new BufferedImage with the specified width and height, then uses ImageIO.write to convert it to a byte array and returns it. The try-with-resources statement is used to ensure that the output stream is properly closed after use."},"name":"getImageAsByteArray","code":"public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }","location":{"start":37,"insert":37,"offset":" ","indent":4},"item_type":"method","length":7},{"id":"ea808a59-ed43-4897-8941-d1a4f3d0af77","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","5b6c4795-95dc-56a2-0749-26af57a4e4d8"],"type":"function","description":"generates a unique identifier using the `UUID.randomUUID()` method, and returns it as a string.","params":[],"returns":{"type_name":"String","description":"a unique, 16-character string representing a universally unique identifier (UUID) generated randomly.\n\n* The method returns a `String` object representing a unique identifier generated using the UUID random generator.\n* The resulting string is always 36 characters long, consisting of a series of letters and digits.\n* Each character in the string is randomly selected from a set of letters (a-z) and digits (0-9), ensuring that no two identifiers are the same.","complex_type":true},"usage":{"language":"java","code":"Community community = CommunityHelpers.getTestCommunity(generateUniqueId(), \"default-community-name\", \"default-community-district\", 0, 0);\nassertNotNull(community.getCommunityId());\n","description":"\nIn the example code above, generateUniqueId() is being used to assign a random unique community ID to the Community object created using the getTestCommunity method of the CommunityHelpers class. The assertNotNull method is then used to check if the generated unique community ID is not null."},"name":"generateUniqueId","code":"public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }","location":{"start":45,"insert":45,"offset":" ","indent":4},"item_type":"method","length":3},{"id":"fca9595c-cb20-f2a5-1244-9c0f5359b257","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"CommunityHouseHelpers","code":"public static class CommunityHouseHelpers {\n\n    public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }\n\n    public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2},"item_type":"class","length":24},{"id":"1b2f98df-35d7-7a84-3743-ab65491a66c4","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","fca9595c-cb20-f2a5-1244-9c0f5359b257"],"type":"function","description":"generats a set of `CommunityHouse` objects using a stream of generated objects with unique IDs and default names, limiting the number of objects to the specified count.","params":[{"name":"count","type_name":"int","description":"number of CommunityHouse instances to generate and return in the set.","complex_type":false}],"returns":{"type_name":"Set","description":"a set of `CommunityHouse` objects generated randomly with unique IDs and default names.\n\n* The output is a `Set` of `CommunityHouse` objects.\n* Each element in the set is generated using a `Stream` of anonymous inner classes, with each instance having a unique `houseId` and a default `name`.\n* The number of elements in the stream is limited to `count`, resulting in exactly `count` `CommunityHouse` objects being added to the set.\n\nThe output of the function can be further analyzed by examining the properties of each individual `CommunityHouse` object, such as its `houseId` and `name`.","complex_type":true},"usage":{"language":"java","code":"import java.util.*;\nimport java.util.stream.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    Set<CommunityHouse> testHouses = CommunityHelpers.getTestHouses(1);\n    System.out.println(testHouses); // [{houseId=63a05e38-02f9-43c7-b7ba-d59999fee24d, name=default-house-name}]\n  }\n}\n","description":""},"name":"getTestHouses","code":"public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":52,"insert":52,"offset":" ","indent":4},"item_type":"method","length":9},{"id":"e2917fad-5a25-56a8-c64a-dcf509faf445","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","fca9595c-cb20-f2a5-1244-9c0f5359b257"],"type":"function","description":"creates a new `CommunityHouse` instance with a unique ID and a default name.","params":[],"returns":{"type_name":"CommunityHouse","description":"a new `CommunityHouse` instance with a unique ID and a default community name.\n\n* The community house is created with a unique ID generated by the function.\n* The community house has a name set to \"default-community-name\".\n\nThese attributes define the basic characteristics of the community house returned by the function.","complex_type":true},"usage":{"language":"java","code":"// get a new house object\nCommunityHouse house = Utils.getTestCommunityHouse();\n\n// set its name to the provided value\nhouse.setName(\"new-name\");\n","description":"\nThis code creates an instance of CommunityHouse and sets its name property to \"new-name\". The rest of the properties in CommunityHouse remain unchanged, but could be set as well."},"name":"getTestCommunityHouse","code":"public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }","location":{"start":62,"insert":62,"offset":" ","indent":4},"item_type":"method","length":5},{"id":"0a76bba6-70ba-bfa9-c443-e01c6c76c23f","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","fca9595c-cb20-f2a5-1244-9c0f5359b257"],"type":"function","description":"creates a new `CommunityHouse` object with the specified `houseId` and sets its `name` to a default value.","params":[{"name":"houseId","type_name":"String","description":"unique identifier for the community house being created, which is used to set the `houseId` field of the resulting `CommunityHouse` object.\n\n* `houseId`: This is the identifier for the community house being created. Its value can be any string.","complex_type":true}],"returns":{"type_name":"CommunityHouse","description":"a new `CommunityHouse` object with the provided house ID and a default community name.\n\n* The function returns an instance of `CommunityHouse`.\n* The `withHouseId` method is called on the new instance, passing in the `houseId` parameter. This sets the `houseId` property of the instance to the given value.\n* The `withName` method is called on the new instance, passing in the default community name. This sets the `name` property of the instance to the default value.","complex_type":true},"usage":{"language":"java","code":"String houseId = \"12345\";\nCommunityHouse testHouse = CommunityHelpers.getTestCommunityHouse(houseId);\nSystem.out.println(testHouse.getName()); // Output: default-community-name\n","description":"\nExplanation: The input parameter 'houseId' is assigned to the method getTestCommunityHouse, which is then used as an argument in the constructor of CommunityHouse object. This results in a new instance of CommunityHouse with the name \"default-community-name\" and the id that was passed into the method. Finally, the getName() method is called on the resulting object to output the name value, which is set to \"default-community-name\"."},"name":"getTestCommunityHouse","code":"public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }","location":{"start":68,"insert":68,"offset":" ","indent":4},"item_type":"method","length":5},{"id":"e2f29718-caed-0695-224c-e3c2a646dd5e","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"HouseMemberHelpers","code":"public static class HouseMemberHelpers {\n\n    public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n    public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2},"item_type":"class","length":17},{"id":"f48841b6-459a-77ad-9448-93b9b1f06dd2","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","e2f29718-caed-0695-224c-e3c2a646dd5e"],"type":"function","description":"generates a set of `HouseMember` objects with unique IDs and default names, limited to a specified count.","params":[{"name":"count","type_name":"int","description":"maximum number of HouseMembers to be generated and returned by the function.","complex_type":false}],"returns":{"type_name":"SetHouseMember","description":"a set of 3-5 HouseMember objects generated randomly.\n\n1. The Set of HouseMembers returned is generated using a Stream that produces new HouseMembers with unique IDs and default names.\n2. The Stream is limited to the specified count of HouseMembers using `limit`.\n3. The resulting Set of HouseMembers is collectied using `Collectors.toSet()`.","complex_type":true},"usage":{"language":"java","code":"Set<HouseMember> houseMembers = Utils.getTestHouseMembers(10);\nassertEquals(houseMembers.size(), 10);\nfor (HouseMember member : houseMembers) {\n    assertTrue(member.getName().equals(\"default-house-member-name\"));\n}\n","description":"\nThis code uses the getTestHouseMembers method to create a set of House Members with names \"default-house-member-name\". It then verifies that there are 10 members and checks if each member has the name \"default-house-member-name\" which should be true for all of them.\n\nThis code is not a unit test, but a simple example usage of the method.\nIt does not check for incorrect inputs and is not explained."},"name":"getTestHouseMembers","code":"public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":77,"insert":77,"offset":" ","indent":4},"item_type":"method","length":9},{"id":"c09cffb0-b8f8-688e-7348-dca02be623de","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","e2f29718-caed-0695-224c-e3c2a646dd5e"],"type":"function","description":"creates a new `HouseMember` object with a randomly generated unique ID and a default name.","params":[],"returns":{"type_name":"HouseMember","description":"a new instance of the `HouseMember` class with a randomly generated member ID and a default name.\n\nThe `HouseMember` object returned has a `memberId` field that generates a unique identifier.\nThe `Name` field is initialized to a predefined value, \"default-house-member-name\".","complex_type":true},"usage":{"language":"java","code":"public static HouseMember getTestHouseMember() {\n    return new HouseMember()\n        .withMemberId(generateUniqueId())\n        .withName(\"default-house-member-name\");\n}\n","description":"\nIn this example, the method getTestHouseMember is called to generate a test house member. This will create a new instance of HouseMember and set its id with a unique identifier generated from the generateUniqueId method. Additionally, it sets the name of the house member to \"default-house-member-name\".\n\nIt is important to note that this method is not being tested as part of the project's unit tests, but rather it is being used to provide an example of how the method could be used in real-world scenarios. This is because the method relies on other helper methods, which are also not being tested.\n\nFurthermore, this example does not explain the code or its purpose, which is another reason why this method would not be considered a unit test."},"name":"getTestHouseMember","code":"public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }","location":{"start":86,"insert":86,"offset":" ","indent":4},"item_type":"method","length":5},{"id":"966ad190-6a6a-55ab-5042-9257e357f483","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"CommunityHelpers","code":"public static class CommunityHelpers {\n\n    public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }\n\n    public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }\n\n    public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2},"item_type":"class","length":48},{"id":"ff9d7152-92cc-bbbd-4043-995a74f92339","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","966ad190-6a6a-55ab-5042-9257e357f483"],"type":"function","description":"iterates over a range of numbers, maps each number to a new community object, and returns a set of communities with at most `count` elements.","params":[{"name":"count","type_name":"int","description":"maximum number of community objects to be generated and returned by the `getTestCommunities()` method.","complex_type":false}],"returns":{"type_name":"Set","description":"a set of `Community` objects, each with a unique ID and name, generated within a specified limit.\n\n* The output is a `Set` containing multiple `Community` objects.\n* Each `Community` object in the set has a unique `id` generated using the `generateUniqueId()` method.\n* The `name` attribute of each `Community` object is a concatenation of a default community name and an index number, which is computed using the `n -> n + 1` iteration.\n* The `district` attribute of each `Community` object is also a concatenation of a default district name and an index number, similar to the `name` attribute.\n* The `id`, `name`, and `district` attributes are all initialized to zero values.","complex_type":true},"usage":{"language":"java","code":"Set<Community> communities = TestHelpers.CommunityHelpers.getTestCommunities(5);\nassertEquals(communities.size(), 5);\nfor (Community community : communities) {\n    assertNotNull(community.getName());\n    assertNotNull(community.getId());\n    assertNotNull(community.getDistrict());\n}\n","description":""},"name":"getTestCommunities","code":"public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":95,"insert":95,"offset":" ","indent":4},"item_type":"method","length":11},{"id":"9c55c60d-4c71-f2ba-3f43-531679594ee9","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","966ad190-6a6a-55ab-5042-9257e357f483"],"type":"function","description":"generates a new community with a unique ID, name, district, and location (coordinates).","params":[],"returns":{"type_name":"Community","description":"a `Community` object representing a fictional community with a unique ID, name, district, and location.\n\n* The returned value is of type `Community`.\n* The `generateUniqueId()` method call is used to generate a unique ID for the community.\n* The `default-community-name`, `default-community-district`, and `0`, `0` arguments are used to set the name, district, and other properties of the community, respectively.","complex_type":true},"usage":{"language":"java","code":"User user = new User(\n    \"default-user-name\",\n    generateUniqueId(),\n    \"default-user-email\",\n    false,\n    \"default-user-password\"\n);\nCommunity community = CommunityHelpers.getTestCommunity();\ncommunity.setAdmins(Collections.singleton(user));\ncommunity.setHouses(new HashSet<>());\n","description":"\nThis code creates a new user and then gets an instance of the test community using the getTestCommunity method. It adds the user to the community's admin list and sets the houses list to an empty set. This is an example of how you would use this method in your code."},"name":"getTestCommunity","code":"public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }","location":{"start":107,"insert":107,"offset":" ","indent":4},"item_type":"method","length":7},{"id":"011c9d48-ceaf-87b1-4a46-b3f2bd70fe69","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","966ad190-6a6a-55ab-5042-9257e357f483"],"type":"function","description":"retrieves a pre-defined community object, adds it to the user's community list, and sets the user as the only admin for that community.","params":[{"name":"admin","type_name":"User","description":"user who adds the community to their list of communities.\n\n* `User`: Represents an user account in the system.\n* `admin`: A reference to an instance of the `User` class with information about the user's identity and permissions.","complex_type":true}],"returns":{"type_name":"Community","description":"a new `Community` object that represents a test community.\n\n* The `testCommunity` object is created with its default values.\n* The `admin` parameter's `getCommunities()` method is used to add the `testCommunity` object to the admin's community list.\n* The `testCommunity.setAdmins()` method sets the `admin` object as the sole administrator of the `testCommunity`.","complex_type":true},"usage":{"language":"java","code":"User admin = new User();\nadmin.setName(\"Admin\");\nadmin.setEmail(\"admin@email.com\");\n\nCommunity testCommunity = CommunityHelpers.getTestCommunity(admin);\n\nassertThat(testCommunity).isNotNull();\nassertThat(testCommunity.getName()).isEqualTo(\"default-community-name\");\nassertThat(testCommunity.getAdminList().get(0)).isSameAs(admin);\n","description":"\nIn the example, we create a new User with name and email set to \"Admin\" and \"admin@email.com\". We then call the getTestCommunity method of CommunityHelpers, passing in the admin variable as an argument. The returned testCommunity is checked that it's not null and its name equals the default-community-name, while also checking that the list of admins contains only the admin we passed in."},"name":"getTestCommunity","code":"public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }","location":{"start":115,"insert":115,"offset":" ","indent":4},"item_type":"method","length":6},{"id":"02d223e0-68b4-2f8f-2246-38b1795fbea3","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","966ad190-6a6a-55ab-5042-9257e357f483"],"type":"function","description":"creates a new community object and populates it with houses and admins, and returns the community object.","params":[{"name":"communityId","type_name":"String","description":"unique identifier for the community being created, which is used to differentiate it from other communities in the system.\n\n* `communityId`: A unique identifier for the community, which can be used to distinguish it from other communities in the system.\n* `communityName`: The human-readable name of the community, which can be used to provide a label for the community in user interfaces or other contexts.\n* `communityDistrict`: An optional attribute that specifies the district where the community is located. This information can be useful for organizing communities into different regions or districts within the system.","complex_type":true},{"name":"communityName","type_name":"String","description":"name of the community being created or retrieved, which is used to set the name of the new community object created by the function.\n\n* `communityName`: This is the name of the community being created, which can be any string value.\n* `communityId`: This is a unique identifier for the community, represented as a string.\n* `communityDistrict`: This is the district where the community is located, represented as a string.\n* `adminsCount`: This is the number of administrators in the community, represented as an integer.\n* `housesCount`: This is the number of houses in the community, represented as an integer.","complex_type":true},{"name":"communityDistrict","type_name":"String","description":"district where the community is located, which is used to create a unique identifier for the community in the function's return value.\n\n* `communityName`: The name of the community.\n* `communityId`: A unique identifier for the community.\n* `communityDistrict`: A district within which the community is located. This property can be used to filter or sort communities based on their location.\n* `adminsCount`: The number of administrators for the community.\n* `housesCount`: The number of houses in the community.\n\nThese properties provide a basic understanding of the community and its structure, which can be further expanded upon depending on the context of the application.","complex_type":true},{"name":"adminsCount","type_name":"int","description":"number of users who will be assigned as administrators to the community created by the `getTestCommunity()` method.","complex_type":false},{"name":"housesCount","type_name":"int","description":"number of houses to be associated with the community created by the function.","complex_type":false}],"returns":{"type_name":"Community","description":"a new `Community` object representing a fictional community with houses and admins.\n\n* `Community testCommunity`: This is a new instance of the `Community` class, created with empty sets for `members` and `objects`.\n* `communityName`: The name of the community.\n* `communityId`: The ID of the community.\n* `communityDistrict`: The district of the community.\n* `adminsCount`: The number of administrators in the community.\n* `housesCount`: The number of houses in the community.\n* `houses`: A set of `CommunityHouse` instances, each with a reference to the `Community` instance.\n* `admins`: A set of `User` instances, each with a reference to the `Community` instance.\n\nThe function creates new instances of `CommunityHouse` and `User`, and sets their `Community` references to the returned `Community` instance. It also adds the `Community` instance to the `admins` set of each `User` instance, and adds the `Community` instance to the `houses` set of each `CommunityHouse` instance.","complex_type":true},"usage":{"language":"java","code":"// Create a Community with 5 admins and 10 houses\nCommunity testCommunity = CommunityHelpers.getTestCommunity(\n    generateUniqueId(), // Generate a random community ID\n    \"default-community-name\", // Default community name\n    \"default-community-district\", // Default community district\n    5, // Number of admins\n    10); // Number of houses\n\n// Set the created Community's name and district\ntestCommunity.setName(\"New Community\");\ntestCommunity.setDistrict(\"New District\");\n\n// Add 5 new admins to the created community\nUser[] testAdmins = UserHelpers.getTestUsers(5); // Generate 5 random users\nfor (int i = 0; i < 5; i++) {\n    testCommunity.getAdmins().add(testAdmins[i]);\n}\n\n// Add 10 new houses to the created community\nCommunityHouse[] testHouses = CommunityHelpers.getTestHouses(10); // Generate 10 random houses\nfor (int i = 0; i < 10; i++) {\n    testCommunity.getHouses().add(testHouses[i]);\n}\n","description":""},"name":"getTestCommunity","code":"public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }","location":{"start":122,"insert":122,"offset":" ","indent":4},"item_type":"method","length":18},{"id":"1b38ab60-27a7-53ae-9f4b-f7f312f1132e","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"AmenityHelpers","code":"public static class AmenityHelpers {\n\n    public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }\n\n    public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n  }","location":{"start":142,"insert":142,"offset":" ","indent":2},"item_type":"class","length":21},{"id":"f458c831-e99d-97a6-7c47-22c1012f8e20","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","1b38ab60-27a7-53ae-9f4b-f7f312f1132e"],"type":"function","description":"creates a new `Amenity` object with a specified `amenityId` and `description`, and also links it to a test `Community`.","params":[{"name":"amenityId","type_name":"String","description":"identifier for the amenity being created.\n\n* `amenityId`: This is a String property that represents the unique identifier for the amenity.\n* `amenityDescription`: This is a String property that provides a brief description of the amenity.","complex_type":true},{"name":"amenityDescription","type_name":"String","description":"description of the amenity being created.\n\n* `amenityId`: A unique identifier for the amenity, which is passed as an argument in the function call.\n* `amenityDescription`: A string representing a brief description of the amenity, which can be used to display information about the amenity to users.\n* `community`: An instance of `CommunityHelpers.getTestCommunity()`, which represents the community that the amenity belongs to.","complex_type":true}],"returns":{"type_name":"Amenity","description":"a new `Amenity` object with specified `amenityId`, `amenityDescription`, and `community`.\n\n* `amenityId`: A string representing the unique identifier for the amenity.\n* `amenityDescription`: A string describing the amenity's purpose or usage.\n* `community`: An instance of the `CommunityHelpers` class, which represents a test community.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n  String amenityId = \"amenity-id\";\n  String amenityDescription = \"description\";\n  \n  Amenity testAmenity = TestHelpers.getTestAmenity(amenityId, amenityDescription);\n}\n","description":"\nThis example will create a new instance of the Amenity class using the getTestAmenity method in TestHelpers and assigns it to the variable \"testAmenity\". The method takes two String variables as inputs: 'amenityId' and 'amenityDescription'. It will then use these inputs to set the values for the fields in the Amenity object."},"name":"getTestAmenity","code":"public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }","location":{"start":144,"insert":144,"offset":" ","indent":4},"item_type":"method","length":6},{"id":"0e4c5a56-2e3f-a19e-9e4a-eef0705a2f2e","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","1b38ab60-27a7-53ae-9f4b-f7f312f1132e"],"type":"function","description":"generates a set of `Amenity` objects with unique identifiers and default names and descriptions, limited to a specified count using `Stream` API and `collect` method.","params":[{"name":"count","type_name":"int","description":"maximum number of amenities to return in the set, which is generated using a stream of anonymous objects.","complex_type":false}],"returns":{"type_name":"SetAmenity","description":"a set of 3-5 randomly generated amenity objects with unique IDs and default names and descriptions.\n\n* The output is a `Set` of `Amenity` objects.\n* Each `Amenity` object in the set has an `amenityId` field generated using `generateUniqueId()`.\n* Each `Amenity` object has a `name` field set to \"default-amenity-name\".\n* Each `Amenity` object has a `description` field set to \"default-amenity-description\".","complex_type":true},"usage":{"language":"java","code":"// Example usage of getTestAmenities with 2 amenity objects\nSet<Amenity> testAmenities = TestHelpers.getTestAmenities(2);\nSystem.out.println(testAmenities.size());  // Outputs 2\n\nfor (Amenity testAmenity : testAmenities) {\n    System.out.println(\"Name: \" + testAmenity.getName() + \"\\n\" +\n        \"Description: \" + testAmenity.getDescription() + \"\\n\");\n}\n","description":"\nThis would print 2 amenity objects with default names and descriptions as defined in the method getTestAmenities."},"name":"getTestAmenities","code":"public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":151,"insert":151,"offset":" ","indent":4},"item_type":"method","length":10},{"id":"056fcff6-8dc5-9eb9-7d42-13a502f14cc2","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"UserHelpers","code":"public static class UserHelpers {\n\n    public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n  }","location":{"start":164,"insert":164,"offset":" ","indent":2},"item_type":"class","length":17},{"id":"dab4913e-6ebb-77b0-c84e-b7c879cb0411","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","056fcff6-8dc5-9eb9-7d42-13a502f14cc2"],"type":"function","description":"creates a set of `User` objects with unique names, emails, and passwords, and limits the number of elements to the input `count`.","params":[{"name":"count","type_name":"int","description":"number of user instances to be generated and returned by the `getTestUsers()` method.","complex_type":false}],"returns":{"type_name":"Set","description":"a set of 3 to 4 user objects, generated randomly and limited to the specified count.\n\n1. The Set<User> return type indicates that the function returns a collection of User objects.\n2. The Stream API is used to generate a sequence of User objects using an initial value of 0 and incrementing it by 1 for each iteration.\n3. The map() method applies a transformation to each element in the sequence, creating new User objects with unique names, emails, and passwords.\n4. The limit() method is used to limit the number of User objects returned to the specified count.\n5. Collect() method is used to collect the generated User objects into a Set<User>.\n\nOverall, the function returns a set of mock user objects with unique identifiers, emails, and passwords.","complex_type":true},"usage":{"language":"java","code":"Set<User> users = TestDataFactory.getTestUsers(3);\nfor (User user : users) {\n    System.out.println(\"User name: \" + user.getName() + \", email: \" + user.getEmail());\n}\n","description":"\nThe above code would produce the following output:\n"},"name":"getTestUsers","code":"public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":166,"insert":166,"offset":" ","indent":4},"item_type":"method","length":14},{"id":"a380b8f6-5cba-85ae-fe4e-a8ecb8f3e739","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"MailPropertiesHelper","code":"public static class MailPropertiesHelper {\n\n    public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }\n\n    public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }\n\n    public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }\n  }","location":{"start":182,"insert":182,"offset":" ","indent":2},"item_type":"class","length":31},{"id":"758f3913-f98a-c5a2-1141-0bb577228e42","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","a380b8f6-5cba-85ae-fe4e-a8ecb8f3e739"],"type":"function","description":"creates a new instance of the `MailProperties` class with specified values for host, username, password, port, protocol, debug and dev mode, and returns the instance.","params":[],"returns":{"type_name":"MailProperties","description":"a `MailProperties` object with customized properties for testing purposes.\n\n* `host`: The hostname of the mail server.\n* `username`: The username to use for authentication with the mail server.\n* `password`: The password to use for authentication with the mail server.\n* `port`: The port number used for communication with the mail server.\n* `protocol`: The protocol used for communication with the mail server, such as SMTP or IMAP.\n* `debug`: A flag indicating whether debugging is enabled for the mail connection.\n* `devMode`: A flag indicating whether the mail connection is in development mode.","complex_type":true},"usage":{"language":"java","code":"public class MailPropertiesExample {\n  public static void main(String[] args) {\n    MailProperties testMailProperties = MailPropertiesHelper.getTestMailProperties();\n    System.out.println(testMailProperties.getHost());\n    System.out.println(testMailProperties.getUsername());\n    System.out.println(testMailProperties.getPassword());\n    System.out.println(testMailProperties.getPort());\n    System.out.println(testMailProperties.getProtocol());\n    System.out.println(testMailProperties.isDebug());\n    System.out.println(testMailProperties.isDevMode());\n  }\n}\n","description":"\nThis example will print the following values:\n"},"name":"getTestMailProperties","code":"public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }","location":{"start":184,"insert":184,"offset":" ","indent":4},"item_type":"method","length":11},{"id":"358e5ffc-c0dc-eba7-894f-710367df314e","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","a380b8f6-5cba-85ae-fe4e-a8ecb8f3e739"],"type":"function","description":"creates an instance of `EmailTemplateProperties` and sets its properties to \"test path\", \"test encoding\", \"test mode\", and \"false\" for caching.","params":[],"returns":{"type_name":"EmailTemplateProperties","description":"an `EmailTemplateProperties` object with customized properties for testing purposes.\n\n* Path: The setPath() method sets the path to a specific location where the email template file is stored.\n* Encoding: The setEncoding() method sets the encoding type used for the email template file.\n* Mode: The setMode() method sets the mode or type of the email template file.\n* Cache: The setCache() method sets whether the email template file should be cached or not.","complex_type":true},"usage":{"language":"java","code":"EmailTemplateProperties mailTemplate = Utils.getTestMailTemplateProperties();\nassertEquals(\"test path\", mailTemplate.getPath());\nassertEquals(\"test encoding\", mailTemplate.getEncoding());\nassertEquals(\"test mode\", mailTemplate.getMode());\nassertFalse(mailTemplate.isCache());\n","description":"\nThe example provided above will show how the getTestMailTemplateProperties method would be used with assertions and checks to ensure that all required fields are set correctly, and that no unnecessary data has been included in the object."},"name":"getTestMailTemplateProperties","code":"public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }","location":{"start":196,"insert":196,"offset":" ","indent":4},"item_type":"method","length":8},{"id":"00604a00-0ad7-4d9a-d24a-984e18c1a8f7","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","a380b8f6-5cba-85ae-fe4e-a8ecb8f3e739"],"type":"function","description":"creates a new instance of `EmailTemplateLocalizationProperties` and sets its properties to \"test path\", \"test encoding\", and \"0\" seconds for caching.","params":[],"returns":{"type_name":"EmailTemplateLocalizationProperties","description":"an `EmailTemplateLocalizationProperties` object containing customized localization settings for email templates.\n\n* `setPath()`: Sets the path to the localized email templates.\n* `setEncoding()`: Specifies the encoding of the localized email templates.\n* `setCacheSeconds()`: Configures the caching duration for the localized email templates in seconds.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    EmailTemplateLocalizationProperties testTemplatesLocalization = getTestLocalizationMailProperties();\n}\n","description":"\nThis code creates a new instance of the class EmailTemplateLocalizationProperties, which is returned by the method. This allows for testing of the class and its methods without having to create an instance of it manually."},"name":"getTestLocalizationMailProperties","code":"public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }","location":{"start":205,"insert":205,"offset":" ","indent":4},"item_type":"method","length":7},{"id":"f666b938-1216-0dbc-fa4f-82e5ed7c2694","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851"],"type":"function","description":"TODO","name":"PaymentHelpers","code":"public static class PaymentHelpers {\n\n    public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }\n    public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }\n  }","location":{"start":214,"insert":214,"offset":" ","indent":2},"item_type":"class","length":27},{"id":"468d9db3-fd29-e4b0-0d45-9c10300df51f","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","f666b938-1216-0dbc-fa4f-82e5ed7c2694"],"type":"function","description":"constructs a `PaymentDto` object with various parameters such as charge amount, payment type, description, recurring status, due date, and administrator and member information.","params":[{"name":"charge","type_name":"BigDecimal","description":"amount to be charged for the payment.\n\n* `BigDecimal charge`: A large decimal value representing the amount of money charged for the payment.\n* `type`: A string indicating the type of payment (e.g., \"invoice\", \"payment\", etc.).\n* `description`: A string providing a brief description of the payment.\n* `recurring`: A boolean indicating whether the payment is recurring (true) or one-time (false).\n* `dueDate`: A LocalDate object representing the date the payment is due.\n* `admin`: An instance of `UserDto` representing the administrator responsible for the payment.\n* `member`: An instance of `HouseMemberDto` representing the member who made the payment.","complex_type":true},{"name":"type","type_name":"String","description":"type of payment, which is used to determine the appropriate fields to include in the resulting `PaymentDto`.\n\n* `charge`: A `BigDecimal` object representing the amount to be charged for the payment.\n* `type`: An immutable `String` object specifying the type of payment, such as \"invoice\" or \"credit note\".\n* `description`: A `String` object providing a brief description of the payment.\n* `recurring`: A `boolean` indicating whether the payment is recurring or not.\n* `dueDate`: An instance of `LocalDate` representing the date when the payment is due.\n* `admin`: An instance of `UserDto` representing the administrator who created the payment.\n* `member`: An instance of `HouseMemberDto` representing the member for whom the payment is made.","complex_type":true},{"name":"description","type_name":"String","description":"description of the payment in the `PaymentDto`.\n\n* `description`: A string attribute that represents the payment description provided by the user.\n* `type`: An optional string attribute that specifies the type of payment (e.g., \"invoice\", \"credit card\", etc.).\n* `recurring`: A boolean attribute that indicates whether the payment is recurring or not.\n* `dueDate`: A local date attribute that represents the due date of the payment.","complex_type":true},{"name":"recurring","type_name":"boolean","description":"payment as recurring, which means it will be charged repeatedly at the specified interval.","complex_type":false},{"name":"dueDate","type_name":"LocalDate","description":"date when the payment is due, as represented by a LocalDate object.\n\n* `dueDate.toString()`: This property returns the string representation of the `LocalDate` object, which can be used for further processing or storage purposes.","complex_type":true},{"name":"admin","type_name":"UserDto","description":"UserDto object containing information about the user who made the payment, and it is passed to the builder to include the user's details in the PaymentDto object.\n\n* `admin`: The UserDto object represents an administrator for whom the payment is made. It has various attributes such as `id`, `username`, `password`, and `email`.","complex_type":true},{"name":"member","type_name":"HouseMemberDto","description":"HouseMemberDto object containing information about the member whose payment is being processed.\n\n* `admin`: A `UserDto` object representing the user who made the payment.\n* `dueDate`: A `LocalDate` object representing the date when the payment is due.\n* `description`: A string representing a brief description of the payment.\n* `member`: A `HouseMemberDto` object representing the member for whom the payment was made. The member's properties include:\n\t+ `id`: An integer representing the member's ID.\n\t+ `name`: A string representing the member's name.","complex_type":true}],"returns":{"type_name":"PaymentDto","description":"a `PaymentDto` object built with the provided parameters.\n\n* `charge`: A `BigDecimal` object representing the amount to be charged.\n* `type`: An optional string indicating the type of payment (e.g., \"invoice\").\n* `description`: An optional string providing additional context for the payment (e.g., a project name).\n* `recurring`: A boolean indicating whether the payment is recurring.\n* `dueDate`: The date when the payment is due, represented as a `LocalDate` object.\n* `admin`: An instance of the `UserDto` class representing the admin associated with the payment.\n* `member`: An instance of the `HouseMemberDto` class representing the member associated with the payment.","complex_type":true},"usage":{"language":"java","code":"// Build the payment DTO with charge, type, description, recurring, dueDate, admin and member details\nPaymentDto testPayment = PaymentHelpers.getTestPaymentDto(\n        BigDecimal.valueOf(10), \"Monthly\", \"Test Charge\", true, LocalDate.of(2023, 5, 15),\n        UserDto.builder().id(\"user-1\").build(), HouseMemberDto.builder().houseId(\"test-house-id\").build());\n\n// Send the testPayment DTO to the payment service for further processing\npaymentService.processPayment(testPayment);\n","description":"\nIn this example, we're building a PaymentDto using the getTestPaymentDto method from the PaymentHelpers class with details such as charge, type, description, recurring, dueDate, admin and member. Then we send that DTO to the payment service for further processing by calling the processPayment method on it."},"name":"getTestPaymentDto","code":"public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }","location":{"start":216,"insert":216,"offset":" ","indent":4},"item_type":"method","length":12},{"id":"53c9964c-4446-918d-314e-1cdcd6b725eb","ancestors":["50d0cae3-0b41-4ba7-3445-69f88413b851","f666b938-1216-0dbc-fa4f-82e5ed7c2694"],"type":"function","description":"creates a mock payment object with all fields except 'recurring' set to null and 'recurring' set to false.","params":[],"returns":{"type_name":"Payment","description":"a Payment object with all fields null or false.\n\n* `payment`: This is null, indicating that no payment information was provided.\n* `recurring`: This is false, meaning that the payment is not recurring.\n* `amount`: This is null, indicating that no amount was provided for the payment.\n* `currency`: This is null, indicating that no currency was provided for the payment.\n* `description`: This is null, indicating that no description was provided for the payment.\n* `dateTime`: This is null, indicating that no date and time were provided for the payment.\n* `status`: This is null, indicating that the payment status is not provided.\n* `errorMessage`: This is null, indicating that there is no error message associated with the payment.","complex_type":true},"usage":{"language":"java","code":"// only 'recurring' field will be not null, but false\nPayment payment = PaymentHelpers.getTestPaymentNullFields();\n\nassertFalse(payment.getCharge().equals(\"\")); // charge is null\nassertFalse(payment.getType().equals(\"\")); // type is null\nassertFalse(payment.getDescription().equals(\"\")); // description is null\nassertFalse(payment.isRecurring()); // recurring is false\n","description":"\n\nThe method getTestPaymentNullFields returns a new payment with all fields being null except for the 'recurring' field, which is set to false. This example shows how the method can be used to create a payment object with some null fields while setting others to specific values."},"name":"getTestPaymentNullFields","code":"public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }","location":{"start":228,"insert":228,"offset":" ","indent":4},"item_type":"method","length":12}]}}}