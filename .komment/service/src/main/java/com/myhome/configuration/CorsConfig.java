{"name":"CorsConfig.java","path":"service/src/main/java/com/myhome/configuration/CorsConfig.java","content":{"structured":{"description":"CORS mappings for a Spring Web MVC application, allowing incoming requests from any origin and specifying allowed HTTP methods and headers, while enabling credentials for authenticated requests. The `CorsConfig` class creates a configuration object that enables CORS functionality for the entire application by adding CORS mappings to a registry using the `addCorsMappings()` method.","items":[{"id":"06690fa2-b73f-84ae-e04c-d4655c388d5c","ancestors":[],"type":"function","description":"TODO","name":"CorsConfig","code":"@Configuration\npublic class CorsConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n\n  /**\n   * defines CORS mappings for a Spring Web MVC application, allowing incoming requests\n   * from any origin, specifying allowed HTTP methods and headers, and enabling credentials\n   * for authenticated requests.\n   * \n   * @returns a configuration object that enables CORS functionality for the entire application.\n   * \n   * \t- `registry`: The CorsRegistry object that is being modified.\n   * \t- `addCorsMappings()`: A method that adds CORS mappings to the registry.\n   * \t- `allowedOrigins()`: An array of allowed origins, which are the domains from\n   * which the API can be accessed.\n   * \t- `allowedMethods()`: An array of allowed HTTP methods, which determine what\n   * actions can be performed on the API.\n   * \t- `allowedHeaders()`: An array of allowed headers, which specify which headers\n   * can be used in CORS requests.\n   * \t- `exposedHeaders()`: An array of exposed headers, which are the headers that the\n   * API will expose to clients.\n   * \t- `allowCredentials()`: A boolean value indicating whether credentials (e.g.,\n   * authentication tokens) should be allowed in CORS requests.\n   */\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}","location":{"start":28,"insert":28,"offset":" ","indent":0},"item_type":"class","length":62},{"id":"9024495e-9332-d4b7-d149-f23099068791","ancestors":["06690fa2-b73f-84ae-e04c-d4655c388d5c"],"type":"function","description":"adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.","params":[],"returns":{"type_name":"instance","description":"a configuration for CORS mappings, allowing requests from any origin and specifying allowed methods, headers, and credentials.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a collection of CORS mappings for a server.\n* `addMapping`: This method adds a new CORS mapping to the registry. The method takes a string argument representing the URL pattern that the mapping applies to.\n* `allowedOrigins`: This is an array of strings representing the origins (i.e., domains) that are allowed to make requests to the server.\n* `allowedMethods`: This is an array of strings representing the HTTP methods (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n* `allowedHeaders`: This is an array of strings representing the headers that are allowed to be sent with the requests made to the server.\n* `exposedHeaders`: This is an array of strings representing the headers that the server will expose to clients in their responses.\n* `allowCredentials`: This method indicates whether the server will include authentication information (i.e., credentials) in the responses it sends to clients.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n","description":"\nIn this example, the method corsConfigurer is used to add a mapping for any URL pattern. It specifies that requests from any origin are allowed and that all HTTP methods are allowed with the mapped URL pattern. Additionally, it sets \"token\" and \"userId\" as exposed headers in the responses."},"name":"corsConfigurer","code":"@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that is being modified by adding mappings to its configuration.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new CORS mapping to the registry. The method\n       * takes a string argument representing the URL pattern that the mapping applies to.\n       * \t- `allowedOrigins`: This is an array of strings representing the origins (i.e.,\n       * domains) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: This is an array of strings representing the HTTP methods\n       * (e.g., GET, POST, PUT, DELETE) that are allowed to be used with the mapped URL pattern.\n       * \t- `allowedHeaders`: This is an array of strings representing the headers that are\n       * allowed to be sent with the requests made to the server.\n       * \t- `exposedHeaders`: This is an array of strings representing the headers that the\n       * server will expose to clients in their responses.\n       * \t- `allowCredentials`: This method indicates whether the server will include\n       * credentials (i.e., authentication information) in the responses it sends to clients.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2},"item_type":"method","length":35},{"id":"118221b3-eb17-2497-b44b-8b415ed1f6a6","ancestors":["06690fa2-b73f-84ae-e04c-d4655c388d5c","9024495e-9332-d4b7-d149-f23099068791"],"type":"function","description":"adds CORS mappings to a registry, allowing incoming requests from any origin and specifying which methods and headers are allowed, as well as enabling credentials for authenticated access.","params":[{"name":"registry","type_name":"CorsRegistry","description":"Cors registry that is being modified by adding mappings to allow cross-origin resource sharing (CORS) for specific origins, methods, headers, and credentials.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a registry of CORS (Cross-Origin Resource Sharing) mappings.\n* `addMapping`: This method adds a new mapping to the registry for the specified URL pattern (\"/**\").\n* `allowedOrigins`: An array of origins that are allowed to make requests to the protected resource.\n* `allowedMethods`: An array of HTTP methods (such as GET, POST, PUT, DELETE) that are allowed to be used with the protected resource.\n* `allowedHeaders`: An array of headers that are allowed to be included in responses from the protected resource.\n* `exposedHeaders`: An array of headers that are exposed to clients making requests to the protected resource.\n* `allowCredentials`: A boolean value indicating whether credentials (such as cookies, authentication headers) should be allowed or required for requests to the protected resource.","complex_type":true}],"usage":{"language":"java","code":"@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n            .allowedOrigins(new String[] {\"*\"})\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n}\n","description":"\nThe above code defines a CORS mapping for all incoming requests with any allowed origin, method, and header. The exposed headers are token and userId. The allowCredentials property is set to true indicating that credentials are allowed in the request."},"name":"addCorsMappings","code":"@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }","location":{"start":78,"insert":78,"offset":" ","indent":6},"item_type":"method","length":9}]}}}