{"name":"EmailTemplateConfig.java","path":"service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java","content":{"structured":{"description":"An email template configuration class named EmailTemplateConfig. The class includes a bean for a resource bundle message source and another for a Spring Template Engine instance. The template engine is configured with a custom template resolver that uses the Thymeleaf library to resolve templates. The message source is used to provide localized messages to the template engine.","items":[{"id":"ca24cd65-9628-ebbf-b144-25aa6fc6aa0b","ancestors":[],"type":"function","description":"TODO","name":"EmailTemplateConfig","code":"@Configuration\n@RequiredArgsConstructor\npublic class EmailTemplateConfig {\n\n  private final EmailTemplateProperties templateProperties;\n  private final EmailTemplateLocalizationProperties localizationProperties;\n\n  @Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n\n  @Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n\n  private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }\n\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":40},{"id":"a526909f-2a6f-02a5-034c-77be6c773733","ancestors":["ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"],"type":"function","description":"creates a new `ResourceBundleMessageSource` instance, sets its basename and default locale, and configures its cache seconds setting.","params":[],"returns":{"type_name":"ResourceBundleMessageSource","description":"a `ResourceBundleMessageSource` instance configured to handle email localization.\n\n* `ResourceBundleMessageSource`: This is the class that is created and returned by the function. It provides a message source for email localization.\n* `setBasename(localizationProperties.getPath())`: This sets the base name of the resource bundle file to be used for email localization.\n* `setDefaultLocale(Locale.ENGLISH)`: This sets the default locale for the message source, which is English in this case.\n* `setDefaultEncoding(localizationProperties.getEncoding())`: This sets the default encoding of the message source to the value specified in the `localizationProperties` object.\n* `setCacheSeconds(localizationProperties.getCacheSeconds())`: This sets the cache seconds for the message source, which determines how long the messages will be cached before being re-fetched from the resource bundle file.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n","description":"\nThe code above creates a new instance of the ResourceBundleMessageSource class and sets its basename, default locale, default encoding, and cache seconds to the values specified in localizationProperties. Then it returns this new instance so that it can be used as a Spring bean. This is an example of how emailMessageSource would be used, but it is not a unit test or an explanation of the code."},"name":"emailMessageSource","code":"@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }","location":{"start":22,"insert":22,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"de9c0856-b701-f3ad-754b-142392aa33ab","ancestors":["ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"],"type":"function","description":"creates a new `SpringTemplateEngine` instance and sets its template resolver and message source to a `ThymeleafTemplateResolver` and an `EmailMessageSource`, respectively.","params":[{"name":"emailMessageSource","type_name":"ResourceBundleMessageSource","description":"message source for sending email templates in Thymeleaf, which is used to configure the template engine.\n\n* ResourceBundleMessageSource: A message source that provides messages in a resource bundle format.\n* EmailMessageSource: A message source that provides email-related messages.","complex_type":true}],"returns":{"type_name":"SpringTemplateEngine","description":"a Spring Template Engine instance configured with Thymeleaf templates and an email message source.\n\n* `SpringTemplateEngine`: This is the base class for all Spring-based template engines, providing common functionality and APIs for handling templates.\n* `templateResolver`: This is an instance of `ThymeleafTemplateResolver`, which provides a way to resolve Thymeleaf templates from a variety of sources, including files, directories, and even other templates.\n* `emailMessageSource`: This is an instance of `ResourceBundleMessageSource`, which provides a way to access message resources in a project.\n\nThe `thymeleafTemplateEngine` function creates a new instance of `SpringTemplateEngine`, sets the `templateResolver` to a `ThymeleafTemplateResolver`, and then sets the `messageSource` to an `EmailMessageSource`. This allows for the use of Thymeleaf templates in combination with email-related message resources.","complex_type":true},"usage":{"language":"java","code":"@Bean\npublic SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    return new SpringTemplateEngine();\n}\n","description":""},"name":"thymeleafTemplateEngine","code":"@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }","location":{"start":32,"insert":32,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"53f6e6b9-fef0-12ae-8c49-cdb13d042d15","ancestors":["ca24cd65-9628-ebbf-b144-25aa6fc6aa0b"],"type":"function","description":"creates a `ITemplateResolver` instance that sets up Thymeleaf template resolution parameters based on environment variables.","params":[],"returns":{"type_name":"ITemplateResolver","description":"a `ITemplateResolver` object configured to resolve Thymeleaf templates based on their file path and properties.\n\n* `loader`: The ClassLoader used to resolve templates.\n* `prefix`: The prefix for the template resolution.\n* `suffix`: The suffix for the template resolution.\n* `templateMode`: The mode for the template resolution.\n* `characterEncoding`: The character encoding used for the template resolution.\n* `cacheable`: A boolean indicating whether the resolved templates should be cached or not.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n  @Autowired\n  private ITemplateResolver thymeleafTemplateResolver;\n\n  public void myMethod() {\n    String templatePath = \"my-template\";\n    ClassLoaderTemplateResolver resolver = (ClassLoaderTemplateResolver) thymeleafTemplateResolver();\n    resolver.setPrefix(templatePath);\n    // do something with the resolver\n  }\n}\n","description":"\nThis example autowires a Spring bean of type `ITemplateResolver` that is created by the method `thymeleafTemplateResolver`. The `thymeleafTemplateResolver` method creates and configures an instance of `ClassLoaderTemplateResolver`, which is then set as the prefix for the template path. Finally, the resolver is used in a method to perform some action with it."},"name":"thymeleafTemplateResolver","code":"private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2},"item_type":"method","length":13}]}}}