{"name":"NoSecretJwtEncoderDecoder.java","path":"service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java","content":{"structured":{"description":"An implementation of `AppJwtEncoderDecoder`, a class that encodes and decodes JSON Web Tokens (JWTs). The `NoSecretJwtEncoderDecoder` class is used only in testing, and it splits the encoded JWT into user ID and expiration time using the `split()` method. It then creates a new `AppJwt` object with the user ID and expiration time and returns it. The `encode()` method takes an existing `AppJwt` object and a secret string and returns the encoded JWT, while the `decode()` method takes an encoded JWT and a secret string and returns the original `AppJwt` object.","items":[{"id":"fdc7274a-b600-b88a-f449-c5fa743e308b","ancestors":[],"type":"function","description":"TODO","name":"NoSecretJwtEncoderDecoder","code":"@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}","location":{"start":28,"insert":28,"offset":" ","indent":0},"item_type":"class","length":14},{"id":"988bf03d-ac7e-dcbe-7c4e-45e8787b4552","ancestors":["fdc7274a-b600-b88a-f449-c5fa743e308b"],"type":"function","description":"decodes a JSON Web Token (JWT) and returns an `AppJwt` object with the user ID and expiration time extracted from the JWT.","params":[{"name":"encodedJwt","type_name":"String","description":"JSON Web Token (JWT) that contains the user ID and expiration time, which are decoded and used to construct a new `AppJwt` object.\n\n* `encodedJwt`: The serialized JWT string to be decoded.\n* `secret`: The secret key used for signing the JWT.\n\nThe function splits the `encodedJwt` string into an array of strings using the `split` method, with the `SEPARATOR` constant as the delimiter. It then returns an instance of `AppJwt` built from the `userId` and `expiration` properties of the resulting array of strings.","complex_type":true},{"name":"secret","type_name":"String","description":"secret key used to sign the JWT token, which is necessary for decoding and verifying the authenticity of the token.\n\n* The string `encodedJwt` is split into two parts using the separator `SEPARATOR`, resulting in an array of two strings.\n* The first string in the array represents the user ID.\n* The second string represents the expiration time, which is parsed and converted to a `LocalDateTime` object.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"an instance of `AppJwt`, containing the user ID and expiration date extracted from the encoded JWT.\n\n* `AppJwt` is the class that represents the decoded JWT token.\n* `builder()` is a method of the `AppJwt` class that creates a new instance of the class with the given properties.\n* `userId(strings[0])` sets the value of the `userId` attribute of the decoded token to the first element of the `strings` array.\n* `expiration(LocalDateTime.parse(strings[1]))` sets the value of the `expiration` attribute of the decoded token to the second element of the `strings` array, which represents the expiration time of the token in ISO 8601 format.","complex_type":true},"usage":{"language":"java","code":"String encodedJwt = \"1234567890+2020-06-14T10:20:30.000\";\nAppJwt jwt = NoSecretJwtEncoderDecoder.decode(encodedJwt, \"secret\");\n","description":"\nIn this example, the encoded JWT string is passed to the decode method along with a secret key that is used for encoding and decoding the JWT. The method splits the input string using the `\\\\+` separator and uses the resulting array of strings to build an AppJwt object with the user ID (the first element in the array) and the expiration date (the second element in the array)."},"name":"decode","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }","location":{"start":33,"insert":33,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"f1434378-5cd2-df85-244a-31446c1aa8e0","ancestors":["fdc7274a-b600-b88a-f449-c5fa743e308b"],"type":"function","description":"takes a `AppJwt` object and a secret as input, returns a encoded string consisting of the user ID and expiration time.","params":[{"name":"jwt","type_name":"AppJwt","description":"JWT (JSON Web Token) object that contains the user ID and expiration time, which are used to generate the encoded string returned by the function.\n\n* `jwt`: A `AppJwt` object representing a JSON Web Token, which contains information about the token, including its user ID and expiration time.","complex_type":true},{"name":"secret","type_name":"String","description":"secret key used to sign the JWT.\n\n* `secret`: A string representing a secret used in the JWT encoding process. It can have various attributes such as length, format, and content, depending on its usage.","complex_type":true}],"returns":{"type_name":"String","description":"a concatenation of the `userId` and `expiration` properties of the `AppJwt` object, separated by a separator.\n\n* The output is a string representation of a JWT token.\n* The first component of the output is the user ID, which is extracted from the `jwt.getUserId()` method.\n* The second component is the separator character (`SEPARATOR`), which is passed as an argument to the function.\n* The third component is the expiration time, which is obtained from the `jwt.getExpiration()` method.\n\nThe output string can be used for authentication and authorization purposes in a variety of applications.","complex_type":true},"usage":{"language":"java","code":"AppJwt jwt = AppJwt.builder().userId(\"123456789\").expiration(LocalDateTime.now()).build();\nString secret = \"secret\";\nString encodedJwt = NoSecretJwtEncoderDecoder.encode(jwt, secret);\n","description":""},"name":"encode","code":"@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }","location":{"start":38,"insert":38,"offset":" ","indent":2},"item_type":"method","length":3}]}}}