{"name":"CommunityAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java","content":{"structured":{"description":"A custom authentication filter called CommunityAuthorizationFilter that extends the basic authentication filter. The filter checks if the user has administrative privileges in a specific community by matching the request URI against a pattern and checking if the user is an admin in the community. If the user is not an admin, it returns an unauthorized response. The filter also calls the super doFilterInternal method to continue the authentication process.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4","ancestors":[],"type":"function","description":"TODO","name":"CommunityAuthorizationFilter","code":"public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"5b33fdf6-fecb-47b3-4142-7426e46eb008","ancestors":["fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4"],"type":"function","description":"filters incoming HTTP requests based on a pattern and checks if the user is an admin or not before passing the request to the next filter in the chain.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request received by the filter.\n\n* `getRequestURI()`: Returns the String representation of the request URI.\n* `isUserCommunityAdmin()`: A boolean method that checks if the user is an administrator for a community.\n\nThe function then performs its internal processing and delegates to the superclass's `doFilterInternal` method, passing in the original input `request`.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HttpServletResponse object that is used to handle the filtered request.\n\n* `HttpServletResponse`: This is an instance of the `HttpServletResponse` class, which represents the response object in an HTTP request-response cycle. It contains various attributes and methods related to handling HTTP requests and responses.\n* `status`: The `status` attribute of the `HttpServletResponse` object indicates the status code returned by the server. In this function, it is set to `SC_UNAUTHORIZED`.\n* ` ServletException`: This is an exception that is thrown if the filter chain cannot handle the request due to a security-related reason. It is caught and handled in the `doFilterInternal` function.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"Chain of filters to execute.\n\n* `request`: The original HTTP request that was passed to the filter chain.\n* `response`: The HTTP response object that is being filtered.\n* `chain`: An instance of `FilterChain`, which represents the filter chain in which the current filter is nested.\n* `super`: A reference to the parent `doFilterInternal` function, which will be called if the current filter does not handle the request.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n    \n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        return;\n    }\n    \n    super.doFilterInternal(request, response, chain);\n}\n","description":""},"name":"doFilterInternal","code":"@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }","location":{"start":31,"insert":31,"offset":" ","indent":4},"item_type":"method","length":13},{"id":"ad00435a-160c-12a0-2744-56794d887f2b","ancestors":["fe1912d4-9c58-1b9b-ab44-ec39cd6b59e4"],"type":"function","description":"determines if a user is an administrator of a community based on their user ID and the community ID in the request URL. If the user ID matches the ID of an admin for the community, the function returns `true`. Otherwise, it returns `false`.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the method, providing the community ID from the request URI.\n\n1. `getRequestURI()`: This method returns the string representation of the request URI, which is the part of the URL after the domain name.\n2. `split(\"/\")`: This method splits the request URI into an array of strings using the \"/\" character as the delimiter. The second element in the array is the community ID.\n3. `getAuthentication()`: This method returns the current authentication context, which contains information about the user who made the request.\n4. `getPrincipal()`: This method returns the principal (i.e., user) associated with the current authentication context.\n5. `findCommunityAdminsById(communityId, null)`: This method finds a list of community admins for a given community ID using the `communityService` interface. The second argument `null` means that no filter is applied to the list of admins.\n6. `stream()`: This method creates a stream from the list of community admins.\n7. `filter(communityAdmin -> communityAdmin.getUserId().equals(userId))` : This method filters the stream of community admins to find the user ID that matches the input `userId`. The `filter()` method takes a lambda expression as an argument, which in this case checks if the `getUserId()` method returns the same value as the input `userId`.\n8. `findFirst()`: This method finds the first element in the filtered stream of community admins that matches the input `userId`. If no match is found, it returns `null`.\n9. `orElse(null)`: This method returns the result of the previous call to `findFirst()` or `null` if no match was found.\n\nIn summary, the `request` object contains information about the user who made the request and the community ID that is being checked for admin privileges.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the current user is an admin of the specified community.","complex_type":false},"usage":{"language":"java","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    // Get the community ID from the request URI\n    String communityId = request.getRequestURI().split(\"/\")[2];\n    \n    // Get the user ID of the current authenticated user\n    String userId = (String) SecurityContextHolder.getContext()\n            .getAuthentication().getPrincipal();\n    \n    // Check if the current user is an admin of the community with the given ID\n    Optional<List<User>> optional = communityService.findCommunityAdminsById(communityId, null);\n    if (optional.isPresent()) {\n        List<User> communityAdmins = optional.get();\n        User admin = communityAdmins.stream()\n                .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                .findFirst()\n                .orElse(null);\n        return admin != null;\n    }\n    \n    // If the user is not an admin, return false\n    return false;\n}\n","description":"\nThis method uses a variety of techniques to check if a user is a community administrator. Firstly, it extracts the ID of the community from the request URI using `split(\"/\")`. Secondly, it retrieves the current authenticated user's ID using `SecurityContextHolder.getContext().getAuthentication().getPrincipal()`. Thirdly, it checks if the current user is an admin of the community with the given ID by calling `findCommunityAdminsById()` and filtering the list of admins for the current user's ID. Finally, it returns true if the user is an admin and false otherwise."},"name":"isUserCommunityAdmin","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }","location":{"start":45,"insert":45,"offset":" ","indent":4},"item_type":"method","length":21}]}}}