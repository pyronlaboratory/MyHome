{"name":"MyHomeAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java","content":{"structured":{"description":"A custom filter in Spring Security called MyHomeAuthorizationFilter. The filter checks for an authorization token in the HTTP request headers and decodes it using the AppJwtEncoderDecoder class. If a valid token is found, the filter sets the authentication context using the SecurityContextHolder class and passes the request to the next filter in the chain.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"64442b18-bb7d-0792-7f4c-95ae48313a80","ancestors":[],"type":"function","description":"TODO","name":"MyHomeAuthorizationFilter","code":"public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"515e0a51-af89-a290-5044-42f819aea3fd","ancestors":["64442b18-bb7d-0792-7f4c-95ae48313a80"],"type":"function","description":"authenticates a user by checking for an authentication token in the HTTP request header. If the token is present and has the correct prefix, it sets the SecurityContextHolder with the corresponding UsernamePasswordAuthenticationToken and allows the filter chain to proceed.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object that is being processed by the filter.\n\n1. `authHeaderName`: The name of the HTTP header that contains the authorization token.\n2. `authHeaderPrefix`: The prefix of the authorization token in the HTTP header.\n3. `authHeader`: The value of the authorization token in the HTTP header, which is either null or starts with the prefix provided by `authHeaderPrefix`.\n4. `getAuthentication()`: A method that returns an instance of `UsernamePasswordAuthenticationToken`, which is then set as the authentication for the security context using `SecurityContextHolder.getContext().setAuthentication()`.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"output of the current filter chain and is passed on to the next filter in the chain for further processing.\n\n1. `HttpServletRequest request`: This is the original HTTP request that triggered the filter chain.\n2. `HttpServletResponse response`: This is the HTTP response generated by the filter chain.\n3. `FilterChain chain`: This is the chain of filters that was executed in sequence to process the request.\n4. `IOException IOException`: This exception can be thrown if there is an I/O error while processing the request or generating the response.\n5. `ServletException ServletException`: This exception can be thrown if there is a problem with the filter chain or the HTTP request/response processing.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"next filter in the filter chain to be executed after the current filter is applied to the request.\n\n* `HttpServletRequest request`: The HTTP request sent by the client to the server.\n* `HttpServletResponse response`: The HTTP response generated by the server in response to the request.\n* `FilterChain chain`: An instance of `FilterChain`, which is a chain of filters that process the incoming request.\n* `IOException`: A subclass of `Throwable` representing an error occurring during communication between a client and server.\n* `ServletException`: A subclass of `Throwable` representing an error occurring while processing an HTTP request.","complex_type":true}],"usage":{"language":"java","code":"public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                   FilterChain chain) throws IOException, ServletException {\n        // get the authorization header from the request\n        String authHeader = request.getHeader(\"Authorization\");\n\n        // check if the header is null or does not start with \"Bearer\"\n        if (authHeader == null || !authHeader.startsWith(\"Bearer\")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        // get the token from the authorization header\n        String token = authHeader.replace(\"Bearer \", \"\");\n\n        // validate the token using a method or class that you have implemented\n        if (!validateToken(token)) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        // get the user information from the token and set it in the security context\n        UsernamePasswordAuthenticationToken authentication = getAuthenticationFromToken(token);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        // continue with the filter chain\n        chain.doFilter(request, response);\n    }\n}\n","description":"\nIn this example, we are using the \"Authorization\" header to extract the token from the request and then validating it before setting the user information in the security context. If the token is not valid, the filter chain will continue without any further processing."},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"054c528e-fc13-00b8-d948-baa50a7fd9fc","ancestors":["64442b18-bb7d-0792-7f4c-95ae48313a80"],"type":"function","description":"retrieves an authentication token from a HTTP request header and decodes it into a `UsernamePasswordAuthenticationToken`. If the token is null, the function returns null.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request made by the client and contains information about the authentication token in its header.\n\n1. `getHeader`: This method returns the value of a header field in the HTTP request. In this case, it returns the value of the authorization token header.\n2. `getProperty`: This method retrieves a property from the environment. The property is specified as a string, and its value can be any valid value.\n3. `getId`: This method returns the user ID extracted from the JWT token.\n4. `decode`: This method decodes the JWT token and extracts the user ID. It uses the `appJwtEncoderDecoder` class to perform the decoding.\n5. `getUserId`: This method returns the user ID extracted from the JWT token.\n6. `getSecret`: This method retrieves the secret key used for encoding the JWT token.\n7. `return new UsernamePasswordAuthenticationToken`: This line creates a new instance of the `UsernamePasswordAuthenticationToken` class, passing in the user ID and a list of credentials (which is empty in this case).","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` object representing the authenticated user.\n\n* The function returns an instance of `UsernamePasswordAuthenticationToken`.\n* The `username` field of the token is set to the value of `jwt.getUserId()`.\n* The `password` field of the token is set to `null`.\n* The `groups` list of the token is set to an empty list.","complex_type":true},"usage":{"language":"java","code":"public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n}\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":16}]}}}