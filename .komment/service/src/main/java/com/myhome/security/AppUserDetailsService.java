{"name":"AppUserDetailsService.java","path":"service/src/main/java/com/myhome/security/AppUserDetailsService.java","content":{"structured":{"description":"An custom implementation of Spring Security's `UserDetailsService`, which cater to the need of service logic. The class has a constructor that takes a `UserRepository` and a `UserMapper` as dependencies. The `loadUserByUsername()` method is responsible for loading a user by their username, and it throws a `UsernameNotFoundException` if the user is not found. The `getUserDetailsByUsername()` method maps the user from the domain to the DTO level.","items":[{"id":"e3005702-0c21-b3b0-434c-181a59e999d0","ancestors":[],"type":"function","description":"TODO","name":"AppUserDetailsService","code":"@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0},"item_type":"class","length":31},{"id":"b70ab352-dc16-3bb1-ce46-a7c5b9184259","ancestors":["e3005702-0c21-b3b0-434c-181a59e999d0"],"type":"function","description":"loads a user by their username, retrieving the user from the repository if found, and creating a new `User` object with the email, encrypted password, and other attributes set to default values if not found.","params":[{"name":"username","type_name":"String","description":"username for which the corresponding user details are to be loaded.\n\n* `username`: This is a String object representing the username to be searched in the user repository.\n* `userRepository`: This is an instance of a class that provides access to a user database or repository.\n* `findByEmail(String username)`: This method is called on the `userRepository` instance and returns a `com.myhome.domain.User` object if a user with the specified `username` exists in the repository, otherwise returns `null`.","complex_type":true}],"returns":{"type_name":"User","description":"a `UserDetails` object containing the user's email, encrypted password, and other attributes.\n\n* `Email`: The email address of the user.\n* `EncryptedPassword`: The encrypted password for the user.\n* `IsActive`: A boolean indicating whether the user is active (true) or not (false).\n* `IsAdmin`: A boolean indicating whether the user is an administrator (true) or not (false).\n* `IsPhoneNumberVerified`: A boolean indicating whether the user's phone number is verified (true) or not (false).\n* `Collections.emptyList()`: An empty list of type `List<String>`.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDetails loadUserByUsername(String username) \n    throws UsernameNotFoundException {\n  \n  com.myhome.domain.User user = userRepository.findByEmail(username);\n  if (user == null) {\n    throw new UsernameNotFoundException(username);\n  }\n  \n  return new User(user.getEmail(),\n      user.getEncryptedPassword(),\n      true,\n      true,\n      true,\n      true,\n      Collections.emptyList());\n}\n","description":"\nIn this method, we first call the repository to find a user by their email address and store it in a variable called user. We then check if the user is null and throw an exception if they are. Finally, we create a new User object using the information from the user domain object and return it."},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":39,"insert":39,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"52bbdad4-90a1-76b2-884d-9d6d40c5f16f","ancestors":["e3005702-0c21-b3b0-434c-181a59e999d0"],"type":"function","description":"retrieves a user's details from the repository and maps them to a `UserDto` object using a mapper.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.\n\n* `username`: A string representing the username to search for in the user repository.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the specified username.\n\n* The output is a `UserDto` object representing a user entity in domain-driven design.\n* The user entity contains fields for email, username, and other relevant information.\n* The `findByEmail` method from the `userRepository` returns a `User` object if found, otherwise throws a `UsernameNotFoundException`.\n* The `userMapper` is used to map the `User` object to a `UserDto` object for convenience and ease of use in the application.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    AppUserDetailsService userDetailsService = new AppUserDetailsService();\n    UserDto user = userDetailsService.getUserDetailsByUsername(\"username\");\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2},"item_type":"method","length":7}]}}}