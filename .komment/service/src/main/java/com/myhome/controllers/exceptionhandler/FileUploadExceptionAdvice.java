{"name":"FileUploadExceptionAdvice.java","path":"service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java","content":{"structured":{"description":"An ExceptionHandler class in Spring MVC framework for handling specific types of exceptions, including MaxUploadSizeExceededException and IOException. The class includes two exception handlers that return response entities with custom messages upon handling each type of exception. The response entities include a message property that provides a error message to the user.","items":[{"id":"af0086fb-ab8f-c2b3-6741-de957f4cf91d","ancestors":[],"type":"function","description":"TODO","name":"FileUploadExceptionAdvice","code":"@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n\n  @ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0},"item_type":"class","length":17},{"id":"b63aef7e-7304-c582-aa4b-2790fdedbf60","ancestors":["af0086fb-ab8f-c2b3-6741-de957f4cf91d"],"type":"function","description":"handles the `MaxUploadSizeExceededException` by returning a response entity with an error message.","params":[{"name":"exc","type_name":"MaxUploadSizeExceededException","description":"MaxUploadSizeExceededException object that is passed to the function as an exception.\n\n* `class`: The class of the exception, which in this case is `MaxUploadSizeExceededException`.\n* `message`: A string attribute of the exception that contains a message indicating the file size exceeds the limit.","complex_type":true}],"returns":{"type_name":"HttpStatus","description":"a response entity with a status code of PAYLOAD_TOO_LARGE and a body containing a message indicating that the file size exceeds the limit.\n\n* The status code of the response entity is `HttpStatus.PAYLOAD_TOO_LARGE`.\n* The body of the response entity contains a map with a single key-value pair, where the key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.","complex_type":true},"usage":{"language":"java","code":"@ControllerAdvice\npublic class FileUploadExceptionHandler {\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n}\n","description":"\nIn this example, the method handleMaxSizeException is used to handle MaxUploadSizeExceededException. The method returns a response entity with an HTTP status of PAYLOAD_TOO_LARGE and a HashMap body containing a message that the file size exceeds the limit. This method would be called when a MaxUploadSizeExceededException occurs during file upload."},"name":"handleMaxSizeException","code":"@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"a1407d69-88a4-a085-d04e-3d2e90ddfde9","ancestors":["af0086fb-ab8f-c2b3-6741-de957f4cf91d"],"type":"function","description":"is an exception handler for the `MaxUploadSizeExceededException` thrown by the service. It returns a response entity with a status code of `CONFLICT` and a message body containing an error message.","params":[{"name":"exc","type_name":"MaxUploadSizeExceededException","description":"`MaxUploadSizeExceededException` that occurs when the uploaded file exceeds the maximum allowed size.\n\n* `MaxUploadSizeExceededException`: The class of the exception that was handled.\n* `exc`: The deserialized instance of the exception class, providing information about the specific error that occurred during document saving.","complex_type":true}],"returns":{"type_name":"HttpStatus","description":"a `ResponseEntity` object with a status code of `HttpStatus.CONFLICT` and a body containing a map with a single entry containing the message \"Something went wrong with document saving!\".\n\n* The status code of the response entity is `HttpStatus.CONFLICT`, indicating that something went wrong with the document saving process.\n* The body of the response entity contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing an error message related to the document saving process.","complex_type":true},"usage":{"language":"java","code":"try {\n  // Some code that throws IOException\n} catch (MaxUploadSizeExceededException | IOException exc) {\n  return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n}\n","description":"\nIn this example, the method handleIOException would be called when an IOException is thrown during the execution of the try block. The method returns a ResponseEntity object with an HTTP status code 409 (Conflict) and a message indicating that something went wrong with document saving."},"name":"handleIOException","code":"@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2},"item_type":"method","length":6}]}}}