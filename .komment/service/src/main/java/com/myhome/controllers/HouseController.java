{"name":"HouseController.java","path":"service/src/main/java/com/myhome/controllers/HouseController.java","content":{"structured":{"description":"A `HouseController` class that implements the `HousesApi` interface. It provides methods for listing all houses, getting details of a specific house, and adding or deleting members of a house. The controller uses dependency injection to inject `HouseService`, `HouseMemberMapper`, and `HouseApiMapper` instances.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a1e7cd2a-3497-b391-9248-37998703a215","ancestors":[],"type":"function","description":"TODO","name":"HouseController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class HouseController implements HousesApi {\n  private final HouseMemberMapper houseMemberMapper;\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":43,"insert":43,"offset":" ","indent":0},"item_type":"class","length":81},{"id":"b133b7f2-f03d-9f99-2c41-599ae9cd3643","ancestors":["a1e7cd2a-3497-b391-9248-37998703a215"],"type":"function","description":"receives a pageable parameter and returns a list of houses along with their corresponding response in GetHouseDetailsResponse format.","params":[{"name":"pageable","type_name":"Pageable","description":"paging information for the list of houses, including the page number, size, and total count, which are used to retrieve the desired portion of the house list from the database or API.\n\n* `@PageableDefault(size = 200)`: This annotation indicates that the `pageable` parameter should be deserialized with a default value of `200`.\n* `Pageable`: This is an interface in Java that represents a pageable view of a collection of objects. It provides methods for navigating through the collection, such as `getNumberOfElements()` and `getTotalPages()`.\n* `size`: This property represents the number of elements to be displayed on each page.","complex_type":true}],"returns":{"type_name":"GetHouseDetailsResponse","description":"a response entity with a list of houses.\n\n* `setHouses`: A set of `GetHouseDetailsResponseCommunityHouseSet` objects, which represent the list of houses retrieved from the database.\n* `HttpStatus.OK`: The HTTP status code of the response, indicating that the request was successful.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<GetHouseDetailsResponse> listAllHouses(Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n}\n","description":""},"name":"listAllHouses","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"18202c10-0c10-adb1-f048-6ec73d7be77f","ancestors":["a1e7cd2a-3497-b391-9248-37998703a215"],"type":"function","description":"receives a `houseId` parameter and makes a call to the `houseService` to retrieve house details. It then maps the result to a `GetHouseDetailsResponse` object and returns it as an `ResponseEntity`.","params":[{"name":"houseId","type_name":"String","description":"unique identifier of the house for which details are requested, and is used to retrieve the relevant details from the `houseService`.\n\n* `log.trace(\"Received request to get details of a house with id[{}],\"` - This line logs a trace message indicating that a request has been received to retrieve details of a particular house with its ID.\n* `houseService.getHouseDetailsById(houseId)` - This line calls the `getHouseDetailsById` method of the `houseService` class, passing in the `houseId` as a parameter. This method retrieves the details of a specific house based on its ID.\n* `map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)` - This line applies a mapping using the `houseApiMapper` object, which converts the community house returned by the `getHouseDetailsById` method into a `GetHouseDetailsResponse` object.\n* `map(Collections::singleton)` - This line applies a mapping to singularize the response, meaning that only one house will be included in the response.\n* `map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))` - This line applies another mapping, this time creating a new `GetHouseDetailsResponse` object and setting its `houses` field to the `communityHouse` object returned by the previous mapping.\n* `map(ResponseEntity::ok) .orElse(ResponseEntity.notFound().build());` - This line applies a mapping that either returns an `OK` response entity or creates a `Not Found` response entity if the house with the provided ID cannot be found.","complex_type":true}],"returns":{"type_name":"ResponseEntityGetHouseDetailsResponse","description":"a `ResponseEntity` object with a status code of `ok` and a list of house details in the body.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring WebFlux. It represents an HTTP response with a status code and a body.\n* `ok`: This is a subclass of `ResponseEntity` that indicates a successful response with a 200 status code.\n* `houses`: This is a list of `CommunityHouse` objects, which represent the details of the houses returned by the function. Each house object has attributes such as `id`, `name`, `address`, and `capacity`.","complex_type":true},"usage":{"language":"java","code":"String houseId = \"house123\";\nResponseEntity<GetHouseDetailsResponse> responseEntity = getHouseDetails(houseId);\nif (responseEntity.getStatusCode() == HttpStatus.OK) {\n    GetHouseDetailsResponse response = responseEntity.getBody();\n    List<CommunityHouse> houses = response.getHouses();\n    for (CommunityHouse house : houses) {\n        System.out.println(house);\n    }\n} else {\n    System.out.println(\"Failed to get details of house\");\n}\n","description":""},"name":"getHouseDetails","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":68,"insert":68,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"6f364dab-c102-e4b4-fb43-125665bfbda6","ancestors":["a1e7cd2a-3497-b391-9248-37998703a215"],"type":"function","description":"retrieves all members of a house with a given ID and returns them as a list of `HouseMember` objects in a `ResponseEntity`.","params":[{"name":"houseId","type_name":"String","description":"unique identifier of the house for which the members are to be listed.\n\n* `houseId`: This is the unique identifier for the house to which members will be listed. It could be an integer or a String.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page request parameters, such as the page number and the number of elements per page, that allows for pagination of the house members list.\n\n* `size`: The page size, which specifies the number of members to be returned in each page.\n* `@PageableDefault(size = 200)`: This annotation sets the default page size to 200 when no other page size is provided.","complex_type":true}],"returns":{"type_name":"ResponseEntityListHouseMembersResponse","description":"a `ResponseEntity` object containing a list of `HouseMember` objects in a JSON format.\n\n* `ResponseEntity`: This is the base class for all HTTP responses in Spring Web. It represents an immutable HTTP response message.\n* `ok`: This is a boolean value indicating whether the response was successful (true) or not (false).\n* `ListHouseMembersResponse`: This is a custom response class that contains a list of `HouseMember` objects.\n* `members`: This is a list of `HouseMember` objects, which are the actual members of the house being listed.","complex_type":true},"usage":{"language":"java","code":"import org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\n\npublic class HouseControllerExample {\n  public static void main(String[] args) {\n    String houseId = \"some-house-id\"; // Replace with a valid house ID\n    Pageable pageable = new PageableDefault(200); // Set the size of the page to be returned\n    \n    HouseController houseController = new HouseController();\n    ResponseEntity<ListHouseMembersResponse> response =\n      houseController.listAllMembersOfHouse(houseId, pageable);\n    \n    List<HouseMember> members = response.getBody().getMembers();\n  }\n}\n","description":""},"name":"listAllMembersOfHouse","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":79,"insert":79,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"d64fbd6f-64d7-659b-e841-025cb810efe5","ancestors":["a1e7cd2a-3497-b391-9248-37998703a215"],"type":"function","description":"adds new members to a house based on a request received as a DTO object, and returns the updated list of members in a REST API response format.","params":[{"name":"houseId","type_name":"String","description":"unique identifier of the house to which the members will be added.\n\n* `houseId`: A string representing the unique identifier for a house.","complex_type":true},{"name":"request","type_name":"AddHouseMemberRequest","description":"AddHouseMemberRequest object containing the member details to be added to the specified house, which is used to perform the actual addition of members to the house in the function.\n\n* `houseId`: The ID of the house to which members will be added.\n* `request.getMembers()`: A set of `HouseMemberDTO` objects representing the new members to be added to the house.","complex_type":true}],"returns":{"type_name":"AddHouseMemberResponse","description":"a `ResponseEntity` object containing the updated member list for the specified house.\n\n* `AddHouseMemberResponse`: This class represents the response to the API request to add members to a house. It contains a list of `HouseMember` objects, which are converted from the `Set<HouseMember>` returned by the `addHouseMembers` function.\n* `Members`: This attribute is a list of `HouseMember` objects, representing the added members to the house.\n* `size`: This attribute represents the number of members added to the house.\n\nThe output of the `addHouseMembers` function can be destructured as follows:\n\n* If the `savedHouseMembers` set is empty and the `request.getMembers()` set is not empty, the response will have a status code of `NOT_FOUND`.\n* Otherwise, the response will have a status code of `CREATED` and contain a list of `HouseMember` objects in the `Members` attribute.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n    // TODO: implement method body\n}\n","description":""},"name":"addHouseMembers","code":"@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2},"item_type":"method","length":18},{"id":"22876b22-d79b-dd96-ba45-ad77aadecf9f","ancestors":["a1e7cd2a-3497-b391-9248-37998703a215"],"type":"function","description":"deletes a member from a house based on the provided house ID and member ID, returning a HTTP response indicating the result of the operation.","params":[{"name":"houseId","type_name":"String","description":"identifier of the house for which a member is being deleted.\n\n* `houseId`: A string representing the unique identifier for a house. It could be a UUID or any other distinct identifier assigned to the house.","complex_type":true},{"name":"memberId","type_name":"String","description":"ID of the member to be deleted from the specified house.\n\n* `houseId`: A string representing the unique identifier for a house.\n* `memberId`: A string representing the unique identifier for a member within a house.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a HTTP `NO_CONTENT` status code if the member was successfully deleted, otherwise a `NOT_FOUND` status code.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the member was successfully deleted from the house.\n* `HttpStatus.NOT_FOUND`: This indicates that the member could not be found in the house, likely because it does not exist or has been deleted by someone else.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\", \n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}\n","description":""},"name":"deleteHouseMember","code":"@Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":112,"insert":112,"offset":" ","indent":2},"item_type":"method","length":11}]}}}