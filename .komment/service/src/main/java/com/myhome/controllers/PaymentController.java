{"name":"PaymentController.java","path":"service/src/main/java/com/myhome/controllers/PaymentController.java","content":{"structured":{"description":"A REST controller for managing payments in a housing community. It provides endpoints for scheduling payments, listing payment details, and listing all member payments. It also provides an endpoint for listing all admin scheduled payments. The code uses several packages including Lombok, Spring Data JPA, Spring Web Flux, and Schedule Payment API Response Mapper.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"6f1e4eef-ba01-e299-9344-f1e6c538cdde","ancestors":[],"type":"function","description":"TODO","name":"PaymentController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0},"item_type":"class","length":94},{"id":"defbd125-fc85-d387-4142-8e92d7abd671","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"receives a request to schedule a payment for a member of a community, checks if the user is an admin of the community house, and schedules the payment or returns a 404 status code if the user is not an admin.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"SchedulePaymentRequest object that contains information necessary to schedule a payment.\n\n* `request.getMemberId()`: The ID of the house member for whom payment is to be scheduled.\n* `request.getAdminId()`: The ID of the community admin who is authorizing the payment.\n\nIn summary, the function receives a `SchedulePaymentRequest` object as input, which contains information about the member and admin involved in scheduling the payment.","complex_type":true}],"returns":{"type_name":"SchedulePaymentResponse","description":"a `SchedulePaymentResponse` object containing the scheduled payment information.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request. The `status` field indicates the HTTP status code of the response, while the `body` field contains the actual response data.\n* `HttpStatus`: This is the HTTP status code associated with the response, indicating whether the request was successful (e.g., 200 OK) or not (e.g., 404 Not Found).\n* `SchedulePaymentResponse`: This class represents the response to the `schedulePayment` function, which contains information about the scheduled payment.\n* `paymentResponse`: This is a field within the `SchedulePaymentResponse` class that contains the actual payment response data.\n\nThe various attributes of the `paymentResponse` object are as follows:\n\n* `status`: This indicates the status of the payment (e.g., scheduled, failed, etc.).\n* `id`: This is a unique identifier for the payment.\n* `amount`: This is the amount of the payment.\n* `dueDate`: This is the date on which the payment is due.\n* `paidDate`: This is the date on which the payment was made (if applicable).\n* `adminId`: This is the ID of the community admin who scheduled the payment.\n* `houseMemberId`: This is the ID of the house member for whom the payment was scheduled.","complex_type":true},"usage":{"language":"java","code":"SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setMemberId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setAdminId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setCommunityId(\"5f16d7b8a3e0c39dd221b39e\");\nrequest.setAmount(BigDecimal.valueOf(5));\nrequest.setDueDate(new Date());\n","description":"\nIn the above example, we are creating a SchedulePaymentRequest object and setting the memberId, adminId, communityId, amount, and due date fields to some valid values. The method will then use these values to retrieve the relevant HouseMember, User, and Community objects from the database, perform checks on their validity, and proceed with scheduling the payment using the provided information.\n\nIt is important to note that the example above assumes that there are valid objects present in the database for the memberId, adminId, and communityId specified. If one or more of these values do not refer to a valid object, the method will throw an exception indicating such."},"name":"schedulePayment","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"f888513d-af44-92b9-114f-f2038ab127ea","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"checks whether a specified User is an admin of a Community House by checking if the User's ID exists in the community House's list of admins.","params":[{"name":"communityHouse","type_name":"CommunityHouse","description":"CommunityHouse object that is being checked for an admin role, and it provides the necessary context for the function to determine if the specified User is an admin of the community house.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, which likely has various attributes and methods related to managing a community house.\n* `getCommunity()`: This method returns a reference to the community associated with the `communityHouse` object.\n* `getAdmins()`: This method returns a list of User objects representing the admins of the community associated with the `communityHouse` object.","complex_type":true},{"name":"admin","type_name":"User","description":"User for whom the method checks if they are an administrator of the CommunityHouse.\n\n* `CommunityHouse communityHouse`: This is an instance of the `CommunityHouse` class, which contains information about a community house.\n* `getAdmins()`: This method returns a list of `User` objects that represent the administrators of the community house.\n* `contains(admin)`: This method checks if the specified `User` object is present in the list of admins returned by `getAdmins()`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified user is an administrator of the community house.","complex_type":false},"usage":{"language":"java","code":"public class CommunityHouse {\n  private Community community;\n  // ... other fields\n}\n\npublic class Community {\n  private List<User> admins;\n  // ... other fields\n}\n\npublic class User {\n  private String userId;\n  // ... other fields\n}\n","description":"\nGiven the above classes, here is an example usage of isUserAdminOfCommunityHouse:\n"},"name":"isUserAdminOfCommunityHouse","code":"private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"82ed1850-124c-2b97-4747-bbedba3afb5f","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"retrieves payment details for a given ID and maps them to a `SchedulePaymentResponse`. It returns a `ResponseEntity` with the payment details or an error message if they do not exist.","params":[{"name":"paymentId","type_name":"String","description":"unique identifier for the payment for which details are requested.\n\nlog.trace(\"Received request to get details about a payment with id[{}]\", paymentId)","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the payment details if the payment ID exists, or a `ResponseEntity.notFound()` object otherwise.\n\n* `ResponseEntity<SchedulePaymentResponse>`: This is the overall response object that contains the payment details as well as any additional information, such as error messages or HTTP status codes.\n* `paymentId`: The unique identifier for the payment being retrieved.\n* `paymentService`: An instance of the `PaymentService` class, which provides methods for interacting with the payment system.\n* `getPaymentDetails()`: A method that retrieves the payment details for the specified payment ID.\n* `map(Function<PaymentResponse, ResponseEntity<SchedulePaymentResponse>> mapper)`: This line applies a mapping function to the payment response object, which transforms it into a `ResponseEntity` object with an `ok` status code. The mapper function is defined as `schedulePaymentApiMapper::paymentToSchedulePaymentResponse`, which maps the payment response to a `SchedulePaymentResponse` object.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line provides an alternative value for the `ResponseEntity` object if the `getPaymentDetails()` method returns a `null` or an empty list. It creates a new `ResponseEntity` object with an `HTTP status code of 404 (Not Found)`.","complex_type":true},"usage":{"language":"java","code":"public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n}\n","description":"\nIn this example, the listPaymentDetails method takes in a String paymentId and returns a ResponseEntity of type SchedulePaymentResponse. \nThe method first uses the paymentService to get details about the given paymentId using the getPaymentDetails method. The result is then mapped to an object of type Payment using schedulePaymentApiMapper::paymentToSchedulePaymentResponse. If this mapping operation results in a response of type ResponseEntity, it returns that response directly. If not, it maps the null value returned by the getPaymentDetails method to a ResponseEntity with status code NOT_FOUND."},"name":"listPaymentDetails","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":91,"insert":91,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"8033a785-eba2-e0b6-574a-cee10896fcde","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"retrieves the payments for a specific house member and maps them to a response entity.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the member for whom the payments are to be listed, and it is used to filter the payments returned by the function.\n\n* `log.trace()`: This line logs a message to the trace level indicating that a request has been received to list all payments for a specific member with the given `memberId`.\n* `paymentService.getHouseMember(memberId)`: This line retrieves a `PaymentService` object that represents the payment service used by the application. The method takes the `memberId` as an input and returns a `HouseMember` object representing the member for whom the payments are being listed.\n* `paymentService.getPaymentsByMember(memberId)`: This line retrieves a list of `Payment` objects that belong to the specified `memberId`. The method takes the `memberId` as an input and returns a list of `Payment` objects.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`: This line explains the mapping between the `Payment` object and the corresponding `RestApiResponse` object. The `schedulePaymentApiMapper` is an object that performs mappings between different objects, in this case, between `Payment` and `RestApiResponse`.\n* `new ListMemberPaymentsResponse().payments(memberPayments)`: This line creates a new instance of the `ListMemberPaymentsResponse` class and sets the `payments` field to the list of `Payment` objects returned by the previous mappings. The `payments` field is a list of `Payment` objects, each representing a payment made by or on behalf of the specified member.\n* `ResponseEntity.ok().build()`: This line creates a new instance of the `ResponseEntity` class with an `statusCode` of 200 (OK) and builds the response entity. The `ResponseEntity` class is a generic class that represents a response entity, which can be used to return responses from a web service.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a list of `Payment` objects.\n\n* `ResponseEntity<ListMemberPaymentsResponse>` is an entity that contains a list of member payments in JSON format.\n* `payments` is a list of `MemberPayment` objects, which represent the payments made by a house member.\n* `ListMemberPaymentsResponse` is a class that defines the structure of the response, including the list of member payments.\n* `orElseGet()` is a method that allows for the creation of a default response entity if the function fails to produce a valid response.\n* `map()` methods are used to transform the input data into the desired output format.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nSchedulePaymentApi schedulePaymentApi;\n\n// ...\n\nResponseEntity<ListMemberPaymentsResponse> response = schedulePaymentApi.listAllMemberPayments(\"memberId\");\n","description":"\nThis is an example of how a method to list all the payments for a house member with the given id \"memberId\" would be used. It injects an instance of SchedulePaymentApi, which has been autowired into this controller class, and then calls the listAllMemberPayments method on it, passing in the string \"memberId\". The response entity returned by this method is then stored in the variable response.\n\nThis example assumes that the method has access to a SchedulePaymentApi instance through dependency injection. It also assumes that the \"memberId\" parameter represents a valid member id in the system. If not, it will throw an error and fail."},"name":"listAllMemberPayments","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":101,"insert":101,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"ea53737a-b821-ebad-b146-1bdd7b579138","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"retrieves a list of payments scheduled by an admin based on their ID, checks if the admin is in the specified community, and returns a ResponseEntity with the list of payments or a NotFound response if the admin is not found in the community.","params":[{"name":"communityId","type_name":"String","description":"community that the admin belongs to, which is used to filter the payments listed in the response.\n\n* `communityId`: This is the identifier for a community in the application. It could be an integer or a UUID.","complex_type":true},{"name":"adminId","type_name":"String","description":"ID of the administrator for whom the scheduled payments are being listed, and is used to filter the payments returned in the response.\n\n* `communityId`: The identifier of the community to which the admin belongs.\n* `adminId`: The identifier of the admin for whom scheduled payments are to be listed.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page number and size of the payment list that the user wants to view, allowing the function to return only the relevant payments for the given admin id.\n\n* `communityId`: A string representing the community ID.\n* `adminId`: A string representing the admin ID.\n* `isAdminInGivenCommunity`: A boolean indicating whether the given admin is in the specified community.\n\nThese properties are used to filter and retrieve payments scheduled by the admin with the given ID, as described in the function implementation.","complex_type":true}],"returns":{"type_name":"ListAdminPaymentsResponse","description":"a `ListAdminPaymentsResponse` object containing the scheduled payments for the given admin and community.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin and community.\n* `pageInfo`: A `PageInfo` object containing information about the total number of payments, the number of payments in the current page, and the total number of pages.\n\nThe function first checks if the admin is present in the given community using the `isAdminInGivenCommunity` method. If the admin is present, it retrieves the scheduled payments for that admin using the `paymentService.getPaymentsByAdmin()` method. The payments are then mapped to an `AdminPaymentSet` using the `schedulePaymentApiMapper`, and the resulting set of `AdminPayment` objects is returned as the `payments` field of the response. Finally, the function returns a `ResponseEntity` object with the response body containing the `ListAdminPaymentsResponse`.","complex_type":true},"usage":{"language":"java","code":"Pageable pageable = new PageRequest(0, 10); // PageRequest(page number, size)\nString communityId = \"some_community_id\";\nString adminId = \"admin_user_id\";\nListAdminPaymentsResponse response = schedulePaymentService.listAllAdminScheduledPayments(communityId, adminId, pageable);\nif (response.hasContent()) { // Check if there are any payments to return.\n    List<AdminPayment> adminPayments = response.getPayments(); // Get the list of AdminPayment objects from the response.\n    for (AdminPayment payment : adminPayments) {\n        System.out.println(\"Payment ID: \" + payment.getId()); // Print the payment ID.\n        System.out.println(\"House Member Name: \" + payment.getMember().getName()); // Print the name of the house member.\n    }\n} else {\n    System.out.println(\"No payments found.\"); // There are no payments to return, print a message indicating such.\n}\n","description":"\nHere is an example on how method listAllAdminScheduledPayments could be tested:\n"},"name":"listAllAdminScheduledPayments","code":"@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":22},{"id":"d8c42817-d02f-ee91-d24d-8585cfc67dcc","ancestors":["6f1e4eef-ba01-e299-9344-f1e6c538cdde"],"type":"function","description":"checks if a user is an admin in a given community by querying the community details and admins, then filtering the admins based on the user ID and returning a boolean value.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of a community for which the admin status is being checked.\n\n* `communityId`: This is an identifier for a community, which is a crucial attribute in determining the admin status.\n* `Community`: This class represents a community and contains attributes such as `id`, `name`, `description`, and `admins`.\n* `getAdmins()`: This method returns a list of admins for the given community.\n* `map()`: This method applies a transformation to the result of the original call, in this case, transforming the list of admins into a stream.\n* `orElseThrow()`: This method provides an alternative value if the result of the function is `null`.","complex_type":true},{"name":"adminId","type_name":"String","description":"ID of the user who is being checked for administration in the specified community.\n\n* `adminId`: A String representing the ID of an administrator in the community.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* The method returns a `Boolean` value indicating whether the specified `adminId` is an admin in the given `communityId`.\n* The return value is generated by combining three streams:\n\t+ The first stream is obtained from the `communityService` by calling `getCommunityDetailsByIdWithAdmins()` and passing the `communityId` as argument. This stream contains the details of the community, including a list of admins.\n\t+ The second stream is obtained from the list of admins in the previous stream by applying the `map()` method to filter out only the admins whose `UserId` matches the `adminId` passed as argument.\n\t+ The third stream is obtained by calling the `orElseThrow()` method on the result of the previous two streams, which throws a `RuntimeException` if the community with the given `communityId` does not exist.\n\nIn summary, the function returns `true` if the specified `adminId` is an admin in the given `communityId`, and `false` otherwise.","complex_type":true},"usage":{"language":"java","code":"public void example() {\n    final CommunityService communityService = new CommunityService();\n    final String communityId = \"12345\";\n    final String adminId = \"admin1\";\n    if (isAdminInGivenCommunity(communityId, adminId)) {\n        System.out.println(\"Admin is in the given community\");\n    } else {\n        System.out.println(\"Admin is not in the given community\");\n    }\n}\n","description":""},"name":"isAdminInGivenCommunity","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2},"item_type":"method","length":7}]}}}