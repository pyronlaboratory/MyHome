{"name":"BookingController.java","path":"service/src/main/java/com/myhome/controllers/BookingController.java","content":{"structured":{"description":"A `BookingController` class that implements the `BookingsApi` interface. The controller handles delete booking request by calling the `deleteBooking()` method of the `BookingService` class, which is injected through dependency injection. The method returns a `ResponseEntity` object with a status code indicating whether the booking was successfully deleted or not.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9ed5ed66-42f6-98a0-934d-f3209f354f01","ancestors":[],"type":"function","description":"TODO","name":"BookingController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class BookingController implements BookingsApi {\n\n  private final BookingService bookingSDJpaService;\n\n  @Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":12,"insert":12,"offset":" ","indent":0},"item_type":"class","length":18},{"id":"ef180a5e-776f-f19a-5e41-75931d014428","ancestors":["9ed5ed66-42f6-98a0-934d-f3209f354f01"],"type":"function","description":"deletes a booking based on its amenity ID and ID, returning a HTTP response code indicating the outcome of the operation.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity for which a booking is to be deleted.\n\n* `amenityId`: A String representing the ID of an amenity.\n\nThe function uses the `bookingSDJpaService.deleteBooking(amenityId, bookingId)` method to delete a booking. The method takes two path variables, `amenityId` and `bookingId`, as input. If the booking is successfully deleted, a `HttpStatus.NO_CONTENT` response is returned. Otherwise, a `HttpStatus.NOT_FOUND` response is returned.","complex_type":true},{"name":"bookingId","type_name":"String","description":"ID of the booking to be deleted.\n\n* `amenityId`: The ID of the amenity associated with the booking to be deleted.\n* `bookingId`: The unique identifier of the booking to be deleted.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted.\n\n* `isBookingDeleted`: A boolean value indicating whether the booking was successfully deleted or not.\n* `HttpStatus`: The HTTP status code of the response entity, which is either `NO_CONTENT` or `NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"public class BookingControllerTest {\n  @Autowired\n  private MockMvc mockMvc;\n\n  @MockBean\n  private BookingService bookingSDJpaService;\n\n  @Test\n  public void testDeleteBooking() throws Exception {\n    String amenityId = \"123\";\n    String bookingId = \"456\";\n\n    // Mock the deleteBooking method to return true\n    when(bookingSDJpaService.deleteBooking(amenityId, bookingId)).thenReturn(true);\n\n    // Call the deleteBooking method with the given parameters\n    mockMvc.perform(delete(\"/api/bookings/{amenityId}/{bookingId}\", amenityId, bookingId))\n      .andExpect(status().isNoContent());\n  }\n}\n","description":"\nIn this test class, we use Mockito to mock the BookingService class and override the deleteBooking method. We then pass in a value for the path variables and assert that the response has a status code of HttpStatus.NO_CONTENT."},"name":"deleteBooking","code":"@Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2},"item_type":"method","length":10}]}}}