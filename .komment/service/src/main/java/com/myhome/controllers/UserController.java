{"name":"UserController.java","path":"service/src/main/java/com/myhome/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that implements the `UsersApi` interface. The controller handles various user-related operations such as signing up, listing all users, getting details of a specific user, resetting or forgetting passwords, and listing all housemates of a specific user. The code uses various packages including Spring Data, Spring Web, Lombok, Slf4j, and Apache Commons Lang.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"fc6d3bb0-0b05-c2b9-b046-a10a2d68e942","ancestors":[],"type":"function","description":"TODO","name":"UserController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0},"item_type":"class","length":96},{"id":"e7612635-8859-91bf-574d-02488f4d2ab6","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"receives a `CreateUserRequest` object, converts it into a `UserDto`, creates a new user in the system, and returns the created user as a `CreateUserResponse`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"user's sign-up request, which includes the user's information and other relevant details.\n\n* `@Valid`: This annotation indicates that the input `request` is validated by Spring Security's security context.\n* `CreateUserRequest`: This is the class that represents the request body for creating a new user. It has various attributes/properties, such as `username`, `email`, `password`, etc.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `CREATED` or `CONFLICT`, depending on whether the user was created successfully or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. The status code of the response is `HttpStatus.CREATED`, indicating that the user has been created successfully.\n* `body`: This is a reference to the `CreateUserResponse` object that contains information about the newly created user.\n* `map`: This method is used to map the `Optional<UserDto>` result of the `createUser()` method to a `CreateUserResponse` object. If the `Optional<UserDto>` is present, the `map` method returns a `ResponseEntity` with a status code of `HttpStatus.CREATED` and a body containing the `CreateUserResponse`. Otherwise, the `map` method returns a `ResponseEntity` with a status code of `HttpStatus.CONFLICT`.","complex_type":true},"usage":{"language":"java","code":"import com.myhome.api.UsersApi;\nimport com.myhome.model.CreateUserRequest;\nimport com.myhome.model.CreateUserResponse;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\npublic class UsersExample implements UsersApi {\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(\n    CreateUserRequest request) {\n    \n    // Example input for only ('request', 'CreateUserRequest')\n    CreateUserRequest createUserRequest = new CreateUserRequest();\n    createUserRequest.setName(\"Joe\");\n    createUserRequest.setEmail(\"joe@example.com\");\n    createUserRequest.setPassword(\"password123\");\n    \n    return usersApi.signUp(createUserRequest)\n      .map((ResponseEntity<CreateUserResponse> responseEntity) -> {\n        // The responseEntity body contains the created user\n        CreateUserResponse user = responseEntity.getBody();\n        \n        // Do something with the created user\n        System.out.println(user);\n        \n        return ResponseEntity.status(HttpStatus.OK).body(responseEntity.getBody());\n      })\n      .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n}\n","description":""},"name":"signUp","code":"@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"ba8888f5-4b15-f391-8445-c52067855ac5","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"receives a `Pageable` parameter and returns a `GetUserDetailsResponse` object containing a list of users fetched from the user service using the `listAll` method, and then maps the users to a REST API response format using the `userApiMapper`.","params":[{"name":"pageable","type_name":"Pageable","description":"pagination information for retrieving all users, allowing the listAllUsers method to retrieve a subset of users based on the current page number and page size.\n\n* `log.trace(\"Received request to list all users\")`: This line logs a message indicating that the method has received a request to list all users.\n\nThe `pageable` parameter is a `Pageable` object representing a page of user details to be retrieved. Its properties/attributes include:\n\n* `pageNumber`: The current page number being requested (int)\n* `pageSize`: The number of users per page (int)\n* `sort`: The field by which the users are sorted (string, e.g., \"username\")\n* `direction`: The direction of the sort (string, e.g., \"asc\" or \"desc\")","complex_type":true}],"returns":{"type_name":"GetUserDetailsResponse","description":"a list of `GetUserDetailsResponse` objects containing the details of all users.\n\n* `response`: This is the top-level object representing the response to the request. It contains a list of `User` objects, which are converted from the domain service's `Set<User>` return value using the `userApiMapper`.\n* `users`: This is a list of `User` objects, each containing attributes such as the user ID, username, email, and password.\n\nThe `listAllUsers` function returns a `ResponseEntity` object with an HTTP status code of OK (200) and the response body containing the list of users.","complex_type":true},"usage":{"language":"java","code":"import com.myhome.controllers.*;\nimport com.myhome.controllers.dto.UserDto;\nimport com.myhome.controllers.dto.mapper.HouseMemberMapper;\nimport com.myhome.controllers.dto.mapper.UserApiMapper;\nimport org.springframework.http.ResponseEntity;\n\npublic class Example {\n    public static void main(String[] args) {\n        //Creating a new user API mapper\n        UserApiMapper userApiMapper = new UserApiMapper();\n        \n        //Creating a new pageable object with 10 elements per page and a page number of 2\n        Pageable pageable = new PageRequest(10, 2);\n        \n        //Retrieving the list of users from the user service using the pageable object as input\n        Set<User> userDetails = userApiMapper.userSetToRestApiResponseUserSet(userService.listAll(pageable));\n    }\n}\n","description":""},"name":"listAllUsers","code":"@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"328545c6-1807-32b0-064d-04114f985050","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"receives a user ID and queries the user service to retrieve the user's details. It maps the response to a `GetUserDetailsResponse` object and returns it as a `ResponseEntity`.","params":[{"name":"userId","type_name":"String","description":"unique identifier of the user whose details are requested.\n\n* `log.trace()`: This line logs a message with the format `{}\"Received request to get details of user with Id[{}\"]`, where `userId` is the variable passed as an argument.\n* `userService.getUserDetails(userId)`: This line calls the `getUserDetails` method of the `userService` class, passing in `userId` as a parameter. This method retrieves the details of the user with the specified ID.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of `OK` and a body containing the details of the user.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents the response to the request. The status code of the response is set to `HttpStatus.OK` by default, indicating that the request was successful.\n* `body`: This property contains the actual response body, which in this case is a `GetUserDetailsResponseUser` object.\n* `map`: This method is used to map the `userDtoToGetUserDetailsResponse` function to the `ResponseEntity` instance. This function takes the `UserDTO` object as input and returns the corresponding `GetUserDetailsResponseUser` object.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"getUserDetails","code":"@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"41367849-892b-0489-1345-b36e3a0fa204","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"processes password reset requests by parsing the action type and executing the appropriate reset or request operation, returning an `ok` response if successful, or a `badRequest` response otherwise.","params":[{"name":"action","type_name":"String","description":"password action to be performed, which can be either \"FORGOT\" or \"RESET\".\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `action` parameter is validated to ensure it meets certain criteria.\n* `String`: The `action` parameter is a string representing the password action type.\n* `PasswordActionType parsedAction = PasswordActionType.valueOf(action)`: This line of code parses the `action` parameter into its corresponding `PasswordActionType`.\n* `parsedAction == PasswordActionType.FORGOT`: If the parsed `action` value is equal to `PasswordActionType.FORGOT`, then the method execution continues to the next line.\n* `parsedAction == PasswordActionType.RESET`: If the parsed `action` value is equal to `PasswordActionType.RESET`, then the method execution continues to the next line.\n\nIn summary, the `action` parameter is a string that represents the password action type and is used to determine the appropriate response to return.","complex_type":true},{"name":"forgotPasswordRequest","type_name":"ForgotPasswordRequest","description":"Forgot Password Request object that contains information required to reset the user's password.\n\n* `action`: A string parameter indicating the password action to be performed (either `FORGOT` or `RESET`).\n* `forgotPasswordRequest`: An object containing details about the password reset request, including the user's email address and a unique token.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an `ok` status code indicating successful execution of the function.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It contains information about the status code, body, and headers of the response.\n* `ok`: This is a boolean property of the `ResponseEntity` object, indicating whether the response is successful (true) or not (false).\n* `build`: This is a method of the `ResponseEntity` class that returns a new instance of the response with the specified status code, body, and headers.\n\nThe function itself takes two parameters: `action` and `@Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest`. The `action` parameter is a string that represents the type of password action being performed (either `FORGOT` or `RESET`). The `forgotPasswordRequest` parameter is an instance of the `ForgotPasswordRequest` class, which contains information about the user and the password reset request.\n\nThe function then uses the `parsedAction` variable to determine the appropriate action to take based on the value of `action`. If `parsedAction` is equal to `PasswordActionType.FORGOT`, the function calls the `userService.requestResetPassword()` method to initiate the password reset process. Otherwise, if `parsedAction` is equal to `PasswordActionType.RESET`, the function calls the `userService.resetPassword()` method to complete the password reset process.\n\nFinally, the function returns a new instance of the `ResponseEntity` class with a status code of 200 (OK) and a body containing the response message.","complex_type":true},"usage":{"language":"java","code":"public class ForgotPasswordRequest {\n  private String email;\n  \n  public String getEmail() {\n    return this.email;\n  }\n  \n  public void setEmail(String email) {\n    this.email = email;\n  }\n}\n\n// Example usage of usersPasswordPost method\nusersPasswordPost(\"FORGOT\", new ForgotPasswordRequest().setEmail(\"example@email.com\"));\n","description":"\nThe above example sets the action to FORGOT and passes a forgot password request with an email \"example@email.com\" to the usersPasswordPost method."},"name":"usersPasswordPost","code":"@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"8d023e37-ebb2-17ac-ee46-18eb552ac298","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"receives a user ID and pageable parameter, then uses the `houseService` to list all house members for the specified user, maps the result to a `RestApiResponseHouseMemberSet`, and returns a `ResponseEntity` with the list of house members.","params":[{"name":"userId","type_name":"String","description":"user for whom the list of all housemates is being requested.\n\n* `userId`: This represents the unique identifier for a user in the system. It is likely an instance of `Long`.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"pagination information for the list of house members, allowing for efficient retrieval of a subset of the total number of house members belonging to the user.\n\n* `userId`: the user ID for whom the housemembers are being listed (String)\n* `pageable`: a Pageable object specifying the pagination parameters (Pageable)","complex_type":true}],"returns":{"type_name":"ListHouseMember","description":"a `ResponseEntity` representing a list of house members for a given user.\n\n* `ResponseEntity<ListHouseMembersResponse>` represents an entity that contains a list of `HouseMemberSet` objects in a response format.\n* `ListHouseMembersResponse` is a class that contains a list of `HouseMember` objects, each representing a member of a house.\n* `map(houseService::listHouseMembersForHousesOfUserId)`: This method calls the `listHouseMembersForHousesOfUserId` method of the `houseService` class, which returns a list of `HouseMember` objects for all houses associated with the user ID passed in the request.\n* `map(HashSet::new)`: This method creates a new `HashSet` object to store the returned list of `HouseMember` objects.\n* `map(house MemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)`: This method converts each `HouseMember` object in the input list into a corresponding `HouseMemberSet` object, which is then added to the `HashSet`.\n* `map(ResponseEntity::ok)`: This method returns an `ResponseEntity` object with a status code of `200 OK`, indicating that the request was successful.\n* `orElse(ResponseEntity::notFound().build())`: This method provides an alternative return value in case the `listHouseMembersForHousesOfUserId` method fails, which is represented by a `ResponseEntity` object with a status code of `404 Not Found`.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate UserController userController;\n\n...\nString userId = \"userId\";\nPageable pageable = Pageable.unpaged();\nList<HouseMembers> housemates = userController.listAllHousemates(userId, pageable);\n","description":"\nThe method listAllHousemates is used to get the members of all houses that belong to a specific user. The input parameters are: 1) userId (String) - the Id of the user who owns the houses we want to know about. 2) Pageable pageable (Pageable) - how many records do we want per page and what is the current page number.\nThe method returns a List<HouseMembers> which contains all members of all houses that belong to the specified user."},"name":"listAllHousemates","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"10c9a3dc-82b8-f08e-8a43-e470d6042df6","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"verifies the email confirmation token for a given user ID and returns a response entity indicating whether the email was confirmed successfully or not.","params":[{"name":"userId","type_name":"String","description":"user whose email is being confirmed.\n\n* `userService`: This is the service class that manages user-related operations in the application.\n* `emailConfirmToken`: A unique token generated for the user to confirm their email address.","complex_type":true},{"name":"emailConfirmToken","type_name":"String","description":"16-digit token that was sent to the user's email address for confirmation of their email address.\n\n* `userId`: The unique identifier of the user whose email is being confirmed.\n* `emailConfirmToken`: A token provided by the system to confirm the user's email address.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an `ok` status and a built-in `Void` body.\n\n* `ResponseEntity.ok().build()`: This is a response entity that indicates a successful execution of the function. It has an `OK` status code and a `build()` method that returns the entity with the specified status code.\n* `ResponseEntity.badRequest().build()`: This is a response entity that indicates an error in the function execution. It has a `BAD_REQUEST` status code and a `build()` method that returns the entity with the specified status code.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = confirmEmail(USER_ID, EMAIL_CONFIRM_TOKEN);\nif (response.getStatusCode().is2xxSuccessful()) {\n    // Email was confirmed successfully\n} else {\n    // Email could not be confirmed\n}\n","description":""},"name":"confirmEmail","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":126,"insert":126,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"677922ab-b6bd-c89b-a048-442130493e6c","ancestors":["fc6d3bb0-0b05-c2b9-b046-a10a2d68e942"],"type":"function","description":"resends an email confirmation to a user if one was previously sent and failed, returning a `ResponseEntity` with a status of either `ok` or `badRequest` depending on the result of the resending operation.","params":[{"name":"userId","type_name":"String","description":"identifier of the user whose email confirmation is being resent.\n\n* `userService`: A service class that performs user-related operations, including resending email confirmations.\n* `resendEmailConfirm(userId)`: An operation called by the `resendConfirmEmailMail` function to resend an email confirmation to the specified `userId`. The method returns a boolean value indicating whether the resending was successful or not.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `ok` or `badRequest`, indicating whether the email confirmation resend was successful or not.\n\n* `ResponseEntity.ok()`: indicates that the email confirmation was resent successfully.\n* `ResponseEntity.badRequest()`: indicates that there was an error while resending the email confirmation.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n","description":""},"name":"resendConfirmEmailMail","code":"@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2},"item_type":"method","length":9}]}}}