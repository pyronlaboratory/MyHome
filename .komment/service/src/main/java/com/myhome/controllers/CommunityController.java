{"name":"CommunityController.java","path":"service/src/main/java/com/myhome/controllers/CommunityController.java","content":{"structured":{"description":"An API endpoint for managing communities in a web application. The API handles various operations such as listing all communities, listing community details, adding admins and houses to a community, removing admins and houses from a community, and deleting a community. The code uses Spring WebFlux as the web framework, and Spring Data JPA as the data access layer. It also utilizes various Spring packages for security, configuration, and validation.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9984ba99-3ce6-47b3-e249-bca0c79f98ee","ancestors":[],"type":"function","description":"TODO","name":"CommunityController","code":"@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":56,"insert":56,"offset":" ","indent":0},"item_type":"class","length":152},{"id":"93b9434d-8336-e187-8745-96b518bc263d","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a request to create a new community, maps it to a `CreateCommunityRequestDto`, creates a new community using the mapped data, and returns the resulting `CreateCommunityResponse`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object passed from the client, containing the details of the community to be created.\n\nThe `@Valid` annotation on the `CreateCommunityRequest` parameter indicates that the request body must be validated against the specified schema.\n\nThe `log.trace()` statement logs a trace message indicating that the create community request has been received.\n\nThe `communityApiMapper.createCommunityRequestToCommunityDto(request)` method is used to map the request body to a `CommunityDto` object, which represents the community in a more structured format.\n\nThe `communityService.createCommunity(requestCommunityDto)` method creates a new community instance using the data provided in the `CommunityDto`.\n\nFinally, the `communityApiMapper.communityToCreateCommunityResponse(createdCommunity)` method maps the created community instance to a `CreateCommunityResponse` object, which represents the response to the create community request.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the created community details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. In this case, the status code of the response is `HttpStatus.CREATED`, indicating that the community has been created successfully.\n* `body`: This property contains the actual response entity, which in this case is a `CreateCommunityResponse` object. This object contains information about the newly created community, such as its ID, name, and description.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityApiController communityApiController;\n\n...\n\nCreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"Example Community\");\nrequest.setDescription(\"Example Description\");\n\nCreateCommunityResponse response = communityApiController.createCommunity(request);\n\nassertEquals(HttpStatus.CREATED, response.getStatusCode());\n","description":"\nThe request is created with the name and description of \"Example Community\" and \"Example Description\". The community is then created using the createCommunity method in the controller. \n\nNote that the status code returned by the createCommunity method should be equal to HttpStatus.CREATED. This means that a new community has been successfully created, which can be verified by checking the status code of the response object. The response object contains the details of the newly created community, such as its ID and name."},"name":"createCommunity","code":"@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"d53ae619-a9b8-609d-c147-036537e00ec9","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a `Pageable` object as input, and retrieves all community details from the service. It then maps the community details to a REST API response format using an API mapper, before returning the response in HTTP OK status with the list of communities.","params":[{"name":"pageable","type_name":"Pageable","description":"page number and page size for listing all communities, allowing for pagination of results.\n\n* `@PageableDefault(size = 200)`: This annotation sets the default page size to 200.\n* `Pageable pageable`: This is the input parameter for the function, which represents a pagination object that allows for retrieving a subset of community details based on various criteria such as page number, page size, sort order, and filter parameters.","complex_type":true}],"returns":{"type_name":"GetCommunityDetailsResponse","description":"a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This is the class that represents the response to the API call. It has a list of `Community` objects as its attribute.\n* `communities`: This is a list of `Community` objects, which are the result of mapping the `communityService.listAll(pageable)` method output to the `GetCommunityDetailsResponseCommunitySet`.\n* `HttpStatus.OK`: This is the HTTP status code returned by the API, indicating that the request was successful.","complex_type":true},"usage":{"language":"java","code":"// assuming Pageable object pageable has been instantiated earlier\nResponseEntity<GetCommunityDetailsResponse> response = communityApiController.listAllCommunities(pageable);\nif (response.getStatusCode() == HttpStatus.OK) {\n    // do something with the community details\n} else {\n    log.warn(\"Failed to retrieve community details: {}\", response.getBody().toString());\n}\n","description":"\nExplanation:\nThe method `listAllCommunities` is a GET request that takes in a `Pageable` object called `pageable`. This object is used to specify the page number and page size of the results. The method returns a `ResponseEntity<GetCommunityDetailsResponse>` which has an HTTP status code and a body containing the community details.\n\nThe example retrieves the community details using the `listAllCommunities` method and checks if the HTTP status code is 200 (OK). If the response is not OK, a warning message is logged. The community details are then used to perform some actions on the page."},"name":"listAllCommunity","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"15370c22-6600-3fa7-c64c-0aa429ad1318","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a community ID and retrieves the corresponding community details from the service, mapping the response to a `GetCommunityDetailsResponse` object and returning it as an `Ok` response entity.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which details are to be retrieved.\n\n* `log.trace(\"Received request to get details about community with id[{}]\", communityId)`: This line logs a message indicating that a request has been received to retrieve details about a community with the specified `communityId`.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` parameter is passed in from the URL path and can be accessed as a string variable within the function.\n* `communityService.getCommunityDetailsById(communityId)`: This line calls the `getCommunityDetailsById` method of the `communityService` class, which retrieves the details of a community with the specified `communityId`.\n* `map(communityApiMapper::communityToRestApiResponseCommunity)`: This line applies the `communityApiMapper` function to the result of the previous line, which maps the community object to a `GetCommunityDetailsResponse` object.\n* `map(Arrays::asList)`: This line converts the mapped result to a list of communities.\n* `map(HashSet::new)`: This line creates a new `HashSet` instance to hold the lists of communities.\n* `map(communities -> new GetCommunityDetailsResponse().communities(communities))`: This line applies the `communities` variable to the `GetCommunityDetailsResponse` object, setting the `communities` field to the list of communities retrieved.\n* `map(ResponseEntity::ok) OrElseGet(() -> ResponseEntity.notFound().build())`: This line either returns a `ResponseEntity` with status code 200 (OK) or creates a new `ResponseEntity` with status code 404 (NOT FOUND) if an error occurs.","complex_type":true}],"returns":{"type_name":"ResponseEntityGetCommunityDetailsResponse","description":"a `ResponseEntity` object with a status of `ok` and a list of community details.\n\n* `ResponseEntity<GetCommunityDetailsResponse>` is a class that represents a response entity containing the details of a community.\n* `getCommunityDetailsById(communityId)` is a method that returns a `Optional<GetCommunityDetailsResponse>` object, which contains the details of the community with the provided `communityId`, if it exists.\n* `map(Function<? super T, ? extends U> mapper)` is a method that takes a function `mapper` and applies it to the `Optional` object returned by `getCommunityDetailsById`. The resulting `U` object is then wrapped in a `ResponseEntity` object.\n* `map(Consumer<T> consumer)` is another method that takes a consumers `consumer` and applies it to the `Optional` object returned by `getCommunityDetailsById`. The resulting `U` object is then wrapped in a `ResponseEntity` object.\n* `orElseGet(() -> ResponseEntity.notFound().build())` is a method that returns an optional `ResponseEntity` object if the `Optional` object returned by `getCommunityDetailsById` is empty, otherwise it returns a `ResponseEntity` object with a status code of 404 (Not Found).\n\nOverall, the `listCommunityDetails` function returns a response entity containing the details of the community with the provided `communityId`, or a response entity with a status code of 404 if the community does not exist.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityService communityService;\n\n// Example usage\npublic void example() {\n  String communityId = \"12345\";\n  ResponseEntity<GetCommunityDetailsResponse> responseEntity =\n      communityService.listCommunityDetails(communityId);\n  if (responseEntity.getStatusCode().equals(HttpStatus.OK)) {\n    GetCommunityDetailsResponse response = responseEntity.getBody();\n    Community community = response.getCommunities().iterator().next();\n    log.info(\"The name of the first community is: {}\", community.getName());\n  } else {\n    log.error(\"Failed to retrieve details for community with id[{}]\", communityId);\n  }\n}\n","description":"\nIn this example, the method listCommunityDetails() takes in a String argument representing a community ID and returns a ResponseEntity<GetCommunityDetailsResponse> object. The body of the ResponseEntity object contains a GetCommunityDetailsResponse object, which has a List<Community> called communities. In order to get the first community from the response entity, we can call iterator() on the list of communities. We then retrieve the first community by calling next() and store it in the variable community. We log the name of this community by using its getName() method.\nPlease note that this example is only intended for illustration purposes. This code should be unit tested and validated to ensure that it works correctly. It should not be used directly."},"name":"listCommunityDetails","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"cdd88647-5b57-978b-e547-c66d4394466a","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a community ID and page number, retrieves the list of admins for that community from the database using the `findCommunityAdminsById` method, maps the results to a `RestApiResponseCommunityAdminSet`, and returns a `ResponseEntity` with the list of admins.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which the list of admins is being requested.\n\n* `communityId`: This is the primary key for the community table. It is a String representing the ID of the community.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"paging information for the list of community admins, including the page number and size, which are used to retrieve a subset of the admins from the database.\n\n* `@PageableDefault(size = 200)` - Specifies the default page size for the list of community admins, which is set to 200 in this example.\n* `Pageable pageable` - Represents a pagination object that can be used to page the results of the list operation. It has various properties such as `size`, `pageNumber`, and `sort`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a `ListCommunityAdminsResponse` object with the listed admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the type of the output, which represents an entity that contains the list of community admins in a response.\n* `ListCommunityAdminsResponse`: This is the inner class of the `ResponseEntity`, which contains the list of community admins in a response.\n* `admins`: This is a field of the `ListCommunityAdminsResponse` class, which represents the list of community admins. It is a non-nullable reference to a list of `CommunityAdmin` objects.\n* `ok`: This is a field of the `ResponseEntity` class, which indicates whether the response is successful or not. If the response is successful, this field will be set to `true`, otherwise it will be set to `false`.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<ListCommunityAdminsResponse> response = communityApiController.listCommunityAdmins(\n    \"community_id\", PageableDefault.ofSize(200));\n","description":"\n1. The first parameter is the id of the community whose admins we want to list.\n2. The second parameter is the paging parameters for the method, which includes the number of items per page and the current page number.\n3. The method returns a response entity that wraps the list of admins in the ListCommunityAdminsResponse object.\n4. If the community with the given id does not exist, then the response will contain no admins and a 204 status code indicating \"no content\" (HTTP Status 204).\n5. If there is an error during the execution of this method, then the response will contain an empty list of admins and a non-2xx HTTP status code indicating failure.\n6. The paging parameters are used to paginate the result set of this query. For example, if we have 100 admins in our community and we want to retrieve them in 5 page chunks with 20 items per page, then we can use the following request:\n"},"name":"listCommunityAdmins","code":"@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"40e03388-b40e-ee8f-8e47-1e9c9ce0802d","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a community ID and page number, queries the community service for all houses associated with that community, maps them to a HashSet, and then transforms them into a REST API response using the `communityApiMapper`. The final response is an `Ok` status code.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the user wants to list all houses.\n\n* `String communityId`: This is the unique identifier for the community whose houses will be listed.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` parameter is passed through the URL path and can be accessed as a String value within the function.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page parameters for the list of houses, such as the number of houses to display per page and the current page number.\n\n* `size`: The page size, which is 200 in this case.\n* `sort`: The sorting direction and field for the community houses list, which is not specified here.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object of type `GetHouseDetailsResponse` containing a list of community houses.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the type of the output returned by the function. It represents an entity that contains a response to the list community houses request.\n* `GetHouseDetailsResponse`: This is a class that defines the properties and attributes of the response. It has a field called `houses` that is a set of `CommunityHouse` objects, representing the list of houses for the specified community.\n* `CommunityHouse`: This is a class that defines the properties and attributes of each house in the list. It has fields for the house ID, name, and other relevant details.\n* `Pageable`: This is an interface that provides methods for navigating through a page of results. In this case, it is used to define the page size and other parameters for pagination.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n    @PathVariable String communityId,\n    @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n@Service\npublic class CommunityService {\n    @Autowired private CommunityRepository communityRepository;\n\n    public Optional<Community> findCommunityHousesById(String communityId, Pageable pageable) {\n        return communityRepository.findAllByHouseId(communityId, pageable);\n    }\n}\n","description":"\nThe above code is an example of how the service method listCommunityHouses would be used in a controller class with the appropriate annotation and parameters:\n"},"name":"listCommunityHouses","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":118,"insert":118,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"868c8320-60ef-f3b2-f141-a351208a6de1","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"adds admins to a community based on a request received from the client. It first checks if the community exists, and then adds the requested admins to the community's admin list using the `communityService`. If successful, it returns a `ResponseEntity` with a `HttpStatus.CREATED` code and the updated admin set.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the admins are being added.\n\n* `communityId`: A string representing the ID of the community to which admins are being added.\n* `@PathVariable`: An annotation indicating that the `communityId` is passed as a path variable from the URL.","complex_type":true},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the admins to be added to the community, which is passed into the communityService method for adding admins to the community.\n\n* `@Valid`: This annotation indicates that the `AddCommunityAdminRequest` object must be valid according to its schema definition.\n* `@PathVariable String communityId`: This variable represents the ID of the community for which admins are being added.\n* `@RequestBody AddCommunityAdminRequest request`: This variable contains the `AddCommunityAdminRequest` object passed from the client as a JSON body in the HTTP request.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` with a `HttpStatus.CREATED` code and an `AddCommunityAdminResponse` object containing the set of admins for the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web request. The `status` attribute of this class indicates the HTTP status code of the response, while the `body` attribute contains the actual response data.\n* `HttpStatus`: This is an enum that represents the HTTP status code of the response. In this case, it can be either `CREATED` or `NOT_FOUND`.\n* `AddCommunityAdminResponse`: This is a custom class that represents the response to the `addAdminsToCommunity` method. It has an `admins` field that contains a set of user IDs, representing the admins added to the community.\n* `Set<String>`: This is a set data structure that contains the user IDs of the admins added to the community. Each element in the set is a `String` representing a user ID.","complex_type":true},"usage":{"language":"java","code":"AddCommunityAdminRequest request = new AddCommunityAdminRequest();\nrequest.setAdmins(List.of(\"1234\", \"5678\"));\nResponseEntity<AddCommunityAdminResponse> response = communityApiController.addCommunityAdmins(\n    \"community-id\", request);\n","description":"\nHere, we create an AddCommunityAdminRequest object and set its admins field to a list of user IDs. We then use the addCommunityAdmins method to add those users as administrators to a community with ID \"community-id\". The response from this method is stored in the response variable. \nIt's important to note that, even though we create an object and set its fields to specific values, it's not guaranteed that our code will always work correctly. For instance, if there are invalid characters or spaces in any of the strings passed as user IDs, this could lead to errors when the service tries to process the request. Therefore, it's crucial to test our code thoroughly before releasing it to production."},"name":"addCommunityAdmins","code":"@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":132,"insert":132,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"c77b9b74-f502-6b8d-d844-f23f3d67bb51","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a request to add houses to a community, extracts the house IDs and names from the request body, adds the houses to the community using the community service, and returns the added houses in a response entity.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the houses are being added.\n\n* `communityId`: A string representing the ID of the community to which houses will be added.","complex_type":true},{"name":"request","type_name":"AddCommunityHouseRequest","description":"AddCommunityHouseRequest object containing the house names to be added to the community.\n\n* `@Valid`: Indicates that the request body must be valid according to the constraints defined in the Java classes or annotations.\n* `@PathVariable`: Specifies that the `communityId` parameter is passed as a path variable from the URL.\n* `@RequestBody`: Indicates that the entire `AddCommunityHouseRequest` object should be deserialized and used as the request body.","complex_type":true}],"returns":{"type_name":"AddCommunityHouseResponse","description":"a `ResponseEntity` object with a status code of `CREATED` and a `AddCommunityHouseResponse` object containing the newly added houses.\n\n* `AddCommunityHouseResponse`: This class represents the response to the API request. It has a single field, `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: This is an enumeration that indicates the status code of the response. In this case, it can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This class represents the overall response object, which contains the status code and body (in this case, the `AddCommunityHouseResponse`).","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityApiController communityApiController;\n\n// ...\n\nAddCommunityHouseRequest request = new AddCommunityHouseRequest();\nrequest.setHouses(new HashSet<>() {{\n    add(new CommunityHouseName(\"house1\"));\n    add(new CommunityHouseName(\"house2\"));\n}});\n\nResponseEntity<AddCommunityHouseResponse> response = communityApiController.addCommunityHouses(\"community_id\", request);\n","description":"\nIn this example, the method is called with a \"communityId\" of type String, and an instance of AddCommunityHouseRequest as its second argument. The method returns an object of ResponseEntity of type AddCommunityHouseResponse. The body of the response entity contains a Set of Strings representing house IDs that were successfully added to the community. If there are no houses in the request or no communities exist with the provided ID, the status code returned will be BAD_REQUEST and the body of the response entity will be empty."},"name":"addCommunityHouses","code":"@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"8d7a42eb-52b5-5aa0-ba41-f311cd624657","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"receives a request to delete a house from a community and performs the necessary actions to remove it, including checking the existence of the community and the house, and returning a response entity indicating whether the operation was successful or not.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the house belongs, which is used to retrieve the details of the community and remove the house from it.\n\n* `communityId`: A string representing the unique identifier for a community.\n* `houseId`: A string representing the unique identifier for a house within a community.","complex_type":true},{"name":"houseId","type_name":"String","description":"12-digit unique identifier of the house to be deleted within the specified community.\n\n* `communityId`: The ID of the community that the house belongs to.\n* `houseId`: The ID of the house to be removed from the community.","complex_type":true}],"returns":{"type_name":"ResponseEntityVoid","description":"a `ResponseEntity` object representing a successful removal of the house from the specified community.\n\n* `ResponseEntity<Void>`: The type of the output is a response entity with a Void value.\n* `<Void>`: The value of the ResponseEntity is Void, indicating that no content was returned.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line explains that if the `communityOptional` Optional is empty, the output will be a ResponseEntity with a Not Found status code (404).","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n","description":"\nHere is an explanation of the code:\n"},"name":"removeCommunityHouse","code":"@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":167,"insert":167,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"cd9bc1e0-500d-a496-cc40-bb3c06f90803","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"removes an admin from a community based on their ID, returning a HTTP status code indicating the result of the operation.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which the admin is to be removed.\n\n* `communityId`: This parameter represents the unique identifier for a community in the system. It is an immutable string value.","complex_type":true},{"name":"adminId","type_name":"String","description":"ID of the admin to be removed from the community.\n\n* `communityId`: A string representing the ID of the community to remove the admin from.\n* `adminId`: A string representing the ID of the admin to be removed from the community.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the admin was successfully removed or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and resulted in no content being sent to the client. It is a common status code for delete operations, as there is no content to return.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested admin could not be found in the community. This can happen if the admin ID is invalid or if the admin does not exist in the community.","complex_type":true},"usage":{"language":"java","code":"public void testRemoveAdminFromCommunity() {\n  // Arrange\n  String communityId = \"community-1\";\n  String adminId = \"admin-1\";\n\n  // Act\n  ResponseEntity<Void> response = removeAdminFromCommunity(communityId, adminId);\n\n  // Assert\n  assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n}\n","description":""},"name":"removeAdminFromCommunity","code":"@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":183,"insert":183,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"9bbad6f5-9a1f-bc92-1547-2037cf0f7e88","ancestors":["9984ba99-3ce6-47b3-e249-bca0c79f98ee"],"type":"function","description":"deletes a community identified by its ID. It uses the `communityService` to delete the community and returns an HTTP response based on whether the deletion was successful or not.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to be deleted.\n\n* `communityId`: This is the unique identifier for a community within the application's database.\n* `log.trace(\"Received delete community request\")`: This line logs a message to the application's log system indicating that a delete community request has been received.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* HttpStatus: The status code of the response entity, which indicates whether the request was successful (NO_CONTENT) or not found (NOT_FOUND).\n* Void: The type of the response entity, indicating that it does not contain any data.","complex_type":true},"usage":{"language":"java","code":"public class CommunityControllerTest {\n  @Test\n  void deleteCommunity() {\n    // Arrange\n    CommunityService communityService = new CommunityService();\n    String id = \"1234567890\";\n    communityService.deleteCommunity(id);\n\n    // Act\n    boolean isDeleted = communityService.getCommunityDetailsById(id).isEmpty();\n\n    // Assert\n    assertTrue(isDeleted);\n  }\n}\n","description":""},"name":"deleteCommunity","code":"@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":197,"insert":197,"offset":" ","indent":2},"item_type":"method","length":10}]}}}