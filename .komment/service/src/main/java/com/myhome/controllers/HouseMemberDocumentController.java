{"name":"HouseMemberDocumentController.java","path":"service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing house member documents. The controller uses Spring WebFlux and Lombok to handle HTTP requests and generate boilerplate code, respectively. The controller has several methods: getHouseMemberDocument, uploadHouseMemberDocument, updateHouseMemberDocument, and deleteHouseMemberDocument. These methods handle requests for retrieving, adding, updating, and deleting house member documents, respectively.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"0c076d70-9e88-9da5-024d-6550990cf9fd","ancestors":[],"type":"function","description":"TODO","name":"HouseMemberDocumentController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0},"item_type":"class","length":66},{"id":"1ba1040f-9f1b-d1bd-be40-e4bcb31c16cc","ancestors":["0c076d70-9e88-9da5-024d-6550990cf9fd"],"type":"function","description":"retrieves a House Member Document based on the provided member ID and returns it as a byte array in the response entity, along with appropriate headers to set the content type and filename.","params":[{"name":"memberId","type_name":"String","description":"ID of the member whose house member document is being requested.\n\n* `log`: This is an instance of `org.slf4j.Logger`, which is used for logging purposes.\n* `houseMemberDocumentService`: This is a service that provides access to the house member document data.\n* `findHouseMemberDocument`: This is a method of the `houseMemberDocumentService` that retrieves a specific house member document based on its ID.\n* `memberId`: This is the input parameter passed to the `findHouseMemberDocument` method, which represents the ID of the house member for whom the document is being retrieved.\n* `document`: This is an instance of the `HouseMemberDocument` class, which contains information about the house member document, including its content and filename.\n* `content`: This is a field of the `document` object that represents the actual content of the document, which is returned in the response entity.\n* `headers`: This is an instance of `HttpHeaders`, which contains metadata about the response entity, such as its cache control and content type.\n* `ContentDisposition`: This is an instance of `ContentDisposition`, which contains information about how the response entity should be handled by the client, including its filename and whether it should be displayed inline or not.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a response entity containing the requested house member document as a byte array.\n\n* The `HttpHeaders` object represents the HTTP headers for the response, which include cache control and content type information.\n* The `byte[]` variable represents the document content, which is a JPEG image in this case.\n* The `ContentDisposition` object represents the content disposition of the response, which includes the filename of the document.\n* The `ResponseEntity` object is a class that represents the HTTP response, which contains the status code and headers of the response. In this case, the status code is `OK`, indicating that the request was successful.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"getHouseMemberDocument","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":24},{"id":"e16a4104-49dd-b489-2942-bb8c49f84776","ancestors":["0c076d70-9e88-9da5-024d-6550990cf9fd"],"type":"function","description":"receives a request to add a member document, creates a new house member document using the received file, and returns a response entity indicating whether the operation was successful or not.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the member whose document is being uploaded.\n\n* `memberId`: A string parameter representing the unique identifier of a member in the house.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"file that contains the document of a house member to be uploaded.\n\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: This parameter represents a file upload sent by the client as part of the HTTP request. The type `MultipartFile` indicates that it is a file uploaded through the multipart/form-data content type.\n* `log.trace(\"Received request to add house member documents\")` - This line logs a trace message indicating that the function has received a request to upload a house member document.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a response entity with a status code of NO_CONTENT or NOT_FOUND, depending on whether the document was successfully uploaded or not.\n\n* `ResponseEntity`: This is an entity representing a response message, which can have a status code and a body. The status code indicates the result of the operation, while the body contains additional information, such as the uploaded document.\n* `HttpStatus`: This is an enum representing the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `build()`: This is a method that creates a new `ResponseEntity` object based on the input parameters. It returns a new entity with the specified status code and body.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"uploadHouseMemberDocument","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"53bd3f15-0f02-0aa2-bc40-41fd8c76ae36","ancestors":["0c076d70-9e88-9da5-024d-6550990cf9fd"],"type":"function","description":"updates an existing house member document with the provided `memberId` and `memberDocument`. If successful, it returns a `ResponseEntity` with status code `NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with status code `NOT_FOUND`.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the house member whose document is being updated.\n\n* `memberId`: This is a string parameter that represents the unique identifier for a house member.\n* `@PathVariable`: This annotation indicates that the value of `memberId` is passed from the URL path.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"MultipartFile containing the updated house member document to be processed by the `houseMemberDocumentService`.\n\n* `memberId`: The unique identifier for a house member.\n* `memberDocument`: A MultipartFile containing the updated house member document.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a response entity with a status of NO_CONTENT or NOT_FOUND, depending on whether the update was successful or not.\n\n* `map`: This method maps the updated house member document to a `ResponseEntity` object with a status code of `HttpStatus.NO_CONTENT`.\n* `orElseGet`: This method provides an alternative way to return a `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND` if the `map` method returns `Optional.empty()`.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"updateHouseMemberDocument","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":83,"insert":83,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"81cbb6c3-ad0c-e5ae-1a4e-ae7acf0d4106","ancestors":["0c076d70-9e88-9da5-024d-6550990cf9fd"],"type":"function","description":"deletes a house member document based on the provided `memberId`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`. If unsuccessful, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND`.","params":[{"name":"memberId","type_name":"String","description":"ID of the house member whose document is to be deleted.\n\n* `memberId`: This is the unique identifier for a member in the house.\n* `houseMemberDocumentService`: This is an instance of a service class that provides methods for managing house member documents.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `HttpStatus.NO_CONTENT` or `HttpStatus.NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* HttpStatus.NO_CONTENT: This status code indicates that the requested resource has been successfully deleted and no content was returned in the response.\n* HttpStatus.NOT_FOUND: This status code indicates that the specified member ID could not be found, and the document deletion operation failed.","complex_type":true},"usage":{"language":"java","code":"@Test\n  public void testDeleteHouseMemberDocument() {\n    String memberId = \"member123\";\n    ResponseEntity<Void> response = houseMemberDocumentController.deleteHouseMemberDocument(memberId);\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n  }\n","description":"\nHere's a quick breakdown of what this test does:\n\n1. The test creates a String variable `memberId` with the value \"member123\".\n2. The test calls the method deleteHouseMemberDocument() on the controller with the value of `memberId`.\n3. The test asserts that the status code of the response returned is HttpStatus.NO_CONTENT."},"name":"deleteHouseMemberDocument","code":"@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2},"item_type":"method","length":10}]}}}