{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"An AmenityController class that implements the AmenitiesApi interface. The controller handles various amenity-related requests such as getting details of a specific amenity, listing all amenities for a given community, adding a new amenity to a community, deleting an existing amenity, and updating an amenity's details. The code uses Spring WebFlux and Lombok frameworks and includes annotations for validation, mapping, and RESTful endpoints.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"33ec2ec8-0876-99a9-e740-0b83f3aa9876","ancestors":["cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"],"type":"function","description":"retrieves amenity details for a given amenity ID using the `amenitySDJpaService`. It maps the retrieved data to an `AmenityDetailsResponse` object and returns it as a `ResponseEntity` with an HTTP status of `OK` or `NOT_FOUND` if the amenity is not found.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity that is being retrieved.\n\n* The `@PathVariable` annotation indicates that the `amenityId` parameter is passed through the HTTP request path.\n* The `amenitySDJpaService` is a JPA service that provides access to the amenity data in the database.\n* The `getAmenityDetails` method returns an Optional<GetAmenityDetailsResponse> object, which represents the possibility of obtaining a response or not.\n* If the response is present, it is mapped through the `amenityApiMapper` function to create a GetAmenityDetailsResponse object.\n* The `map(ResponseEntity::ok)` method is used to convert the Optional<GetAmenityDetailsResponse> object to a ResponseEntity object with a status code of OK (200).\n* If the response is not present, an error message is returned in the ResponseEntity object with a status code of NOT_FOUND (404).","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `ResponseEntity` object containing an `AmenityDetailsResponse` object representing the details of the requested amenity.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response with a status code and body. The status code indicates whether the request was successful or not, while the body contains the actual response data.\n* `status`: This is a field in the `ResponseEntity` class that holds the status code of the response. In this case, it can be either `HttpStatus.OK` or `HttpStatus.NOT_FOUND`.\n* `body`: This is a field in the `ResponseEntity` class that holds the response data. In this case, it contains an instance of `GetAmenityDetailsResponse`, which represents the details of an amenity.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testGetAmenityDetails() {\n    // set up mock services and mappers\n    AmenitySDJpaService amenitySDJpaService = Mockito.mock(AmenitySDJpaService.class);\n    AmenityApiMapper amenityApiMapper = Mockito.mock(AmenityApiMapper.class);\n    \n    // set up test data\n    String amenityId = \"some-amenity-id\";\n    AmenityDto amenityDto = new AmenityDto();\n    amenityDto.setName(\"name\");\n    amenityDto.setDescription(\"description\");\n    amenityDto.setCommunityId(\"community-id\");\n    \n    // mock behavior of services and mappers\n    when(amenitySDJpaService.getAmenityDetails(amenityId)).thenReturn(Optional.of(amenityDto));\n    when(amenityApiMapper.amenityToAmenityDetailsResponse(amenityDto))\n            .thenReturn(new GetAmenityDetailsResponse().name(\"name\").description(\"description\"));\n    \n    // call the method and check results\n    ResponseEntity<GetAmenityDetailsResponse> response =\n                amenityController.getAmenityDetails(amenityId);\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertTrue(response.hasBody());\n    assertEquals(\"name\", response.getBody().getName());\n    assertEquals(\"description\", response.getBody().getDescription());\n}\n","description":"\nThis test uses the `Mockito` library to mock the services and mappers, set up test data, and check the results of calling the method getAmenityDetails. The test uses the `when()` method from Mockito to specify the behavior of the mocked service and mapper, and the `thenReturn()` method to return an optional value when the method is called."},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"d2348cb2-5c54-d98b-8041-e69cd84d0686","ancestors":["cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"],"type":"function","description":"receives a community ID as a path variable and returns a set of amenity details responses, which are generated by mapping the list of amenities to the response set using the `amenityApiMapper`.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community whose amenities are being listed.\n\n* `communityId`: A String variable representing the ID of a community.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the details of all amenities for a given community.\n\n* `ResponseEntity`: This is the generic type of the output, which represents an HTTP response entity.\n* `ok`: This is the status code of the response, indicating that the request was successful.\n* `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse` objects, which contain the details of each amenity returned by the API.\n* `amenities`: This is the list of `Amenity` objects, which are the entities being queried and returned by the API.\n* `amenitySDJpaService`: This is a dependency injection service that provides the `listAllAmenities()` method, which retrieves the amenities from the database.","complex_type":true},"usage":{"language":"java","code":"public void main() {\n    AmenityController amenityController = new AmenityController();\n    String communityId = \"1\";\n    Set<GetAmenityDetailsResponse> response = amenityController.listAllAmenities(communityId);\n}\n","description":"\nThis is an example of how listAllAmenities would be used in the main method of a Java program. The communityId variable is set to 1, and then the method listAllAmenities is called using the communityId as input. The response variable returns all the amenity details for that community."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"fd43ba24-26b8-bb83-2c49-7b8cab7aedb4","ancestors":["cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"],"type":"function","description":"allows for the addition of amenities to a community through the creation and storage of new amenities in the database using the `amenitySDJpaService`.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.\n\n* `communityId`: A string representing the ID of a community. It is the primary key of the `Community` table in the database.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community.\n\n* `communityId`: A String representing the ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of Amenity objects containing the amenities that will be added to the community. Each amenity object has properties such as name, description, and image.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object representing a successful addition of amenities to a community, with the `statusCode` set to `201`.\n\n* The `ResponseEntity` object represents a response entity that contains an `AddAmenityResponse` object inside it.\n* The `AddAmenityResponse` object is a class that contains the list of amenities added to the community.\n* The `amenities` field of the `AddAmenityResponse` object is a list of `Amenity` objects, representing the amenities added to the community.\n* The `map` method of the `ResponseEntity` object maps the `AddAmenityResponse` object to a `ResponseEntity` object with an HTTP status code of `OK`.\n* The `orElse` method of the `ResponseEntity` object returns a `ResponseEntity` object with an HTTP status code of `NOT_FOUND` if the amenities could not be added to the community.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testAddAmenityToCommunity() {\n  String communityId = \"123456\";\n  AddAmenityRequest request = new AddAmenityRequest(Arrays.asList(\"Wifi\", \"Gym\"));\n  ResponseEntity<AddAmenityResponse> response = \n      this.controller.addAmenityToCommunity(communityId, request);\n  \n  // Test that the method returns a successful response with the correct status code\n  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n  assertThat(response.getBody().getAmenities())\n      .hasSize(2)\n      .contains(\"Wifi\", \"Gym\");\n}\n","description":"\nThis test ensures that the addAmenityToCommunity method returns a successful response with the correct status code and a list of amenities containing the provided values."},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"649a2e4f-5457-a2be-e248-cdd40b36baea","ancestors":["cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"],"type":"function","description":"deletes an amenity from the database using `amenitySDJpaService`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT` status code. If unsuccessful, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND` status code.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity to be deleted.\n\n* `amenitySDJpaService`: This is an instance of a class that represents a JPA service for managing amenities.\n* `deleteAmenity()`: This is a method of the `amenitySDJpaService` class that deletes an amenity from the database.\n* `amenityId`: This is a string input parameter passed to the `deleteAmenity()` method, representing the ID of the amenity to be deleted.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: indicates that the amenity was successfully deleted.\n* `HttpStatus.NOT_FOUND`: indicates that the amenity could not be found.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate AmenityController amenityController;\n\npublic void deleteAmenity() {\n  String amenityId = \"amenityId\";\n  ResponseEntity<Void> response = amenityController.deleteAmenity(amenityId);\n  if (response.getStatusCode().equals(HttpStatus.NO_CONTENT)) {\n    System.out.println(\"Amenity deleted successfully\");\n  } else {\n    System.err.println(\"Failed to delete the amenity\");\n  }\n}\n","description":"\nThe above example shows how the `deleteAmenity` method would be used by first autowiring the `AmenityController` and then using the `deleteAmenity` method with the `amenityId` variable as an argument. The response of the method is then checked for whether it was successful or not, and a message is printed accordingly."},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"22c65d1c-31f4-f6ae-1b45-274b0895adb4","ancestors":["cb703ea1-b0e1-a18c-3c4e-580ed6d3cb39"],"type":"function","description":"updates an amenity in the system based on the ID provided in the request body, using the `amenitySDJpaService`. If the update is successful, a `NO_CONTENT` status code is returned. Otherwise, a `NOT_FOUND` status code is returned.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated.\n\n* `@PathVariable String amenityId`: represents the ID of an amenity to be updated.\n* `@Valid @RequestBody UpdateAmenityRequest request`: the request body contains the update details for the amenity.\n* `amenityApiMapper.updateAmenityRequestToAmenityDto(request)`: maps the request body to an `AmenityDto` object.\n* `amenityDto.setAmenityId(amenityId)`: sets the ID of the amenity to be updated in the `AmenityDto` object.\n* `boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto)`: updates the amenity in the database using the `amenitySDJpaService`.\n* `return ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: returns a response entity with a status code of `NO_CONTENT` if the update was successful.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must be valid according to the schema defined in the Java classes and JSON Schema files.\n* `@RequestBody`: Represents the input request body as a single entity, which can be a document or an object.\n* `UpdateAmenityRequest`: The class that represents the request body, which contains attributes for updating an amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and the amenity was updated without any issues.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found with the provided `amenityId`.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n","description":"\nThe example above shows how the method updateAmenity would be used, specifically by setting the path variable 'amenityId' to a specific string value and passing an UpdateAmenityRequest object as the request body parameter. The method would then use the amenityApiMapper class to map the UpdateAmenityRequest object to an AmenityDto object before calling the updateAmenity method of the AmenitySDJpaService, which updates the specific amenity with the specified id in the database. \nThe example returns a ResponseEntity<Void> with HttpStatus.NO_CONTENT if the update was successful and HttpStatus.NOT_FOUND otherwise."},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}