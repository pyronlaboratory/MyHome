{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"controllers\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            AuthenticationController [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    subgraph cluster_1 {\n        label=\"domain\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        AuthenticationData\n    }\n    edge [color=\"#26de81\"]\n    AuthenticationData -> AuthenticationController \n}\n","items":[{"id":"31bcd5e2-936a-34bc-774a-0f2e02cc5edf","ancestors":[],"type":"function","description":"is a Spring REST controller that implements the AuthenticationApi interface. It logs in a user using an authentication service and returns an HTTP response with the user's ID and JWT token.","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  \n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":14,"insert":14,"offset":" ","indent":0,"comment":null},"item_type":"class","length":23,"docLength":null,"doc":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."},{"id":"c2c45cf2-7a0b-3293-fe4a-f4dd8077d8cc","ancestors":["31bcd5e2-936a-34bc-774a-0f2e02cc5edf"],"type":"function","description":"verifies a user's credentials and logs them into the system, returning a successful response with headers containing information about the user's authentication state.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"authentication request sent by the user to the server for authentication processing, containing the necessary credentials and other information required for successful login.\n\n* `@Valid`: The input is validated by the `@Validation` annotation.\n* `LoginRequest`: The class representing the request body for login.\n* `authenticationService`: A service used to perform authentication tasks.\n* `AuthenticationData`: An object containing data related to authentication.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing an `OK` status and headers generated based on the `AuthenticationData` result.\n\n* `ResponseEntity`: This is the class that represents the response entity, which contains information about the login request and its outcome.\n* `ok()`: This method returns a ResponseEntity with a status code of 200 (OK), indicating that the login request was successful.\n* `headers(createLoginHeaders(authenticationData))`: The `createLoginHeaders` method creates a new set of headers that contain information about the authentication data, such as the user's ID and email address. These headers are added to the response entity.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n","description":""},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":21,"insert":21,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7,"docLength":null,"doc":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."},{"id":"ffad96e0-fab4-d591-ab4a-4fdf6c91cadb","ancestors":["31bcd5e2-936a-34bc-774a-0f2e02cc5edf"],"type":"function","description":"creates HTTP headers with user ID and JWT token for authentication purposes based on the input `AuthenticationData`.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"user's login details, providing the user ID and JWT token for authentication purposes.\n\n* `getUserId()` retrieves the user ID from the input data.\n* `getJwtToken()` retrieves the JWT token from the input data.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"a HTTP headers object containing the user ID and JWT token of the authenticated user.\n\n* `httpHeaders`: This is an instance of the `HttpHeaders` class, which represents a collection of HTTP headers.\n* `userId`: The value of this property is a string representing the user ID associated with the authentication data.\n* `token`: The value of this property is a string representing the JWT token issued to the user for authentication purposes.","complex_type":true},"usage":{"language":"java","code":"public class Example{\n    public static void main(String[] args) {\n        AuthenticationData authenticationData = new AuthenticationData();\n        HttpHeaders headers = createLoginHeaders(authenticationData);\n        System.out.println(\"User ID: \" + headers.getFirst(\"userId\"));\n        System.out.println(\"JWT Token: \" + headers.getFirst(\"token\"));\n    }\n}\n","description":""},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6,"docLength":null,"doc":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. The controller handles login requests and returns a response entity with headers containing the user ID and JWT token. The class uses Lombok to simplify the construction of the controller, and the `AuthenticationService` class is used to perform the actual login logic."}]}}}