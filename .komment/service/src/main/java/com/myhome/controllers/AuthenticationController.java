{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. It provides a login functionality that takes a `LoginRequest` object as input, validates it using the `@Valid` annotation, and then calls the `login` method of the `AuthenticationService` class to perform the actual authentication. The response is then generated using the `ResponseEntity` class and the `createLoginHeaders` method, which adds custom headers containing the user ID and JWT token.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"26711f99-ac2f-aca5-b14c-5715cca4aec0","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":13,"insert":13,"offset":" ","indent":0},"item_type":"class","length":21},{"id":"77f1ddbe-0244-ac95-bc4b-b8aba466ede3","ancestors":["26711f99-ac2f-aca5-b14c-5715cca4aec0"],"type":"function","description":"authenticates a user and returns an `ResponseEntity` with a successful status code and custom headers containing authentication data.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"login request to be processed by the `authenticationService`, providing the necessary data for the authentication process.\n\n* `@Valid`: This annotation indicates that the `loginRequest` parameter must be validated by the framework.\n* `AuthenticationData authenticationData`: This is a data object returned by the `authenticationService`, representing the result of authenticating the user.\n* `ResponseEntity.ok()`: This method returns an HTTP response entity with a status code of 200 (OK), indicating that the request was successful.\n* `headers(createLoginHeaders(authenticationData))`: This method creates and sets headers for the response, which contain information related to the authentication process.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `ResponseEntity` object with a status of `OK` and headers containing information related to the authentication process.\n\nThe `ResponseEntity` is an instance of `OkResponse`, indicating that the login request was successful.\nThe `headers` field contains a collection of HTTP headers generated by the authentication service, which provide information about the authentication process and the user's identity.\nThe `build()` method is used to create the response entity.","complex_type":true},"usage":{"language":"java","code":"import com.myhome.api.LoginRequest;\n\n// ...\n\n@Override\npublic void login(LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n}\n","description":""},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"a7b7fbe2-0dc7-c397-144e-f6bedcc344ab","ancestors":["26711f99-ac2f-aca5-b14c-5715cca4aec0"],"type":"function","description":"creates an HTTP headers object containing user ID and JWT token for logging in a user.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"user authentication details, providing the user ID and JWT token for login authentication.\n\n* `getUserId()` returns the user ID of the authenticated user.\n* `getJwtToken()` returns the JWT token obtained through authentication.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java `HttpClient` package, which contains a collection of HTTP headers.\n* `add()` methods: These methods are used to add new header fields to the `HttpHeaders` collection. In this function, two methods are called: `add(\"userId\")` and `add(\"token\")`. The names of these methods are followed by the key and value of each added header field. For example, `add(\"userId\")` adds a header field with the key \"userId\" and the value obtained from the `authenticationData.getUserId()` method. Similarly, `add(\"token\")` adds a header field with the key \"token\" and the value obtained from the `authenticationData.getJwtToken()` method.\n* `new`: This keyword is used to create a new instance of the `HttpHeaders` class.\n* `AuthenticationData`: This is an instance of the `AuthenticationData` class, which contains information related to user authentication. The `createLoginHeaders` function uses this class to obtain the values for the header fields.","complex_type":true},"usage":{"language":"java","code":"AuthenticationData authenticationData = new AuthenticationData(\"userId\", \"token\");\nHttpHeaders loginHeaders = createLoginHeaders(authenticationData);\n","description":""},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2},"item_type":"method","length":6}]}}}