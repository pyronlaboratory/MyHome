{"name":"MailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/MailSDJpaService.java","content":{"structured":{"description":"A `MailSDJpaService` class that implements `MailService` and provides methods for sending emails using Spring Data JPA and Thymeleaf templates. The service uses Spring Boot's autoconfiguration feature to conditionally enable or disable certain methods based on properties in the application configuration file. The code also includes logging and localization support using Spring Logging and ResourceBundleMessageSource, respectively.","items":[{"id":"e9d0d9bc-41aa-e381-1046-c2048cf15d61","ancestors":[],"type":"function","description":"TODO","name":"MailSDJpaService","code":"@Service\n@ConditionalOnProperty(value = \"spring.mail.devMode\", havingValue = \"false\", matchIfMissing = false)\n@RequiredArgsConstructor\n@Slf4j\npublic class MailSDJpaService implements MailService {\n\n  private final ITemplateEngine emailTemplateEngine;\n  private final JavaMailSender mailSender;\n  private final ResourceBundleMessageSource messageSource;\n  private final MailProperties mailProperties;\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }\n\n  private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }\n\n  private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }\n\n  private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }\n\n  private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }\n\n}","location":{"start":26,"insert":26,"offset":" ","indent":0},"item_type":"class","length":96},{"id":"4eb6ecb8-c2db-75b1-4d4c-160608d89294","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"sends a password recovery code via email to the specified user's registered email address.","params":[{"name":"user","type_name":"User","description":"user for whom the password recovery code is being generated and sent.\n\n* `user.getName()`: retrieves the user's name.\n* `randomCode`: receives a random code for password recovery.\n\nThe function then uses these inputs to construct a map of model data (`templateModel`), which is later used in sending an email with the subject \"locale.EmailSubject.passwordRecover\". The `send` function is called with the user's email address and the constructed email template, passing in the model data as arguments. Finally, the function returns a boolean value indicating whether the email was sent successfully.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit code that will be sent to the user's registered email address for password recovery.\n\n* `randomCode`: A String variable that contains a random password recovery code generated by the application.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\npublic boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n}\n","description":"\nIn this example, the method 'sendPasswordRecoverCode' is being called on an object of the class 'MailSDJpaService', which represents a service used for sending emails via Spring Data JPA. The method takes two parameters: 'user' and 'randomCode'. 'User' is a reference to the user who requested the password recovery, while 'randomCode' is a string representing a unique code sent in an email to the user.\nThe first step in this method is to create a new map object called 'templateModel', which will be used to store data that will be passed to the Thymeleaf template engine for rendering the email. The method then adds two key-value pairs to the 'templateModel': 'username' and 'recoverCode'. These values are obtained from the 'user' object and the 'randomCode' string, respectively.\nAfter creating the 'templateModel', the method calls the 'send' method of the same class with the following parameters: email address of the user ('user.getEmail()'), password recover subject ('passwordRecoverSubject'), template name for rendering the email ('MailTemplatesNames.PASSWORD_RESET.filename'), and the 'templateModel'. The method also returns a boolean indicating whether the email was sent successfully or not.\nIn summary, this method is used to send an email with a password recovery code to the user who requested it. The method creates a new map object called 'templateModel' and adds two key-value pairs to it, then calls the 'send' method of the same class with these parameters and returns a boolean indicating whether the email was sent successfully or not."},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"9e617656-49ba-5ebb-754b-608a5c6e5037","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"sends an email to a user when their password has been successfully changed.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user whose password has been successfully changed.\n\n* `username`: The user's name.\n\nThe function then implements the following steps:\n\n1. Creates a new `HashMap` to store template model data.\n2. Assigns the user's name to the `username` key in the map.\n3. Generates a subject line for an email notification using the `getLocalizedMessage` method and passing in \"locale.EmailSubject.passwordChanged\".\n4. Combines the subject line with the file name of the email template (`MailTemplatesNames.PASSWORD_CHANGED.filename`) and the template model data to create a message for sending via email.\n5. Uses the `send` method to send an email notification to the user's registered email address.\n6. Returns a boolean value indicating whether the email was sent successfully.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was successfully sent to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }\n","description":"\nThis method would be used when a user successfully changed their password and the service wants to inform the user of this change by sending an email with a subject of \"Password Successfully Changed\" to the user's email address. The method takes in a single parameter, which is the user object that contains the user's email address. It then creates a hash map of template data, where the key \"username\" has the value of the user's name. This data would be used when rendering the password changed message.\nThe method first obtains a localized version of the subject line using getLocalizedMessage(\"locale.EmailSubject.passwordChanged\"). This method takes in a string argument that specifies which property to look up and returns a localized version of that property if it exists, or the property itself if it does not exist. In this case, the \"locale.EmailSubject.passwordChanged\" property should be used to obtain a localized version of the \"Password Successfully Changed\" string.\nNext, the method calls send() with the email address of the user, the subject line obtained earlier, the name of the password changed message file (MailTemplatesNames.PASSWORD_CHANGED), and the template data that was created earlier. If the send() method returns true, it means that the message was successfully sent, otherwise an error occurred while sending the message and the user should be informed of this.\nNote that this is just a simple example on how to use the sendPasswordSuccessfullyChanged() method, and in practice, more functionality may be needed such as logging any errors that occur during the email sending process."},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":48,"insert":48,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"aed19ea8-0905-438f-254e-5129bb99a156","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"receives a user and an email confirmation token as input, creates a map containing the user's name and the email confirmation link, and sends an email with a personalized subject and template using the `MailTemplatesNames.ACCOUNT_CREATED` filename and the created map as parameters.","params":[{"name":"user","type_name":"User","description":"user for whom an email confirmation link is to be generated and sent.\n\n* `user.getName()` - Returns the user's name.\n* `emailConfirmToken` - A SecurityToken object representing the email confirmation link sent to the user for account verification.\n\nThe function then creates a map of model data (`templateModel`) containing the user's name and the email confirmation link. The `getAccountConfirmLink()` function is called to generate the email confirmation link, which is added to the `templateModel` as `emailConfirmLink`.\n\nFinally, the `send()` function is used to send an email message with the subject `locale.EmailSubject.accountCreated`, containing the user's name and the email confirmation link. The `MailTemplatesNames.ACCOUNT_CREATED.filename` constant specifies the file name of the email template to use.","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"email confirmation token sent to the user's email address for verifying their email address.\n\n* `User user`: The user object passed as an argument to the function.\n* `SecurityToken emailConfirmToken`: A SecurityToken object representing the confirmation link for the created account. It contains information such as the token type, token value, and expiration time.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to confirm the user's account creation.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }\n","description":""},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"a52c0f2c-cafc-ed8d-5247-6edb0dd0dae9","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"maps user information to a message template and sends an email with the subject \"account confirmed\" to the user's email address if the email was sent successfully.","params":[{"name":"user","type_name":"User","description":"user for whom account confirmation needs to be sent.\n\n* `getName()` - Retrieves the user's name.\n* `getEmail()` - Retrieves the user's email address.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\npublic boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n}\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"d75061f9-becf-48bd-9747-68ab98322c08","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"sends an HTML email message through a mail sender.","params":[{"name":"to","type_name":"String","description":"email address of the recipient to whom the HTML message will be sent.\n\n* `to`: This parameter is a string that represents the email address of the recipient. It can be any valid email address format, such as [john.doe@example.com](mailto:john.doe@example.com).\n* `subject`: A string that represents the subject line of the email message. It is used to provide context for the email and help the recipient quickly identify the purpose of the message.\n* `htmlBody`: This parameter is a string that contains the HTML content of the email message. It can include any valid HTML elements, such as headings, paragraphs, images, and links.","complex_type":true},{"name":"subject","type_name":"String","description":"subject line of an email that is being sent through the `mailSender` object, and it is used to set the corresponding field in the created MimeMessage object.\n\n* `subject`: This is a `String` variable representing the subject of the email to be sent. It carries important information about the email's purpose or context.\n* `mailProperties`: This is an object that stores configuration properties for sending emails. It may have attributes such as `username`, which represents the sender's email address, and other relevant information for email communication.","complex_type":true},{"name":"htmlBody","type_name":"String","description":"HTML content of the message that will be sent to the recipient.\n\n* The `MimeMessageHelper` sets the `from` property to `mailProperties.getUsername()`.\n* The `to` property is set to the input string `to`.\n* The `subject` property is set to the input string `subject`.\n* The `setText` method takes a string argument `htmlBody`, which contains the HTML message body, and sets it as the message body of the `MimeMessage`.\n* The `mailSender.send()` method sends the `MimeMessage` object to the destination email server.","complex_type":true}],"usage":{"language":"java","code":"sendHtmlMessage(\"recipient@example.com\", \"Email subject\", \"<html><body>Email body</body></html>\");\n","description":""},"name":"sendHtmlMessage","code":"private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"09dd9746-4505-aabd-e84e-0f4b081d3de9","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"takes an email address, subject, template name and model as input, sends an HTML message using the Thymeleaf engine and logs any errors to the console if they occur.","params":[{"name":"emailTo","type_name":"String","description":"recipient's email address to which the HTML message will be sent.\n\n* `emailTo`: The recipient's email address. It is a String type variable.","complex_type":true},{"name":"subject","type_name":"String","description":"subject line of the email to be sent.\n\n* `String subject`: The subject line of the email to be sent.\n* `String templateName`: The name of the Thymeleaf template to be processed for generating the email body.\n* `Map<String, Object> templateModel`: A map containing the model data that will be used in the Thymeleaf template to generate the email body.","complex_type":true},{"name":"templateName","type_name":"String","description":"name of the Thymeleaf template to be processed and rendered as HTML content for the email message.\n\n* `String templateName`: The name of the Thymeleaf email template to be processed.\n* `Map<String, Object> templateModel`: A map of key-value pairs representing the model data for the email template.","complex_type":true},{"name":"templateModel","type_name":"Map<String, Object>","description":"map of data that will be used to render the email template, allowing the function to generate a personalized and dynamic email message.\n\n* `Map<String, Object>`: A map containing key-value pairs representing the variables that will be used in the Thymeleaf template engine to generate the email body. The keys are the variable names, and the values are their corresponding values.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the email was sent successfully or not.","complex_type":false},"usage":{"language":"java","code":"private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }\n","description":""},"name":"send","code":"private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"57d62a5b-7839-6bb6-9141-0d8ba3747560","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"generates a URL for confirming an email address associated with a user's account. It takes the user and security token as input and constructs the URL using the base URL of the current context path and replacing the path with `/email-confirm`.","params":[{"name":"user","type_name":"User","description":"User object whose email confirmation link is to be generated.\n\n* `user`: A `User` object with properties such as `UserId`, and `SecurityToken`.","complex_type":true},{"name":"token","type_name":"SecurityToken","description":"security token required to confirm the user's email address.\n\n* `token.getToken()`: This is a unique identifier assigned to each user for email confirmation purposes.\n* `user.getUserId()`: This is the ID of the user for whom the email confirmation link is being generated.","complex_type":true}],"returns":{"type_name":"String","description":"a URL string containing the base URL and user ID, followed by the email confirmation token.\n\n* `baseUrl`: A string representing the base URL of the application, which is built using the `ServletUriComponentsBuilder` class.\n* `user`: An instance of the `User` class, representing the user for whom the confirmation link is being generated.\n* `token`: An instance of the `SecurityToken` class, representing the security token for the user.\n* `%s`, `%s`, and `%s`: Placeholders for the various components of the confirmation URL, which are replaced with the actual values of the `baseUrl`, `user.getUserId()`, and `token.getToken()` methods, respectively.","complex_type":true},"usage":{"language":"java","code":"User user = new User();\nuser.setUserId(123);\nSecurityToken token = new SecurityToken();\ntoken.setToken(\"abc\");\nString confirmLink = getAccountConfirmLink(user, token);\n","description":"\nIn this example, the user object is created with an ID of 123 and the security token object has a token value of \"abc\". The method getAccountConfirmLink is then called using these objects as parameters. The resulting confirm link is stored in the string variable confirmLink."},"name":"getAccountConfirmLink","code":"private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }","location":{"start":103,"insert":103,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"794c4c9b-befb-25a7-0f42-a3aad3a267be","ancestors":["e9d0d9bc-41aa-e381-1046-c2048cf15d61"],"type":"function","description":"retrieves a localized message from a message source based on a given property name, handling potential exceptions and returning the obtained message.","params":[{"name":"prop","type_name":"String","description":"string key for which the localized message is to be retrieved.\n\n* `String`: The input parameter passed to the function, which is a string value.","complex_type":true}],"returns":{"type_name":"String","description":"a localized string based on the input property and the current locale.\n\n* The output is a string that represents a localized message.\n* The message is obtained from the `messageSource` using the `getMessage` method.\n* The `messageSource` is an object that provides localized messages.\n* The method call to `getMessage` takes three arguments: the key of the message, a null `Locale` parameter, and the `LocaleContextHolder` locale.\n* If any exceptions occur during the message retrieval process, the message returned is simply \"localization error\".","complex_type":true},"usage":{"language":"java","code":"String prop = \"locale.EmailSubject.passwordRecover\";\nString message = getLocalizedMessage(prop);\n","description":"\nThis example sets the value of the variable `prop` to a string that represents a localization property, and then passes it as an argument to the method `getLocalizedMessage`. The method retrieves the message from the ResourceBundleMessageSource using the specified property key, and returns the retrieved message. Finally, the returned message is assigned to the `message` variable for further processing."},"name":"getLocalizedMessage","code":"private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2},"item_type":"method","length":9}]}}}