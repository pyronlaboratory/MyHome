{"name":"AuthenticationSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AuthenticationSDJpaService.java","content":{"structured":{"description":"An `AuthenticationSDJpaService` class that implements the `AuthenticationService` interface in Spring Security. The service uses JPA to interact with a database for user authentication. It takes in a `LoginRequest` object containing email and password, validates the credentials using JWT encryption and decryption, creates an encoded JWT token if the login is successful, and returns an `AuthenticationData` object representing the token. Additional methods include finding a user by email using JPA, creating a new JWT token with expiration time and user ID, and checking if passwords match using a password encoder.","items":[{"id":"62a50130-4d69-758b-0d4f-2949876e733e","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationSDJpaService","code":"@Slf4j\n@Service\npublic class AuthenticationSDJpaService implements AuthenticationService {\n\n  private final Duration tokenExpirationTime;\n  private final String tokenSecret;\n\n  private final UserSDJpaService userSDJpaService;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n  private final PasswordEncoder passwordEncoder;\n\n  public AuthenticationSDJpaService(@Value(\"${token.expiration_time}\") Duration tokenExpirationTime,\n      @Value(\"${token.secret}\") String tokenSecret,\n      UserSDJpaService userSDJpaService,\n      AppJwtEncoderDecoder appJwtEncoderDecoder,\n      PasswordEncoder passwordEncoder) {\n    this.tokenExpirationTime = tokenExpirationTime;\n    this.tokenSecret = tokenSecret;\n    this.userSDJpaService = userSDJpaService;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }\n\n  private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }\n\n  private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":18,"insert":18,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"cc63b9b2-f1b6-52b4-7546-84953569bfcd","ancestors":["62a50130-4d69-758b-0d4f-2949876e733e"],"type":"function","description":"authenticates a user by checking their email and password, creating an JWT token, and returning an `AuthenticationData` object with the encoded token and user ID.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"login request containing the user's email and password to be authenticated.\n\n* `email`: The email address provided by the user for login.\n* `password`: The password entered by the user for authentication.\n\nThe function first retrieves the user details using the `userSDJpaService`, and then checks if the entered password matches with the encrypted password stored for that user. If the passwords do not match, a `CredentialsIncorrectException` is thrown. Thereafter, a JWT token is created using the retrieved user details, and an encoded token is generated using the `appJwtEncoderDecoder`. Finally, an `AuthenticationData` object is returned, comprising the encoded token and the user ID.","complex_type":true}],"returns":{"type_name":"AuthenticationData","description":"an `AuthenticationData` object containing an encoded JWT token and the user ID.\n\n* `AuthenticationData`: This is the class that represents the authentication data, which contains an encoded token and the user ID.\n* `encodedToken`: This is the encoded JWT token generated by the `createJwt` method.\n* `userDto`: This is the UserDto object representing the user who is logging in, containing the user's details and encrypted password.\n* `userId`: This is the ID of the user who is logging in.","complex_type":true},"usage":{"language":"java","code":"UserDto user = new UserDto();\nuser.setEmail(\"test@example.com\");\nuser.setPassword(\"password123\");\n\nLoginRequest request = new LoginRequest();\nrequest.setEmail(user.getEmail());\nrequest.setPassword(user.getPassword());\n\nAuthenticationData data = authenticationSDJpaService.login(request);\n","description":""},"name":"login","code":"@Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }","location":{"start":41,"insert":41,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"6b43385f-1dfd-8988-6d46-30807d2c43b9","ancestors":["62a50130-4d69-758b-0d4f-2949876e733e"],"type":"function","description":"compares a provided password with an encoded version of the corresponding database password, returning `true` if they match and `false` otherwise.","params":[{"name":"requestPassword","type_name":"String","description":"password provided by the user for verification with the corresponding password stored in the database.\n\n* `requestPassword`: This parameter represents the password entered by the user for authentication purposes. It is a String data type and can have any value.","complex_type":true},{"name":"databasePassword","type_name":"String","description":"password stored in the database that the function is meant to verify.\n\n* `passwordEncoder`: This is an instance of `PasswordEncoder`, which is used to compare the request password with the database password.\n* `requestPassword`: This is a string parameter passed into the function representing the user-provided password for verification.\n* `databasePassword`: This is a string parameter passed into the function representing the stored password in the database that needs to be verified against the user-provided password.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the provided request password matches the stored database password.","complex_type":false},"usage":{"language":"java","code":"isPasswordMatching(\"request_password\", \"database_password\");\n","description":""},"name":"isPasswordMatching","code":"private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"9bdc33c4-8133-69a0-7d46-1d9388891cd6","ancestors":["62a50130-4d69-758b-0d4f-2949876e733e"],"type":"function","description":"creates a JWT token with the user ID and expiration time calculated using the `tokenExpirationTime`.","params":[{"name":"userDto","type_name":"UserDto","description":"user details for generating an JWT token.\n\n* `userId`: The user ID associated with the JWT.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"an AppJwt object containing the user ID and expiration time.\n\n* `userId`: The user ID associated with the JWT.\n* `expiration`: The expiration time of the JWT, calculated by adding the tokenExpirationTime to the current LocalDateTime.\n* `build()`: Creates a new AppJwt instance with the specified properties.","complex_type":true},"usage":{"language":"java","code":"private void useCreateJwt() {\n  UserDto user = new UserDto(\"john@example.com\", \"password123\");\n  AppJwt jwt = createJwt(user);\n  String token = jwt.getToken();\n  System.out.println(token);\n}\n","description":""},"name":"createJwt","code":"private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2},"item_type":"method","length":7}]}}}