{"name":"AmenitySDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java","content":{"structured":{"description":"An `AmenitySDJpaService` class that implements the `AmenityService` interface. The service provides methods for creating, updating, and deleting amenities in a database using Spring Data JPA. The code uses Lombok to generate getters and setters for the service's fields, and it requires the `CommunityService` and `AmenityRepository` classes as dependencies.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"e3a0553e-77e2-d2a8-6c4a-4c550faaec3a","ancestors":[],"type":"function","description":"TODO","name":"AmenitySDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class AmenitySDJpaService implements AmenityService {\n\n  private final AmenityRepository amenityRepository;\n  private final CommunityRepository communityRepository;\n  private final CommunityService communityService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }\n\n  @Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }\n\n  @Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }\n\n  @Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }\n}","location":{"start":35,"insert":35,"offset":" ","indent":0},"item_type":"class","length":71},{"id":"110ab623-cbde-379d-7d41-316cb9393b4a","ancestors":["e3a0553e-77e2-d2a8-6c4a-4c550faaec3a"],"type":"function","description":"creates a list of `AmenityDto` objects from a set of `AmenityDto` objects and a community ID. It then saves the transformed amenities to the database, returning an Optional containing the created amenities.","params":[{"name":"amenities","type_name":"Set<AmenityDto>","description":"set of amenities to be created in the community, which are transformed into the corresponding `AmenityDto` objects using the `amenityApiMapper`.\n\n1. `Set<AmenityDto> amenities`: This is a set of `AmenityDto` objects that represents the list of amenities to be created in the community.\n2. `String communityId`: This is the ID of the community for which the amenities are being created.\n3. `Optional<Community> community`: This is an optional reference to a `Community` object that contains information about the community where the amenities will be created. If no community is found, this field will be empty.","complex_type":true},{"name":"communityId","type_name":"String","description":"community ID that is used to retrieve the details of the community from the database, which is then associated with the created amenities.\n\n* `communityId`: This is the ID of a community, which is used to retrieve the details of that particular community from the database.","complex_type":true}],"returns":{"type_name":"OptionalListAmenityDto","description":"a list of `AmenityDto` objects representing created amenities.\n\n* The `Optional<List<AmenityDto>>` represents an optional list of amenities that have been created successfully. If no amenities could be created, the list will be empty.\n* The `List<Amenity>` is a list of amenities that have been created, each with a `Community` object as its `setCommunity()` field.\n* The `amenityRepository.saveAll()` method saves all the amenities in the `createdAmenities` list to the database.\n* The `amenityApiMapper.amenityToAmenityDto()` method converts each `Amenity` object to its corresponding `AmenityDto` object.\n\nOverall, the `createAmenities` function takes a set of amenities and a community ID as input, and returns an optional list of amenities that have been created successfully in the database.","complex_type":true},"usage":{"language":"java","code":"// Setup the parameters for the method call\nSet<AmenityDto> amenities = new HashSet<>();\namenities.add(new AmenityDto(\"Wifi\", 50.0, \"This community has wifi available for guests.\", \"wifi\"));\namenities.add(new AmenityDto(\"Pets allowed\", 100.0, \"This community allows pets.\", \"pets\"));\nString communityId = \"1\";\n\n// Call the method with the parameters\nOptional<List<AmenityDto>> createdAmenities = createAmenities(amenities, communityId);\n","description":""},"name":"createAmenities","code":"@Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2},"item_type":"method","length":19},{"id":"82e61adf-c73c-2eb0-484d-868d888421e9","ancestors":["e3a0553e-77e2-d2a8-6c4a-4c550faaec3a"],"type":"function","description":"retrieves an Optional<Amenity> object containing details of an amenity based on its ID.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity that is sought in the function, and it is used to retrieve the details of that amenity from the repository.\n\n* `amenityRepository`: The repository responsible for storing and retrieving amenities.\n* `findByAmenityId`: A method that finds an amenity by its ID.","complex_type":true}],"returns":{"type_name":"OptionalAmenity","description":"an Optional object containing the details of the amenity with the provided ID, if found in the repository.\n\n* The `Optional` class represents a container for an element, which is either present or absent. If the amenity details are found in the repository, the function returns an `Optional` containing the details.\n* The `findByAmenityId` method from the `amenityRepository` returns an `Optional` containing the desired amenity details if they exist in the repository.\n* The `amenityId` parameter represents the unique identifier of the amenity for which details are to be retrieved.","complex_type":true},"usage":{"language":"java","code":"public void example(){\n    String amenityId = \"12345\"; //this can come from a user input or another source. \n    Optional<Amenity> optionalAmenity = getAmenityDetails(amenityId);\n    if (optionalAmenity.isPresent()){\n        System.out.println(\"Amenity found\");\n        //do something with the amenity object\n    } else {\n        System.out.println(\"No Amenity found for ID: \" + amenityId);\n    }\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"9b853bd3-95fc-a2ae-cc45-8e72b368b46a","ancestors":["e3a0553e-77e2-d2a8-6c4a-4c550faaec3a"],"type":"function","description":"deletes an amenity from the database by finding it in the `amenities` collection of a community, removing it, and then marking the community as having fewer amenities.","params":[{"name":"amenityId","type_name":"String","description":"id of an amenity to be deleted.\n\n* `amenityRepository`: This is an instance of `AmenityRepository`, which is likely a class that provides methods for interacting with an amenities database.\n* `findByAmenityIdWithCommunity`: This method returns a `Optional` object containing the `Amenity` instance associated with the given `amenityId`, along with the community to which it belongs. The `Optional` type allows for the possibility that no such amenity exists in the database.\n* `map`: This method applies a transformation to the result of the `findByAmenityIdWithCommunity` method, which is an `Optional` object. In this case, the transformation is to call two methods on the `Amenity` instance: `getCommunity()` and `remove()`. The `getCommunity()` method retrieves the community associated with the amenity, while `remove()` removes the amenity from the community's list of amenities.\n* `orElse`: This method returns the result of the `map` method if it is not `Optional.empty()`, or else it returns `false`. This allows for the possibility that no such amenity exists in the database, in which case the function will return `false`.\n* `return true`: This line returns `true` regardless of whether an amenity was found and removed from the community.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the amenity was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"public class MyHome {\n    private AmenityService amenityService;\n\n    public boolean deleteAmenity(String amenityId) {\n        return amenityService.deleteAmenity(amenityId);\n    }\n}\n","description":"\nThis example is a possible use of the deleteAmenity method from an entity, in this case a MyHome entity that has an amenityService field. The MyHome entity is using the deleteAmenity method by passing it a string parameter as its argument. This will trigger the deleteAmenity method inside the AmenityService class and perform any operations specified there with the input value."},"name":"deleteAmenity","code":"@Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }","location":{"start":69,"insert":69,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"8891c848-9690-eaa4-ff4b-5aaefbe4f619","ancestors":["e3a0553e-77e2-d2a8-6c4a-4c550faaec3a"],"type":"function","description":"retrieves a community's amenities by querying the community repository and mapping the community's amenities to a set.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which the list of amenities is being retrieved.\n\n* `CommunityRepository` is an interface used to retrieve data from a community database.\n* `findByCommunityIdWithAmenities` is a method in the `CommunityRepository` interface that retrieves a collection of `Community` objects along with their associated amenities based on the input `communityId`.\n* `map` is a method in the `List` class that transforms its input into another list. In this case, it maps the `Community` objects to their respective `Amenity` lists.\n* `orElse` is a method in the `List` class that returns the result of calling a supplier function if the input list is empty, or else returns the original input list. In this case, the supplier function creates an empty `HashSet` of `Amenity` objects.\n\nOverall, the `listAllAmenities` function retrieves a collection of `Community` objects along with their associated amenities based on the input `communityId`, and returns a `Set` of `Amenity` objects if no amenities are found in the database for the given `communityId`.","complex_type":true}],"returns":{"type_name":"HashSet","description":"a set of amenities associated with a specific community.\n\n* The function returns a `Set` object containing all amenities associated with a specific community.\n* The set is generated by combining the result of `communityRepository.findByCommunityIdWithAmenities(communityId)` and `Community::getAmenities`. If there are no amenities associated with the community, an empty `Set` is returned.\n* The function uses the `orElse` method to handle the case where there are no amenities associated with the community, by returning a `HashSet` containing no elements.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Set<Amenity> listAllAmenities(String communityId) {\n  // Returns a set containing all amenities associated with the specified community ID\n  return communityRepository.findByCommunityIdWithAmenities(communityId).map(Community::getAmenities).orElse(new HashSet<>());\n}\n","description":"\nThis method is part of the AmenitySDJpaService class, which provides CRUD operations for amenities using Spring Data JPA. The method takes a string parameter communityId representing the ID of the community whose amenities are being requested. It first uses the findByCommunityIdWithAmenities method in the CommunityRepository interface to retrieve the community with the specified communityID and then returns its set of amenities using the map function on the optional object returned by this method. The orElse(new HashSet<>()) part is used to return an empty set if the optional object returned by findByCommunityIdWithAmenities is not present, which can happen if the specified communityID does not correspond to any existing community in the database."},"name":"listAllAmenities","code":"@Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }","location":{"start":81,"insert":81,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"21d08d9a-5da3-4eba-a048-f021d2d05f77","ancestors":["e3a0553e-77e2-d2a8-6c4a-4c550faaec3a"],"type":"function","description":"updates an amenity in the database by retrieving the amenity from the repository, updating its name, price, and other attributes, and then saving it back to the database.","params":[{"name":"updatedAmenity","type_name":"AmenityDto","description":"updated amenity object that contains the new values for the amenity's name, price, and other properties.\n\n* `amenityId`: A String that represents the ID of the amenity to be updated.\n* `communityId`: A String that represents the ID of the community associated with the amenity.\n* `name`: A String that represents the name of the amenity.\n* `price`: An Integer that represents the price of the amenity.\n* `description`: A String that represents the description of the amenity.\n\nThe function then performs several operations:\n\n* It finds the existing amenity with the same `amenityId` using the `amenityRepository`.\n* If the amenity is found, it updates the `name`, `price`, and `description` fields of the amenity using the `communityRepository`.\n* It then saves the updated amenity to the database using the `amenityRepository.save()` method.\n\nThe function returns a boolean value indicating whether the update was successful or not.","complex_type":true}],"returns":{"type_name":"OptionalAmenity","description":"an amenity object representing the updated amenity.\n\n* `map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())`: This line of code retrieves the community associated with the updated amenity by calling the `communityRepository.findByCommunityId()` method. The returned value is a stream of `Community` objects, which is then mapped to a single `Community` object using the `orElse()` method.\n* `map(community -> { ... }): This line of code retrieves the amenity associated with the updated community by calling the `amenityRepository.findByAmenityId()` method. The returned value is a single `Amenity` object, which is then mapped to an updated `Amenity` object using the provided mapping function.\n* `orElse(null)`: This line of code returns the result of the `Community` or `Amenity` repository's `save()` method if it is present, or `null` otherwise.\n\nIn summary, the output of the `updateAmenity` function is a stream of `Community` objects, followed by an updated `Amenity` object that represents the changes made to the amenity.","complex_type":true},"usage":{"language":"java","code":"String amenityId = \"12345\";\nString communityId = \"67890\";\n\n// Create a new AmenityDto with the updated values\nAmenityDto updatedAmenity = new AmenityDto();\nupdatedAmenity.setName(\"New Name\");\nupdatedAmenity.setPrice(10.50);\nupdatedAmenity.setDescription(\"New Description\");\nupdatedAmenity.setCommunityId(communityId);\n\n// Call the updateAmenity method with the updated AmenityDto as a parameter\nboolean isUpdated = amenityService.updateAmenity(updatedAmenity);\n","description":"\nThe code will first create an AmenityDto with updated values, then call the updateAmenity method passing in the updated AmenityDto as a parameter. The method will then use the AmenityId and CommunityId from the updated AmenityDto to retrieve the corresponding amenity and community from the database using the amenityRepository and communityRepository, respectively. If either of these repositories return null, the method will return false to indicate that the update was not successful. Otherwise, it will create a new Amenity object with the updated values and save it to the database using the amenityRepository. Finally, it will return true to indicate that the update was successful."},"name":"updateAmenity","code":"@Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }","location":{"start":88,"insert":88,"offset":" ","indent":2},"item_type":"method","length":17}]}}}