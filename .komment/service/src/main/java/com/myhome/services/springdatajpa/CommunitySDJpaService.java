{"name":"CommunitySDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/CommunitySDJpaService.java","content":{"structured":{"description":"A community service that provides CRUD operations for communities, community houses, and community admins. The service includes methods for listing all communities, adding a new community, updating an existing community, deleting a community, adding admins to a community, removing admins from a community, and adding houses to a community. The service also includes methods for finding all community houses by community id, finding all community admins by community id, finding a single community by id, adding new community houses to an existing community, removing houses from a community, and deleting a community.","items":[{"id":"f4d479fc-a9e7-899d-714b-c858aba98bc8","ancestors":[],"type":"function","description":"TODO","name":"CommunitySDJpaService","code":"@Slf4j\n@RequiredArgsConstructor\n@Service\npublic class CommunitySDJpaService implements CommunityService {\n  private final CommunityRepository communityRepository;\n  private final UserRepository communityAdminRepository;\n  private final CommunityMapper communityMapper;\n  private final CommunityHouseRepository communityHouseRepository;\n  private final HouseService houseService;\n\n  @Override\n  public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueId());\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto),\n        userId);\n    Community savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }\n\n  private Community addAdminToCommunity(Community community, String userId) {\n    communityAdminRepository.findByUserIdWithCommunities(userId).ifPresent(admin -> {\n      admin.getCommunities().add(community);\n      Set<User> admins = new HashSet<>();\n      admins.add(admin);\n      community.setAdmins(admins);\n    });\n    return community;\n  }\n\n  @Override\n  public Set<Community> listAll(Pageable pageable) {\n    Set<Community> communityListSet = new HashSet<>();\n    communityRepository.findAll(pageable).forEach(communityListSet::add);\n    return communityListSet;\n  }\n\n  @Override public Set<Community> listAll() {\n    Set<Community> communities = new HashSet<>();\n    communityRepository.findAll().forEach(communities::add);\n    return communities;\n  }\n\n  @Override\n  public Optional<List<CommunityHouse>> findCommunityHousesById(String communityId,\n      Pageable pageable) {\n    boolean exists = communityRepository.existsByCommunityId(communityId);\n    if (exists) {\n      return Optional.of(\n          communityHouseRepository.findAllByCommunity_CommunityId(communityId, pageable));\n    }\n    return Optional.empty();\n  }\n\n  @Override\n  public Optional<List<User>> findCommunityAdminsById(String communityId,\n      Pageable pageable) {\n    boolean exists = communityRepository.existsByCommunityId(communityId);\n    if (exists) {\n      return Optional.of(\n          communityAdminRepository.findAllByCommunities_CommunityId(communityId, pageable)\n      );\n    }\n    return Optional.empty();\n  }\n\n  @Override\n  public Optional<User> findCommunityAdminById(String adminId) {\n    return communityAdminRepository.findByUserId(adminId);\n  }\n\n  @Override public Optional<Community> getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }\n\n  @Override\n  public Optional<Community> getCommunityDetailsByIdWithAdmins(String communityId) {\n    return communityRepository.findByCommunityIdWithAdmins(communityId);\n  }\n\n  @Override\n  public Optional<Community> addAdminsToCommunity(String communityId, Set<String> adminsIds) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithAdmins(communityId);\n\n    return communitySearch.map(community -> {\n      adminsIds.forEach(adminId -> {\n        communityAdminRepository.findByUserIdWithCommunities(adminId).map(admin -> {\n          admin.getCommunities().add(community);\n          community.getAdmins().add(communityAdminRepository.save(admin));\n          return admin;\n        });\n      });\n      return Optional.of(communityRepository.save(community));\n    }).orElseGet(Optional::empty);\n  }\n\n  @Override\n  public Set<String> addHousesToCommunity(String communityId, Set<CommunityHouse> houses) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithHouses(communityId);\n\n    return communitySearch.map(community -> {\n      Set<String> addedIds = new HashSet<>();\n\n      houses.forEach(house -> {\n        if (house != null) {\n          boolean houseExists = community.getHouses().stream()\n              .noneMatch(communityHouse ->\n                  communityHouse.getHouseId().equals(house.getHouseId())\n                      && communityHouse.getName().equals(house.getName())\n              );\n          if (houseExists) {\n            house.setHouseId(generateUniqueId());\n            house.setCommunity(community);\n            addedIds.add(house.getHouseId());\n            communityHouseRepository.save(house);\n            community.getHouses().add(house);\n          }\n        }\n      });\n\n      communityRepository.save(community);\n\n      return addedIds;\n    }).orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean removeAdminFromCommunity(String communityId, String adminId) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithAdmins(communityId);\n    return communitySearch.map(community -> {\n      boolean adminRemoved =\n          community.getAdmins().removeIf(admin -> admin.getUserId().equals(adminId));\n      if (adminRemoved) {\n        communityRepository.save(community);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }\n\n  @Override\n  @Transactional\n  public boolean deleteCommunity(String communityId) {\n    return communityRepository.findByCommunityIdWithHouses(communityId)\n        .map(community -> {\n          Set<String> houseIds = community.getHouses()\n              .stream()\n              .map(CommunityHouse::getHouseId)\n              .collect(Collectors.toSet());\n\n          houseIds.forEach(houseId -> removeHouseFromCommunityByHouseId(community, houseId));\n          communityRepository.delete(community);\n\n          return true;\n        })\n        .orElse(false);\n  }\n\n  private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }\n\n  @Transactional\n  @Override\n  public boolean removeHouseFromCommunityByHouseId(Community community, String houseId) {\n    if (community == null) {\n      return false;\n    } else {\n      Optional<CommunityHouse> houseOptional =\n          communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n      return houseOptional.map(house -> {\n        Set<CommunityHouse> houses = community.getHouses();\n        houses.remove(\n            house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work\n\n        Set<String> memberIds = house.getHouseMembers()\n            .stream()\n            .map(HouseMember::getMemberId)\n            .collect(\n                Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house\n\n        memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));\n\n        communityRepository.save(community);\n        communityHouseRepository.deleteByHouseId(houseId);\n        return true;\n      }).orElse(false);\n    }\n  }\n}","location":{"start":43,"insert":43,"offset":" ","indent":0},"item_type":"class","length":195},{"id":"f3d95575-2b0c-7e9f-9d4a-aa6eb956dc28","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"generates a unique ID for a community, adds an admin to the community, saves it to the repository, and returns the saved community.","params":[{"name":"communityDto","type_name":"CommunityDto","description":"Community object to be created, which contains information such as the community name and id that is used to create a new community instance in the repository.\n\n* `communityDto.setCommunityId(generateUniqueId());`: This line sets the community ID to a generated unique ID.\n* `String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();`: This line retrieves the user ID of the authenticated principal.\n* `Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto), userId);`: This line adds an admin to the community using the `addAdminToCommunity` method and passes in the deserialized `communityDto` as an argument, along with the user ID.\n* `Community savedCommunity = communityRepository.save(community);`: This line saves the created community to the repository using the `save` method.","complex_type":true}],"returns":{"type_name":"Community","description":"a `Community` object that has been added to the repository with its unique ID.\n\n* `community`: The community object saved in the repository with a unique ID generated using `generateUniqueId()`.\n* `userId`: The user ID of the principal authenticated in the SecurityContextHolder.\n* `communityMapper`: The mapper used to convert the `CommunityDto` to a `Community` object before adding an admin and saving it to the repository.\n* `communityRepository`: The repository where the community is saved.\n* `log`: A trace log statement indicating that the community was saved with its ID to the repository.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public Community createCommunity(CommunityDto communityDto) {\n    //Generate a unique id for the community\n    communityDto.setCommunityId(generateUniqueId());\n    \n    //Get the user Id of the current user\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    \n    //Create an instance of Community class with the DTO information and set the community ID to be generated before saving it to the repository\n    Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto), userId);\n    \n    //Save the created community to the repository\n    Community savedCommunity = communityRepository.save(community);\n    \n    //Log that the community was saved successfully with its id\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    \n    return savedCommunity;\n  }\n","description":"\nHere, we first generate a unique ID for the community using the `generateUniqueId` method. Then, we get the user Id of the current user from the security context. Next, we convert the DTO object to an instance of the Community class using the `communityMapper.communityDtoToCommunity(communityDto)` method. We then set the community ID to be generated before saving it to the repository by calling the `addAdminToCommunity` method and passing in both the converted Community instance and the user Id as arguments. Finally, we save the created community to the repository using the `communityRepository.save(community)` method and log that the community was saved successfully with its ID using the `log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId())`."},"name":"createCommunity","code":"@Override\n  public Community createCommunity(CommunityDto communityDto) {\n    communityDto.setCommunityId(generateUniqueId());\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    Community community = addAdminToCommunity(communityMapper.communityDtoToCommunity(communityDto),\n        userId);\n    Community savedCommunity = communityRepository.save(community);\n    log.trace(\"saved community with id[{}] to repository\", savedCommunity.getId());\n    return savedCommunity;\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"c4faa3ee-72dd-37b3-3348-386844a304d4","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"adds an admin to a community by retrieving the user's existing admin roles, adding the community to their list of communities, and updating the community's admin set.","params":[{"name":"community","type_name":"Community","description":"Community object that the function modifies by adding the provided `userId` to its set of admins.\n\n* `community`: A `Community` object representing a community in the system.\n* `userId`: The ID of the user who is being added as an admin to the community.","complex_type":true},{"name":"userId","type_name":"String","description":"identity of the user to add as an admin to the specified community.\n\n* `community`: This is the Community object that contains information about a community, such as its name, description, and other attributes.\n* `admin`: This is the User object that represents the user who will be added as an admin to the community. The `admin` object has properties such as the user's ID, username, email, and other attributes.\n* `communityAdminRepository`: This is a repository class that provides methods for interacting with the CommunityAdmin table in the database.\n* `findByUserIdWithCommunities`: This method finds all the communities that are associated with a given user ID by querying the CommunityAdmin table.\n* `ifPresent`: This is an optional method that is used to handle the case where there are multiple communities associated with the user ID. If there are no communities associated with the user ID, this method will return `None`.\n* `getCommunities`: This method returns a set of all the communities that are associated with the user ID.\n* `add`: This method adds an element to a set. In this case, it adds the community object to the set of admins for the given community.\n* `setAdmins`: This method sets the admins for the community object.\n\nIn summary, the `addAdminToCommunity` function takes a user ID as input and adds the user to the specified community as an admin, if appropriate.","complex_type":true}],"returns":{"type_name":"Community","description":"a modified Community object with the added admin user.\n\n* `community`: The Community object that contains the newly added admin.\n* `admins`: A set of User objects representing the admins added to the Community.\n* `userId`: The ID of the user who is being added as an admin to the Community.","complex_type":true},"usage":{"language":"java","code":"Community community = new Community();\ncommunity.setCommunityId(generateUniqueId());\ncommunity.setName(\"New Community\");\nSet<String> adminIds = new HashSet<>();\nadminIds.add(\"user1\"); // user1 is already an admin of this community\naddAdminToCommunity(community, \"user2\"); // adds user2 as an admin\n","description":"\nThis example would add the string \"user2\" to the set of admins for the community object created above with the id \"New Community\". It does not make any assumptions about the current state of the repository. It is not checking if the admin already exists in the community before adding it."},"name":"addAdminToCommunity","code":"private Community addAdminToCommunity(Community community, String userId) {\n    communityAdminRepository.findByUserIdWithCommunities(userId).ifPresent(admin -> {\n      admin.getCommunities().add(community);\n      Set<User> admins = new HashSet<>();\n      admins.add(admin);\n      community.setAdmins(admins);\n    });\n    return community;\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"8ac8798b-d89f-6c98-994d-9123928a1572","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"aggregates all communities from the repository and returns a set of them.","params":[{"name":"pageable","type_name":"Pageable","description":"pagination information for retrieving a subset of the `Community` objects in the repository, allowing for efficient retrieval of a specific page of results.\n\n* `Pageable`: This interface represents an object that can be used to page or offset data in a collection of objects. It has methods such as `getPageNumber()` and `getPageSize()` to retrieve the current page number and size, respectively.","complex_type":true}],"returns":{"type_name":"SetCommunity","description":"a set of all communities found in the repository.\n\nThe output is a `Set` of `Community` objects, which represents a collection of communities that match the specified pageable criteria.\n\nEach element in the set is a `Community` object, containing information about the community such as its name and location.\n\nThe `Set` implementation allows for efficient addition, removal, and iteration over the elements in the set, making it suitable for large datasets.\n\nOverall, the `listAll` function returns a convenient and efficient way to retrieve all communities that match the specified pageable criteria.","complex_type":true},"usage":{"language":"java","code":"@Autowired CommunityService communityService;\n...\nList<Community> communities = communityService.listAll(PageRequest.of(0, 10));\n","description":"\nThis would return the first 10 communities in the database. Pageable is a spring data interface that allows for pagination of results. The example uses `PageRequest` to create a page object with number 0 and size of 10. This would return all pages starting from the first one (page 0) and contain 10 elements per page."},"name":"listAll","code":"@Override\n  public Set<Community> listAll(Pageable pageable) {\n    Set<Community> communityListSet = new HashSet<>();\n    communityRepository.findAll(pageable).forEach(communityListSet::add);\n    return communityListSet;\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"7874c8bd-bd67-7abb-7140-7af529f3f20c","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves all `Community` objects from the database and stores them in a `Set` object, which is then returned.","params":[],"returns":{"type_name":"SetCommunity","description":"a set of all available `Community` objects.\n\n* The output is a `Set` of `Community` objects, indicating that the method returns a collection of communities.\n* The set contains all the communities retrieved from the database through the `findAll()` method of the `communityRepository`.\n* The `Set` ensures that no duplicate communities are present in the output.","complex_type":true},"usage":{"language":"java","code":"@Override public Set<Community> listAll() {\n    Set<Community> communities = new HashSet<>();\n    communityRepository.findAll().forEach(communities::add);\n    return communities;\n}\n","description":"\nThis example should be short as possible and should work correctly. It makes use of the foreach method to add each instance of Community found by the findAll() repository method in a set called communities, which is then returned at the end of the method. The method uses the :: operator to specify that the forEach method should be called on the Set object returned by the findAll() method and not on the actual List object itself."},"name":"listAll","code":"@Override public Set<Community> listAll() {\n    Set<Community> communities = new HashSet<>();\n    communityRepository.findAll().forEach(communities::add);\n    return communities;\n  }","location":{"start":81,"insert":81,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"3f96bc91-231d-35a2-9643-389191ce372b","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves a list of `CommunityHouse` objects associated with a given `communityId`. If the community exists, it returns an optional list of community houses; otherwise, it returns an empty optional.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose community houses are to be retrieved.\n\n* `communityId`: A String representing the unique identifier for a community.\n* `Pageable pageable`: A parameter that determines how data is fetched and paginated.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page number and size of the list of community houses to be retrieved, which is used to fetch a subset of the community houses from the database.\n\n* `communityId`: A string representing the unique identifier for a community.\n* `Pageable`: An object that contains information about how to page the results, including the number of elements to display per page and the total number of elements in the result set.","complex_type":true}],"returns":{"type_name":"OptionalListCommunityHouse","description":"a `Optional` object containing a list of `CommunityHouse` objects if the community exists, otherwise an empty `Optional`.\n\n* `Optional<List<CommunityHouse>>`: This represents an optional list of community houses, which means that if no community houses exist with the given `communityId`, the method will return an empty list.\n* `findAllByCommunity_CommunityId(communityId, pageable)`: This is a call to the `communityHouseRepository` to retrieve all community houses associated with the given `communityId`. The `pageable` argument specifies how the results should be paginated.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n  String communityId = \"1\";\n  Pageable pageable = new PageRequest(0, 5);\n  CommunityService service = new CommunityService();\n  Optional<List<CommunityHouse>> optionalCommunities = service.findCommunityHousesById(communityId, pageable);\n  \n  if (optionalCommunities.isPresent()) {\n    List<CommunityHouse> communities = optionalCommunities.get();\n    System.out.println(\"The following houses are found:\");\n    for (CommunityHouse communityHouse : communities) {\n      System.out.println(communityHouse);\n    }\n  } else {\n    System.out.println(\"No house has been found.\");\n  }\n}\n","description":"\nIn this example, a community with the ID \"1\" is searched for and all the houses belonging to that community are listed if it exists. If the search fails, the message \"No house has been found.\" is printed."},"name":"findCommunityHousesById","code":"@Override\n  public Optional<List<CommunityHouse>> findCommunityHousesById(String communityId,\n      Pageable pageable) {\n    boolean exists = communityRepository.existsByCommunityId(communityId);\n    if (exists) {\n      return Optional.of(\n          communityHouseRepository.findAllByCommunity_CommunityId(communityId, pageable));\n    }\n    return Optional.empty();\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"caca662f-5b42-0f9d-7740-bed1048b4e0e","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves a list of community admins for a given community ID, using a pageable object to specify the pagination criteria. If any admins exist for the specified community, they are returned in an Optional list; otherwise, an empty Optional is returned.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community for which the list of community admins is being retrieved.\n\n* `communityId`: This is a string representing the unique identifier for a community.\n* `Pageable`: This is an interface that provides a way to page and sort a collection of objects. It can be used to retrieve a subset of users based on a specified page number and size.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"pagination information for retrieving a subset of the community admins, allowing for efficient retrieval of a specific page of results.\n\n* `communityId`: A string representing the ID of the community to fetch admins for.\n* `Pageable`: An interface defining pagination functionality, which includes the ability to specify a page number and a page size. In this function, `pageable` is used to retrieve a list of administrators for a specific community.","complex_type":true}],"returns":{"type_name":"OptionalListUser","description":"a pageable list of community admins for a given community ID.\n\n* `Optional<List<User>>`: The function returns an optional list of users who are community admins for the given community ID. If no users are found, the list will be empty.\n* `findAllByCommunities_CommunityId`: This method is used to retrieve a list of users who are community admins for a specific community ID. It takes two parameters: the community ID and a pageable object for pagination.\n* `existsByCommunityId`: This method checks whether a community with the given ID exists in the database. If the community does not exist, this method returns `false`.","complex_type":true},"usage":{"language":"java","code":"CommunityService communityService = new CommunityService(communityRepository, houseService);\nOptional<List<User>> admins = communityService.findCommunityAdminsById(\"communityId\", Pageable.unpaged());\nadmins.ifPresent(admin -> {\n  admin.forEach(System.out::println);\n});\n","description":"\nThis example shows how to use the method findCommunityAdminsById with an input of \"communityId\" and an instance of Pageable.unpaged(). The method returns an Optional<List<User>>, so we need to check if it is present before using it. Once it is present, we can loop through each user in the list and print out their details.\n\nThis example would work as long as:\n* communityRepository exists with the given ID (i.e., an instance of Community exists in the database)\n* the method existsByCommunityId(String) exists in communityRepository\n* communityAdminRepository exists and has a findAllByCommunities_CommunityId method that takes in String communityId and Pageable pageable as inputs\n* houseService exists and has a deleteMemberFromHouse(String, String) method that takes in String houseId and String memberId as inputs."},"name":"findCommunityAdminsById","code":"@Override\n  public Optional<List<User>> findCommunityAdminsById(String communityId,\n      Pageable pageable) {\n    boolean exists = communityRepository.existsByCommunityId(communityId);\n    if (exists) {\n      return Optional.of(\n          communityAdminRepository.findAllByCommunities_CommunityId(communityId, pageable)\n      );\n    }\n    return Optional.empty();\n  }","location":{"start":98,"insert":98,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"071d74f7-7cad-7f89-e54e-e27dde5ce798","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves a `User` object representing the community administrator associated with the given `adminId`.","params":[{"name":"adminId","type_name":"String","description":"user ID of the community administrator to be retrieved.\n\n* `adminId`: This parameter represents the unique identifier for a community administrator.\n* Type: String\n* Length: Variable (can be any length)","complex_type":true}],"returns":{"type_name":"OptionalUser","description":"an Optional<User> object containing the community administrator for the specified ID.\n\nOptional<User> return value: The function returns an optional object representing a user if one is found in the communityAdminRepository. If no user is found, the return value will be empty.","complex_type":true},"usage":{"language":"java","code":"User user = communityService.findCommunityAdminById(\"adminId\").orElse(null);\nif (user != null) {\n  System.out.println(\"Found admin with ID \" + adminId + \" and username \" + user.getUsername());\n} else {\n  System.out.println(\"No such admin found\");\n}\n","description":"\nExplanation:\nThe method findCommunityAdminById takes a String parameter 'adminId' as input, which is the unique identifier of the admin to search for in the database. The method returns an Optional<User> object containing the matching User instance if it exists, or null otherwise.\n\nIn this example, we first call the method and assign its result to a variable user. If the result is non-null, we print out a message indicating that the admin was found with the associated username using the getUsername() method of the User class. Otherwise, we print out a message indicating that no such admin was found."},"name":"findCommunityAdminById","code":"@Override\n  public Optional<User> findCommunityAdminById(String adminId) {\n    return communityAdminRepository.findByUserId(adminId);\n  }","location":{"start":110,"insert":110,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"ccd59da4-094e-2399-5045-5f0800db859e","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves community details by Id from the community repository.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to retrieve details for.\n\n* `communityId`: This parameter represents a unique identifier for a community. It is typically a string value passed as an argument to the function.","complex_type":true}],"returns":{"type_name":"OptionalCommunity","description":"an optional instance of `Community`.\n\n* `Optional<Community>`: This indicates that the function may return an optional object of type `Community`, which means it can be null or not.\n* `communityRepository.findByCommunityId(communityId)`: This is a method call that retrieves a `Community` object based on its ID. The method returns an instance of `Optional`, which can be empty if the ID does not correspond to any community in the repository.","complex_type":true},"usage":{"language":"java","code":"Community community = communityService.getCommunityDetailsById(\"communityId\").get();\n","description":"\nIn this case, the input for 'communityId' is a String value of \"communityId\". This input will be passed to the findByCommunityId method of CommunityRepository, which will return an Optional of Community that has an ID equal to the value of 'communityId'. If a community with the given ID exists, this Optional would be present and contain a non-null value.\nThe above example can be used in a larger application like so:\n"},"name":"getCommunityDetailsById","code":"@Override public Optional<Community> getCommunityDetailsById(String communityId) {\n    return communityRepository.findByCommunityId(communityId);\n  }","location":{"start":115,"insert":115,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"0296662b-c127-faa1-8e45-d39ae1d450f6","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"retrieves community details and admins associated with a given community ID from the repository.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the Community for which details and admins are being retrieved.\n\n* `communityRepository`: This is an instance of a repository class that manages data access for community-related operations.\n* `findByCommunityIdWithAdmins`: This is a method in the `communityRepository` class that retrieves community details along with admins, given the `communityId`.","complex_type":true}],"returns":{"type_name":"Optional","description":"an optional object containing the details of the specified community and its administrators.\n\n* `Optional<Community>`: The function returns an optional instance of the `Community` class, which means that if no community is found with the given ID, the function will return an empty optional.\n* `communityRepository.findByCommunityIdWithAdmins(communityId)`: This method calls the `findByCommunityIdWithAdmins` method of the `communityRepository`, which returns a list of `Community` instances with the given ID and admin details.\n\nIn summary, the function returns an optional instance of the `Community` class containing information about the community with the given ID, including the community name, description, and list of admins.","complex_type":true},"usage":{"language":"java","code":"// Get community details with admin IDs for community with ID \"some-community-id\"\nOptional<Community> community = communityService.getCommunityDetailsByIdWithAdmins(\"some-community-id\");\n\nif (community.isPresent()) {\n    Community returnedCommunity = community.get(); // get the optional object and extract its value\n    System.out.println(returnedCommunity); // print the community details to console\n    Set<User> admins = returnedCommunity.getAdmins(); // get the set of admin users\n    for (User admin : admins) {\n        System.out.println(\"Admin ID: \" + admin.getUserId()); // print each admin user's ID\n    }\n} else {\n    System.out.println(\"No community with the given ID exists.\");\n}\n","description":"\nIn this example, we call getCommunityDetailsByIdWithAdmins() on a CommunityService instance called communityService, passing in the String \"some-community-id\". This method returns an Optional<Community> object which may or may not contain a Community with the given ID. If the Optional is empty, then we print to the console that no community with that ID exists, otherwise we extract the returned Community from the optional and print its details. We also get the Set of User objects representing the admins for this community and iterate over them, printing each admin user's ID."},"name":"getCommunityDetailsByIdWithAdmins","code":"@Override\n  public Optional<Community> getCommunityDetailsByIdWithAdmins(String communityId) {\n    return communityRepository.findByCommunityIdWithAdmins(communityId);\n  }","location":{"start":119,"insert":119,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"6c109904-2977-a8b5-1442-2f3d769c7050","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"searches for a community with the given `communityId`. If found, it iterates over the admins IDs and adds them to the community's admin list by saving each admin in the communityAdmin repository. Finally, it returns an optional community object representing the updated community.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to add admins to.\n\n1. `communityId`: This is an `Optional<String>` representing the ID of a community. The `Optional` type indicates that the input may be null or non-null.\n2. `Set<String> adminsIds`: This is a `Set` of strings representing the IDs of admins to add to the community.\n\nThe function first checks if there is already a community with the matching ID using the `communityRepository.findByCommunityIdWithAdmins()` method. If such a community is found, the function proceeds to add the admins to the community by iterating over the `adminsIds` set and calling the `communityAdminRepository.findByUserIdWithCommunities()` method to retrieve the admin objects associated with each ID. The function then updates the community object by adding the admins to its `admins` list and saves the updated community using the `communityRepository.save()` method. Finally, the function returns an `Optional` containing the saved community object.","complex_type":true},{"name":"adminsIds","type_name":"Set<String>","description":"set of user IDs that are to be added as admins to the community.\n\n* `Set<String> adminsIds`: This is a set of strings representing the IDs of users who are to be added as admins to a community.\n\nThe function first retrieves the community with the given `communityId` using the `communityRepository.findByCommunityIdWithAdmins()` method, and then iterates over the `adminsIds` set using a map-like operation. For each admin ID in the set, it queries the `communityAdminRepository` to find the user with that ID and its associated communities. Then, it adds the found admin to the community's list of admins and saves the admin in the repository. Finally, it returns an optional community object representing the updated community with added admins.","complex_type":true}],"returns":{"type_name":"OptionalCommunity","description":"an `Optional` containing a `Community` object that has been updated with the provided admins.\n\n* `Optional<Community> communitySearch`: This is an optional reference to a `Community` object that was previously found by the `communityRepository`. If no matching community was found, this will be `Optional.empty()`.\n* `map(function)`: This method returns an `Optional` reference to a `Community` object after applying a mapping function. The function takes the current `Community` object and modifies it by adding the provided admins to its `admins` list. If any error occurs during the modification, the method will return `Optional.empty()`.\n* `orElseGet(function)`: This method returns an `Optional` reference to a `Community` object after applying a fallback function. The function takes the current `Optional` reference and applies a mapping function to it. If the `Optional` reference is empty, the fallback function will return an empty `Optional` reference.\n* `save(function)`: This method saves the modified `Community` object in the database. It takes a function as an argument that modifies the `Community` object before saving it.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"123456789\";\nSet<String> adminsIds = new HashSet<>();\nadminsIds.add(\"user1\");\nadminsIds.add(\"user2\");\nadminsIds.add(\"user3\");\n\ncommunityService.addAdminsToCommunity(communityId, adminsIds);\n","description":"\nThis example shows the usage of the method addAdminsToCommunity for a community with the ID \"123456789\", adding three users as new administrators to that community. The Set<String> variable adminsIds contains the IDs of the three new admins.\n\nAlternatively, you could also use the method addAdminsToCommunity to remove an admin from a community:\n"},"name":"addAdminsToCommunity","code":"@Override\n  public Optional<Community> addAdminsToCommunity(String communityId, Set<String> adminsIds) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithAdmins(communityId);\n\n    return communitySearch.map(community -> {\n      adminsIds.forEach(adminId -> {\n        communityAdminRepository.findByUserIdWithCommunities(adminId).map(admin -> {\n          admin.getCommunities().add(community);\n          community.getAdmins().add(communityAdminRepository.save(admin));\n          return admin;\n        });\n      });\n      return Optional.of(communityRepository.save(community));\n    }).orElseGet(Optional::empty);\n  }","location":{"start":124,"insert":124,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"2cabadb5-bb61-5e9d-5d49-9453f9c654fe","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"takes a community ID and a set of houses, checks if the community exists with the same ID, and adds the houses to the community's house list if they don't exist. It also generates unique IDs for new houses and saves them in the repository.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the houses are being added, and is used to retrieve the existing houses in the community and to identify the new houses that need to be added.\n\n* `communityId`: A string representing the unique identifier of a community.\n* `houses`: A set of `CommunityHouse` objects that represent the houses to be added to the community. Each `CommunityHouse` object has attributes such as `houseId`, `name`, and `communtiy`.","complex_type":true},{"name":"houses","type_name":"Set<CommunityHouse>","description":"houses to be added to a community, which are checked for existence and updated with unique IDs if necessary before being added to the community.\n\n* `houses`: A set of `CommunityHouse` objects representing houses to be added to a community. Each house has a unique `houseId`, and its name is the same as the corresponding community house with the same ID.\n* `communityId`: The ID of the community to which the houses belong.\n* `community`: An optional `Community` object representing the community to which the houses belong. If present, it contains the ID and name of the community. Otherwise, it is null.","complex_type":true}],"returns":{"type_name":"HashSetString","description":"a set of unique house IDs that have been added to the community, along with the updated community object.\n\n* `Set<String> addedIds`: This is the set of unique house IDs that were successfully added to the community.\n* `Optional<Community> communitySearch`: This is an optional reference to a `Community` object that was found in the repository using the `communityRepository.findByCommunityIdWithHouses()` method. If the method did not find any matching community, this will be `Optional.empty()`.\n* `Set<CommunityHouse> communityHouses`: This is the set of existing houses in the community, which are used to determine whether a house already exists in the community and whether it needs to be updated or added.\n* `HashSet<String> uniquesIds`: This is a separate set that contains the unique IDs of the houses that were successfully added to the community.\n\nThe function first checks if there is a matching community using the `communityRepository.findByCommunityIdWithHouses()` method. If no match is found, the method returns an empty `Optional`. Otherwise, it returns a reference to the matching community.\n\nThe function then iterates through each house in the `houses` set and checks if the house already exists in the community using the `communityHouseRepository.stream().noneMatch()` method. If the house does not exist, it is created with a unique ID generated using `generateUniqueId()`, and its name is updated to match the name of the community. The new house is then added to the community using the `CommunityHouseRepository.save()` method. Finally, the function saves the updated community using the `communityRepository.save()` method.\n\nThe output of the function is a set of unique IDs of the houses that were successfully added to the community.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityService communityService;\n\n// ...\n\nSet<CommunityHouse> houses = new HashSet<>();\nhouses.add(new CommunityHouse(\"1234\", \"123 Main St\"));\nhouses.add(new CommunityHouse(\"5678\", \"567 Elm St\"));\n\ncommunityService.addHousesToCommunity(\"1234\", houses);\n","description":"\nThis would add the two houses with IDs 1234 and 5678 to a community with ID 1234 if the community already exists in the database, and if no house with those IDs exists in the community. The method returns the set of unique house IDs that were successfully added.\n\nThis example shows how addHousesToCommunity would be used by adding two houses to a community using the community service. The ID of the community is 1234, and the houses being added are with IDs \"1234\" and \"5678\". If the community already exists in the database, and no house with those IDs exist in the community, then the two houses would be added to the community, and the method would return a set of unique house IDs that were successfully added. The IDs of the two houses are 1234 and 5678, respectively."},"name":"addHousesToCommunity","code":"@Override\n  public Set<String> addHousesToCommunity(String communityId, Set<CommunityHouse> houses) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithHouses(communityId);\n\n    return communitySearch.map(community -> {\n      Set<String> addedIds = new HashSet<>();\n\n      houses.forEach(house -> {\n        if (house != null) {\n          boolean houseExists = community.getHouses().stream()\n              .noneMatch(communityHouse ->\n                  communityHouse.getHouseId().equals(house.getHouseId())\n                      && communityHouse.getName().equals(house.getName())\n              );\n          if (houseExists) {\n            house.setHouseId(generateUniqueId());\n            house.setCommunity(community);\n            addedIds.add(house.getHouseId());\n            communityHouseRepository.save(house);\n            community.getHouses().add(house);\n          }\n        }\n      });\n\n      communityRepository.save(community);\n\n      return addedIds;\n    }).orElse(new HashSet<>());\n  }","location":{"start":141,"insert":141,"offset":" ","indent":2},"item_type":"method","length":30},{"id":"622b893b-cd82-72ae-644e-341ef8f41c37","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"removes an administrator from a community based on their user ID. It first retrieves the community with the given ID and its associated admins, then removes the admin from the community's admin list using a stream operation. If successful, it saves the updated community and returns `true`.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose admin is to be removed.\n\n* `communityId`: This is an `String` property representing the ID of a community. It is used as a unique identifier for the community in the database.\n* `adminId`: This is an `String` property representing the ID of an admin to be removed from the community. It is used to identify the admin to be removed from the community.","complex_type":true},{"name":"adminId","type_name":"String","description":"ID of the admin to be removed from the community.\n\n* `communityId`: A String that represents the identifier of the community to remove the admin from.\n* `adminId`: A String that represents the identifier of the admin to be removed from the community.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an admin has been successfully removed from a community.","complex_type":false},"usage":{"language":"java","code":"// Remove admin \"johndoe\" from community with ID \"community_123456789\".\nboolean success = communityService.removeAdminFromCommunity(\"community_123456789\", \"johndoe\");\n\nif (success) {\n    System.out.println(\"Admin successfully removed from community.\");\n} else {\n    System.out.println(\"Admin not found in community or an error occurred.\");\n}\n","description":"\nThe method is called with two parameters: the community ID and the admin ID of the admin that needs to be removed. The method first uses the communityRepository's findByCommunityIdWithAdmins() method to search for a community with the provided ID, if such a community exists it removes the admin from the community and saves the changes using the communityRepository.save() method. If the admin is not found or an error occurs, the method returns false.\n\nThe above example code is a simplified version of how to use the removeAdminFromCommunity method. In real-life scenarios, you would probably want to check if the admin being removed from the community is the only admin and handle that case in some way (either throwing an error or removing the last admin). Also, this is not a very safe approach to handling errors as it will just return false if there is any issue while removing the admin."},"name":"removeAdminFromCommunity","code":"@Override\n  public boolean removeAdminFromCommunity(String communityId, String adminId) {\n    Optional<Community> communitySearch =\n        communityRepository.findByCommunityIdWithAdmins(communityId);\n    return communitySearch.map(community -> {\n      boolean adminRemoved =\n          community.getAdmins().removeIf(admin -> admin.getUserId().equals(adminId));\n      if (adminRemoved) {\n        communityRepository.save(community);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }","location":{"start":172,"insert":172,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"6d56dbe4-387a-eabd-cb48-eb0b9077f12f","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"deletes a community from the repository by finding all houses associated with it, removing them one by one, and then deleting the community itself.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to be deleted.\n\n* `communityRepository`: This is an instance of `CrudRepository`, which provides methods for performing CRUD (Create, Read, Update, Delete) operations on entities in a database.\n* `findByCommunityIdWithHouses()`: This method returns a list of `Community` objects that match the provided `communityId`. The list includes information about each community's houses.\n* `map()`: This method applies a function to each element in the list, transforming it into a new form. In this case, the function is used to extract the house IDs from each community.\n* `stream()`: This method creates a stream of elements from the list, which can be used for parallel processing or other operations that require access to the entire list.\n* `map()`: This method applies a function to each element in the stream, transforming it into a new form. In this case, the function is used to extract the house IDs from each community.\n* `collect(Collectors.toSet())`: This method collects all the elements in the stream into a set, which is a collection that contains only unique elements. In this case, the set contains the house IDs for each community.\n* `forEach()`: This method applies a function to each element in the set, in this case, removing each house from the corresponding community.\n* `delete()`: This method deletes the community from the database.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the community was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"public void main(String[] args) {\n    CommunityService communityService = new CommunityService();\n\n    String communityId = \"my_community_id\";\n\n    boolean success = communityService.deleteCommunity(communityId);\n\n    if (success) {\n        System.out.println(\"Community successfully deleted.\");\n    } else {\n        System.out.println(\"Community not found or could not be deleted.\");\n    }\n}\n","description":""},"name":"deleteCommunity","code":"@Override\n  @Transactional\n  public boolean deleteCommunity(String communityId) {\n    return communityRepository.findByCommunityIdWithHouses(communityId)\n        .map(community -> {\n          Set<String> houseIds = community.getHouses()\n              .stream()\n              .map(CommunityHouse::getHouseId)\n              .collect(Collectors.toSet());\n\n          houseIds.forEach(houseId -> removeHouseFromCommunityByHouseId(community, houseId));\n          communityRepository.delete(community);\n\n          return true;\n        })\n        .orElse(false);\n  }","location":{"start":188,"insert":188,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"ab7996a6-5270-79bb-d842-940869325f6c","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"generates a unique identifier using the `UUID.randomUUID()` method, returning it as a string.","params":[],"returns":{"type_name":"String","description":"a unique string of characters representing a randomly generated UUID.\n\nThe output is a string that represents a unique identifier generated using the UUID (Universally Unique Identifier) standard. The resulting string consists of a series of letters and numbers, with a specific format specified in the UUID document. Specifically, the string is in the form of \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", where each x represents a digit or letter between 0 and 9.\n\nThe length of the output string can vary depending on the version of the UUID standard used to generate it. The standard provides several versions, each with a different maximum length for the generated strings. For example, version 1 generates strings up to 16 characters in length, while version 4 generates strings up to 36 characters in length.\n\nOverall, the `generateUniqueId` function returns a unique and cryptographically secure identifier that can be used to identify a particular object or entity without any risk of collision or duplication.","complex_type":true},"usage":{"language":"java","code":"//Generate a unique ID and print it out to the console\nString uniqueID = generateUniqueId();\nSystem.out.println(uniqueID);\n","description":"\nThis code will simply call the generateUniqueId() method, which uses the UUID class provided by Java to generate a random, unique string of characters. It then stores that string in the variable 'uniqueID' and prints it out to the console using println()."},"name":"generateUniqueId","code":"private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":206,"insert":206,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"5c05f595-2dc2-6da5-104c-486d71de26aa","ancestors":["f4d479fc-a9e7-899d-714b-c858aba98bc8"],"type":"function","description":"removes a house from a community by first removing it from the community's house members set, then deleting the individual member IDs from the house, and finally saving the community and deleting the house.","params":[{"name":"community","type_name":"Community","description":"Community object that is being updated or deleted.\n\n* `community`: A `Community` object that represents a community in the system. It has several attributes, including `id`, `name`, `description`, and `members`.\n* `id`: An integer representing the unique identifier for the community.\n* `name`: A string representing the name of the community.\n* `description`: A string representing a brief description of the community.\n* `members`: A set of `HouseMember` objects that represent the members of the community. Each `HouseMember` object has an `id`, `memberId`, and `houseId` attributes.","complex_type":true},{"name":"houseId","type_name":"String","description":"ID of the house to be removed from the community.\n\n* `community`: A `Community` object that represents the community in which the house is located.\n* `houseId`: A `String` representing the unique identifier of the house to be removed from the community.\n\nThe function first verifies whether the input `community` is null, and if so, returns false. It then uses the `findByHouseIdWithHouseMembers` method of the `communityHouseRepository` to find the house with the matching `houseId`. If no house is found, the function returns false.\n\nNext, the function modifies the set of houses in the `community` by removing the house with the matching `houseId`, using the `remove` method. This is done before deleting the members of the house to avoid breaking the Set relationship between the house and its members.\n\nThe function then streams the members of the removed house, uses the `map` method to transform each member ID into a `String`, and collects all the member IDs using the `collect` method. Finally, it deletes each member ID from the house using the `deleteMemberFromHouse` function.\n\nAfter deleting the members, the function saves the updated community and deletes the removed house using the `communityRepository.save` and `communityHouseRepository.deleteByHouseId` methods, respectively. The function finally returns true if the house was successfully removed from the community.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the house was successfully removed from the community.","complex_type":false},"usage":{"language":"java","code":"@Test\npublic void testRemoveHouseFromCommunityByHouseId() {\n  Community community = new Community();\n  CommunityHouse house = new CommunityHouse();\n  \n  // Add the house to the community\n  Set<CommunityHouse> houses = new HashSet<>();\n  houses.add(house);\n  community.setHouses(houses);\n  \n  boolean removed = removeHouseFromCommunityByHouseId(community, \"1234\");\n  assertTrue(removed); // Assert the house is removed from the community\n}\n","description":"\nIn this example, we are creating a new instance of Community and CommunityHouse. The Community has one House with the ID \"1234\" which is added to the Set of houses in the Community class. We then call the method removeHouseFromCommunityByHouseId on the community object passing in the house ID as an argument and check if it returned true. AssertTrue checks that the boolean return value of the function is equal to true, so we are sure that the function removes the house from the community."},"name":"removeHouseFromCommunityByHouseId","code":"@Transactional\n  @Override\n  public boolean removeHouseFromCommunityByHouseId(Community community, String houseId) {\n    if (community == null) {\n      return false;\n    } else {\n      Optional<CommunityHouse> houseOptional =\n          communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n      return houseOptional.map(house -> {\n        Set<CommunityHouse> houses = community.getHouses();\n        houses.remove(\n            house); //remove the house before deleting house members because otherwise the Set relationship would be broken and remove would not work\n\n        Set<String> memberIds = house.getHouseMembers()\n            .stream()\n            .map(HouseMember::getMemberId)\n            .collect(\n                Collectors.toSet()); //streams are immutable so need to collect all the member IDs and then delete them from the house\n\n        memberIds.forEach(id -> houseService.deleteMemberFromHouse(houseId, id));\n\n        communityRepository.save(community);\n        communityHouseRepository.deleteByHouseId(houseId);\n        return true;\n      }).orElse(false);\n    }\n  }","location":{"start":210,"insert":210,"offset":" ","indent":2},"item_type":"method","length":27}]}}}