{"name":"BookingSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/BookingSDJpaService.java","content":{"structured":{"description":"a `BookingSDJpaService` class that implements the `BookingService` interface using Spring Data JPA. The class has a single method, `deleteBooking`, which takes two string parameters - `amenityId` and `bookingId`. The method uses Java's `@Transactional` annotation to indicate that it is a transactional method. It then uses the `findByAmenityBookingItemId` method of the `AmenityBookingItemRepository` class to find the `AmenityBookingItem` object associated with the given `bookingId`. If the `AmenityBookingItem` is found, the method calls the `delete` method of the `AmenityBookingItemRepository` to delete the `AmenityBookingItem`. Finally, the method returns a boolean value indicating whether the deletion was successful.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.springdatajpa.BookingSDJpaService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.springdatajpa.BookingSDJpaService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"interfacecom_1_1myhome_1_1services_1_1BookingService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"185,-96 15,-96 15,-66 185,-66 185,-96\"/>\n<text text-anchor=\"start\" x=\"23\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Booking</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"56512b1c-3fc3-4fb4-3b4b-6939a062f62a","ancestors":[],"type":"function","description":"TODO","name":"BookingSDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class BookingSDJpaService implements BookingService {\n\n  private final AmenityBookingItemRepository bookingRepository;\n\n  @Transactional\n  @Override\n  public boolean deleteBooking(String amenityId, String bookingId) {\n    Optional<AmenityBookingItem> booking =\n        bookingRepository.findByAmenityBookingItemId(bookingId);\n    return booking.map(bookingItem -> {\n      boolean amenityFound =\n          bookingItem.getAmenity().getAmenityId().equals(amenityId);\n      if (amenityFound) {\n        bookingRepository.delete(bookingItem);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":23},{"id":"69c21270-e449-61a9-a94c-5c4207954d10","ancestors":["56512b1c-3fc3-4fb4-3b4b-6939a062f62a"],"type":"function","description":"deletes a booking from the database based on the amenity ID and booking ID parameters. It first retrieves the booking item from the repository using the booking ID, then checks if the amenity ID of the booking item matches the provided amenity ID. If it does, the function deletes the booking item from the repository and returns `true`. Otherwise, it returns `false`.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity for which the booking is being searched, and it is used to filter the booking items in the repository to only those that correspond to the specified amenity.\n\n* `Optional<AmenityBookingItem> booking`: This represents an optional reference to an `AmenityBookingItem` object in the repository. If no matching booking item is found, this will be `Optional.empty()`.\n* `bookingItem.getAmenity().getAmenityId()`: This retrieves the amenity ID associated with the booking item.\n* `amenityFound`: A boolean indicating whether the amenity ID matches the input `amenityId`. If this is `true`, the function proceeds to delete the matching booking item; otherwise, it returns `false`.","complex_type":true},{"name":"bookingId","type_name":"String","description":"unique identifier of a booking item to be deleted.\n\n* `amenityId`: The ID of the amenity related to the booking.\n* `bookingId`: The unique identifier for the booking.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the booking was successfully deleted.\n\n* The `map` method is used to perform an action on each element in the `Optional` object, and the result of this action is stored in the `Optional` object.\n* The `findByAmenityBookingItemId` method is used to find an `AmenityBookingItem` entity based on its `amenityBookingItemId`, and the resulting `Optional` object contains the found entity or `None` if no entity is found.\n* The `delete` method is used to delete an `AmenityBookingItem` entity from the repository, which will result in the deletion of the corresponding booking item.\n* The `orElse` method is used to return a default value if the `Optional` object contains no elements. In this case, the default value is `false`.\n\nThe output of the `deleteBooking` function can be destructured as follows:\n\n* If the `Optional` object contains an element, the resulting `boolean` value will be `true` if the booking item was successfully deleted, and `false` otherwise.\n* If the `Optional` object is empty (`None`), the resulting `boolean` value will be `false`.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    BookingSDJpaService bookingSDJpaService = new BookingSDJpaService();\n    String amenityId = \"someAmenityId\";\n    String bookingId = \"someBookingId\";\n    boolean deleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (deleted) {\n      System.out.println(\"The booking was successfully deleted\");\n    } else {\n      System.out.println(\"The booking could not be found or the amenity Id did not match the booking\");\n    }\n  }\n}\n","description":""},"name":"deleteBooking","code":"@Transactional\n  @Override\n  public boolean deleteBooking(String amenityId, String bookingId) {\n    Optional<AmenityBookingItem> booking =\n        bookingRepository.findByAmenityBookingItemId(bookingId);\n    return booking.map(bookingItem -> {\n      boolean amenityFound =\n          bookingItem.getAmenity().getAmenityId().equals(amenityId);\n      if (amenityFound) {\n        bookingRepository.delete(bookingItem);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }","location":{"start":17,"insert":17,"offset":" ","indent":2},"item_type":"method","length":16}]}}}