{"name":"HouseMemberDocumentSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/HouseMemberDocumentSDJpaService.java","content":{"structured":{"description":"an interface `HouseMemberDocumentSDJpaService` that implements a service for handling HouseMember documents in a Spring Data JPA environment. It provides methods for finding and deleting HouseMember documents, updating them with new multipart files, and creating new ones. The code uses various high-level packages such as `org.springframework`, `java.util`, `javax.imageio`, and `java.awt`.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.HouseMember Pages: 1 -->\n<svg width=\"206pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 206.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.HouseMember</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"198,-19 0,-19 0,0 198,0 198,-19\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"188.5,-74 9.5,-74 9.5,-55 188.5,-55 188.5,-74\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-44.66C99,-35.93 99,-25.99 99,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-44.75 99,-54.75 102.5,-44.75 95.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"136,-129 62,-129 62,-110 136,-110 136,-129\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-99.66C99,-90.93 99,-80.99 99,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-99.75 99,-109.75 102.5,-99.75 95.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"7aa89ccf-ae33-319f-b247-0737acc2954b","ancestors":[],"type":"function","description":"TODO","name":"HouseMemberDocumentSDJpaService","code":"@Service\npublic class HouseMemberDocumentSDJpaService implements HouseMemberDocumentService {\n\n  private final HouseMemberRepository houseMemberRepository;\n  private final HouseMemberDocumentRepository houseMemberDocumentRepository;\n  @Value(\"${files.compressionBorderSizeKBytes}\")\n  private int compressionBorderSizeKBytes;\n  @Value(\"${files.maxSizeKBytes}\")\n  private int maxFileSizeKBytes;\n  @Value(\"${files.compressedImageQuality}\")\n  private float compressedImageQuality;\n\n  public HouseMemberDocumentSDJpaService(HouseMemberRepository houseMemberRepository,\n      HouseMemberDocumentRepository houseMemberDocumentRepository) {\n    this.houseMemberRepository = houseMemberRepository;\n    this.houseMemberDocumentRepository = houseMemberDocumentRepository;\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> findHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId)\n        .map(HouseMember::getHouseMemberDocument);\n  }\n\n  @Override\n  public boolean deleteHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      if (member.getHouseMemberDocument() != null) {\n        member.setHouseMemberDocument(null);\n        houseMemberRepository.save(member);\n        return true;\n      }\n      return false;\n    }).orElse(false);\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }\n\n  private Optional<HouseMemberDocument> tryCreateDocument(MultipartFile multipartFile,\n      HouseMember member) {\n\n    try (ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream()) {\n      BufferedImage documentImage = getImageFromMultipartFile(multipartFile);\n      if (multipartFile.getSize() < DataSize.ofKilobytes(compressionBorderSizeKBytes).toBytes()) {\n        writeImageToByteStream(documentImage, imageByteStream);\n      } else {\n        compressImageToByteStream(documentImage, imageByteStream);\n      }\n      if (imageByteStream.size() < DataSize.ofKilobytes(maxFileSizeKBytes).toBytes()) {\n        HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream,\n            String.format(\"member_%s_document.jpg\", member.getMemberId()));\n        return Optional.of(houseMemberDocument);\n      } else {\n        return Optional.empty();\n      }\n    } catch (IOException e) {\n      return Optional.empty();\n    }\n  }\n\n  private HouseMember addDocumentToHouseMember(HouseMemberDocument houseMemberDocument,\n      HouseMember member) {\n    member.setHouseMemberDocument(houseMemberDocument);\n    return houseMemberRepository.save(member);\n  }\n\n  private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream,\n      String filename) {\n    HouseMemberDocument newDocument =\n        new HouseMemberDocument(filename, imageByteStream.toByteArray());\n    return houseMemberDocumentRepository.save(newDocument);\n  }\n\n  private void writeImageToByteStream(BufferedImage documentImage,\n      ByteArrayOutputStream imageByteStream)\n      throws IOException {\n    ImageIO.write(documentImage, \"jpg\", imageByteStream);\n  }\n\n  private void compressImageToByteStream(BufferedImage bufferedImage,\n      ByteArrayOutputStream imageByteStream) throws IOException {\n\n    try (ImageOutputStream imageOutStream = ImageIO.createImageOutputStream(imageByteStream)) {\n\n      ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      imageWriter.setOutput(imageOutStream);\n      ImageWriteParam param = imageWriter.getDefaultWriteParam();\n\n      if (param.canWriteCompressed()) {\n        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n        param.setCompressionQuality(compressedImageQuality);\n      }\n      imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);\n      imageWriter.dispose();\n    }\n  }\n\n  private BufferedImage getImageFromMultipartFile(MultipartFile multipartFile) throws IOException {\n    try (InputStream multipartFileStream = multipartFile.getInputStream()) {\n      return ImageIO.read(multipartFileStream);\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0},"item_type":"class","length":121},{"id":"e34e3f09-5de5-7ea7-3243-1442520755c7","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"returns an Optional containing the House Member Document for a given member ID, retrieved from the house Member Repository.","params":[{"name":"memberId","type_name":"String","description":"identity of a member in a house, and it is used to retrieve the corresponding House Member Document from the repository.\n\n* `houseMemberRepository`: This is an instance of the `HouseMemberRepository` class, which is likely to be a data access layer component.\n* `findByMemberId()`: This is a method of the `HouseMemberRepository` class that returns a stream of `HouseMember` objects filtered by their `memberId`.\n* `map()`: This is a method of the `Optional` class that applies a function to the contained value, in this case, the `getHouse MemberDocument` method of the deserialized `HouseMember` object.","complex_type":true}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an Optional object containing the HouseMemberDocument for the specified member ID.\n\n* `Optional<HouseMemberDocument>`: This is an optional object that contains either a `HouseMemberDocument` or `null`, depending on whether a `HouseMember` with the provided `memberId` exists in the database.\n* `houseMemberRepository`: This is a repository interface that provides methods for interacting with the `HouseMember` database table.\n* `findByMemberId(String memberId)`: This method is used to retrieve a `HouseMember` object from the database based on the provided `memberId`. It returns an optional `House Member` object, which is then passed to the `map()` method to extract the `HouseMemberDocument`.\n* `getHouseMemberDocument()`: This is a method that returns the `HouseMemberDocument` associated with the `HouseMember` object.","complex_type":true},"usage":{"language":"java","code":"// Finding the house member document of the member with id \"1234\"\nOptional<HouseMemberDocument> optionalDocument = findHouseMemberDocument(\"1234\");\nif (optionalDocument.isPresent()) {\n    HouseMemberDocument document = optionalDocument.get();\n    // Accessing the document's attributes and performing operations on it as needed\n} else {\n    System.out.println(\"No document found.\");\n}\n","description":""},"name":"findHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> findHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId)\n        .map(HouseMember::getHouseMemberDocument);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"151db5fa-bd8c-d0b4-1d40-ed89437dcab1","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"deletes a member's document from the House Member Document repository by finding the corresponding member record, setting its document field to null, and saving it to the repository. It returns a boolean indicating whether the operation was successful.","params":[{"name":"memberId","type_name":"String","description":"ID of the house member whose House Member Document is to be deleted.\n\n* `memberId`: A string representing the unique identifier for a member in a house.\n\nThe function first queries the `houseMemberRepository` to find the member object associated with the provided `memberId`. If the `House Member Document` field of the member is not null, it is set to null and then saved to the repository. Finally, the function returns a boolean value indicating whether the operation was successful.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the house member document was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean deleteHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      if (member.getHouseMemberDocument() != null) {\n        member.setHouseMemberDocument(null);\n        houseMemberRepository.save(member);\n        return true;\n      }\n      return false;\n    }).orElse(false);\n  }\n","description":"\nThis example takes in a single input, 'String' with the name 'memberId', which is used to find the specific HouseMemberDocument object that corresponds to this memberId. If this document exists and is not null, it will be deleted from the database. The method then returns a boolean value indicating whether or not the deletion was successful.\n\nTo test this example, we can try deleting a document for a known house member with an existing ID, like so:\n"},"name":"deleteHouseMemberDocument","code":"@Override\n  public boolean deleteHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      if (member.getHouseMemberDocument() != null) {\n        member.setHouseMemberDocument(null);\n        houseMemberRepository.save(member);\n        return true;\n      }\n      return false;\n    }).orElse(false);\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"7ae6dca5-43d3-51b9-974a-d6ddb32201de","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"updates an existing House Member Document by creating a new document if one does not exist, and then adding it to the member's record if successful.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file containing the House Member Document that needs to be updated.\n\n* `multipartFile`: A `MultipartFile` object that contains the file to be updated.\n* `memberId`: A `String` representing the ID of the member whose document is being updated.","complex_type":true},{"name":"memberId","type_name":"String","description":"unique identifier of the member whose House Member Document is being updated.\n\n* `memberId`: A string representing the unique identifier for a member in the house.","complex_type":true}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an Optional<HouseMemberDocument> containing the updated document for the specified member.\n\n* `Optional<HouseMemberDocument>` represents an optional house member document that can be obtained by calling the `map` method on the `Optional` instance. If a house member document is found and updated successfully, this Optional will contain a non-empty `HouseMemberDocument`. Otherwise, it will be empty.\n* The `findByMemberId` method of the `houseMemberRepository` returns an `Optional` containing the house member with the specified `memberId`, or `None` if no such member is found.\n* The `tryCreateDocument` method creates a new `HouseMemberDocument` instance based on the provided `multipartFile` and `member` parameters, or returns `Optional.empty()` if an exception occurs.\n* The `addDocumentToHouseMember` method adds the created `HouseMemberDocument` to the specified `house Member`, or does nothing if the document already exists.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate HouseMemberService houseMemberService;\n\npublic void someMethod() {\n    MultipartFile multipartFile = new MockMultipartFile(\"member_document.jpg\", \"content\".getBytes());\n    String memberId = \"member-id\";\n    Optional<HouseMemberDocument> updatedDocument = houseMemberService.updateHouseMemberDocument(multipartFile, memberId);\n    \n    // Handle the result of the operation\n}\n","description":"\nThe example shows how to use the method updateHouseMemberDocument with a MultipartFile object and a String representing the member id. The method returns an Optional containing the updated HouseMemberDocument if successful. It is then up to the caller to handle the result of the operation, such as saving the updated document or displaying it in the UI.\n\nIt's important to note that this example uses MockMultipartFile which is a mock implementation of the MultipartFile interface provided by Spring Boot for testing purposes. It should not be used in production code.\n\nThis method updates the HouseMemberDocument associated with a specific memberId, using the image data from a given multipart file. The following steps are followed:\n1. Find the HouseMember associated with the member id.\n2. Try to create a HouseMemberDocument instance from the provided multipartFile. If successful, add it to the HouseMember and save it in the repository.\n3. Return an Optional containing the updated HouseMemberDocument if successful, or empty otherwise.\n\nThis method uses the houseMemberRepository and houseMemberDocumentRepository for saving and retrieving data, respectively. It also uses the getImageFromMultipartFile(MultipartFile multipartFile) method to extract image data from a given multipart file.\n\nIt's important to note that this method only works if a HouseMember exists with the provided memberId. If there is no HouseMember found for the provided id, an empty Optional will be returned and the operation will fail silently."},"name":"updateHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"321f84db-c6c4-028a-2b46-de339a08d395","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"creates a new `HouseMemberDocument` instance based on a provided `MultipartFile` and `memberId`. It first retrieves the member from the repository using the `memberId`, then tries to create a new document for the member using the `multipartFile`. If successful, it adds the document to the member in the repository.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file containing the House Member's document to be created or updated.\n\n* `multipartFile`: A `MultipartFile` object representing a file uploaded by the user. Its attributes may include:\n\t+ `filename`: The name of the file being uploaded.\n\t+ `originalFilename`: The original filename of the file before it was processed by Spring.\n\t+ `contentType`: The MIME type of the file, which can be used to determine its format and potential content.\n\t+ `size`: The size of the file in bytes.\n\t+ `inputStream`: An `InputStream` object representing the contents of the file.","complex_type":true},{"name":"memberId","type_name":"String","description":"unique identifier of the member whose House Member Document is being created or updated.\n\n* `memberId`: This is a string representing the unique identifier for a member in the House. It is used to locate the corresponding member object in the `houseMemberRepository`.","complex_type":true}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an Optional<HouseMemberDocument> containing a newly created or updated House Member document.\n\n* The first part of the return statement involves calling the `findByMemberId` method on the `houseMemberRepository`, which returns an `Optional` containing a `HouseMember` object if found, and `None` otherwise.\n* The second part of the return statement maps the `member` parameter to an `Optional` of type `HouseMemberDocument`. This is done using the `tryCreateDocument` method, which creates a new `HouseMemberDocument` instance if the `multipartFile` parameter is not `None`, and returns it in an `Optional` format.\n* The third part of the return statement checks if the `houseMemberDocument` Optional is non-empty. If it is, the `addDocumentToHouseMember` method is called with the `document` parameter, which adds the document to the corresponding `House Member`.\n* The final part of the return statement returns the original `Optional` containing the `HouseMemberDocument`, or an empty `Optional` if no document was created.","complex_type":true},"usage":{"language":"java","code":"public class HouseMemberServiceTest {\n  @Test\n  public void shouldCreateDocument() throws Exception {\n    // GIVEN\n    String memberId = \"1234\";\n    MultipartFile multipartFile = mock(MultipartFile.class);\n    byte[] documentImageBytes = new byte[0];\n    when(multipartFile.getSize()).thenReturn(documentImageBytes.length);\n    when(multipartFile.getName()).thenReturn(\"document\");\n\n    HouseMemberDocument houseMemberDocument = mock(HouseMemberDocument.class);\n    when(houseMemberDocumentRepository.save(any())).thenReturn(houseMemberDocument);\n\n    HouseMember member = new HouseMember(memberId, \"John Doe\", 30);\n    when(houseMemberRepository.findByMemberId(memberId)).thenReturn(Optional.of(member));\n\n    // WHEN\n    Optional<HouseMemberDocument> returnedDocument = houseMemberService.createHouseMemberDocument(multipartFile, memberId);\n\n    // THEN\n    assertThat(returnedDocument).isNotEmpty();\n  }\n}\n","description":"\nNote that this is a JUnit test and uses Mockito to mock the repository and the HouseMemberDocument. The method under test would be called with a multipart file, and the member id to create the document for. In this example, the document size is zero, so it is assumed that there are no bytes in the document image. This means that the method under test will not try to compress the image. The method is expected to save the HouseMemberDocument and return an Optional containing the saved HouseMemberDocument."},"name":"createHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"af84a5be-381e-948a-594c-711a54815ec2","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"creates a HouseMemberDocument by reading an image from a multipart file, compressing it if necessary, and saving it to disk. It returns an Optional containing the created document or an empty one if an error occurs.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file that contains the image to be processed and compressed, which is passed through the `getImageFromMultipartFile()` method for processing.\n\n* `multipartFile`: A `MultipartFile` object representing a file uploaded through a web form. It contains information such as the file's name, size, and content type.\n* `member`: An instance of the `HouseMember` class, which represents an individual member of a house. This parameter is used to identify the member whose document is being created.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"HouseMember object that is associated with the document being created.\n\n* `member`: The HouseMember object that contains information about a member of a house.\n* `multipartFile`: A MultipartFile object representing an image file submitted by the user.\n* `getImageFromMultipartFile()`: A method that retrieves the image data from the MultipartFile object.\n* `writeImageToByteStream()` and `compressImageToByteStream()`: Methods that write or compress the retrieved image data to a ByteArrayOutputStream object.\n* `saveHouseMemberDocument()`: A method that saves the compressed or uncompressed image data to a file with a unique name.\n\nThe input parameters for the `tryCreateDocument` function are explained as follows:\n\n* `multipartFile`: The MultipartFile object representing an image file submitted by the user.\n* `member`: The HouseMember object that contains information about a member of a house.","complex_type":true}],"returns":{"type_name":"Optional","description":"an `Optional` containing a `HouseMemberDocument`, or an empty `Optional` if the image could not be processed.\n\n* The `Optional<HouseMemberDocument>` return type indicates that the function may return an empty optional if there is an error during processing or if the file size exceeds the maximum allowed size.\n* The `HouseMemberDocument` object is a result of saving the image to a file with a name formatted using the `memberId` of the `HouseMember` parameter.\n* The `saveHouseMemberDocument` method saves the image to a file in a location determined by the function implementation.\n* The `getImageFromMultipartFile` and `compressImageToByteStream` methods are used to process the multipart file and compress the image, respectively.\n* The `DataSize` class is used to represent the size of data in bytes, which is used in the comparison of the file size with the maximum allowed size.","complex_type":true},"usage":{"language":"java","code":"// ...\nHouseMemberDocument document = houseService.tryCreateDocument(new MockMultipartFile(\"file\", \"filename\", \"image/jpg\", new byte[] {1, 2, 3, 4}), member);\nif (document.isPresent()) {\n    // handle the created document object\n} else {\n    // handle the case when the file is too large to be saved\n}\n","description":"\nThis example creates a mock MultipartFile with the name \"file\" and the filename \"filename\". The content of the MultipartFile is not relevant here. This method would then try to create a new HouseMemberDocument from this MultipartFile, which will be done if the file is below a certain size (compressionBorderSizeKBytes). If the file is above this threshold, it will be compressed before being saved as an image file.\nThe `ifPresent` statement checks whether the result of the tryCreateDocument method is present or not. If it is, we handle the created document object. If it is not, we handle the case when the file is too large to be saved."},"name":"tryCreateDocument","code":"private Optional<HouseMemberDocument> tryCreateDocument(MultipartFile multipartFile,\n      HouseMember member) {\n\n    try (ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream()) {\n      BufferedImage documentImage = getImageFromMultipartFile(multipartFile);\n      if (multipartFile.getSize() < DataSize.ofKilobytes(compressionBorderSizeKBytes).toBytes()) {\n        writeImageToByteStream(documentImage, imageByteStream);\n      } else {\n        compressImageToByteStream(documentImage, imageByteStream);\n      }\n      if (imageByteStream.size() < DataSize.ofKilobytes(maxFileSizeKBytes).toBytes()) {\n        HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream,\n            String.format(\"member_%s_document.jpg\", member.getMemberId()));\n        return Optional.of(houseMemberDocument);\n      } else {\n        return Optional.empty();\n      }\n    } catch (IOException e) {\n      return Optional.empty();\n    }\n  }","location":{"start":95,"insert":95,"offset":" ","indent":2},"item_type":"method","length":21},{"id":"ac9d18a0-38df-b8bd-2246-348b0788eb55","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"updates a HouseMember object's `HouseMemberDocument` field with the provided document, then saves the modified object to the repository.","params":[{"name":"houseMemberDocument","type_name":"HouseMemberDocument","description":"HouseMember document to be added to the member object.\n\n* `HouseMemberDocument`: This represents an object that contains information about a member and their documents.\n* `houseMemberDocument`: The instance of the `HouseMemberDocument` class that is being passed to the function.\n* `member`: A reference to an instance of the `HouseMember` class, which represents a member of a house.\n* `houseMemberRepository`: This is a repository interface for storing and retrieving instances of the `House Member` class.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"House Member that the `houseMemberDocument` is associated with, and it is updated to reference the newly saved document.\n\n* `setHouseMemberDocument`: sets the `HouseMemberDocument` field of the `member` object to the provided `houseMemberDocument`.","complex_type":true}],"returns":{"type_name":"HouseMember","description":"a saved House Member document and member entity.\n\n* `HouseMemberDocument`: This is a reference to a `HouseMemberDocument` object that represents the document added to the member.\n* `HouseMember`: This is a reference to a `HouseMember` object that represents the member to whom the document is being added.\n* `houseMemberRepository`: This is a reference to a `House Member Repository` interface that provides methods for persisting and retrieving `HouseMember` objects. The `save()` method is called on this repository to persist the updated `HouseMember` object in the database.","complex_type":true},"usage":{"language":"java","code":"HouseMemberDocument houseMemberDocument = new HouseMemberDocument(\n\"member_1234567890_document.jpg\",\nnew ByteArrayOutputStream().toByteArray()\n);\n\nHouseMember member = new HouseMember();\nmember.setHouseMemberDocument(houseMemberDocument);\n","description":""},"name":"addDocumentToHouseMember","code":"private HouseMember addDocumentToHouseMember(HouseMemberDocument houseMemberDocument,\n      HouseMember member) {\n    member.setHouseMemberDocument(houseMemberDocument);\n    return houseMemberRepository.save(member);\n  }","location":{"start":117,"insert":117,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"e2eb792f-9287-fba6-4941-0092ad2ca828","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"saves a `HouseMemberDocument` object to the repository, creating it first from an image byte stream and filename.","params":[{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"2D image of the member that is saved as a byte array to the document.\n\n* ` ByteArrayOutputStream imageByteStream`: This is an instance of `java.io.ByteArrayOutputStream`, which is used to hold the serialized House Member Document data.\n* `filename`: A string parameter that represents the file name of the House Member Document to be saved.","complex_type":true},{"name":"filename","type_name":"String","description":"name of the output file for the saved HouseMemberDocument.\n\n* `filename`: A string attribute representing the name of the document being saved.\n* `imageByteStream`: An `ByteArrayOutputStream` object that contains the image data to be saved in the document.","complex_type":true}],"returns":{"type_name":"HouseMemberDocument","description":"a `HouseMemberDocument` object representing the saved document.\n\n* The HouseMemberDocument object represents a new document that has been saved to the repository.\n* The filename property is set to the input filename provided in the function.\n* The imageByteStream property is set to the output of the `toByteArray()` method, which contains the binary data of the image.","complex_type":true},"usage":{"language":"java","code":"private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream, String filename) {\n    HouseMemberDocument newDocument =\n        new HouseMemberDocument(filename, imageByteStream.toByteArray());\n    return houseMemberDocumentRepository.save(newDocument);\n}\n","description":"\nIn this example, the method saveHouseMemberDocument is being used to create a new document with a filename and its content (image). The image is stored in the 'imageByteStream' parameter of the method as a ByteArrayOutputStream type. This means that it can be converted into an array of bytes using the toByteArray() method provided by this object. \n\nThe HouseMemberDocument class, which will represent the new document being created, requires its name and content to be initialized upon creation. The 'filename' parameter is therefore used as the name of the file for the document, while the 'imageByteStream.toByteArray()' is used as the content. The houseMemberDocumentRepository repository is then used to save this new document."},"name":"saveHouseMemberDocument","code":"private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream,\n      String filename) {\n    HouseMemberDocument newDocument =\n        new HouseMemberDocument(filename, imageByteStream.toByteArray());\n    return houseMemberDocumentRepository.save(newDocument);\n  }","location":{"start":123,"insert":123,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"67a1bbae-a14b-37b3-fb4c-764c366a12e1","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"writes a `BufferedImage` object to a byte stream using the `ImageIO.write()` method with the specified image format (\"jpg\").","params":[{"name":"documentImage","type_name":"BufferedImage","description":"2D image that is to be written to a byte stream as a JPEG image file.\n\n* Type: `BufferedImage`, indicating that the input is an image object that can be serialized and sent over a network.\n* Method: `ImageIO.write()`, which is used to write the image data to a `ByteArrayOutputStream`.\n* Parameters:\n\t+ `\"jpg\"`: The format of the output image file.\n\t+ `documentImage`: The input image object that will be written to the output stream.\n* Throws: `IOException`, indicating that any errors encountered during the writing process will be thrown and handled by the calling code.","complex_type":true},{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"output stream where the image data will be written as a JPEG file.\n\n* `imageByteStream`: A `ByteArrayOutputStream` object that stores the byte array representation of the image.\n* Type: ` ByteArrayOutputStream`\n* Description: A stream for converting an image into a byte array.","complex_type":true}],"usage":{"language":"java","code":"public class ImageWriter { \n  \n    public static void main(String[] args) throws IOException { \n        BufferedImage documentImage = null; \n        ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream(); \n        // ... \n        writeImageToByteStream(documentImage, imageByteStream); \n        System.out.println(\"Successfully wrote image to byte stream.\"); \n    } \n  \n    private static void writeImageToByteStream(BufferedImage documentImage, ByteArrayOutputStream imageByteStream) throws IOException { \n        ImageIO.write(documentImage, \"jpg\", imageByteStream); \n    } \n} \n","description":""},"name":"writeImageToByteStream","code":"private void writeImageToByteStream(BufferedImage documentImage,\n      ByteArrayOutputStream imageByteStream)\n      throws IOException {\n    ImageIO.write(documentImage, \"jpg\", imageByteStream);\n  }","location":{"start":130,"insert":130,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"267d3a9f-bee2-4894-ae48-c3324b7c1911","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"compresses an image using JPEG compression and writes it to a byte stream.","params":[{"name":"bufferedImage","type_name":"BufferedImage","description":"2D image to be compressed and is used by the `ImageWriter` to write the compressed image to a byte stream.\n\n* `BufferedImage` is a class that represents an image in a buffered form, allowing for efficient display and manipulation of images.\n* The `ImageIO` class provides methods for reading and writing images in various formats, including JPEG.\n* The `ImageWriter` interface defines the methods for writing images to a file or other output stream.\n* The `ImageWriteParam` class defines the parameters for image writing, including compression mode and quality.\n* The `IIOImage` class represents an image as a stream of bytes, allowing for efficient reading and writing of images.","complex_type":true},{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"byte stream where the compressed image will be written.\n\n* `BufferedImage bufferedImage`: The original image data to be compressed.\n* `ByteArrayOutputStream imageByteStream`: A byte array output stream where the compressed image will be written.\n* `IOException throws IOException`: An exception that may occur during compression, which will be caught and handled by the method.\n* `ImageIO.createImageOutputStream(imageByteStream)`: Creates an image output stream from the given `imageByteStream`.\n* `ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();`: Gets an instance of an image writer class that can write JPEG images.\n* `ImageWriteParam param = imageWriter.getDefaultWriteParam();`: Gets the default write parameters for the image writer.\n* `param.canWriteCompressed()`: Checks if the image writer can write compressed images.\n* `param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);`: Sets the compression mode to explicit.\n* `param.setCompressionQuality(compressedImageQuality);`: Sets the compression quality of the image.\n* `imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);`: Writes the compressed image data to the output stream using the image writer.\n* `imageWriter.dispose();`: Disposes of the image writer instance.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    BufferedImage bufferedImage = new BufferedImage(1024, 1024, BufferedImage.TYPE_INT_RGB);\n    ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream();\n    compressImageToByteStream(bufferedImage, imageByteStream);\n}\n","description":"\nThis code will compress the `BufferedImage` to a JPEG format and save it in the `imageByteStream`. The quality of compression is set using the variable `compressedImageQuality`, which has a value of 0.75 by default.\n\nThe reason for choosing the input arguments as `('bufferedImage', 'BufferedImage') and ('ByteArrayOutputStream', 'imageByteStream')` is that they are the only relevant inputs for this method, and it's important to highlight the difference between them.\n\nIt's worth noting that this code doesn't actually write anything to the file system, but it does create a new `ImageWriter`, which could be a time-consuming operation. Therefore, it's important to keep an eye on performance metrics and optimize the code if necessary."},"name":"compressImageToByteStream","code":"private void compressImageToByteStream(BufferedImage bufferedImage,\n      ByteArrayOutputStream imageByteStream) throws IOException {\n\n    try (ImageOutputStream imageOutStream = ImageIO.createImageOutputStream(imageByteStream)) {\n\n      ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      imageWriter.setOutput(imageOutStream);\n      ImageWriteParam param = imageWriter.getDefaultWriteParam();\n\n      if (param.canWriteCompressed()) {\n        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n        param.setCompressionQuality(compressedImageQuality);\n      }\n      imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);\n      imageWriter.dispose();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"3a681d01-85d0-9a81-7b45-24f1b47654ec","ancestors":["7aa89ccf-ae33-319f-b247-0737acc2954b"],"type":"function","description":"reads an image from an InputStream provided by a MultipartFile object and returns a BufferedImage object.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"uploaded image file to be processed and read using `ImageIO.read()` method.\n\n* `InputStream multipartFileStream`: The input stream for the file contained in the `multipartFile`.\n* `ImageIO read()`: A method for reading an image from the input stream.","complex_type":true}],"returns":{"type_name":"BufferedImage","description":"a `BufferedImage` object.\n\n* The output is a `BufferedImage`, which represents a 2D image in Java.\n* The image is read from an input stream using the `ImageIO` class.\n* The input stream is obtained from the `MultipartFile` object through its `getInputStream()` method.","complex_type":true},"usage":{"language":"java","code":"public void readImage(MultipartFile multipartFile) throws IOException {\n    BufferedImage image = getImageFromMultipartFile(multipartFile);\n}\n","description":""},"name":"getImageFromMultipartFile","code":"private BufferedImage getImageFromMultipartFile(MultipartFile multipartFile) throws IOException {\n    try (InputStream multipartFileStream = multipartFile.getInputStream()) {\n      return ImageIO.read(multipartFileStream);\n    }\n  }","location":{"start":154,"insert":154,"offset":" ","indent":2},"item_type":"method","length":5}]}}}