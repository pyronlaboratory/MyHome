{"name":"DevMailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/DevMailSDJpaService.java","content":{"structured":{"description":"A `DevMailSDJpaService` class that implements `MailService` interface using Spring Data JPA and Lombok. The service sends emails to users in various scenarios such as password recovery, account confirmation, and password change. It uses slf4j for logging and conditional properties to enable/disable email sending based on a property in the application configuration file.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"8295c3af-db96-f68d-744a-db6e3b2acba4","ancestors":[],"type":"function","description":"TODO","name":"DevMailSDJpaService","code":"@Slf4j\n@Service\n@ConditionalOnProperty(value = \"spring.mail.dev-mode\", havingValue = \"true\", matchIfMissing = true)\npublic class DevMailSDJpaService implements MailService {\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":32},{"id":"e8575c4c-fec7-3dbe-0c47-0346b3291317","ancestors":["8295c3af-db96-f68d-744a-db6e3b2acba4"],"type":"function","description":"sends a password recovery code to a user via logging an information message and returning `true`.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user to whom the password recovery code is being sent.\n\n* `User user`: A class that represents a user, containing an `userId` field for storing the user's ID.\n\nThe code sends a password recover code to the user with the `userId` property set to the corresponding value.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit password recover code sent to the user's registered email address.\n\n* `User user`: The user for whom the password recover code is being sent.\n* `String randomCode`: A randomly generated code that will be sent to the user as their password recover code.","complex_type":true}],"returns":{"type_name":"boolean","description":"a success message indicating that the password recovery code has been sent to the user.","complex_type":false},"usage":{"language":"java","code":"public class MyHomeApplication {\n  public static void main(String[] args) {\n    User user = new User(\"testUser\", \"testUser@email.com\");\n    String randomCode = \"123456\";\n    MailService mailService = new DevMailSDJpaService();\n    try {\n      boolean result = mailService.sendPasswordRecoverCode(user, randomCode);\n      if (result) {\n        System.out.println(\"Password recover code sent successfully\");\n      } else {\n        System.err.println(\"Error sending password recover code\");\n      }\n    } catch (MailSendException e) {\n      System.err.println(\"Error sending password recover code: \" + e);\n    }\n  }\n}\n","description":""},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }","location":{"start":16,"insert":16,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"b10c6c24-3033-2a95-4649-109273df3548","ancestors":["8295c3af-db96-f68d-744a-db6e3b2acba4"],"type":"function","description":"sends a message to a user confirming their account status.","params":[{"name":"user","type_name":"User","description":"User object containing the information of the user whose account confirmation message is to be sent.\n\n* `User user`: The class type of `user` is `User`, which contains various attributes such as `getUserId()` and `getEmail()`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating that the account confirmation message was successfully sent to the user.","complex_type":false},"usage":{"language":"java","code":"User user = new User(\"John\", \"doe@example.com\", \"12345\");\nboolean result = sendAccountConfirmed(user);\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":22,"insert":22,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"30050b63-6d34-36aa-ab4f-6f90816e7b0c","ancestors":["8295c3af-db96-f68d-744a-db6e3b2acba4"],"type":"function","description":"sends a message to a user indicating that their password has been successfully changed.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user for whom the password change was successfuly processed.\n\n* `user.getUserId()` - Returns the unique identifier for the user.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that the password has been successfully changed, along with the user's ID.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n}\n\n// Example usage\npublic static void main(String[] args) {\n\tDevMailSDJpaService mailService = new DevMailSDJpaService();\n\tUser user = new User(\"user@email.com\", \"username\");\n\tmailService.sendPasswordSuccessfullyChanged(user);\n}\n","description":""},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":28,"insert":28,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"0746684e-897b-e0a1-aa44-d212f9e5e74f","ancestors":["8295c3af-db96-f68d-744a-db6e3b2acba4"],"type":"function","description":"sends a message to a user indicating that their account has been created.","params":[{"name":"user","type_name":"User","description":"User object that contains the user's information, which is being sent to the server as a message upon successful creation of the account.\n\n* `User`: This class represents a user account created in the application, with an ID attribute.","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"security token that is sent to the user's email address for confirmation of their account creation.\n\n* `User user`: The user whose account was created.\n* `SecurityToken emailConfirmToken`: A token used to confirm the user's email address.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating that the account creation message was successfully sent to the user.","complex_type":false},"usage":{"language":"java","code":"User user = new User(\"username\");\nSecurityToken emailConfirmToken = SecurityToken.generateRandom();\nboolean accountCreatedMessageSent = mailService.sendAccountCreated(user, emailConfirmToken);\n","description":"\nIn this example, we create a new `User` object with the username \"username\", and generate a random token for verifying the user's email address. We then pass these objects as arguments to the method `sendAccountCreated`, which sends an account created message to the user's email address. The return value of the method, `accountCreatedMessageSent`, is set to `true` if the message was sent successfully, and `false` otherwise."},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2},"item_type":"method","length":5}]}}}