{"name":"User.java","path":"service/src/main/java/com/myhome/domain/User.java","content":{"structured":{"description":"An entity class called `User` that represents a valid user in a service. The class has fields for user ID, email, name, encrypted password, and various relationships with other entities through many-to-many and one-to-many associations. The code also includes annotations for data serialization, JPA mapping, and named entity graphs.","items":[{"id":"ed38dee4-542f-3b8e-614e-cf6a477addda","ancestors":[],"description":"represents a valid user in a service with various relationships to other entities through many-to-many and one-to-many associations.\nFields:\n\t- name (String): represents a user's personal name. \n\t- userId (String): represents a unique identifier for each user account in the system. \n\t- email (String): in the User class represents a string value that stores an email address associated with each user account in the system. \n\t- emailConfirmed (boolean): indicates whether an email address associated with a User entity has been confirmed by the user. \n\t- encryptedPassword (String): in the User class stores an encrypted string value representing the user's password for security purposes. \n\t- communities (Set<Community>): in the User class represents a set of Community objects associated with each user account in the system. \n\t- userTokens (Set<SecurityToken>): in the User class contains a set of SecurityToken objects associated with each user account. \n\n","name":"User","code":"@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"userId\", \"email\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"User.communities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"communities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"User.userTokens\",\n        attributeNodes = {\n            @NamedAttributeNode(\"userTokens\"),\n        }\n    )\n})\npublic class User extends BaseEntity {\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String userId;\n  @Column(unique = true, nullable = false)\n  private String email;\n  @Column(nullable = false)\n  private boolean emailConfirmed = false;\n  @Column(nullable = false)\n  private String encryptedPassword;\n  @ManyToMany(mappedBy = \"admins\", fetch = FetchType.LAZY)\n  private Set<Community> communities = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = \"tokenOwner\")\n  private Set<SecurityToken> userTokens = new HashSet<>();\n}","location":{"start":61,"insert":61,"offset":" ","indent":0},"item_type":"class","length":37}]}}}