{"name":"AuthorizationFilter.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/AuthorizationFilter.java","content":{"structured":{"description":"An authentication filter called \"AuthorizationFilter\" that is used to secure a web application. The filter checks for an authorization token in the HTTP request header and, if present, uses it to authenticate the user and set the SecurityContextHolder with the obtained authentication token. If no token is present or invalid, the filter allows the next chain filter to be executed. The filter also includes a method called \"getAuthentication\" that parses the authorization token and returns an authentication token object if valid, otherwise it returns null.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"a8f30c6d-3a99-4aa1-3b4b-4f18eca9c822","ancestors":[],"type":"function","description":"in Java is designed to filter incoming requests based on an authorization token present in the HTTP request header. The filter checks if the token exists and starts with a prefix specified in the environment variables, and if it does, it sets the authentication context and allows the request to pass through to the next filter in the chain. If the token is missing or does not start with the prefix, it rejects the request and returns an unauthorized response.","name":"AuthorizationFilter","code":"public class AuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n\n  public AuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment) {\n    super(authenticationManager);\n    this.environment = environment;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48,"docLength":null},{"id":"349fb886-4e4e-cc8e-5c4c-2114a6738401","ancestors":["a8f30c6d-3a99-4aa1-3b4b-4f18eca9c822"],"type":"function","description":"filters HTTP requests based on authentication headers. It retrieves the authorization header name and prefix from environment variables, checks if the header is present and starts with the prefix, and then sets the authentication object and forwards the request to the next filter in the chain.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that the filter is processing and is used as input to the filter's internal logic.\n\n* `authHeaderName`: The name of the header containing the authentication token.\n* `authHeaderPrefix`: The prefix of the authentication token in the header.\n* `request.getHeader()`: A method to retrieve a header field value from the `HttpServletRequest` object.\n* `authentication`: An object representing the authenticated user, obtained through the `getAuthentication()` method.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that will be modified or replaced by the filter chain.\n\n* `response`: The HttpServletResponse object represents the output stream for the HTTP request. It contains attributes such as the status code, headers, and body.\n* `FilterChain chain`: This is a pipeline of filters that can be used to handle requests in a specific order. Chain.doFilter(request, response) calls the next filter in the chain if the current filter does not handle the request successfully.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"3-rd level of the filter chain, which is the nested structure of filters that are applied to an HTTP request in a particular order.\n\n1. `HttpServletRequest request`: The HTTP request object that is being processed.\n2. `HttpServletResponse response`: The HTTP response object that is being generated in response to the request.\n3. `FilterChain chain`: The filter chain that the current function is a part of, which contains a sequence of filter functions that are applied to the request and response objects.\n4. `IOException`, `ServletException`: These are the exception classes that can be thrown by the `doFilterInternal` function, typically due to errors in processing the request or response.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    // Get the header containing the authorization token.\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader == null || !authHeader.startsWith(\"Bearer\")) {\n        chain.doFilter(request, response);\n        return;\n    }\n\n    // Extract the token from the header.\n    String token = authHeader.substring(\"Bearer\".length());\n\n    // Authenticate the user using the token.\n    if (authenticateUser(token)) {\n        chain.doFilter(request, response);\n        return;\n    }\n\n    // If authentication fails, respond with a 401 status code.\n    response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n}\n","description":"\nIn this example, the method doFilterInternal is overridden to check for an authorization token in the \"Authorization\" header of the HTTP request. If the token is present and valid, it will be authenticated using the authenticateUser() method, and the filter chain will continue processing the request. Otherwise, a 401 status code will be returned to indicate that authentication failed."},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16,"docLength":null},{"id":"114f183e-0162-c9ad-ca4d-df461fcd4cc5","ancestors":["a8f30c6d-3a99-4aa1-3b4b-4f18eca9c822"],"type":"function","description":"authenticates an HTTP request by parsing a JSON Web Token (JWT) header and creating a `UsernamePasswordAuthenticationToken` object containing the user ID and any additional claims.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object passed to the function, which contains the authentication token in the `Authorization` header.\n\n* `getHeader`: This method returns an object representing the value of a header field in the HTTP request. In this case, it retrieves the value of the `authorization.token.header.name` property.\n* `null`: The return value of `authHeader` is null if no authorization token is present in the request.\n* `var token`: This line assigns the value of `authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\")` to a variable named `token`.\n* `Jwts.parser()`: This line initializes a `JwtsParser` object, which is used to parse the JSON Web Token (JWT) contained in the authorization header.\n* `parseClaimsJws()`: This method parses the JWT and returns the claims as a `ClaimsJwt`.\n* `getBody()`: This method returns the body of the JWT, which contains the subject of the token.\n* `getSubject()`: This line retrieves the subject of the token from the `ClaimsJwt` object.\n* `return new UsernamePasswordAuthenticationToken()`: This line creates a new instance of the `UsernamePasswordAuthenticationToken` class and sets its `userId` field to the value retrieved from the JWT. The `collections.emptyList()` method is called to set the `username` field to an empty list, indicating that no username is associated with this authentication token.\n\nThe function does not destructure `request`, as it only needs to access a few of its properties (e.g., `getHeader`) to perform its intended functionality.","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` object representing the authenticated user.\n\n* The `var authHeader` is the value of the `Authorization` header in the HTTP request.\n* The `var token` is the decoded JSON Web Token (JWT) from the `authHeader`.\n* The `var userId` is the subject of the JWT, which represents the user who made the request.\n* The `return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());` creates a new `UsernamePasswordAuthenticationToken` object with the `userId` as the subject and an empty list of credentials.","complex_type":true},"usage":{"language":"java","code":"package com.prathab.apigatewayservice.security;\n\nimport org.springframework.core.env.Environment;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Collections;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n\npublic class MyService {\n    private Environment environment;\n    \n    public void myMethod(HttpServletRequest request) {\n        UsernamePasswordAuthenticationToken authentication = AuthorizationFilter.getAuthentication(request, environment);\n        // Do something with the authentication token\n    }\n}\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":19,"docLength":null}]}}}