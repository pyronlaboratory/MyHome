{"name":"AuthorizationFilter.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/AuthorizationFilter.java","content":{"structured":{"description":"An authentication filter for Spring WebFlux applications that validate JSON Web Tokens (JWTs) in the HTTP Authorization header and returns a UsernamePasswordAuthenticationToken if validated successfully. The code uses dependencies from Spring Security, specifically the `UsernamePasswordAuthenticationToken` class and the `Jwts` package for parsing JWTs. The filter chain is applied to the request and response objects, and any exceptions are caught and handled appropriately.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.apigatewayservice.security.AuthorizationFilter\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"a9b7f6f4-212c-01b3-e345-bf3ad7de9366","ancestors":[],"type":"function","description":"from the file performs authentication on HTTP requests by retrieving the authorization header name and prefix from environment variables, checking if the header is present and starts with the prefix, and then setting the authentication object and forwarding the request to the next filter in the chain. It also creates a `UsernamePasswordAuthenticationToken` object representing the authenticated user based on the decoded JSON Web Token (JWT) from the authorization header.","name":"AuthorizationFilter","code":"public class AuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n\n  public AuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment) {\n    super(authenticationManager);\n    this.environment = environment;\n  }\n\n  /**\n   * filters HTTP requests based on authentication headers. It retrieves the authorization\n   * header name and prefix from environment variables, checks if the header is present\n   * and starts with the prefix, and then sets the authentication object and forwards\n   * the request to the next filter in the chain.\n   * \n   * @param request HTTP request that the filter is processing and is used as input to\n   * the filter's internal logic.\n   * \n   * \t- `authHeaderName`: The name of the header containing the authentication token.\n   * \t- `authHeaderPrefix`: The prefix of the authentication token in the header.\n   * \t- `request.getHeader()`: A method to retrieve a header field value from the\n   * `HttpServletRequest` object.\n   * \t- `authentication`: An object representing the authenticated user, obtained through\n   * the `getAuthentication()` method.\n   * \n   * @param response HTTP response object that will be modified or replaced by the\n   * filter chain.\n   * \n   * \t- `response`: The HttpServletResponse object represents the output stream for the\n   * HTTP request. It contains attributes such as the status code, headers, and body.\n   * \t- `FilterChain chain`: This is a pipeline of filters that can be used to handle\n   * requests in a specific order. Chain.doFilter(request, response) calls the next\n   * filter in the chain if the current filter does not handle the request successfully.\n   * \n   * @param chain 3-rd level of the filter chain, which is the nested structure of\n   * filters that are applied to an HTTP request in a particular order.\n   * \n   * 1/ `HttpServletRequest request`: The HTTP request object that is being processed.\n   * 2/ `HttpServletResponse response`: The HTTP response object that is being generated\n   * in response to the request.\n   * 3/ `FilterChain chain`: The filter chain that the current function is a part of,\n   * which contains a sequence of filter functions that are applied to the request and\n   * response objects.\n   * 4/ `IOException`, `ServletException`: These are the exception classes that can be\n   * thrown by the `doFilterInternal` function, typically due to errors in processing\n   * the request or response.\n   */\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  /**\n   * authenticates an HTTP request by parsing a JSON Web Token (JWT) header and creating\n   * a `UsernamePasswordAuthenticationToken` object containing the user ID and any\n   * additional claims.\n   * \n   * @param request HTTP request object passed to the function, which contains the\n   * authentication token in the `Authorization` header.\n   * \n   * \t- `getHeader`: This method returns an object representing the value of a header\n   * field in the HTTP request. In this case, it retrieves the value of the\n   * `authorization.token.header.name` property.\n   * \t- `null`: The return value of `authHeader` is null if no authorization token is\n   * present in the request.\n   * \t- `var token`: This line assigns the value of\n   * `authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"),\n   * \"\")` to a variable named `token`.\n   * \t- `Jwts.parser()`: This line initializes a `JwtsParser` object, which is used to\n   * parse the JSON Web Token (JWT) contained in the authorization header.\n   * \t- `parseClaimsJws()`: This method parses the JWT and returns the claims as a `ClaimsJwt`.\n   * \t- `getBody()`: This method returns the body of the JWT, which contains the subject\n   * of the token.\n   * \t- `getSubject()`: This line retrieves the subject of the token from the `ClaimsJwt`\n   * object.\n   * \t- `return new UsernamePasswordAuthenticationToken()`: This line creates a new\n   * instance of the `UsernamePasswordAuthenticationToken` class and sets its `userId`\n   * field to the value retrieved from the JWT. The `collections.emptyList()` method\n   * is called to set the `username` field to an empty list, indicating that no username\n   * is associated with this authentication token.\n   * \n   * The function does not destructure `request`, as it only needs to access a few of\n   * its properties (e.g., `getHeader`) to perform its intended functionality.\n   * \n   * @returns a `UsernamePasswordAuthenticationToken` object representing the authenticated\n   * user.\n   * \n   * \t- The `var authHeader` is the value of the `Authorization` header in the HTTP request.\n   * \t- The `var token` is the decoded JSON Web Token (JWT) from the `authHeader`.\n   * \t- The `var userId` is the subject of the JWT, which represents the user who made\n   * the request.\n   * \t- The `return new UsernamePasswordAuthenticationToken(userId, null,\n   * Collections.emptyList());` creates a new `UsernamePasswordAuthenticationToken`\n   * object with the `userId` as the subject and an empty list of credentials.\n   */\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }\n}","location":{"start":40,"insert":32,"offset":" ","indent":0,"comment":{"start":31,"end":39}},"item_type":"class","length":129,"docLength":8},{"id":"279c88e8-4b02-a1a1-ba41-f5f51bb8def1","ancestors":["a9b7f6f4-212c-01b3-e345-bf3ad7de9366"],"type":"function","description":"filters incoming requests based on authentication headers. It sets the SecurityContextHolder with the obtained authentication and then passes the request to the next filter in the chain.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request being filtered.\n\n* `authHeaderName`: String property representing the name of the HTTP header that contains the authentication token.\n* `authHeaderPrefix`: String property representing the prefix of the authentication token in the HTTP header.\n* `request`: The original HTTP request object, which may be deserialized and accessed for various properties/attributes, such as:\n\t+ `getHeader()`: Returns the value of a specific HTTP header.\n\t+ `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in the request.\n\t+ `getParameter()`: Returns the value of a specific HTTP parameter (e.g., query string or form data).\n\t+ `getRemoteAddr()`: Returns the client's IP address.\n\t+ `getUserAgent()`: Returns the user agent string sent with the request.\n\nNote that the `request` object is deserialized from the incoming HTTP request, and its properties/attributes may be accessed and used in the function to perform authentication-related tasks.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that is being filtered by the servlet.\n\n* `request`: The incoming HTTP request, passed as an argument to the filter.\n* `chain`: The chain of filters that the current filter belongs to, which is passed as an argument to the filter.\n* `IOException`, `ServletException`: Thrown if an I/O error or a Servlet exception occurs while executing the filter.\n* `SecurityContextHolder`: A class that provides a way to access and manage security context objects in a Java application.\n* `getAuthentication()`: A method that returns an authentication object based on the incoming HTTP request.\n\nThe `response` object has various properties/attributes, including:\n\n* `getHeader()`: Returns the value of a header field in the HTTP request or response.\n* `getMethod()`: Returns the HTTP method (GET, POST, PUT, DELETE, etc.) of the incoming request.\n* `getPathInfo()`: Returns the path info of the incoming request (the portion of the URL after the question mark).\n* `getPathTranslated()`: Returns the path translated (the original path without the server-side prefix).\n* `getQueryString()`: Returns the query string of the incoming request (the portion of the URL after the ampersand).\n* `getRemoteAddr()`: Returns the remote address of the client making the request.\n* `getScheme()`: Returns the scheme (http or https) of the incoming request.\n* `getServerName()`: Returns the server name and port number of the server hosting the current application.\n* `getServerPort()`: Returns the port number of the server hosting the current application.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"next filter in the chain that will be executed after the current filter has performed its operations on the request and response.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `response`: The response object that will be sent to the client after processing through the filter chain.\n* `FilterChain`: The chain of filters that must be executed in sequence for this particular request.\n* `chain.doFilter()`: The method called when the filter chain is invoked, which passes the original request and response objects to the next filter in the chain for further processing.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n","description":"\nThe method `doFilterInternal` is called by the Spring framework for each HTTP request that is processed by the application. It first retrieves two environment properties from the property source: `authorization.token.header.name` and `authorization.token.header.prefix`. These are used to retrieve the header value of the Authorization header in the HTTP request, which contains the JWT token.\n\nThe method then checks if the retrieved header is null or does not start with the expected prefix (`Bearer`), indicating that there is no authentication information present in the request. In this case, it simply calls the `doFilter` method of the `FilterChain` object, passing the original `request` and `response` objects to it, without any further processing.\n\nIf there is an authentication token present in the request, the method then retrieves it by removing the prefix from the header value using the `replace` method of the String class. It then decodes the JSON Web Token (JWT) using the `parser()` method of the Jwts class and extracts the subject (`userId`) of the token using the `getBody().getSubject()` method.\n\nThe method creates a new `UsernamePasswordAuthenticationToken` object with the `userId` as the principal and an empty list of credentials. It then sets this authentication token in the `SecurityContextHolder` object, which is used by Spring to store information about the authenticated user for the current request.\n\nFinally, it calls the `doFilter` method of the `FilterChain` object again, passing the original `request` and `response` objects to it, after setting the authentication token in the `SecurityContextHolder`. This allows any further filters or Spring controllers in the application to be aware of the current user's identity."},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":89,"insert":51,"offset":" ","indent":2,"comment":{"start":50,"end":88}},"item_type":"method","length":16,"docLength":38},{"id":"a9d7c879-1bc4-3684-5d4b-3b6a94d3c226","ancestors":["a9b7f6f4-212c-01b3-e345-bf3ad7de9366"],"type":"function","description":"retrieves an authentication token from a HTTP request header and parses it to extract the subject's username, which is then used to create an `UsernamePasswordAuthenticationToken`.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object containing information about the incoming request, which is used to extract the authentication token from the request header.\n\n* `getHeader()` - Returns the value of a header field in the HTTP request message.\n* `getProperty()` - Returns the value of a property or configuration option.\n* `parseClaimsJws()` - Parses a JSON Web Signature (JWS) and extracts the claims from it.\n* `setSigningKey()` - Sets the signing key for JWT signing.","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` object containing the subject and credentials of the authenticated user.\n\n* The variable `authHeader` represents the authentication header present in the HTTP request.\n* The variable `token` is the token extracted from the authentication header using the `replace()` method and the `environment.getProperty(\"authorization.token.header.prefix\")` property.\n* The `Jwts.parser()` method is used to parse the token into a `ClaimsJws` object, which contains information about the user.\n* The `getBody()` method of the `ClaimsJws` object returns the subject of the token.\n* The variable `userId` represents the subject of the token.\n* The `null` value returned for the `username` and `authorities` properties indicates that no username or authorities are present in the token.\n\nOverall, the `getAuthentication` function extracts the authentication header from the HTTP request and parses it into a `ClaimsJws` object to retrieve the user's information.","complex_type":true},"usage":{"language":"java","code":"UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\nif (authentication == null) {\n  chain.doFilter(request, response);\n} else {\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  chain.doFilter(request, response);\n}\n","description":"\nThe method retrieves the value of the `Authorization` header in the HTTP request using the `HttpServletRequest.getHeader()` method. If no authentication token is present, the function returns null. Otherwise, it retrieves the subject (i.e., user ID) from the JSON Web Token (JWT) by parsing it with a JWT parser and returning a new instance of the `UsernamePasswordAuthenticationToken` class with its user ID set to the value retrieved from the JWT and its username set to an empty list.\n\nThe function then checks if the authentication is null, and if it is not, it sets the authentication in the security context using the `SecurityContextHolder.getContext().setAuthentication()` method before passing the request and response objects to the next filter in the chain using the `FilterChain.doFilter()` method. If the authentication is null, then the function only passes the request and response objects to the next filter in the chain using the same method.\n\nThe code above makes use of the `environment` object passed into the constructor of the class, which allows the class to read properties set up in a configuration file (e.g., application.properties) by calling the `getProperty()` method on the object. The function uses the `setSigningKey()` and `parseClaimsJws()` methods on the JWT parser to parse the JWT and retrieve its subject, which is then used to create a new instance of the `UsernamePasswordAuthenticationToken` class with the user ID set to the value retrieved from the JWT and an empty list of credentials."},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }","location":{"start":149,"insert":106,"offset":" ","indent":2,"comment":{"start":105,"end":148}},"item_type":"method","length":19,"docLength":43}]}}}