{"name":"AuthorizationFilter.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/AuthorizationFilter.java","content":{"structured":{"description":"An AuthorizationFilter that checks for a valid authentication token in an HTTP request's header. The filter uses Spring Security's BasicAuthenticationFilter as a basis and adds its own logic to validate the token. The token is obtained from the request's header, and if it is invalid or missing, the filter returns the request to the next filter in the chain without performing any further authentication checks.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"8af2b505-664b-a79c-664b-bca3802cc410","ancestors":[],"type":"function","description":"is an extension of BasicAuthenticationFilter that adds an extra layer of security by requiring a valid token in the HTTP request header. The filter checks for the presence and validity of the token using the `getAuthentication` method, which parses the token and verifies the user's identity. If a valid token is found, the filter sets the authentication context and allows the incoming request to pass through the chain.","name":"AuthorizationFilter","code":"public class AuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n\n  public AuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment) {\n    super(authenticationManager);\n    this.environment = environment;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48},{"id":"8d543218-ccf8-67a9-5a44-4745dc2d201c","ancestors":["8af2b505-664b-a79c-664b-bca3802cc410"],"type":"function","description":"verifies if an HTTP request has a valid authorization token in its header. If it does, it sets the authentication context for further processing by the filter chain.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that is being processed by the filter.\n\n1. `authHeaderName`: A string representing the name of the HTTP header containing the authentication token.\n2. `authHeaderPrefix`: A string representing the prefix of the authentication token in the HTTP header.\n3. `authHeader`: The value of the HTTP header containing the authentication token, or null if it's not present or doesn't start with the prefix.\n4. `request`: An instance of `HttpServletRequest`, representing the current HTTP request being processed.\n5. `response`: An instance of `HttpServletResponse`, representing the current HTTP response being generated.\n6. `FilterChain`: A chain of `Filter` objects, representing the filter chain that this function is part of.\n7. `chain.doFilter()`: A method called by this function to pass the request to the next filter in the chain if the authentication token is not present or doesn't start with the prefix.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is being filtered by the chain of filters.\n\n* `request`: The incoming HTTP request object.\n* `response`: The ServletResponse object representing the output for the current filter chain.\n* `chain`: The FilterChain object representing the next stage in the filtering process.\n* `IOException`: A subclass of Exception that represents an I/O error.\n* `ServletException`: A subclass of Exception that represents a problem with the HTTP request or response.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain that is to be executed after the current filter is applied.\n\n1. `HttpServletRequest request`: The incoming HTTP request that triggered the filter chain execution.\n2. `HttpServletResponse response`: The outgoing HTTP response generated by the filter chain execution.\n3. `FilterChain chain`: The next filter in the chain to be executed, which can be modified or destroyed based on the authentication status of the incoming request.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    // Get the authentication header from the request\n    var authHeader = request.getHeader(\"Authorization\");\n    if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n        chain.doFilter(request, response);\n        return;\n    }\n    \n    // Parse the JWT token from the authentication header\n    var jwtToken = authHeader.replaceFirst(\"Bearer \", \"\");\n    try {\n        // Validate the JWT token using a secret key\n        var claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(jwtToken);\n        if (claims == null) {\n            throw new ServletException(\"Invalid JWT token\");\n        }\n        \n        // Retrieve the user ID from the claims object\n        var userId = claims.getBody().getSubject();\n        if (userId == null) {\n            throw new ServletException(\"Missing user ID in JWT token\");\n        }\n    \n        // Create a UsernamePasswordAuthenticationToken with the user ID and a null password\n        var authentication = new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n        \n        // Set the SecurityContextHolder with the authenticated principal\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n    } catch (SignatureException e) {\n        throw new ServletException(\"Invalid JWT token signature\", e);\n    }\n    \n    chain.doFilter(request, response);\n}\n","description":""},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"c1010387-6ddc-869e-074f-f3131fa407de","ancestors":["8af2b505-664b-a79c-664b-bca3802cc410"],"type":"function","description":"parses an authentication token from a request header and returns an `UsernamePasswordAuthenticationToken` object representing the authenticated user.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request made by the client to the server.\n\n* `getHeader()` method returns the value of the specified HTTP header in the request.\n* `getProperty()` method is used to retrieve a property from the environment.\n* `parseClaimsJws()` method parses a JSON Web Signature (JWS) and extracts the claims from it.\n* `setSigningKey()` method sets the signing key for the JWS parser.\n* `getBody()` method returns the JSON object containing the claims extracted from the JWS.\n* `getSubject()` method returns the subject of the JWT claim.\n\nThe `request` object itself has various properties and attributes, such as:\n\n* `getMethod()` method returns the HTTP method (e.g., GET, POST, PUT, DELETE) used to make the request.\n* `getUri()` method returns the requested URL.\n* `getParms()` method returns any query parameters in the request.\n* `getHeaders()` method returns all the header fields in the request.","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` object containing the user ID and authentication token.\n\n* `authHeader`: The value of the authentication header in the HTTP request.\n* `token`: The parsed JWS token from the authentication header.\n* `userId`: The subject of the token, which represents the user identity.\n* `signingKey`: The secret key used for signing the token.\n\nThe function returns a `UsernamePasswordAuthenticationToken` object, which contains the user ID and any additional claims associated with the token. The `null` value returned for the `password` attribute indicates that no password is associated with this authentication token.","complex_type":true},"usage":{"language":"java","code":"HttpServletRequest request = new HttpServletRequest();\nrequest.addHeader(\"Authorization\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\");\nUsernamePasswordAuthenticationToken authentication = getAuthentication(request);\nassertEquals(\"example_user@example.com\", authentication.getName());\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":19}]}}}