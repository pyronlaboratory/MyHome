{"name":"AuthorizationFilter.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/AuthorizationFilter.java","content":{"structured":{"description":"An `AuthorizationFilter` that extends `BasicAuthenticationFilter`. It filters incoming requests based on a custom authorization token retrieved from the HTTP request header. The token is parsed and verified using Spring Security's `Jwts` library, and if valid, the authentication is passed to the next filter in the chain.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"08ab67b5-28e3-9ebb-e742-b7a3c1f81b0e","ancestors":[],"type":"function","description":"in Java is used to filter incoming requests based on an authorization token present in the HTTP header. The filter extracts the token from the header and passes it to a method called `getAuthentication()` to retrieve the user ID and authentication details. The filtered request is then passed to the next filter in the chain for further processing.","name":"AuthorizationFilter","code":"public class AuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n\n  public AuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment) {\n    super(authenticationManager);\n    this.environment = environment;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }\n}","location":{"start":32,"insert":32,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48,"docLength":null},{"id":"39a896c5-9807-01a4-e049-1fee0d64b98f","ancestors":["08ab67b5-28e3-9ebb-e742-b7a3c1f81b0e"],"type":"function","description":"authenticates a request by checking for an authorization token header. If the token is present and starts with a prefix, it sets an authentication object and proceeds to filter the request. Otherwise, it allows the request to pass through to the next filter.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request being processed by the filter.\n\n* `authHeaderName`: The name of the HTTP header that contains the authentication token.\n* `authHeaderPrefix`: The prefix of the authentication token in the HTTP header.\n* `authHeader`: The value of the authentication token in the HTTP header, or null if no token is present.\n* `request`: The original HTTP request object, which may contain other properties and attributes related to the request, such as its method (e.g., GET, POST), URL, headers, parameters, and so on.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is being filtered by the current chain of filters.\n\n* `request`: The original HTTP request that triggered the filter chain.\n* `response`: The HTTP response generated by the filter chain.\n* `chain`: The next filter in the chain to be executed.\n\nThe function first retrieves properties from the environment variable `authorization.token.header.name` and `authorization.token.header.prefix`. These properties determine the header name and prefix where the authentication token is expected in the HTTP request.\n\nNext, the function checks if an authentication token is present in the HTTP request header. If it's not present or doesn't start with the expected prefix, the function passes the request to the next filter in the chain without performing any further authentication checks.\n\nIf an authentication token is present and starts with the expected prefix, the function retrieves the authentication object from the `getAuthentication` method. Finally, the function sets the security context using the retrieved authentication object and passes the request to the next filter in the chain for further processing.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain object that is passed through the method as an argument, allowing the method to perform additional filtering tasks before passing the request on to the next filter in the chain.\n\n* `request`: The incoming HTTP request object.\n* `response`: The outgoing HTTP response object.\n* `chain`: The filter chain that this method is a part of, which contains multiple filters that are executed in sequence.\n\nThe function first checks if the `authHeader` present in the request header matches the expected format by checking if it starts with the prefix specified in the environment property `authorization.token.header.prefix`. If the header is not present or does not match the expected format, the method proceeds to the next filter in the chain without performing any authentication.\n\nIf the `authHeader` is present and matches the expected format, the method extracts the authentication information from the request header using the `getAuthentication` method and sets it as the SecurityContextHolder's context using the `SecurityContextHolder.getContext().setAuthentication()` method. This allows the subsequent filters in the chain to access the authenticated user's details.\n\nTherefore, `chain` is a valuable component of the filter chain that enables the authentication mechanism to function properly.","complex_type":true}],"usage":{"language":"java","code":"import javax.servlet.*;\nimport java.io.*;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport io.jsonwebtoken.Jwts;\nimport java.util.*;\nimport javax.servlet.http.*;\nimport org.springframework.core.env.*;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n\npublic class AuthorizationFilter extends BasicAuthenticationFilter {\n\n    private final Environment environment;\n\n    public AuthorizationFilter(AuthenticationManager authenticationManager, Environment environment) {\n        super(authenticationManager);\n        this.environment = environment;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n        var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n        var authHeader = request.getHeader(authHeaderName);\n        if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        var authentication = getAuthentication(request);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        chain.doFilter(request, response);\n    }\n\n    private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n        var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n        if (authHeader == null) {\n            return null;\n        }\n\n        var token = authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n        var userId = Jwts.parser()\n                .setSigningKey(environment.getProperty(\"token.secret\"))\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n\n        if (userId == null) {\n            return null;\n        }\n        return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n    }\n}\n","description":""},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    var authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    var authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    var authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    var authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":43,"insert":43,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16,"docLength":null},{"id":"1b435f92-7050-5aac-fc43-9745959055f6","ancestors":["08ab67b5-28e3-9ebb-e742-b7a3c1f81b0e"],"type":"function","description":"parses an authorization token from a request header and returns a `UsernamePasswordAuthenticationToken` object representing the authenticated user.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request being processed and provides the authentication token header value.\n\n* `getHeader()` method of `HttpServletRequest` returns the value of an HTTP header field.\n* `environment.getProperty()` is used to retrieve a property value from an environment map.\n* `Jwts.parser()` is a class that parses JSON Web Tokens (JWT).\n* `setSigningKey()` sets the signing key for JWT parsing.\n* `parseClaimsJws()` parses a JWT claim set.\n* `getBody()` returns the JWT body.\n* `getSubject()` returns the subject of the JWT claim set.\n\nThe function then creates and returns an authentication token based on the parsed claims.","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` instance representing the authenticated user.\n\n1. `var authHeader`: The value of the `Authorization` header present in the `HttpServletRequest`.\n2. `var token`: The decoded and extracted token from the `Authorization` header using the `Jwts.parser()` method.\n3. `var userId`: The subject of the token, which is obtained by parsing the token using the `Jwts.parseClaimsJws()` method.\n4. `var AuthenticationToken`: An instance of `UsernamePasswordAuthenticationToken`, constructed with the `userId` and an empty list of credentials.","complex_type":true},"usage":{"language":"java","code":"HttpServletRequest request = new HttpServletRequest();\nrequest.addHeader(\"authorization\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\");\nAuthorizationFilter filter = new AuthorizationFilter(new AuthenticationManager(), new Environment());\nfilter.doFilterInternal(request, null, null);\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    var authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    var token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    var userId = Jwts.parser()\n        .setSigningKey(environment.getProperty(\"token.secret\"))\n        .parseClaimsJws(token)\n        .getBody()\n        .getSubject();\n\n    if (userId == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(userId, null, Collections.emptyList());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":19,"docLength":null}]}}}