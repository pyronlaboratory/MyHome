{"name":"WebSecurity.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/WebSecurity.java","content":{"structured":{"description":"A configuration class for Spring Security called WebSecurity that enables web security and disables CSRF and frame options for HTTP requests. It also authorizes specific URLs using AntMatchers and adds an authentication filter to handle login and registration requests. Additionally, it sets the session creation policy to stateless.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"83773915-c2fc-22ab-994c-7840feebfcdf","ancestors":[],"type":"function","description":"is configured to disable CSRF and frame options, authorize requests based on specific URL patterns and HTTP methods, and authenticate all requests using the `authenticated()` mode. Additionally, an authorization filter is added to filter incoming requests and a session management policy is set to `STATELESS`.","name":"WebSecurity","code":"@EnableWebSecurity\n@Configuration\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n\n  public WebSecurity(Environment environment) {\n    this.environment = environment;\n  }\n\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0,"comment":null},"item_type":"class","length":27,"docLength":null},{"id":"0425d8ec-614c-33b1-2541-7fb87b0eba2a","ancestors":["83773915-c2fc-22ab-994c-7840feebfcdf"],"type":"function","description":"sets up security features for an HTTP security chain, disabling CSRF and frame options, and authorizing requests to specific URL paths based on environment properties.","params":[{"name":"http","type_name":"HttpSecurity","description":"HttpSecurity object that is being configured, allowing for the disablement of CSRF and frame options, as well as the authorization of requests based on ant matching patterns.\n\n* `csrf()`: Disables Cross-Site Request Forgery (CSRF) protection.\n* `headers()`: Disables the frame options for this security layer.\n* `authorizeRequests()`: Specifies which HTTP methods and URLs are allowed or denied based on the current authenticated principal. It takes an array of AntMatchers as arguments, each matching a specific URL pattern or HTTP method. The first argument is the URL path pattern for the API registration endpoint, the second argument is the URL path pattern for the login endpoint, and the remaining arguments match various HTTP methods (GET, POST, PUT, DELETE) and URL paths for other endpoints. All allowances are set to permitAll(), which means that any request will be allowed if it matches one of the patterns.\n* `addFilter()`: Adds a new filter to the security chain. In this case, it adds an AuthorizationFilter instance that uses the provided authenticationManager and environment properties.\n* `sessionManagement()`: Configures session management for this security layer. It sets the session creation policy to STATELESS, which means that sessions will not be created by default.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF and frame options\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n\n    // Allow access to the H2 console, registration and login APIs without authentication\n    http.authorizeRequests()\n            .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n            .permitAll()\n            .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n            .permitAll()\n            .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n            .permitAll()\n            .anyRequest()\n            .authenticated();\n\n    // Set session creation policy to stateless\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17,"docLength":null}]}}}