{"name":"WebSecurity.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/WebSecurity.java","content":{"structured":{"description":"A WebSecurity configuration class that sets up security settings for an API gateway service using Spring Security. The class disables CSRF and frame options, and authorizes requests based on paths defined in the application properties. It also adds an authorization filter and configures session management with a state less policy.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"5fda8a1c-0a7e-96a7-8949-d089fc1e0eda","ancestors":[],"type":"function","description":"TODO","name":"WebSecurity","code":"@EnableWebSecurity\n@Configuration\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n\n  public WebSecurity(Environment environment) {\n    this.environment = environment;\n  }\n\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0},"item_type":"class","length":27},{"id":"1fbf3465-fbcb-7aa6-f940-9767eb32af9d","ancestors":["5fda8a1c-0a7e-96a7-8949-d089fc1e0eda"],"type":"function","description":"disables CSRF protection and frame options, and sets authorization rules for API endpoints. It also configures session management to use a stateless policy.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security configuration object that can be customized to implement various security features, including disabling CSRF and frames options, authorizing requests based on AntMatchers, and setting session management policies.\n\n* `csrf()`. Disable CSRF protection for this security configuration.\n* `headers()`. Disable frame options protection for this security configuration.\n* `authorizeRequests()`. Specifies which HTTP methods and URL paths are authorized or unauthorized based on the configured permissions. The `antMatchers` method is used to match against specific URLs and HTTP methods, while the `permitAll()` method allows all requests without any restrictions.\n* `addFilter(new AuthorizationFilter(authenticationManager(), environment))`. Adds an authorization filter that checks if the user is authenticated before allowing access to the requested resource. The `authorizationManager` is used to retrieve the authentication manager, and the `environment` variable contains configuration properties related to security.\n* `sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)`. Configures the session creation policy for this security configuration. `STATELESS` means that sessions are not stored persistently across requests.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.csrf().disable();\nhttp.headers().frameOptions().disable();\nhttp.authorizeRequests()\n        .antMatchers(\"/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n}\n","description":"\nIn this example, the HttpSecurity object is passed as an argument to the configure method of WebSecurityConfigurerAdapter. This object represents the security configuration for the Spring Boot application and allows developers to configure various aspects of security such as authentication, authorization, and session management. \n\nThe first thing we do in this example is disable CSRF (Cross-Site Request Forgery) protection and frame options. By default, Spring Security will create a filter that responds to OPTIONS requests for the /login endpoint, which is used by the browser to determine whether or not it can make a request to a particular URL. However, in our case we do not want to perform any CSRF checks as we are using JWT authentication and it takes care of this for us.\n\nThe next step we take is to configure the authorization rules. We use the authorizeRequests method to specify that any requests to URLs that start with a forward slash (/) should be permitted, regardless of the HTTP method used. This means that all endpoints in our application will be accessible without authentication by default. \n\nWe then use the addFilter method to add a custom filter to the security chain. In this case, we are adding an AuthorizationFilter instance that takes two arguments: the AuthenticationManager and the Environment. The AuthenticationManager is used to obtain information about the currently authenticated user and the Environment provides access to application properties such as the URL of the h2 console endpoint.\n\nFinally, we configure session management by specifying the SessionCreationPolicy to be STATELESS. This means that Spring Security will not create a new session for each request, but rather re-use an existing one if it already exists."},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2},"item_type":"method","length":17}]}}}