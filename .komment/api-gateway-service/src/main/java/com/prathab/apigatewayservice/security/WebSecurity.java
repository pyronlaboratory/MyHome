{"name":"WebSecurity.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/WebSecurity.java","content":{"structured":{"description":"A WebSecurity configuration class using Spring Security framework. It disables CSRF and frame options, authorizes requests based on URLs and HTTP methods, and adds an authorization filter for further authentication. Additionally, it configures session management with a statefull policy.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9627657e-6109-079a-534e-3253daa2ab78","ancestors":[],"type":"function","description":"is configured to disable CSRF and frame options, authorize requests based on specific URL patterns, and use a session creation policy of STATELESS. Additionally, an authorization filter and a authentication manager are added to the configuration.","name":"WebSecurity","code":"@EnableWebSecurity\n@Configuration\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n\n  public WebSecurity(Environment environment) {\n    this.environment = environment;\n  }\n\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0,"comment":null},"item_type":"class","length":27},{"id":"37022be7-e61e-e296-cb41-8be805207b5a","ancestors":["9627657e-6109-079a-534e-3253daa2ab78"],"type":"function","description":"disables CSRF and frame options, then authorizes requests to specific URLs based on the values of environment variables. It also sets session management policy to stateless.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security configuration for the application, and is used to configure various security features such as CSRF protection, frame options, and authentication policies.\n\n* `csrf()` - disables CSRF protection\n* `headers()` - disables frame options\n* `authorizeRequests()` - specifies which URLs are accessible without authentication and adds an authenticated filter to handle remaining requests\n\t+ `.antMatchers(environment.getProperty(\"api.h2console.url.path\"))` - allows all requests to the H2 console URL path\n\t+ `.permitAll()` - allows all other requests to be accessed without authentication\n\t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))` - allows registration requests to the specified URL path\n\t+ `.permitAll()` - allows all other registration requests to be accessed without authentication\n\t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))` - allows login requests to the specified URL path\n\t+ `.permitAll()` - allows all other login requests to be accessed without authentication\n\t+ `.anyRequest()` - specifies that the authenticated filter should handle any remaining request\n\t+ `.authenticated()` - requires authentication for all requests\n* `sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)` - sets the session creation policy to stateless\n\nIn summary, this configuration disables CSRF protection and frame options, allows access to certain URLs without authentication, adds an authenticated filter to handle remaining requests, and sets the session creation policy to stateless.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.csrf().disable();\nhttp.headers().frameOptions().disable();\nhttp.authorizeRequests()\n\t\t.antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n\t\t.permitAll()\n\t\t.antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n\t\t.permitAll()\n\t\t.antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n\t\t.permitAll()\n\t\t.anyRequest()\n\t\t.authenticated()\n\t\t.and()\n\t\t.addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\nhttp.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17}]}}}