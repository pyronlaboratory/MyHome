{"name":"WebSecurity.java","path":"api-gateway-service/src/main/java/com/prathab/apigatewayservice/security/WebSecurity.java","content":{"structured":{"description":"A configuration class `WebSecurity` that enables web security in an Spring Boot application. It disables CSRF and frame options, authorizes requests based on specific URLs and HTTP methods, and uses a stateLESS session management policy. Additionally, an authorization filter is added to authenticate requests.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.prathab.apigatewayservice.security.AuthorizationFilter Pages: 1 -->\n<svg width=\"225pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 225.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.prathab.apigatewayservice.security.AuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.prathab.apigatewayservice.security.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"178,-85 39,-85 39,-66 178,-66 178,-85\"/>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.65C108.5,-47.36 108.5,-37.78 108.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.87 108.5,-65.87 112,-55.87 105,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.prathab.apigatewayservice.security.WebSecurity\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    AuthenticationFilter\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        WebSecurity [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    WebSecurity -> AuthenticationFilter \n}\n","items":[{"id":"7020a67b-882d-c781-6b4a-1207200c80a9","ancestors":[],"type":"function","description":"is configured to disable CSRF and frame options, authorize requests based on specific URLs and HTTP methods, and use a stateLESS session management policy. Additionally, an authorization filter is added to authenticate requests.","name":"WebSecurity","code":"@EnableWebSecurity\n@Configuration\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n\n  public WebSecurity(Environment environment) {\n    this.environment = environment;\n  }\n\n  /**\n   * disables CSRF and frame options, and authorizes requests to specific URLs based\n   * on the environment property values. It also sets session management policy to stateless.\n   * \n   * @param http HTTP security configuration for the application, which is being\n   * customized and modified within the function.\n   * \n   * \t- `csrf()` - Disables Cross-Site Request Forgery (CSRF) protection.\n   * \t- `headers()` - Disables Frame Options (FO) protection.\n   * \t- `authorizeRequests()` - Configures which requests are authorized based on the\n   * specified antMatchers.\n   * \t+ `.antMatchers(environment.getProperty(\"api.h2console.url.path\"))` - Allows any\n   * request to the H2 console URL path.\n   * \t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))`\n   * - Allows any POST request to the registration URL path.\n   * \t+ `.antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))`\n   * - Allows any POST request to the login URL path.\n   * \t+ `.anyRequest()` - Allows any other request.\n   * \t+ `.authenticated()` - Requires authentication for all requests.\n   * \t- `addFilter(new AuthorizationFilter(authenticationManager(), environment))` -\n   * Adds an Authorization Filter that uses the provided Authentication Manager and Environment.\n   */\n  @Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }\n}","location":{"start":32,"insert":27,"offset":" ","indent":0,"comment":{"start":26,"end":31}},"item_type":"class","length":49,"docLength":5},{"id":"dcc1ca43-6060-4b93-7e47-e12fce6bad77","ancestors":["7020a67b-882d-c781-6b4a-1207200c80a9"],"type":"function","description":"disables CSRF and frame options, and authorizes requests based on URL paths. It also sets session management policy to stateless.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security context and provides methods for configuring various features, such as disabling CSRF and frame options, authorizing requests based on URL paths, and setting session management policies.\n\n* `csrf()`: Disables CSRF (Cross-Site Request Forgery) protection.\n* `headers()`: Disables Frame Options (FEO) protection.\n* `authorizeRequests()`: Configures the authorizer to permit all requests to the specified URLs. The URLs are defined by setting `antMatchers` to the desired paths, using the `permitAll()` method.\n* `AuthenticationManager`: This is an instance of the `AuthenticationManager` interface, which provides methods for authenticating users.\n* `SessionCreationPolicy`: Sets the session creation policy to `STATELESS`, which means that sessions will not be created.","complex_type":true}],"usage":{"language":"java","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    // Disable CSRF and frame options\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n\n    // Permit all requests to the H2 console URL path\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n\n    // Permit any POST request to the registration and login URL paths\n    .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n\n    // Require authentication for all other requests\n    .anyRequest().authenticated()\n\n    // Add an Authorization Filter that uses the provided Authentication Manager and Environment\n    .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n}\n","description":""},"name":"configure","code":"@Override protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable();\n    http.headers().frameOptions().disable();\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.login.url.path\"))\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new AuthorizationFilter(authenticationManager(), environment));\n\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n  }","location":{"start":63,"insert":41,"offset":" ","indent":2,"comment":{"start":40,"end":62}},"item_type":"method","length":17,"docLength":22}]}}}