/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.security;

import com.myhome.security.jwt.AppJwt;
import com.myhome.security.jwt.AppJwtEncoderDecoder;
import java.io.IOException;
import java.util.Collections;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

/**
 * TODO
 */
public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {

  private final Environment environment;
  private final AppJwtEncoderDecoder appJwtEncoderDecoder;

  public MyHomeAuthorizationFilter(
      AuthenticationManager authenticationManager,
      Environment environment,
      AppJwtEncoderDecoder appJwtEncoderDecoder) {
    super(authenticationManager);
    this.environment = environment;
    this.appJwtEncoderDecoder = appJwtEncoderDecoder;
  }

  /**
   * authenticates a user by checking for an authentication token in the HTTP request
   * header. If the token is present and has the correct prefix, it sets the
   * SecurityContextHolder with the corresponding UsernamePasswordAuthenticationToken
   * and allows the filter chain to proceed.
   * 
   * @param request HTTP request object that is being processed by the filter.
   * 
   * 1/ `authHeaderName`: The name of the HTTP header that contains the authorization
   * token.
   * 2/ `authHeaderPrefix`: The prefix of the authorization token in the HTTP header.
   * 3/ `authHeader`: The value of the authorization token in the HTTP header, which
   * is either null or starts with the prefix provided by `authHeaderPrefix`.
   * 4/ `getAuthentication()`: A method that returns an instance of
   * `UsernamePasswordAuthenticationToken`, which is then set as the authentication for
   * the security context using `SecurityContextHolder.getContext().setAuthentication()`.
   * 
   * @param response output of the current filter chain and is passed on to the next
   * filter in the chain for further processing.
   * 
   * 1/ `HttpServletRequest request`: This is the original HTTP request that triggered
   * the filter chain.
   * 2/ `HttpServletResponse response`: This is the HTTP response generated by the
   * filter chain.
   * 3/ `FilterChain chain`: This is the chain of filters that was executed in sequence
   * to process the request.
   * 4/ `IOException IOException`: This exception can be thrown if there is an I/O error
   * while processing the request or generating the response.
   * 5/ `ServletException ServletException`: This exception can be thrown if there is
   * a problem with the filter chain or the HTTP request/response processing.
   * 
   * @param chain next filter in the filter chain to be executed after the current
   * filter is applied to the request.
   * 
   * 	- `HttpServletRequest request`: The HTTP request sent by the client to the server.
   * 	- `HttpServletResponse response`: The HTTP response generated by the server in
   * response to the request.
   * 	- `FilterChain chain`: An instance of `FilterChain`, which is a chain of filters
   * that process the incoming request.
   * 	- `IOException`: A subclass of `Throwable` representing an error occurring during
   * communication between a client and server.
   * 	- `ServletException`: A subclass of `Throwable` representing an error occurring
   * while processing an HTTP request.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    String authHeaderName = environment.getProperty("authorization.token.header.name");
    String authHeaderPrefix = environment.getProperty("authorization.token.header.prefix");

    String authHeader = request.getHeader(authHeaderName);
    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {
      chain.doFilter(request, response);
      return;
    }

    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    chain.doFilter(request, response);
  }

  /**
   * retrieves an authentication token from a HTTP request header and decodes it into
   * a `UsernamePasswordAuthenticationToken`. If the token is null, the function returns
   * null.
   * 
   * @param request HTTP request made by the client and contains information about the
   * authentication token in its header.
   * 
   * 1/ `getHeader`: This method returns the value of a header field in the HTTP request.
   * In this case, it returns the value of the authorization token header.
   * 2/ `getProperty`: This method retrieves a property from the environment. The
   * property is specified as a string, and its value can be any valid value.
   * 3/ `getId`: This method returns the user ID extracted from the JWT token.
   * 4/ `decode`: This method decodes the JWT token and extracts the user ID. It uses
   * the `appJwtEncoderDecoder` class to perform the decoding.
   * 5/ `getUserId`: This method returns the user ID extracted from the JWT token.
   * 6/ `getSecret`: This method retrieves the secret key used for encoding the JWT token.
   * 7/ `return new UsernamePasswordAuthenticationToken`: This line creates a new
   * instance of the `UsernamePasswordAuthenticationToken` class, passing in the user
   * ID and a list of credentials (which is empty in this case).
   * 
   * @returns a `UsernamePasswordAuthenticationToken` object representing the authenticated
   * user.
   * 
   * 	- The function returns an instance of `UsernamePasswordAuthenticationToken`.
   * 	- The `username` field of the token is set to the value of `jwt.getUserId()`.
   * 	- The `password` field of the token is set to `null`.
   * 	- The `groups` list of the token is set to an empty list.
   */
  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
    String authHeader =
        request.getHeader(environment.getProperty("authorization.token.header.name"));
    if (authHeader == null) {
      return null;
    }

    String token =
        authHeader.replace(environment.getProperty("authorization.token.header.prefix"), "");
    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty("token.secret"));

    if (jwt.getUserId() == null) {
      return null;
    }
    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());
  }
}
