package com.myhome.controllers;

import com.myhome.api.AuthenticationApi;
import com.myhome.domain.AuthenticationData;
import com.myhome.model.LoginRequest;
import com.myhome.services.AuthenticationService;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * TODO
 */
@RequiredArgsConstructor
@RestController
public class AuthenticationController implements AuthenticationApi {

  private final AuthenticationService authenticationService;

  /**
   * authenticates a user and returns an `ResponseEntity` with a successful status code
   * and custom headers containing authentication data.
   * 
   * @param loginRequest login request to be processed by the `authenticationService`,
   * providing the necessary data for the authentication process.
   * 
   * 	- `@Valid`: This annotation indicates that the `loginRequest` parameter must be
   * validated by the framework.
   * 	- `AuthenticationData authenticationData`: This is a data object returned by the
   * `authenticationService`, representing the result of authenticating the user.
   * 	- `ResponseEntity.ok()`: This method returns an HTTP response entity with a status
   * code of 200 (OK), indicating that the request was successful.
   * 	- `headers(createLoginHeaders(authenticationData))`: This method creates and sets
   * headers for the response, which contain information related to the authentication
   * process.
   * 
   * @returns an `ResponseEntity` object with a status of `OK` and headers containing
   * information related to the authentication process.
   * 
   * The `ResponseEntity` is an instance of `OkResponse`, indicating that the login
   * request was successful.
   * The `headers` field contains a collection of HTTP headers generated by the
   * authentication service, which provide information about the authentication process
   * and the user's identity.
   * The `build()` method is used to create the response entity.
   */
  @Override
  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {
    final AuthenticationData authenticationData = authenticationService.login(loginRequest);
    return ResponseEntity.ok()
        .headers(createLoginHeaders(authenticationData))
        .build();
  }

  /**
   * creates an HTTP headers object containing user ID and JWT token for logging in a
   * user.
   * 
   * @param authenticationData user authentication details, providing the user ID and
   * JWT token for login authentication.
   * 
   * 	- `getUserId()` returns the user ID of the authenticated user.
   * 	- `getJwtToken()` returns the JWT token obtained through authentication.
   * 
   * @returns a set of HTTP headers containing the user ID and JWT token for authentication
   * purposes.
   * 
   * 	- `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java
   * `HttpClient` package, which contains a collection of HTTP headers.
   * 	- `add()` methods: These methods are used to add new header fields to the
   * `HttpHeaders` collection. In this function, two methods are called: `add("userId")`
   * and `add("token")`. The names of these methods are followed by the key and value
   * of each added header field. For example, `add("userId")` adds a header field with
   * the key "userId" and the value obtained from the `authenticationData.getUserId()`
   * method. Similarly, `add("token")` adds a header field with the key "token" and the
   * value obtained from the `authenticationData.getJwtToken()` method.
   * 	- `new`: This keyword is used to create a new instance of the `HttpHeaders` class.
   * 	- `AuthenticationData`: This is an instance of the `AuthenticationData` class,
   * which contains information related to user authentication. The `createLoginHeaders`
   * function uses this class to obtain the values for the header fields.
   */
  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {
    final HttpHeaders httpHeaders = new HttpHeaders();
    httpHeaders.add("userId", authenticationData.getUserId());
    httpHeaders.add("token", authenticationData.getJwtToken());
    return httpHeaders;
  }
}
