/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.communityservice.services.springdatajpa;

import com.prathab.communityservice.domain.Community;
import com.prathab.communityservice.domain.CommunityAdmin;
import com.prathab.communityservice.dto.CommunityDto;
import com.prathab.communityservice.dto.mapper.CommunityMapper;
import com.prathab.communityservice.repositories.CommunityAdminRepository;
import com.prathab.communityservice.repositories.CommunityRepository;
import com.prathab.communityservice.services.CommunityService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * provides JPA-based implementation of Community Service interface, offering functions
 * for creating new communities, retrieving existing ones, and adding admins to them.
 * The class uses dependency injection and utilizes Spring Data JPA for repository operations.
 */
@Service
@Slf4j
public class CommunitySDJpaService implements CommunityService {
  private final CommunityRepository communityRepository;
  private final CommunityAdminRepository communityAdminRepository;
  private final CommunityMapper communityMapper;

  public CommunitySDJpaService(
      CommunityRepository communityRepository,
      CommunityAdminRepository communityAdminRepository,
      CommunityMapper communityMapper) {
    this.communityRepository = communityRepository;
    this.communityAdminRepository = communityAdminRepository;
    this.communityMapper = communityMapper;
  }

  /**
   * creates a new Community instance using a unique ID generated by the function, maps
   * the `CommunityDto` to a `Community` entity, saves it to the repository, and logs
   * a trace message indicating the saved community ID.
   * 
   * @param communityDto Community entity that is being created or updated, containing
   * its attributes and relationships.
   * 
   * 	- `communityDto.setCommunityId(generateUniqueCommunityId());`: This line generates
   * a unique community ID for the newly created community.
   * 	- `var community = communityMapper.communityDtoToCommunity(communityDto);`: This
   * line converts the input `communityDto` into a `Community` object using the `communityMapper`.
   * 	- `var savedCommunity = communityRepository.save(community);`: This line saves
   * the converted `Community` object to the repository, creating a new entry in the
   * database. The `savedCommunity` variable refers to the newly created community in
   * the repository.
   * 
   * The log statement `log.trace("saved community with id[{}] to repository",
   * savedCommunity.getId());` is used to track the creation and saving of the community
   * in the repository.
   * 
   * @returns a saved community object with a unique ID generated by the method.
   * 
   * 	- `community`: A `Community` object that represents the created community. It has
   * an `id` attribute that contains a unique identifier for the community.
   * 	- `savedCommunity`: A `Community` object that represents the saved community in
   * the repository. It also has an `id` attribute that contains a unique identifier
   * for the community.
   * 	- `log.trace`: A logging statement that provides additional information about the
   * operation, including the unique ID of the created community.
   */
  @Override public Community createCommunity(CommunityDto communityDto) {
    communityDto.setCommunityId(generateUniqueCommunityId());
    var community = communityMapper.communityDtoToCommunity(communityDto);
    var savedCommunity = communityRepository.save(community);
    log.trace("saved community with id[{}] to repository", savedCommunity.getId());
    return savedCommunity;
  }

  /**
   * retrieves a set of `Community` objects from the database using the `findAll()`
   * method of the `communityRepository`. The retrieved communities are then added to
   * a new `HashSet<Community>`, which is returned as the function's output.
   * 
   * @returns a set of all communities found in the repository.
   * 
   * 	- `Set<Community>` represents a set of `Community` objects.
   * 	- The set contains all the communities retrieved from the repository using the
   * `findAll()` method.
   * 	- Each element in the set is a `Community` object, which has properties such as
   * name, description, and location.
   */
  @Override public Set<Community> listAll() {
    var communityListSet = new HashSet<Community>();
    communityRepository.findAll().forEach(communityListSet::add);
    return communityListSet;
  }

  /**
   * retrieves community details by its ID.
   * 
   * @param communityId identifier of the community to retrieve details for.
   * 
   * @returns a `Community` object representing the community with the specified `communityId`.
   * 
   * 	- The Community object represents the details of a community with the specified
   * ID.
   * 	- It has a `findByCommunityId` method that returns the community details by ID.
   * 	- The community details include information such as name, location, and description.
   */
  @Override public Community getCommunityDetailsById(String communityId) {
    return communityRepository.findByCommunityId(communityId);
  }

  /**
   * adds a set of admins to a community by creating new `CommunityAdmin` objects and
   * associating them with the community through the `getCommunities()` method, then
   * saves the updated community.
   * 
   * @param communityId unique identifier of the community to which admins will be added.
   * 
   * @param admins set of admin usernames to be added to the specified community.
   * 
   * 	- `Set<String> admins`: A set of admin user IDs.
   * 	- Each admin ID is a string value.
   * 	- The set contains multiple admin IDs.
   * 
   * @returns a saved Community object containing all the added admins.
   * 
   * 	- The community object is saved in the repository after admins have been added
   * to it using the `save()` method.
   * 	- The `admins` parameter is a Set containing the IDs of the admins to be added
   * to the community.
   * 	- The `communityId` parameter represents the ID of the community whose admins are
   * being added.
   * 	- The `savedAdminSet` variable stores the new admin objects that have been created
   * and saved in the database using the `save()` method.
   * 	- The `community.getAdmins().addAll()` line adds all the saved admins to the
   * community's admin list.
   */
  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {
    var community = communityRepository.findByCommunityId(communityId);

    var savedAdminSet = new HashSet<CommunityAdmin>();
    admins.forEach(s -> {
      var admin = new CommunityAdmin();
      admin.setAdminId(s);
      admin.getCommunities().add(community);
      savedAdminSet.add(communityAdminRepository.save(admin));
    });

    community.getAdmins().addAll(savedAdminSet);
    return communityRepository.save(community);
  }

  /**
   * generates a unique, randomly-generated string for use as an identifier for a community.
   * 
   * @returns a randomly generated unique string of characters, typically between 32
   * and 128 characters in length.
   */
  private String generateUniqueCommunityId() {
    return UUID.randomUUID().toString();
  }
}
