/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.communityservice.services.springdatajpa;

import com.prathab.communityservice.domain.Community;
import com.prathab.communityservice.domain.CommunityAdmin;
import com.prathab.communityservice.dto.CommunityDto;
import com.prathab.communityservice.dto.mapper.CommunityMapper;
import com.prathab.communityservice.repositories.CommunityAdminRepository;
import com.prathab.communityservice.repositories.CommunityRepository;
import com.prathab.communityservice.services.CommunityService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * TODO
 */
@Service
@Slf4j
public class CommunitySDJpaService implements CommunityService {
  private final CommunityRepository communityRepository;
  private final CommunityAdminRepository communityAdminRepository;
  private final CommunityMapper communityMapper;

  public CommunitySDJpaService(
      CommunityRepository communityRepository,
      CommunityAdminRepository communityAdminRepository,
      CommunityMapper communityMapper) {
    this.communityRepository = communityRepository;
    this.communityAdminRepository = communityAdminRepository;
    this.communityMapper = communityMapper;
  }

  /**
   * creates a new community instance and saves it to the repository, generating a
   * unique ID for the community.
   * 
   * @param communityDto Community entity that is being created, containing its fields
   * and values.
   * 
   * 	- `communityDto.setCommunityId(generateUniqueCommunityId());`: This line sets the
   * `id` property of the created community to a unique value generated by the
   * `generateUniqueCommunityId()` method.
   * 	- `var community = communityMapper.communityDtoToCommunity(communityDto);`: This
   * line maps the input `communityDto` to a corresponding `Community` object using the
   * `communityMapper`.
   * 	- `var savedCommunity = communityRepository.save(community);`: This line saves
   * the created `Community` object to the repository, which persists it in the database.
   * The `savedCommunity` variable refers to the persisted community object.
   * 
   * @returns a saved community object representing the newly created community.
   * 
   * 	- `community`: The created community instance with its ID generated uniquely by
   * the function.
   * 	- `savedCommunity`: The saved community instance in the repository, which has a
   * unique ID assigned to it.
   * 	- `log.trace`: A log statement that traces the saving of the community instance
   * to the repository.
   */
  @Override public Community createCommunity(CommunityDto communityDto) {
    communityDto.setCommunityId(generateUniqueCommunityId());
    var community = communityMapper.communityDtoToCommunity(communityDto);
    var savedCommunity = communityRepository.save(community);
    log.trace("saved community with id[{}] to repository", savedCommunity.getId());
    return savedCommunity;
  }

  /**
   * from the provided Java code returns a `Set` of `Community` objects obtained by
   * combining the results of finding all community objects from the database using the
   * `communityRepository` and adding them to the specified `HashSet`.
   * 
   * @returns a set of `Community` objects containing all the communities retrieved
   * from the database.
   * 
   * The `Set<Community>` object represents a collection of Community objects that have
   * been retrieved from the database.
   * 
   * The `var communityListSet = new HashSet<Community>();` line creates an instance
   * of `HashSet`, which is a type of set data structure that stores elements in a
   * special way, allowing for fast lookups, insertions, and deletions.
   * 
   * The `communityRepository.findAll().forEach(communityListSet::add);` line iterates
   * over the results returned by the `findAll` method, passing each result to the `add`
   * method of the `HashSet`. This adds each Community object to the set.
   */
  @Override public Set<Community> listAll() {
    var communityListSet = new HashSet<Community>();
    communityRepository.findAll().forEach(communityListSet::add);
    return communityListSet;
  }

  /**
   * retrieves a community's details by its ID from the repository.
   * 
   * @param communityId identifier of the community to retrieve details for.
   * 
   * 	- `communityId`: This is a string that represents the unique identifier for a
   * community. It could have various attributes such as the name, description, location,
   * and other relevant details.
   * 
   * @returns a `Community` object containing details of the community with the specified
   * `id`.
   * 
   * The Community object represents a specific community within the application's
   * domain, identified by the provided communityId. The object contains attributes
   * such as the community name, description, and location.
   */
  @Override public Community getCommunityDetailsById(String communityId) {
    return communityRepository.findByCommunityId(communityId);
  }

  /**
   * takes a `String` community ID and a `Set<String>` of admin IDs, adds each admin
   * to the corresponding community, and saves the updated community and admin data to
   * the repository.
   * 
   * @param communityId identifier of the community whose admins are being added.
   * 
   * 	- `communityId`: This is an instance of `String`, representing the unique identifier
   * for a community in the system.
   * 	- `admins`: This is an instance of `Set`, containing the set of admins to be added
   * to the community. Each element in the set is also an instance of `String`,
   * representing the ID of an admin.
   * 
   * @param admins set of admins to be added to the specified community.
   * 
   * 	- `admins`: A set containing strings representing admin usernames.
   * 
   * Inside the loop, each string in the `admins` set is used to create a new
   * `CommunityAdmin` instance. The `setAdminId()` method sets the `adminId` field of
   * the newly created instance to the corresponding username from `admins`. Next, the
   * `getCommunities().add()` method adds the current community object to the `get
   * Communities()` collection of the `CommunityAdmin` instance. Finally, the
   * `savedAdminSet.add()` method saves the modified `CommunityAdmin` instance to the
   * database using the `communityAdminRepository.save()` method.
   * 
   * The `community.getAdmins().addAll()` statement adds all the newly created
   * `CommunityAdmin` instances to the community object's `admins` field. The entire
   * function saves the updated community object and its associated admins in the
   * database using the `communityRepository.save()` method.
   * 
   * @returns a saved Community object with updated admin set.
   * 
   * 	- The `community` object is saved in the repository with the `save` method,
   * indicating that the changes made to the community have been persisted.
   * 	- The `admins` attribute of the `community` object has been updated to include
   * all the admins added to the community.
   * 	- The `savedAdminSet` variable contains a set of `CommunityAdmin` objects, each
   * representing an admin added to the community. These objects have been saved in the
   * repository using the `save` method.
   */
  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {
    var community = communityRepository.findByCommunityId(communityId);

    var savedAdminSet = new HashSet<CommunityAdmin>();
    admins.forEach(s -> {
      var admin = new CommunityAdmin();
      admin.setAdminId(s);
      admin.getCommunities().add(community);
      savedAdminSet.add(communityAdminRepository.save(admin));
    });

    community.getAdmins().addAll(savedAdminSet);
    return communityRepository.save(community);
  }

  /**
   * generates a unique and random UUID string using the `UUID.randomUUID()` method.
   * 
   * @returns a unique string of letters and numbers, generated randomly using the
   * `UUID` class.
   * 
   * 	- The output is a string value that represents a unique identifier for a community.
   * 	- The string consists of 36 characters, formed by a series of letters and numbers
   * generated randomly using the UUID class.
   * 	- Each character in the output is a unique and random value within its respective
   * range, ensuring maximum uniqueness for each community identifier.
   * 	- The use of UUID.randomUUID() method guarantees that the output is truly random
   * and unpredictable, providing an effective way to assign unique identifiers to communities.
   */
  private String generateUniqueCommunityId() {
    return UUID.randomUUID().toString();
  }
}
