/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.communityservice.services.springdatajpa;

import com.prathab.communityservice.domain.Community;
import com.prathab.communityservice.domain.CommunityAdmin;
import com.prathab.communityservice.dto.CommunityDto;
import com.prathab.communityservice.dto.mapper.CommunityMapper;
import com.prathab.communityservice.repositories.CommunityAdminRepository;
import com.prathab.communityservice.repositories.CommunityRepository;
import com.prathab.communityservice.services.CommunityService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * provides JPA-based implementation of community service, offering functionality
 * such as creating new communities, listing all communities, retrieving community
 * details by ID, and adding admins to a community.
 */
@Service
@Slf4j
public class CommunitySDJpaService implements CommunityService {
  private final CommunityRepository communityRepository;
  private final CommunityAdminRepository communityAdminRepository;
  private final CommunityMapper communityMapper;

  public CommunitySDJpaService(
      CommunityRepository communityRepository,
      CommunityAdminRepository communityAdminRepository,
      CommunityMapper communityMapper) {
    this.communityRepository = communityRepository;
    this.communityAdminRepository = communityAdminRepository;
    this.communityMapper = communityMapper;
  }

  /**
   * creates a new community object and saves it to the database, generating a unique
   * ID for the community.
   * 
   * @param communityDto Community object that is converted into a corresponding database
   * entity using the `communityMapper` and then saved to the repository.
   * 
   * 	- `communityDto.setCommunityId(generateUniqueCommunityId());`: This sets the
   * community ID to a unique value generated by the `generateUniqueCommunityId()` method.
   * 	- `var community = communityMapper.communityDtoToCommunity(communityDto);`: This
   * step converts the input `communityDto` into a `Community` object using the `communityMapper`.
   * 	- `var savedCommunity = communityRepository.save(community);`: This line saves
   * the converted `Community` object to the repository.
   * 	- `log.trace("saved community with id[{}] to repository", savedCommunity.getId());`:
   * This log statement provides additional information about the save operation,
   * including the ID of the saved community.
   * 
   * @returns a saved community object with a unique ID generated by the method.
   * 
   * 	- `communityDto`: The `CommunityDto` object containing the details of the community
   * to be created.
   * 	- `community`: The resulting `Community` object after mapping the `CommunityDto`
   * object using the `communityMapper`.
   * 	- `savedCommunity`: The saved `Community` object in the repository, which is also
   * the same as the input `community` object.
   * 	- `id`: The unique identifier assigned to the created community, generated using
   * the `generateUniqueCommunityId()` method.
   */
  @Override public Community createCommunity(CommunityDto communityDto) {
    communityDto.setCommunityId(generateUniqueCommunityId());
    var community = communityMapper.communityDtoToCommunity(communityDto);
    var savedCommunity = communityRepository.save(community);
    log.trace("saved community with id[{}] to repository", savedCommunity.getId());
    return savedCommunity;
  }

  /**
   * aggregates all community entities from the repository and returns a set containing
   * them.
   * 
   * @returns a set of `Community` objects representing all communities found in the database.
   * 
   * The `Set<Community>` object represents a collection of Community objects.
   * 
   * Each element in the Set is a reference to a Community object, containing information
   * about a particular community.
   * 
   * The `findAll()` method from the `communityRepository` class is called to retrieve
   * all Community objects from the database or data source.
   * 
   * The `forEach()` method is used to iterate through the list of Community objects
   * and add each one to the `communityListSet`.
   */
  @Override public Set<Community> listAll() {
    var communityListSet = new HashSet<Community>();
    communityRepository.findAll().forEach(communityListSet::add);
    return communityListSet;
  }

  /**
   * retrieves the details of a community with the given `communityId`.
   * 
   * @param communityId ID of the community to retrieve details for.
   * 
   * @returns a `Community` object containing details of the community with the provided
   * ID.
   * 
   * The Community object represents a community with an ID, name, and other details.
   * The community ID is used to identify the community in the database, while the name
   * provides a human-readable label for the community. Other details may include
   * location, description, and tags.
   */
  @Override public Community getCommunityDetailsById(String communityId) {
    return communityRepository.findByCommunityId(communityId);
  }

  /**
   * adds a set of admins to an existing community by creating new `CommunityAdmin`
   * objects, saving them in the database, and then adding them to the community's admin
   * list.
   * 
   * @param communityId identifier of the community to which admins are being added.
   * 
   * @param admins Set of admin user identities to be added to the specified community.
   * 
   * 	- `Set<String> admins`: This is a set of strings representing the IDs of the
   * admins to be added to the community.
   * 	- `communityId`: The ID of the community to which the admins will be added.
   * 	- `communityRepository`: A repository for accessing and manipulating community
   * objects in the database.
   * 	- `community`: The community object to which the admins will be added, as returned
   * by the `findByCommunityId` method of the `communityRepository`.
   * 	- `savedAdminSet`: A set of newly created `CommunityAdmin` objects representing
   * the admins saved in the function.
   * 
   * @returns a saved Community object with updated admin set.
   * 
   * 1/ `community`: This is the updated community object that contains the added admins.
   * 2/ `admins`: This is the set of admins who have been added to the community.
   * 3/ `savedAdminSet`: This is a new set of `CommunityAdmin` objects that represent
   * the saved admins in the database. Each element in this set corresponds to an admin
   * who has been successfully saved in the database.
   */
  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {
    var community = communityRepository.findByCommunityId(communityId);

    var savedAdminSet = new HashSet<CommunityAdmin>();
    admins.forEach(s -> {
      var admin = new CommunityAdmin();
      admin.setAdminId(s);
      admin.getCommunities().add(community);
      savedAdminSet.add(communityAdminRepository.save(admin));
    });

    community.getAdmins().addAll(savedAdminSet);
    return communityRepository.save(community);
  }

  /**
   * generates a unique identifier using the `UUID.randomUUID()` method, resulting in
   * a string value.
   * 
   * @returns a unique string of characters representing a randomly generated UUID.
   */
  private String generateUniqueCommunityId() {
    return UUID.randomUUID().toString();
  }
}
