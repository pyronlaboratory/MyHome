/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.communityservice.services.springdatajpa;

import com.prathab.communityservice.domain.Community;
import com.prathab.communityservice.domain.CommunityAdmin;
import com.prathab.communityservice.dto.CommunityDto;
import com.prathab.communityservice.dto.mapper.CommunityMapper;
import com.prathab.communityservice.repositories.CommunityAdminRepository;
import com.prathab.communityservice.repositories.CommunityRepository;
import com.prathab.communityservice.services.CommunityService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * is an implementation of the CommunityService interface in a Java-based application.
 * It provides methods for creating and listing communities in a repository, as well
 * as retrieving community details by ID and adding admins to a community. The class
 * also generates a unique identifier for each created community using the
 * `generateUniqueCommunityId()` method.
 */
@Service
@Slf4j
public class CommunitySDJpaService implements CommunityService {
  private final CommunityRepository communityRepository;
  private final CommunityAdminRepository communityAdminRepository;
  private final CommunityMapper communityMapper;

  public CommunitySDJpaService(
      CommunityRepository communityRepository,
      CommunityAdminRepository communityAdminRepository,
      CommunityMapper communityMapper) {
    this.communityRepository = communityRepository;
    this.communityAdminRepository = communityAdminRepository;
    this.communityMapper = communityMapper;
  }

  /**
   * generates a unique community ID, maps the `CommunityDto` to a `Community` object
   * using a mapper, saves the `Community` object to the repository, and logs a trace
   * message for auditing purposes.
   * 
   * @param communityDto Community entity that is being created or updated, containing
   * its attributes and relationships with other entities.
   * 
   * 	- `communityDto.setCommunityId(generateUniqueCommunityId());`: This line sets the
   * `id` attribute of the `Community` object to a unique value generated by the
   * `generateUniqueCommunityId()` method.
   * 	- `var community = communityMapper.communityDtoToCommunity(communityDto);`: This
   * line converts the input `CommunityDto` into a `Community` object using the
   * `communityMapper` interface.
   * 	- `var savedCommunity = communityRepository.save(community);`: This line saves
   * the created `Community` object to the repository, which is implemented as a JPA
   * entity manager. The `savedCommunity` variable contains the ID of the newly created
   * community.
   * 
   * @returns a saved community object in the repository.
   * 
   * 	- `communityDto`: The input parameter passed from the caller, which represents
   * the community details to be created.
   * 	- `generateUniqueCommunityId()`: A method that generates a unique ID for the community.
   * 	- `communityMapper.communityDtoToCommunity(communityDto)`: A method that maps the
   * community DTO to a community object.
   * 	- `communityRepository.save(community)`: A method that saves the created community
   * object in the repository.
   * 	- `log.trace("saved community with id[{}] to repository", savedCommunity.getId())`:
   * A log statement that traces the save operation of the community object to the repository.
   */
  @Override public Community createCommunity(CommunityDto communityDto) {
    communityDto.setCommunityId(generateUniqueCommunityId());
    var community = communityMapper.communityDtoToCommunity(communityDto);
    var savedCommunity = communityRepository.save(community);
    log.trace("saved community with id[{}] to repository", savedCommunity.getId());
    return savedCommunity;
  }

  /**
   * retrieves all community objects from the database and stores them in a set for
   * further use.
   * 
   * @returns a set of all communities stored in the repository.
   * 
   * 	- `Set<Community>` is the type of the variable `communityListSet`, indicating
   * that it is a set of community objects.
   * 	- The method `findAll()` from the `communityRepository` class is called to retrieve
   * a list of community objects, which are then added to the `communityListSet`.
   * 	- The returned set contains all the communities retrieved from the database.
   */
  @Override public Set<Community> listAll() {
    var communityListSet = new HashSet<Community>();
    communityRepository.findAll().forEach(communityListSet::add);
    return communityListSet;
  }

  /**
   * retrieves a community's details by its unique identifier from the community repository.
   * 
   * @param communityId ID of the community to retrieve details for.
   * 
   * @returns a `Community` object containing details of the community with the specified
   * `communityId`.
   * 
   * 	- The `communityRepository` method is used to retrieve the community details by
   * the given `communityId`.
   * 	- The `findByCommunityId` method returns a `Community` object that represents the
   * community with the specified `communityId`.
   * 	- The `Community` class has properties such as `id`, `name`, `description`, and
   * `location`, among others.
   */
  @Override public Community getCommunityDetailsById(String communityId) {
    return communityRepository.findByCommunityId(communityId);
  }

  /**
   * adds a set of admins to a community by creating new `CommunityAdmin` objects and
   * saving them to the database, then adding the admins to the community's admin list.
   * 
   * @param communityId unique identifier of the community to which the admins are being
   * added.
   * 
   * @param admins Set of admins to add to the Community, and it is passed through a
   * forEach loop to create new CommunityAdmin objects and save them to the database
   * along with their associated Community.
   * 
   * 	- `Set<String> admins`: A set containing the identifiers of the administrators
   * to be added to the community.
   * 	- `communityId`: The ID of the community to which the administrators will be added.
   * 	- `communityRepository`: A repository responsible for storing and retrieving
   * community objects.
   * 	- `communityAdminRepository`: A repository responsible for storing and retrieving
   * community administrator objects.
   * 	- `save`: A method that saves the updated community object in the repository.
   * 
   * @returns a saved Community object with added admins.
   * 
   * 	- The community object is saved using the `save()` method, which indicates that
   * the function modifies the existing community object instead of creating a new one.
   * 	- The `savedAdminSet` variable contains a set of newly created CommunityAdmin
   * objects, each of which has a unique `adminId` and belongs to the specified community.
   * These objects are added to the community's admin list using the `addAll()` method.
   * 	- The `community.getAdmins().addAll()` statement adds all the newly created admins
   * to the community's admin list, effectively increasing the number of admins in the
   * community.
   */
  @Override public Community addAdminsToCommunity(String communityId, Set<String> admins) {
    var community = communityRepository.findByCommunityId(communityId);

    var savedAdminSet = new HashSet<CommunityAdmin>();
    admins.forEach(s -> {
      var admin = new CommunityAdmin();
      admin.setAdminId(s);
      admin.getCommunities().add(community);
      savedAdminSet.add(communityAdminRepository.save(admin));
    });

    community.getAdmins().addAll(savedAdminSet);
    return communityRepository.save(community);
  }

  /**
   * generates a unique identifier for a community using the `UUID` class and returns
   * it as a string.
   * 
   * @returns a unique, randomly generated string of characters.
   */
  private String generateUniqueCommunityId() {
    return UUID.randomUUID().toString();
  }
}
