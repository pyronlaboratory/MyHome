/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.homeservice.services.springdatajpa;

import com.prathab.homeservice.controllers.dto.HouseDto;
import com.prathab.homeservice.controllers.models.mapper.HouseApiMapper;
import com.prathab.homeservice.domain.House;
import com.prathab.homeservice.repositories.HouseRepository;
import com.prathab.homeservice.services.HouseService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.springframework.stereotype.Service;

/**
 * is a Spring Data JPA implementation of a House service, providing methods for
 * adding and finding houses. The class has a dependency on the HouseRepository and
 * HouseApiMapper interfaces, which are used to interact with the database and map
 * house DTOs to domain objects.
 */
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseRepository houseRepository;
  private final HouseApiMapper houseApiMapper;

  public HouseSDJpaService(HouseRepository houseRepository,
      HouseApiMapper houseApiMapper) {
    this.houseRepository = houseRepository;
    this.houseApiMapper = houseApiMapper;
  }

  /**
   * maps a `HouseDto` object to a `House` entity, assigns a unique house ID, and saves
   * the updated entity to the repository.
   * 
   * @param houseDto House entity in DTO format, which is converted to a corresponding
   * `House` instance by calling the `houseApiMapper.houseDtoToHouse()` method before
   * saving it to the repository.
   * 
   * 	- `houseDto`: This is an object representing a house with properties such as
   * `houseId`, `street`, `city`, `state`, and `zip`.
   * 	- `generateUniqueHouseId()`: This is a method that generates a unique identifier
   * for the house.
   * 
   * @returns a new instance of `House` entity with a unique ID generated by the method.
   * 
   * The `house` object contains the following attributes:
   * 
   * 	- `houseId`: A unique identifier generated for the house.
   * 	- `houseDto`: The original `HouseDto` object passed in as a parameter.
   * 
   * The `save` method is used to persist the `house` object in the repository, making
   * it available for further manipulation or retrieval.
   */
  @Override public House addHouse(HouseDto houseDto) {
    var house = houseApiMapper.houseDtoToHouse(houseDto);
    house.setHouseId(generateUniqueHouseId());
    return houseRepository.save(house);
  }

  /**
   * generates a unique identifier for a house using the `UUID.randomUUID()` method and
   * returns it as a string.
   * 
   * @returns a unique randomly generated string of characters.
   */
  private String generateUniqueHouseId() {
    return UUID.randomUUID().toString();
  }

  /**
   * traverses the repository's collection of houses and adds each found item to a new
   * set called `houseSet`.
   * 
   * @returns a set of `House` objects containing all the houses stored in the repository.
   * 
   * 	- `var houseSet = new HashSet<House>();`: This line declares an empty set variable
   * named `houseSet` of type `HashSet<House>`.
   * 	- `houseRepository.findAll().forEach(houseSet::add);`: This line iterates over
   * the results returned by the `houseRepository.findAll()` method using a `forEach()`
   * method. Each result is added to the `houseSet` variable.
   * 	- `return houseSet;`: This line returns the `houseSet` variable, which contains
   * all the houses found by the repository.
   */
  @Override public Set<House> findAllHouses() {
    var houseSet = new HashSet<House>();
    houseRepository.findAll().forEach(houseSet::add);
    return houseSet;
  }
}
