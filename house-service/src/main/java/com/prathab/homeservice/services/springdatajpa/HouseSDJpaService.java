/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.homeservice.services.springdatajpa;

import com.prathab.homeservice.controllers.dto.HouseDto;
import com.prathab.homeservice.controllers.models.mapper.HouseApiMapper;
import com.prathab.homeservice.domain.House;
import com.prathab.homeservice.repositories.HouseRepository;
import com.prathab.homeservice.services.HouseService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.springframework.stereotype.Service;

/**
 * TODO
 */
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseRepository houseRepository;
  private final HouseApiMapper houseApiMapper;

  public HouseSDJpaService(HouseRepository houseRepository,
      HouseApiMapper houseApiMapper) {
    this.houseRepository = houseRepository;
    this.houseApiMapper = houseApiMapper;
  }

  /**
   * takes a `HouseDto` object and converts it into a `House` entity, assigns a unique
   * house ID, and saves it to the repository.
   * 
   * @param houseDto House object to be saved, which is converted from the `HouseDto`
   * object through the `houseApiMapper` method before being persisted into the database
   * by the `houseRepository`.
   * 
   * The `houseDto` object has several attributes:
   * 
   * 	- `houseId`: A unique identifier for the house
   * 	- `address`: The address of the house
   * 	- `capacity`: The capacity of the house
   * 	- `description`: A description of the house
   * 	- `imageUrl`: An URL pointing to an image of the house
   * 	- `latitude`: The latitude coordinate of the house
   * 	- `longitude`: The longitude coordinate of the house
   * 	- `price`: The price of the house
   * 
   * These attributes are converted into corresponding fields in the `House` object
   * using the `houseApiMapper`. The `House` object is then persisted to the repository
   * using the `save()` method.
   * 
   * @returns a new instance of `House` object with a unique ID generated by the method.
   * 
   * 	- `house`: This is a `House` object that represents a new house with a unique ID
   * generated by the `generateUniqueHouseId()` method.
   * 	- `houseDto`: This is the original `HouseDto` object passed into the function,
   * which has been converted to a `House` object using the `houseApiMapper.houseDtoToHouse()`
   * method.
   * 	- `houseRepository`: This is an instance of `CrudRepository<House, Long>`, which
   * is used to save the new house to the database.
   */
  @Override public House addHouse(HouseDto houseDto) {
    var house = houseApiMapper.houseDtoToHouse(houseDto);
    house.setHouseId(generateUniqueHouseId());
    return houseRepository.save(house);
  }

  /**
   * generates a unique string representing a random UUID.
   * 
   * @returns a unique, randomly generated string of characters in the format of a UUID.
   * 
   * 	- The output is a String value that represents a unique identifier for a house.
   * 	- The identifier is generated using the `UUID.randomUUID()` method, which produces
   * a universally unique identifier (UUID) that is randomly generated.
   * 	- The resulting string is a compact representation of the UUID, typically consisting
   * of 32 characters.
   */
  private String generateUniqueHouseId() {
    return UUID.randomUUID().toString();
  }

  /**
   * sets a new `HashSet` to hold all houses returned by the `findAll` method of a
   * `houseRepository`. It then calls the `findAll` method and adds each house to the
   * `HashSet`. Finally, it returns the `HashSet` containing all the houses.
   * 
   * @returns a set of House objects retrieved from the database.
   * 
   * 	- The output is a set of House objects, denoted by <House>.
   * 	- The set contains all houses fetched from the database using the repository's
   * findAll() method.
   * 	- Each element in the set represents a House object, with attributes such as name,
   * address, and location.
   */
  @Override public Set<House> findAllHouses() {
    var houseSet = new HashSet<House>();
    houseRepository.findAll().forEach(houseSet::add);
    return houseSet;
  }
}
