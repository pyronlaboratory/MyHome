/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.homeservice.services.springdatajpa;

import com.prathab.homeservice.controllers.dto.HouseDto;
import com.prathab.homeservice.controllers.models.mapper.HouseApiMapper;
import com.prathab.homeservice.domain.House;
import com.prathab.homeservice.repositories.HouseRepository;
import com.prathab.homeservice.services.HouseService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.springframework.stereotype.Service;

/**
 * is a Java class that provides House-related services using Spring Data JPA. It has
 * a constructor with two dependencies: HouseRepository and HouseApiMapper. The class
 * has three methods: addHouse, findAllHouses, and generateUniqueHouseId. The addHouse
 * method adds a new House entity to the database, while the findAllHouses method
 * retrieves all House entities from the database. The generateUniqueHouseId method
 * generates a unique house ID for new House entities.
 */
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseRepository houseRepository;
  private final HouseApiMapper houseApiMapper;

  public HouseSDJpaService(HouseRepository houseRepository,
      HouseApiMapper houseApiMapper) {
    this.houseRepository = houseRepository;
    this.houseApiMapper = houseApiMapper;
  }

  /**
   * takes a `HouseDto` object, converts it to a `House` entity using a mapper, sets a
   * unique house ID, and saves the entity to the repository.
   * 
   * @param houseDto House object to be saved, which is converted into a `House` object
   * through the `houseApiMapper` before being saved in the repository.
   * 
   * 	- `houseDto`: A House DTO object representing a house entity with attributes such
   * as `id`, `name`, `address`, and `price`.
   * 	- `generateUniqueHouseId()`: A method that generates a unique ID for the created
   * house.
   * 
   * @returns a new instance of the `House` entity with a unique ID generated using the
   * `generateUniqueHouseId()` method.
   * 
   * 	- `house`: A `House` object that contains the details of the newly created house,
   * including its unique ID generated by the `generateUniqueHouseId()` method.
   * 	- `houseApiMapper`: A reference to an instance of the `HouseApiMapper` class,
   * which is used to convert a `HouseDto` object into a `House` object.
   * 	- `houseRepository`: An instance of the `HouseRepository` class, which is responsible
   * for saving the newly created house into the database.
   */
  @Override public House addHouse(HouseDto houseDto) {
    var house = houseApiMapper.houseDtoToHouse(houseDto);
    house.setHouseId(generateUniqueHouseId());
    return houseRepository.save(house);
  }

  /**
   * generates a unique identifier for a house using the `UUID` class and returns it
   * as a string.
   * 
   * @returns a unique string of letters and numbers generated using the `UUID` class.
   */
  private String generateUniqueHouseId() {
    return UUID.randomUUID().toString();
  }

  /**
   * retrieves all houses from the database using the `houseRepository.findAll()` method
   * and stores them in a `HashSet`.
   * 
   * @returns a set of houses retrieved from the database.
   * 
   * The function returns a `Set` object called `houseSet`, which contains all the
   * houses retrieved from the database.
   * The `houseSet` is an unordered set, meaning that the order of the houses in the
   * set is not guaranteed.
   * The set contains references to `House` objects, each representing a house in the
   * database.
   * Each `House` object in the set has its own unique ID, name, and location properties.
   */
  @Override public Set<House> findAllHouses() {
    var houseSet = new HashSet<House>();
    houseRepository.findAll().forEach(houseSet::add);
    return houseSet;
  }
}
