/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prathab.homeservice.services.springdatajpa;

import com.prathab.homeservice.controllers.dto.HouseDto;
import com.prathab.homeservice.controllers.models.mapper.HouseApiMapper;
import com.prathab.homeservice.domain.House;
import com.prathab.homeservice.repositories.HouseRepository;
import com.prathab.homeservice.services.HouseService;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.springframework.stereotype.Service;

/**
 * is an implementation of the HouseService interface in a Java-based application.
 * It provides methods for adding, retrieving, and listing houses in the database
 * using JPA (Java Persistence API). The class includes a HouseRepository interface
 * for interacting with the database and a HouseApiMapper interface for mapping between
 * House DTO objects and House entities before saving them to the repository.
 */
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseRepository houseRepository;
  private final HouseApiMapper houseApiMapper;

  public HouseSDJpaService(HouseRepository houseRepository,
      HouseApiMapper houseApiMapper) {
    this.houseRepository = houseRepository;
    this.houseApiMapper = houseApiMapper;
  }

  /**
   * takes a `HouseDto` object, converts it to a `House` entity using the `houseApiMapper`,
   * assigns a unique house ID, and saves the updated `House` entity to the repository.
   * 
   * @param houseDto House object to be saved, which is converted from its DTO
   * representation using the `houseApiMapper` method before being persisted in the repository.
   * 
   * 	- `houseDto`: A `HouseDto` object containing information about the house to be
   * added, such as its size, location, and other relevant attributes.
   * 	- `generateUniqueHouseId()`: A method that generates a unique identifier for the
   * new house being created, used for the `house.setHouseId()` method.
   * 
   * @returns a new instance of `House` with a unique ID generated through the
   * `generateUniqueHouseId()` method.
   * 
   * 	- `house`: The newly created house instance, which contains the generated unique
   * house ID and the house details mapped from the `HouseDto` input.
   * 	- `houseId`: A unique identifier assigned to the house instance, generated by the
   * `generateUniqueHouseId()` method.
   */
  @Override public House addHouse(HouseDto houseDto) {
    var house = houseApiMapper.houseDtoToHouse(houseDto);
    house.setHouseId(generateUniqueHouseId());
    return houseRepository.save(house);
  }

  /**
   * generates a unique identifier for a house using the `UUID` class and returns it
   * as a string.
   * 
   * @returns a unique, randomly generated string of characters.
   */
  private String generateUniqueHouseId() {
    return UUID.randomUUID().toString();
  }

  /**
   * iterates over a list of houses retrieved from the database and adds each one to a
   * set of houses. The resulting set contains all the houses in the database.
   * 
   * @returns a set of House objects containing all houses from the repository.
   * 
   * 	- The output is a set of `House` objects.
   * 	- The set contains all the houses retrieved from the database using the
   * `houseRepository.findAll()` method.
   * 	- Each house in the set has its fields populated with data retrieved from the database.
   */
  @Override public Set<House> findAllHouses() {
    var houseSet = new HashSet<House>();
    houseRepository.findAll().forEach(houseSet::add);
    return houseSet;
  }
}
